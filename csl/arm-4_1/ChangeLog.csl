2006-02-08  Paul Brook  <paul@codesourcery.com>

	Merge from csl/sourcerygxx-4_1
	2006-02-01  Paul Brook  <paul@codesourcery.com>
	Backport from mainline.
	* gcc/function.c (assign_parm_setup_reg): Use function argument
	promotion rules.
	* gcc/expr.c (expand_expr_real_1): Use function argument promotion
	rules for PARM_DECLs.

	2006-01-27  Paul Brook  <paul@codesourcery.com>
	* version.c: Mark as CodeSourcery build.

	2006-01-23  Adam Nemet  <anemet@caviumnetworks.com>
	* fix-header.c (read_scan_file): Add new parameter imultilib when
	calling register_include_chains.

	2006-01-23  Kazu Hirata  <kazu@codesourcery.com>
	PR testsuite/25590
	* gcc/testsuite/gcc.dg/tree-ssa/gen-vect-11.c: Add -fwrapv.

2006-02-07  Paul Brook  <paul@codesourcery.com>

	* config/gcc/arm/lib1funcs.asm: Use unified assembly syntax.
	Assemble "Arm" code as Thumb-2 where appropriate.
	* config/gcc/arm/ieee754-df.S: Use unified assembly syntax for Arm
	code.  Add Thumb-2 code.
	* config/gcc/arm/ieee754-df.S: Ditto.
	* config/gcc/arm/libunwind.S: Ditto.
	* config/gcc/arm/bpabi.S: Ditto.

2006-01-27  Paul Brook  <paul@codesourcery.com>

	* version.c: Mark as CodeSourcery build.

2006-01-26  Paul Brook  <paul@codesourcery.com>

	Thumb-2 support.
	* gcc/doc/invoke.texi: Document -cpu=arm1156t2-s and -march=armv6t2
	Document that -mthumb may enable Thumb-2.
	* gcc/config/arm/aof.h (ASM_OUTPUT_ADDR_DIFF_ELT,
	ASM_OUTPUT_ADDR_VEC_ELT): Set Thumb bit on Thumb-2 addresses.
	* gcc/config/arm/out.h (ASM_OUTPUT_ADDR_DIFF_ELT,
	ASM_OUTPUT_ADDR_VEC_ELT): Ditto.
	* gcc/config/arm/arm-cores.def: Add arm1156t2-s.
	* gcc/config/arm/arm-protos.h: Update and add function prototypes.
	* gcc/config/arm/arm-tune.md: Regenerate.
	* gcc/config/arm/arm.c (TARGET_ASM_FILE_START, FL_THUMB2,
	FL_FOR_ARCH6T2): Define.
	(arm_arch_thumb2, arm_condexec_count, arm_condexec_mask,
	arm_condexec_masklen): New variables.
	(ARM_LSL_NAME): Define.
	(THUMB2_WORK_REGS): Define.
	(all_architectures): Add 6T2.
	(arm_override_options): Set arm_arch_thumb2. Allow use of 
	coprocessors in Thumb-2.
	(use_return_insn): Only use StrongARM workaround in Arm mode.
	(const_ok_for_arm): Handle Thumb-2 constants.
	(arm_gen_constant): Ditto.
	(legitimize_pic_address): Add Thumb-2.
	(arm_load_pic_register): Generate Thumb-2 sequence.
	(arm_call_tls_get_addr): Ditto.
	(legitimize_tls_address): Ditto.
	(thumb2_legitimate_address_p): New function.
	(thumb2_index_mul_operand): New function.
	(thumb2_legitimate_index_p): New function.
	(thumb_base_register_rtx_p, thumb_index_register_rtx_p,
	thumb_legitimate_address_p, thumb_rtx_costs,
	thumb_compute_save_reg_mask, thumb_final_prescan_insn,
	thumb_expand_prologue, thumb_expand_epilogue,
	thumb_output_function_prologue, thumb_cmp_operand,
	thumb_cmpneg_operand): Rename ...
	(thumb1_base_register_rtx_p, thumb1_index_register_rtx_p,
	thumb1_legitimate_address_p, thumb1_rtx_costs,
	thumb1_compute_save_reg_mask, thumb1_final_prescan_insn,
	thumb1_expand_prologue, thumb1_expand_epilogue,
	thumb1_output_function_prologue, thumb1_cmp_operand,
	thumb1_cmpneg_operand): ... to this.  Update callers.
	(arm_address_cost): Use arm routine for Thumb-2.
	(load_multiple_sequence): Only allow ldmib and ldmda in Arm mode.
	(emit_ldm_seq): Output unified assembly.
	(emit_stm_seq): Ditto.
	(arm_select_cc_mode): Treat Thumb-2 like Arm.
	(print_multi_reg): Don't print comma.
	(output_mov_long_double_fpa_from_arm): Output unified assebly.
	(output_mov_double_arm_from_fpa): Ditto.
	(output_move_double): Ditto.  Disallow Arm specific addressing modes
	in Thumb-2 mode.
	(arm_shift_nmem): New function.
	(arithmetic_instr, shift_op): Use it.  Use ARM_LSL_NAME.
	(arm_compute_save_reg0_reg12_mask): Handle Thumb-2 frames.
	(arm_compute_save_reg_mask): Don't create apcs frame for Thumb-2.
	Create scratch register if needed for PIC.
	(output_return_instruction): Only use StrongARM workaround in Arm mode.
	(arm_output_function_prologue): Threat Thumb-2 like Arm.
	(arm_output_epilogue): Implement Thumb-2.
	(arm_output_function_epilogue): Treat Thumb-2 like Arm.
	(arm_get_frame_offsets): Ditto.
	(arm_save_coproc_regs, thumb_set_frame_pointer): New function.
	(arm_expand_prologue): Use them.  Handle Thumb-2.
	(arm_print_condition): New function.
	(arm_print_operand): Use it.  Implement '(', ')', '.', '!' and 'L'.
	(thumb2_final_prescan_insn): New function.
	(thumb2_asm_output_opcode): New function.
	(arm_hard_regno_mode_ok): Treat Thumb-2 like Arm.
	(arm_regno_class): Implement thumb2 classes.
	(arm_file_start): New function.
	(arm_output_mi_thunk): Treat Thumb-2 like Arm.
	(thumb_set_return_address): Implement Thumb-2.
	(arm_output_shift): New function.
	* gcc/config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Add __thumb2__.
	(TARGET_THUMB1, TARGET_THUMB2, TARGET_32BIT, TARGET_UNIFIED_ASM):
	Define.
	(arm_arch_thumb2): Declare;
	(CONDITIONAL_REGISTER_USAGE): Enable coprocessor registers on Thumb-2.
	(STATIC_CHAIN_REGNUM, HARD_REGNO_NREGS, MODE_BASE_REG_CLASS,
	SMALL_REGISTER_CLASSES, CONST_DOUBLE_OK_FOR_LETTER_P,
	EXTRA_CONSTRAINT_STR, SECONDARY_OUTPUT_RELOAD_CLASS,
	SECONDARY_INPUT_RELOAD_CLASS, REGISTER_MOVE_COST, LIBCALL_VALUE,
	FUNCTION_VALUE_REGNO_P, REGNO_MODE_OK_FOR_BASE_P,
	LEGITIMATE_CONSTANT_P, REG_MODE_OK_FOR_BASE_P, REG_OK_FOR_INDEX_P,
	GO_IF_MODE_DEPENDENT_ADDRESS, MEMORY_MOVE_COST, BRANCH_COST,
	(HAVE_PRE_INCREMENT, HAVE_POST_DECREMENT, HAVE_PRE_DECREMENT,
	HAVE_PRE_MODIFY_DISP, HAVE_POST_MODIFY_DISP, HAVE_PRE_MODIFY_REG,
	HAVE_POST_MODIFY_REG, PRINT_OPERAND_ADDRESS): Treat Thumb-2 like Arm.
	(CONST_OK_FOR_THUMB2_LETTER): Define.
	(CONST_OK_FOR_THUMB_LETTER, THUMB_TRAMPOLINE_TEMPLATE,
	THUMB_REGNO_MODE_OK_FOR_BASE_P, THUMB_REG_MODE_OK_FOR_BASE_P,
	THUMB_REG_MODE_OK_FOR_BASE_P, THUMB_REG_OK_FOR_INDEX_P,
	THUMB_GO_IF_LEGITIMATE_ADDRESS): Rename ...
	(CONST_OK_FOR_THUMB1_LETTER, THUMB_TRAMPOLINE_TEMPLATE,
	THUMB1_REGNO_MODE_OK_FOR_BASE_P, THUMB1_REG_MODE_OK_FOR_BASE_P,
	THUMB1_REG_MODE_OK_FOR_BASE_P, THUMB1_REG_OK_FOR_INDEX_P,
	THUMB1_GO_IF_LEGITIMATE_ADDRESS): ... to this.
	(CONST_OK_FOR_LETTER_P, TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE,
	INITIALIZE_TRAMPOLINE, GO_IF_LEGITIMATE_ADDRESS, LEGITIMIZE_ADDRESS,
	ASM_APP_OFF, ARM_DECLARE_FUNCTION_NAME): Handle Thumb-2.
	(THUMB2_TRAMPOLINE_TEMPLATE): Define.
	(TRAMPOLINE_ADJUST_ADDRESS, ASM_OUTPUT_OPCODE,
	THUMB2_GO_IF_LEGITIMATE_ADDRESS, THUMB2_LEGITIMIZE_ADDRESS,
	ADJUST_INSN_LENGTH): Define.
	(PRINT_OPERAND_PUNCT_VALID_P): Add '(', ')', '.' and '!'.
	(PREFERRED_RELOAD_CLASS): Prefer LO_REGS for core integer reg
	classes.
	* gcc/config/arm/arm.md: Rename thumb_* thumb1_*.  Make 16-bit thumb
	patterns conditional on TARGET_THUMB1. Replace '%?' with
	'%(', '%)' and '%.' as appropriate for unified assembly syntax.
	Enable many Arm patterns/expanders for Thumb-2.
	Add new "ce_count" attribute.
	Include thumb2.md
	(incscc, decscc, smaxsi3, sminsi3, umaxsi3, sminsi3, zero_extendsidi2,
	zero_extendqidi2, extendsidi2): Divide into
	define_expand and define_insn.
	(ne_zeroextractsi, minmax_arithsi): Insert IT instructions for Thumb-2.
	(arm_shiftsi3, shiftsi3_compare0, shiftsi3_compare0_scratch): Use
	arm_output_shift.
	(movhi, indirect_jump): Handle thumb2.
	(push_multi): Use push and pop for thumb2.
	(nop): Output "nop" in unified assembly.
	* gcc/config/arm/cirrus.md: Enable arithmetic patterns for Thumb-2.
	(cirrus_thumb2_movdi, cirrus_thumb2_movsi_insn,
	thumb2_cirrus_movsf_hard_insn, thumb2_cirrus_movdf_hard_insn): New.
	* gcc/config/arm/fpa.md: Enable arithmetic patterns for Thumb-2.
	(thumb2_movsf_fpa, thumb2_movdf_fpa, thumb2_movxf_fpa): New.
	(thumb2_movsfcc_fpa, thumb2_movdfcc_fpa): New.
	* gcc/config/arm/vfp.md: Enable arithmetic patterns for Thumb-2.
	(thumb2_movsi_vfp, thumb2_movdi_vfp, thumb2_movsf_vfp,
	thumb2_movdf_vfp, thumb2_movsfcc_vfp, thumb2_movdfcc_vfp): New.
	* gcc/config/arm/predicates.md (low_register_operand): New predicate.
	(low_reg_or_int_operand, thumb_16bit_operator): New predicates.
	(thumb_cmp_operand, thumb_cmpneg_operand): Rename...
	(thumb1_cmp_operand, thumb1_cmpneg_operand): ... to this.
	* gcc/config/arm/lib1funcs.asm: Add __ARM_ARCH_6T2__.
	* gcc/config/arm/t-arm (MD_INCLUDES): Add thumb2.md
	* gcc/config/arm/thumb2.md: New file.

2006-01-20  Paul Brook  <paul@codesourcery.com>

	Merge from csl-arm-branch.
	2005-09-21  Kazu Hirata  <kazu@codesourcery.com>
	* gcc/config/arm/arm.md (movdi): Force operands[1] to a register
	if we have a non-register source.
	(*arm_movdi, *movdf_soft_insn): Require that one of the
	operands be a register.
	* gcc/config/arm/iwmmxt.md (*iwmmxt_arm_movdi): Likewise.
	* gcc/config/arm/vfp.md (*arm_movdi_vfp, *movdf_vfp): Likewise.

2006-01-20  Joseph S. Myers  <joseph@codesourcery.com>

	PR libstdc++/25524
	* gcc/cppdefault.h (struct default_include): Add multilib flag.
	* gcc/cppdefault.c (cpp_include_defaults): Set it.
	* gcc/c.opt (-imultilib): New option.
	* gcc/c-opts.c (imultilib): New.
	(c_common_handle_option): Handle -imultilib.
	(c_common_post_options): Likewise.
	* gcc/c-incpath.c (add_standard_paths, register_include_chains):
	Likewise.
	* gcc/c-incpath.h (register_include_chains): Add extra parameter.
	* gcc/gcc.c (do_spec_1): Generate -imultilib option.
	(The Specs Language): Update %I description.
	(process_command): Update copyright notice.
	* gcc/doc/cppopts.texi (-imultilib): Document.
	* gcc/doc/invoke.texi (-imultilib): Include in option summary.
	(%I): Update specs documentation.
	* libstdc++-v3/include/Makefile.am: Install host-specific headers
	in multilib subdirectory.
	* libstdc++-v3/include/Makefile.in: Regenerate.

2006-01-20  Julian Brown  <julian@codesourcery.com>

	Merge from csl-gxxpro-3_4-branch.
	2005-11-28  Mark Mitchell  <mark@codesourcery.com>
	Backport:
	2004-10-28  Pascal Obry  <obry@act-europe.fr>
	* unwind-dw2-fde.c: Import from MingW build for ZCX support.
	* unwind-sjlj.c: Idem.
	* config/i386/cygming.h: Idem.
	* config/i386/mingw32.h: Idem.
	* config/i386/t-cygming: Idem.
	* config/i386/t-mingw32: Idem.
	* config/i386/win32-ehfb.c: New file to support unwinding through
	signals on Windows.
	Provides support for ZCX on Windows platforms. This set of patch
	comes from the MingW compiler (Danny Smith) adapted and enhanced to
	support unwinding through signals for example.
	2005-07-29  Pascal Obry  <obry@act-europe.fr>
	Support for crtbegin/crtend.o on MingW.
	* config.gcc: Add crtbegin.o and crtend.o as extra_parts on MingW.
	* crtstuff.c: Add support for MingW.
	Provides support for ZCX on Windows platforms. This set of patch
	comes from the MingW compiler (Danny Smith) adapted to GCC 3.4.

2006-01-20  Julian Brown  <julian@codesourcery.com>

	Backport from mainline.
	2006-01-02  Mark Mitchell  <mark@codesourcery.com>
	* libstdc++-v3/src/Makefile.am (LTLDFLAGS): New variable.
	(CXXLINK): Use LTLDFLAGS.
	* libstdc++-v3/src/Makefile.in: Regenerated.
	* libstdc++-v3/libsupc++/Makefile.am (LTLDFLAGS): New variable.
	(CXXLINK): Use LTLDFLAGS.
	* libstdc++-v3/libsupc++/Makefile.in: Regenerated.

	2006-01-02  Mark Mitchell  <mark@codesourcery.com>
	* libtool-ldflags: New script.

2006-01-20  Julian Brown  <julian@codesourcery.com>

	Merge from csl-gxxpro-3_4-branch:
	2005-09-14  Mark Mitchell  <mark@codesourcery.com>
	* gcc/config/vx-common.h (DBX_DEBUGGING_INFO): Define to 1.

2006-01-20  Julian Brown  <julian@codesourcery.com>

	Backport from mainline.
	2005-11-23  Mark Mitchell  <mark@codesourcery.com>
	* gcc/doc/invoke.texi: For man pages, include gcc-vers.texi.
	List @file in the option summary.  Include the libiberty documentation
	for @file.
	* gcc/gcc.c (main): Call expandargv.
	* gcc/Makefile.in (gcc-vers.texi): Define srcdir.

	2005-11-23  Mark Mitchell  <mark@codesourcery.com>
	* maintainer-scripts/update_web_docs_svn: Set @srcdir in gcc-vers.texi.

2006-01-20  Paul Brook  <paul@codesourcery.com>

	Merge from csl-arm-branch.
	2005-10-20  Paul Brook  <paul@codesourcery.com>
	* config/arm/arm.c (arm_default_cpu): New.
	(arm_override_options): Set arm_default_cpu.
	(arm_file_start): Output EABI attribute directives.

2006-01-20  Paul Brook  <paul@codesourcery.com>

	Merge from csl-arm-branch.
	2005-10-20  Paul Brook  <paul@codesourcery.com>
	* config/arm/arm.c (arm_elf_asm_constructor): Remove ATTRIBUTE_UNUSED
	from priority argument.  Use different section names for non-default
	priority.
	* config/arm/elf.h: Remove definition of SUPPORTS_INIT_PRIORITY.

2006-01-18  Paul Brook  <paul@codesourcery.com>

	Merge from csl-arm-branch.
	2005-03-14  Julian Brown  <julian@codesourcery.com>
	* gcc/config/arm/lib1funcs.asm (ashldi3): Don't define on SymbianOS.
	(aeabi_llsl): Likewise.
	(ashrdi3): Likewise.
	(aeabi_lasr): Likewise.
	(lshrdi3): Likewise.
	(aeabi_llsr): Likewise. 
	2005-03-10  Julian Brown  <julian@codesourcery.com>
	* gcc/config.gcc: Disable shared libgcc for SymbianOS.
	* gcc/config/arm/t-symbian (LIB2ADDEH): Include config/arm/pr-support.c.

2006-01-18  Paul Brook  <paul@codesourcery.com>

	Merge from csl-arm-branch
	2005-03-10  Julian Brown  <julian@codesourcery.com>
	* libstdc++configure.ac (LIBSUPCXX_PRONLY): New AM_CONDITIONAL: yes
	if we are compiling for SymbianOS on ARM.
	* libstdc++include/Makefile.am: Don't install C++ headers if
	LIBSUPCXX_PRONLY is true.
	* libstdc++libsupc++/Makefile.am: Include only eh_personality.cc
	in libsupc++ if LIBSUPCXX_PRONLY is true.
	* libstdc++Makefile.in: Regenerate.
	* libstdc++configure: Regenerate.
	* libstdc++include/Makefile.in: Regenerate.
	* libstdc++libmath/Makefile.in: Regenerate.
	* libstdc++libsupc++/Makefile.in: Regenerate.
	* libstdc++po/Makefile.in: Regenerate.
	* libstdc++src/Makefile.in: Regenerate.
	* libstdc++testsuite/Makefile.in: Regenerate.

2005-01-17  Paul Brook  <paul@codesourcery.com>

	Backport from mainline.
	2005-12-13  Carlos O'Donell <carlos@codesourcery.com>
	* gcc/c-cppbuiltin.c (builtin_define_float_constants): Add
	fp_cast parameter, pass to builtin_define_with_hex_fp_value.
	Define __FLT_HAS_DENORM__, __DBL_HAS_DENORM__, __LDBL_HAS_DENORM__.
	(builtin_define_with_hex_fp_value): Use fp_cast when building macro.
	(c_cpp_builtins): If flag_single_precision_constant then set fp_cast
	to "((double)%sL)" otherwise "%s".
	* gcc/testsuite/gcc.dg/single-precision-constant.c: New test.
	* libstdc++-v3/include/std/std_limits.h (struct numeric_limits):
	Use __DBL_HAS_DENORM__, __FLT_HAS_DENORM__, __LDBL_HAS_DENORM__.

2005-01-17  Paul Brook  <paul@codesourcery.com>

	Backport from mainline.
	2005-12-15  Richard Sandiford  <richard@codesourcery.com>
	* gcc/config/arm/predicates.md (call_memory_operand): New.
	* gcc/config/arm/arm.md (*call_mem, *call_value_mem): Use it.
	* gcc/testsuite/gcc.dg/20051215-1.c: New file.

	* gcc/config/arm/arm.md: Provide a big-endian version of the
	(zero_extend:SI (subreg:QI ...)) splitter.

2006-01-16  Paul Brook  <paul@codesourcery.com>

	* config/m68k/m68k.c (output_move_const_into_data_reg):
	Output correct mnemonic for mvz and mvs.

2006-01-03  Paul Brook  <paul@codesourcery.com>

	* config/m68k/m68k.c (m68k_output_mi_thunk): Use jmp, not jsr.

2005-12-30  Paul Brook  <paul@codesourcery.com>

	* config/m68k/m68k.md: Convert define_peephole to define_peephole2.
	(UNSPEC_MOVEQ_MEM): New constant.
	(movsi_smallconst): New pattern.
	* config/m68k/m68k.h (HARD_FP_REG_P): Define.

2005-12-30  Paul Brook  <paul@codesourcery.com>

	PR target/23482
	* doc/md.texi: Document m68k Q, S, T and U constraints.
	* config/m68k/m68k.h (EXTRA_CONSTRAINTS): Restrict U to 16-bit
	offsets.

2005-12-29  Paul Brook  <paul@codesourcery.com>

	* config/m68k/m68k.h (RETURN_ADDR_RTX): Define.
	* config/m68k/m68k.c (m68k_initial_elimination_offset): Remove FIXME.
	Include offset due to FIRST_PARM_OFFSET.

2005-12-29  Paul Brook  <paul@codesourcery.com>

	* config/m68k/lb1sf68.asm (__cmpdf2): Fix typo in immediate mask.
	Create wrapper and rename body...
	(__cmpdf2_internal): ... to this.  Return correct value for unordered
	result.
	(__cmpsf2): Create wrapper and rename body...
	(__cmpsf2_internal): ... to this.  Return corerct value for unordered
	result.
	(__eqdf2, __nedf2, __gtdf2, __gedf2, __ltdf2, __ledf2): Use
	__cmpdf2_internal.
	(__eqsf2, __nesf2, __gtsf2, __gesf2, __ltsf2, __lesf2): Use
	__cmpsf2_internal.

2005-12-29  Paul Brook  <paul@codesourcery.com>

	* config/m68k/fpgnulib.c (__extendsfdf2): Handle negative zero.
	(__truncdfsf2): Ditto.
	(__extenddfxf2): Ditto.
	(__truncxfdf2): Ditto.
	* config/m68k/lb1sf68.asm (__addsf3): Return -0.0 for -0.0 + -0.0.
	(__adddf3): Ditto.

2005-12-29  Daniel Jacobowitz  <dan@codesourcery.com>
	Paul Brook  <paul@codesourcery.com>

	* gcc/config/m68k/m68k.c (m68k_output_pic_call): Don't use bsr.l for
	!TARGET_68020.
	* gcc/config/m68k/t-m68kelf (EXTRA_PARTS): Remove.
	(EXTRA_MULTILIB_PARTS): Set.
	* gcc/config/m68k/t-uclinux (EXTRA_PARTS): Remove.
	(EXTRA_MULTILIB_PARTS): Set.

2005-12-21  Paul Brook  <paul@codesourcery.com>

	* gcc/testsuite/gcc.dg/pr19340.c: Skip on m68k targets.

2005-12-20  Paul Brook  <paul@codesourcery.com>

	* gcc/testsuite/lib/target-supports.exp (check_profiling_available):
	Add m68k-*-elf.

2005-12-17  Paul Brook  <paul@codesourcery.com>

	* gcc/config/m68k/m68k.md (m68k_output_function_prologue): Always call
	dwarf2out_def_cfa. Only add space for frame pointer to cfa_offset
	when frame_pointer_needed. 

2005-12-02  Paul Brook  <paul@codesourcery.com>

	* config/m68k/fpgnulib.c (__unordsf2, __unorddf2, __unordxf2,
	__floatunsidf, __floatunsisf, __floatunsixf): New functions.

2005-11-28  Paul Brook  <paul@codesourcery.com>

	* config.gcc: Don't use fixproto on m68k-elf.

