# Makefile for gnatlib
#   Copyright 1994-2004 Free Software Foundation, Inc.

#This file is part of GCC.

#GCC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GCC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GCC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# The makefile built from this file lives in the language subdirectory.
# Its purpose is to provide support for gnatlib builds.
# It is not to be used for building gnat1 or gnattools.

# This will fail; this needs to be invoked from libada or gnattools.
all: all.indirect

# Tell GNU make 3.79 not to run this directory in parallel.
# Not all of the required dependencies are present.
.NOTPARALLEL:
# This tells GNU Make version 3 not to put all variables in the environment.
.NOEXPORT:

# Variables that exist for you (or autoconf) to override.
# See below for how to change them for certain systems.
SHELL = @SHELL@
PWD_COMMAND = $${PWDCMD-pwd}

# Various ways of specifying flags for compilations:  
# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.
# XCFLAGS is used for most compilations but not when using the GCC just built.
XCFLAGS =
CFLAGS = -g
# These exists to be overridden by the x-* and t-* files, respectively.
X_CFLAGS =
T_CFLAGS =

X_CPPFLAGS =
T_CPPFLAGS =

X_ADA_CFLAGS =
T_ADA_CFLAGS =

X_ADAFLAGS =
T_ADAFLAGS =

CC = cc
ECHO = echo
CHMOD = chmod
LN = ln
LN_S = ln -s
CP = cp -p
MV = mv -f
RM = rm -f
RMDIR = rm -rf
MKDIR = mkdir -p
AR = @AR@
AR_FLAGS = rc
RANLIB = @RANLIB@
RANLIB_FLAGS = @ranlib_flags@

# How to copy preserving the date
INSTALL_DATA_DATE = cp -p
ADA_CFLAGS =
ADAFLAGS = -W -Wall -gnatpg -gnata
SOME_ADAFLAGS =-gnata
FORCE_DEBUG_ADAFLAGS = -g
GNATLIBFLAGS = -gnatpg -nostdinc
GNATLIBCFLAGS = -g -O2
GNATLIBCFLAGS_FOR_C = $(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS) -fexceptions \
	-DIN_RTS
ALL_ADA_CFLAGS = $(X_ADA_CFLAGS) $(T_ADA_CFLAGS) $(ADA_CFLAGS)
ALL_ADAFLAGS = $(CFLAGS) $(ALL_ADA_CFLAGS) $(X_ADAFLAGS) $(T_ADAFLAGS) \
	$(ADAFLAGS)
MOST_ADAFLAGS = $(CFLAGS) $(ALL_ADA_CFLAGS) $(X_ADAFLAGS) $(T_ADAFLAGS) \
	$(SOME_ADAFLAGS)
THREAD_KIND = native
THREADSLIB = @THREADSLIB@
GMEM_LIB = @GMEM_LIB@
MISCLIB = @MISCLIB@

objext = .o
arext  = .a
soext  = @soext@
hyphen = @hyphen@

host_canonical=@host@
target_alias=@target_alias@
target=@target@
# Include the libada 'information passing' script
# This is way more complicated than it should be because of the rts
# subdirectory
include ../libada-mk

# Directory where sources are, from where we are.
srcdir = @srcdir@
VPATH = $(srcdir)

fsrcdir := $(shell cd $(srcdir);${PWD_COMMAND})
fsrcpfx := $(shell cd $(srcdir);${PWD_COMMAND})/

# End of variables for you to override.

# Support leftovers for configure script.
SO_OPTS = @SO_OPTS@
GNATLIB_SHARED = @GNATLIB_SHARED@
LIBRARY_VERSION = @LIBRARY_VERSION@

LIBGNAT_TARGET_PAIRS = @LIBGNAT_TARGET_PAIRS@
EXTRA_GNATRTL_NONTASKING_OBJS = @EXTRA_GNATRTL_NONTASKING_OBJS@
EXTRA_GNATRTL_NONTASKING_OBJS = @EXTRA_GNATRTL_TASKING_OBJS@
EXTRA_LIBGNAT_SRCS = @EXTRA_LIBGNAT_SRCS@
EXTRA_LIBGNAT_OBJS = @EXTRA_LIBGNAT_OBJS@

# gcc_tmake_file and gcc_xmake_file expand to lists with entries of the form
# $(srcdir)/config/...  but here $(srcdir) is the ada subdirectory so we
# need to adjust the paths.  There can't be spaces in the subst arguments
# or we get spurious spaces in the actual list of files to include.

# target overrides
ifneq ($(gcc_tmake_file),)
include $(subst /config,/../config,$(gcc_tmake_file))
endif

# host overrides
ifneq ($(gcc_xmake_file),)
include $(subst /config,/../config,$(gcc_xmake_file))
endif

# Now figure out from those variables how to compile and link.

# IN_GCC distinguishes between code compiled into GCC itself and other
# programs built during a bootstrap.
# autoconf inserts -DCROSS_COMPILE if we are building a cross compiler.
INTERNAL_CFLAGS = @CROSS@ -DIN_GCC

# This is the variable actually used when we compile.
LOOSE_CFLAGS = `echo $(CFLAGS) $(WARN2_CFLAGS)|sed -e 's/-pedantic//g' -e 's/-Wtraditional//g'`
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(LOOSE_CFLAGS) \
	$(XCFLAGS)

# Likewise.
ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)

# Specify the directories to be searched for header files.
# Both . and srcdir are used, in that order,
# so that tm.h and config.h will be found in the compilation
# subdirectory rather than in the source directory.
INCLUDES = -I- -I. -I.. -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../config \
	-I$(srcdir)/../../include

ADA_INCLUDES = -I- -I. -I$(srcdir)

INCLUDES_FOR_SUBDIR = -I. -I.. -I../.. -I$(fsrcdir) -I$(fsrcdir)/../config \
	-I$(fsrcdir)/../../include -I$(fsrcdir)/..
ADA_INCLUDES_FOR_SUBDIR = -I. -I$(fsrcdir)

# Avoid a lot of time thinking about remaking Makefile.in and *.def.
.SUFFIXES: .in .def

# Say how to compile Ada programs.
.SUFFIXES: .ada .adb .ads .asm

# Always use -I$(srcdir)/config when compiling.
.asm.o:
	$(CC) -c -x assembler $< $(OUTPUT_OPTION)

.c.o:
	$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< \
	  $(OUTPUT_OPTION)

.adb.o:
	$(CC) -c $(ALL_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)

.ads.o:
	$(CC) -c $(ALL_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)

# VMS needs yet more special handling.
vms_host=@vms_host@
ifeq ($(vms_host),yes)
.SUFFIXES: .sym
.o.sym:
	@ gnu:[bin]vmssymvec $<
endif

# how to regenerate this file
Makefile: config.status $(srcdir)/Makefile.in $(srcdir)/../version.c
	$(SHELL) config.status


# Lists of files for various purposes.

PREFIX_OBJS = @PREFIX_OBJS@
# To avoid duplicate code, use this variable to set PREFIX_OBJS when needed:
PREFIX_REAL_OBJS= ../prefix.o \
  ../../libiberty/concat.o     \
  ../../libiberty/xmalloc.o    \
  ../../libiberty/xstrdup.o    \
  ../../libiberty/xexit.o

# The runtime library for gnat comprises two directories.  One contains the
# Ada source files that the compiler (gnat1) needs -- these files are listed
# by ADA_INCLUDE_SRCS -- and the other contains the object files and their
# corresponding .ali files for the parts written in Ada, libgnat.a for
# the parts of the runtime written in C, and libgthreads.a for the pthreads
# emulation library.  LIBGNAT_OBJS lists the objects that go into libgnat.a,
# while GNATRTL_OBJS lists the object files compiled from Ada sources that
# go into the directory.  The pthreads emulation is built in the threads
# subdirectory and copied.
LIBGNAT_SRCS = ada.h adaint.c adaint.h argv.c cio.c cstreams.c \
  errno.c exit.c cal.c ctrl_c.c \
  raise.h raise.c sysdep.c aux-io.c init.c seh_init.c \
  final.c tracebak.c tb-alvms.c tb-alvxw.c expect.c mkdir.c socket.c gsocket.h \
  $(EXTRA_LIBGNAT_SRCS)

LIBGNAT_OBJS = adaint.o argv.o cio.o cstreams.o ctrl_c.o errno.o exit.o \
  raise.o sysdep.o aux-io.o init.o seh_init.o cal.o final.o \
  tracebak.o expect.o mkdir.o socket.o $(EXTRA_LIBGNAT_OBJS)

# NOTE ??? - when the -I option for compiling Ada code is made to work,
#  the library installation will change and there will be a
#  GNAT_RTL_SRCS.  Right now we count on being able to build GNATRTL_OBJS
#  from ADA_INCLUDE_SRCS.

# GNATRTL_NONTASKING_OBJS and GNATRTL_TASKING_OBJS can be found in
# the following include file:

include $(fsrcdir)/Makefile.rtl

GNATRTL_OBJS = $(GNATRTL_NONTASKING_OBJS) $(GNATRTL_TASKING_OBJS) \
  g-trasym.o memtrack.o

# Default run time files

ADA_INCLUDE_SRCS =\
 ada.ads calendar.ads directio.ads gnat.ads interfac.ads ioexcept.ads \
 machcode.ads text_io.ads unchconv.ads unchdeal.ads \
 sequenio.ads system.ads memtrack.adb \
 a-*.adb a-*.ads g-*.ad? i-*.ad? \
 s-[a-o]*.adb s-[p-z]*.adb \
 s-[a-o]*.ads s-[p-z]*.ads

# Needs to be built with CC=gcc
# Since the RTL should be built with the latest compiler, remove the
#  stamp target in the parent directory whenever gnat1 is rebuilt

../stamp-gnatlib:
	@if [ ! -f stamp-gnatlib ] ; \
	then \
	  $(ECHO) You must first build the GNAT library: make gnatlib; \
	  false; \
	else \
	  true; \
	fi

install-gnatlib: ../stamp-gnatlib
#	Create the directory before deleting it, in case the directory is
#	a list of directories (as it may be on VMS). This ensures we are
#	deleting the right one.
	-$(MKDIR) $(DESTDIR)$(ADA_RTL_OBJ_DIR)
	-$(MKDIR) $(DESTDIR)$(ADA_INCLUDE_DIR)
	$(RMDIR) $(DESTDIR)$(ADA_RTL_OBJ_DIR)
	$(RMDIR) $(DESTDIR)$(ADA_INCLUDE_DIR)
	-$(MKDIR) $(DESTDIR)$(ADA_RTL_OBJ_DIR)
	-$(MKDIR) $(DESTDIR)$(ADA_INCLUDE_DIR)
	for file in rts/*.ali; do \
	    $(INSTALL_DATA_DATE) $$file $(DESTDIR)$(ADA_RTL_OBJ_DIR); \
	done
	-$(INSTALL_DATA) rts/g-trasym$(objext) $(DESTDIR)$(ADA_RTL_OBJ_DIR)
	-cd rts; for file in *$(arext);do \
	    $(INSTALL_DATA) $$file $(DESTDIR)$(ADA_RTL_OBJ_DIR); \
	    $(RANLIB) $(RANLIB_FLAGS) $(DESTDIR)$(ADA_RTL_OBJ_DIR)/$$file; \
	done
	-$(foreach file, $(EXTRA_ADALIB_FILES), \
	    $(INSTALL_DATA_DATE) rts/$(file) $(DESTDIR)$(ADA_RTL_OBJ_DIR) && \
	) true
#     Install the shared libraries, if any, using $(INSTALL) instead
#     of $(INSTALL_DATA). The latter may force a mode inappropriate
#     for shared libraries on some targets, e.g. on HP-UX where the x
#     permission is required.
	for file in gnat gnarl; do \
	   if [ -f rts/lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext) ]; then \
	      $(INSTALL) rts/lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext) \
			 $(DESTDIR)$(ADA_RTL_OBJ_DIR); \
	   fi; \
	   if [ -f rts/lib$${file}$(soext) ]; then \
	      $(LN_S) lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext) \
	      $(DESTDIR)$(ADA_RTL_OBJ_DIR)/lib$${file}$(soext); \
	   fi; \
	done
# This copy must be done preserving the date on the original file.
	for file in rts/*.adb rts/*.ads; do \
	    $(INSTALL_DATA_DATE) $$file $(DESTDIR)$(ADA_INCLUDE_DIR); \
	done
	cd $(DESTDIR)$(ADA_INCLUDE_DIR); $(CHMOD) a-wx *.adb
	cd $(DESTDIR)$(ADA_INCLUDE_DIR); $(CHMOD) a-wx *.ads

../stamp-gnatlib2:
	$(RM) rts/s-*.ali
	$(RM) rts/s-*$(objext)
	$(RM) rts/a-*.ali
	$(RM) rts/a-*$(objext)
	$(RM) rts/*.ali
	$(RM) rts/*$(objext)
	$(RM) rts/*$(arext)
	$(RM) rts/*$(soext)
	touch ../stamp-gnatlib2
	$(RM) ../stamp-gnatlib

# NOTE: The $(foreach ...) commands assume ";" is the valid separator between
#       successive target commands. Although the Gnu make documentation
#       implies this is true on all systems, I suspect it may not be, So care
#       has been taken to allow a sed script to look for ";)" and substitue
#       for ";" the appropriate character in the range of lines below
#       beginning with "GNULLI Begin" and ending with "GNULLI End"

# GNULLI Begin ###########################################################

../stamp-gnatlib1: Makefile ../stamp-gnatlib2
	$(RMDIR) rts
	$(MKDIR) rts
	$(CHMOD) u+w rts
# Copy libada-mk (HACK HACK HACK NCN FIXME)
	$(LN_S) ../libada-mk libada-mk || exit 0
# Copy target independent sources
	$(foreach f,$(ADA_INCLUDE_SRCS) $(LIBGNAT_SRCS), \
	  $(LN_S) $(fsrcpfx)$(f) rts ;) true
# Remove files to be replaced by target dependent sources
	$(RM) $(foreach PAIR,$(LIBGNAT_TARGET_PAIRS), \
	                rts/$(word 1,$(subst <, ,$(PAIR))))
	$(RM) rts/*-*-*.ads rts/*-*-*.adb
# Copy new target dependent sources
	$(foreach PAIR,$(LIBGNAT_TARGET_PAIRS), \
	          $(LN_S) $(fsrcpfx)$(word 2,$(subst <, ,$(PAIR))) \
	                rts/$(word 1,$(subst <, ,$(PAIR)));)
	$(RM) ../stamp-gnatlib
	touch ../stamp-gnatlib1

# GNULLI End #############################################################

# Don't use semicolon separated shell commands that involve list expansions.
# The semicolon triggers a call to DCL on VMS and DCL can't handle command
# line lengths in excess of 256 characters.
# Example: cd rts; ar rc libfoo.a $(LONG_LIST_OF_OBJS)
# is guaranteed to overflow the buffer.

gnatlib: ../stamp-gnatlib1 ../stamp-gnatlib2
	$(MAKE) -C rts CC="../../xgcc -B../../" \
	        INCLUDES="$(INCLUDES_FOR_SUBDIR) -I./../.." \
                CFLAGS="$(GNATLIBCFLAGS_FOR_C)" \
		srcdir=$(fsrcdir) \
	        -f ../Makefile $(LIBGNAT_OBJS)
	$(MAKE) -C rts CC="../../xgcc -B../../" \
	        ADA_INCLUDES="" \
                CFLAGS="$(GNATLIBCFLAGS)" \
	        ADAFLAGS="$(GNATLIBFLAGS)" \
		srcdir=$(fsrcdir) \
	        -f ../Makefile \
	        $(GNATRTL_OBJS)
	$(RM) rts/libgnat$(arext) rts/libgnarl$(arext)
	$(AR) $(AR_FLAGS) rts/libgnat$(arext) \
	   $(addprefix rts/,$(GNATRTL_NONTASKING_OBJS) $(LIBGNAT_OBJS))
        ifneq ($(PREFIX_OBJS),)
		$(AR) $(AR_FLAGS) rts/libgccprefix$(arext) $(PREFIX_OBJS);
        endif
	-$(RANLIB) $(RANLIB_FLAGS) rts/libgnat$(arext)
	$(AR) $(AR_FLAGS) rts/libgnarl$(arext) \
	   $(addprefix rts/,$(GNATRTL_TASKING_OBJS))
	-$(RANLIB) $(RANLIB_FLAGS) rts/libgnarl$(arext)
        ifeq ($(GMEM_LIB),gmemlib)
		$(AR) $(AR_FLAGS) rts/libgmem$(arext) rts/memtrack.o
		-$(RANLIB) $(RANLIB_FLAGS) rts/libgmem$(arext)
        endif
	$(CHMOD) a-wx rts/*.ali
	touch ../stamp-gnatlib

# Warning: this target assumes that LIBRARY_VERSION has been set correctly.
gnatlib-shared-default:
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
             gnatlib
	$(RM) rts/libgna*$(soext)
	cd rts; ../../xgcc -B../../ -shared $(TARGET_LIBGCC2_CFLAGS) \
		-o libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(GNATRTL_NONTASKING_OBJS) $(LIBGNAT_OBJS) \
		$(SO_OPTS)libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(MISCLIB) -lm
	cd rts; ../../xgcc -B../../ -shared $(TARGET_LIBGCC2_CFLAGS) \
		-o libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(GNATRTL_TASKING_OBJS) \
		$(SO_OPTS)libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(THREADSLIB)
	cd rts; $(LN_S) libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \
		libgnat$(soext)
	cd rts; $(LN_S) libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
		libgnarl$(soext)

gnatlib-shared-dual:
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
             gnatlib-shared-default
	$(MV) rts/libgna*$(soext) .
	$(RM) ../stamp-gnatlib2
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
             gnatlib
	$(MV) libgna*$(soext) rts

gnatlib-shared-dual-win32:
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
             gnatlib-shared-win32
	$(MV) rts/libgna*$(soext) .
	$(RM) ../stamp-gnatlib2
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
             gnatlib
	$(MV) libgna*$(soext) rts

# ??? we need to add the option to support auto-import of arrays/records to
# the GNATLIBFLAGS when this will be supported by GNAT. At this point we will
# use the gnatlib-shared-dual-win32 target to build the GNAT runtimes on
# Windows.
gnatlib-shared-win32:
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
             gnatlib
	$(RM) rts/libgna*$(soext)
	cd rts; ../../xgcc -B../../ -shared $(TARGET_LIBGCC2_CFLAGS) \
		-o libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(GNATRTL_NONTASKING_OBJS) $(LIBGNAT_OBJS) \
		$(SO_OPTS)libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) $(MISCLIB)
	cd rts; ../../xgcc -B../../ -shared $(TARGET_LIBGCC2_CFLAGS) \
		-o libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(GNATRTL_TASKING_OBJS) \
		$(SO_OPTS)libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(THREADSLIB) -Wl,libgnat$(hyphen)$(LIBRARY_VERSION)$(soext)

gnatlib-shared-darwin:
	$(MAKE) $(FLAGS_TO_PASS) \
	     GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS) \
	                    -fno-common" \
	     THREAD_KIND="$(THREAD_KIND)" \
	     gnatlib
	$(RM) rts/libgnat$(soext) rts/libgnarl$(soext)
	cd rts; ../../xgcc -B../../ -dynamiclib $(TARGET_LIBGCC2_CFLAGS) \
		-o libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(GNATRTL_NONTASKING_OBJS) $(LIBGNAT_OBJS) \
		$(SO_OPTS) \
		$(MISCLIB) -lm
	cd rts; ../../xgcc -B../../ -dynamiclib $(TARGET_LIBGCC2_CFLAGS) \
		-o libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
		$(GNATRTL_TASKING_OBJS) \
		$(SO_OPTS) \
		$(THREADSLIB) -Wl,libgnat$(hyphen)$(LIBRARY_VERSION)$(soext)
	cd rts; $(LN_S) libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \
		libgnat$(soext)
	cd rts; $(LN_S) libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
		libgnarl$(soext)

# I swear, this is what was being used before for VMS targets.
# It makes NO SENSE, since there's no number in Gnat_Static_Version string!
# FIXME.
# "This command transforms (YYYYMMDD) into YY,MMDD"
GSMATCH_VERSION :=$(shell grep "^ *Gnat_Static_Version_String" $(fsrcpfx)gnatvsn.ads | sed -e 's/.*(\(.*\)).*/\1/' -e 's/\(..\)\(..\)\(....\)/\2,\3/')
gnatlib-shared-vms:
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
             gnatlib
	$(RM) rts/libgna*$(soext)
	cd rts && echo "case_sensitive=yes" > SYMVEC_$$$$.opt && \
	objdump --syms $(LIBGNAT_OBJS) $(GNATRTL_NONTASKING_OBJS) | \
	$(SHLIB_SYMVEC) >> SYMVEC_$$$$.opt && \
	echo "case_sensitive=NO" >> SYMVEC_$$$$.opt && \
	../../xgcc -g -B../../ -nostartfiles -shared -shared-libgcc \
	   -o libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) libgnat.a \
	   sys\$$library:trace.exe \
	   --for-linker=/noinform \
	   --for-linker=SYMVEC_$$$$.opt \
	   --for-linker=gsmatch=equal,$(GSMATCH_VERSION)
	cd rts && echo "case_sensitive=yes" > SYMVEC_$$$$.opt && \
	objdump --syms $(GNATRTL_TASKING_OBJS) | \
	$(SHLIB_SYMVEC) >> SYMVEC_$$$$.opt && \
	echo "case_sensitive=NO" >> SYMVEC_$$$$.opt && \
	../../xgcc -g -B../../ -nostartfiles -shared -shared-libgcc \
	   -o libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \
	   libgnarl.a libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \
	   sys\$$library:trace.exe \
	   --for-linker=/noinform \
	   --for-linker=SYMVEC_$$$$.opt \
	   --for-linker=gsmatch=equal,$(GSMATCH_VERSION)

gnatlib-shared:
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
	     TARGET_LIBGCC2_CFLAGS="$(TARGET_LIBGCC2_CFLAGS)" \
             $(GNATLIB_SHARED)

gnatlib-sjlj: ../stamp-gnatlib1
	sed -e 's/ZCX_By_Default.*/ZCX_By_Default            : constant Boolean := False;/' rts/system.ads > rts/s.ads
	$(MV) rts/s.ads rts/system.ads
	$(MAKE) $(FLAGS_TO_PASS) \
             GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
	     TARGET_LIBGCC2_CFLAGS="$(TARGET_LIBGCC2_CFLAGS)" gnatlib

gnatlib-zcx: ../stamp-gnatlib1
	sed -e 's/ZCX_By_Default.*/ZCX_By_Default            : constant Boolean := True;/' rts/system.ads > rts/s.ads
	$(MV) rts/s.ads rts/system.ads
	$(MAKE) $(FLAGS_TO_PASS) \
	     GNATLIBFLAGS="$(GNATLIBFLAGS)" \
	     GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
	     THREAD_KIND="$(THREAD_KIND)" \
	     TARGET_LIBGCC2_CFLAGS="$(TARGET_LIBGCC2_CFLAGS)" gnatlib

# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.
# Dependencies on gvarargs.h are not written
# because all that file does, when not compiling with GCC,
# is include the system varargs.h.

ADA_INCLUDE_DIR = $(libsubdir)/adainclude
ADA_RTL_OBJ_DIR = $(libsubdir)/adalib

# force no sibling call optimization on s-traceb.o so the number of stack
# frames to be skipped when computing a call chain is not modified by
# optimization. However we can do that only when building the runtime
# (not the compiler) because the -fno-optimize-sibling-calls exists
# only in GCC 3.

ifneq (,$(findstring xgcc,$(CC)))
NO_SIBLING_ADAFLAGS=-fno-optimize-sibling-calls
else
NO_SIBLING_ADAFLAGS=
endif

s-traceb.o  : s-traceb.adb
	$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) \
	      $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \
      $< $(OUTPUT_OPTION)

# force debugging information on s-tasdeb.o so that it is always
# possible to set conditional breakpoints on tasks.

s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads
	$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \
	      $< $(OUTPUT_OPTION)

# force debugging information on a-except.o so that it is always
# possible to set conditional breakpoints on exceptions.
# use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.

a-except.o  : a-except.adb a-except.ads
	$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O1 -fno-inline \
	      $(ADA_INCLUDES) $< $(OUTPUT_OPTION)

# force debugging information on s-assert.o so that it is always
# possible to set breakpoint on assert failures.

s-assert.o  : s-assert.adb s-assert.ads a-except.ads
	$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O2 $(ADA_INCLUDES) \
	      $< $(OUTPUT_OPTION)

aux-io.o  : aux-io.c
argv.o    : argv.c
cal.o     : cal.c
errno.o   : errno.c
exit.o    : raise.h exit.c
expect.o  : expect.c
final.o   : raise.h final.c
mkdir.o   : mkdir.c
socket.o  : socket.c gsocket.h
sysdep.o  : sysdep.c

gen-soccon: gen-soccon.c gsocket.h
	$(CC) $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \
		$(ALL_CPPFLAGS) $(INCLUDES) -DTARGET=\"$(target_alias)\" \
		$< $(OUTPUT_OPTION)

cio.o     : cio.c
	$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \
	         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)

init.o    : init.c ada.h types.h raise.h
	$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \
	         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)

# No optimization to compile this file as optimizations (-O1 or above) breaks
# the SEH handling on Windows. The reasons are not clear.
seh_init.o : seh_init.c raise.h
	$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) -O0 \
	         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)

raise.o   : raise.c raise.h
	$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \
		 $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)

# Need to keep the frame pointer in this file to pop the stack properly on
# some targets.
tracebak.o  : tracebak.c tb-alvms.c tb-alvxw.c
	$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	      -fno-omit-frame-pointer $< $(OUTPUT_OPTION)

# In GNU Make, ignore whether 'clean' exists
.PHONY: clean realclean TAGS
