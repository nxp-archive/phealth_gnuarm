2005-04-16  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (expand_call_inline): Remove if 0 block in
	expand_call_inline.

2005-04-16  Jan Hubicka  <jh@suse.cz>

	* bitmap.h: Synchronize with mainline
	* cfganal.c: Synchronize with mainline.
	* cfgcleanup.c: Synchronize with mainline.
	* cfgexpand.c: Synchronize with mainline.
	* cfghooks.c: Synchronize with mainline.
	* cfgloop.c: Synchronize with mainline.
	* cfgloopanal.c: Synchronize with mainline.
	* cfgloopmanip.c: Synchronize with mainline.
	* conflict.c: Synchronize with mainline.
	* dominance.c: Synchronize with mainline.
	* except.c: Synchronize with mainline.
	* expr.c: Synchronize with mainline.
	* final.c: Synchronize with mainline.
	* gimple-low.c: Synchronize with mainline.
	* gimplify.c: Synchronize with mainline.
	* loop-doloop.c: Synchronize with mainline.
	* loop-init.c: Synchronize with mainline.
	* loop-iv.c: Synchronize with mainline.
	* loop-unroll.c: Synchronize with mainline.
	* loop-unswitch.c: Synchronize with mainline.
	* parms.def: Synchronize with mainline.
	* passes.c: Synchronize with mainline.
	* predict.c: Synchronize with mainline.
	* sched-rgn.c: Synchronize with mainline.
	* tracer.c: Synchronize with mainline.
	* tree-cfg.c: (build_tree_cfg): Make local again; do not re-allocate
	entry/exit block.
	(cleanup_control_flow): Make local again.
	* tree-dfa.c: Synchronize with mainline.
	* tree-flow-inline.h: Synchronize with mainline.
	* tree-flow.h: (build_tree_cfg): Drop prototype.
	* tree-phinodes.c: Synchronize with mainline.
	* tree-sra.c: Synchronize with mainline.
	* tree-ssa-ccp.c: Synchronize with mainline.
	* tree-ssa-dce.c: Synchronize with mainline.
	* tree-ssa-dse.c: Synchronize with mainline.
	* tree-ssa-flowprop.c: Synchronize with mainline.
	* tree-ssa-phiopt.c: Synchronize with mainline.
	* tree-ssa-pre.c: Synchronize with mainline.
	* tree.c: Synchronize with mainline.
	* tree.h: (lower_function_body): Drop prototype.
	* var-tracking.c: Synchronize with mainline.

2005-04-14  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline tree-profiling-merge-20050412

2005-04-09  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline tree-profiling-merge-20050408

2005-04-04  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline tree-profiling-merge-20050402

2005-03-29  Kenneth Zadeck <zadeck@naturalbridge.com>
	* ipa_static.h: Renamed ipa_static_address_not_taken_of_field to 
	to ipa_static_field_does_not_clobber_p.
	* ipa_static_vars_anal: Renamed 
	ipa_static_address_not_taken_of_field to 
	to ipa_static_field_does_not_clobber_p.  Fixed fast test to 
	understand that it could not be applied to unions.
       	* alias.c (nonoverlapping_memrefs_p): Renamed call.
	* tree_ssa_alias.c (may_alias_p): Renamed call.

2005-03-25  Jan Hubicka  <jh@suse.cz>

	* value-prof.c (tree_divmod_fixed_value): Use fold_convert to produce
	conversion.
	(tree_mon_pow2): Likewise.

2005-03-21  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20050321)

2005-03-21  Razya Ladelsky  <razya@il.ibm.com>

        * cgraphunit.c (cgraph_function_versioning): assign proper values to the 
          TREE_DECL fields of the new version.
        * gimplify.c (create_function_name): changed code to create a unique name 
          for the versioned node.
        * ipa_prop.c (constant_val_insert ): enable the insertion of the constant 
          to the (versioned) function.
          (ipcp_cval_equal_cvalues): fix float constant comparison.

2005-03-17  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20051703)

2005-03-16  Kenneth Zadeck <zadeck@naturalbridge.com>

	* cgraph.c (dump_cgraph_node): Fixed infinite loop in debugging code.
	* ipa-static-vars-anal (static_execute): Added better debugging and
	fixed bug that casused local information to computed wrong in the 
        presence of certain inlining and recursive functions.

2005-03-10  Daniel Berlin  <dberlin@dberlin.org>

	* tree-gimple.c (get_base_address): We need to deal with VECTOR_CST
	here too, since we end up with them in various types of _REF's.

2005-03-06  Kenneth Zadeck <zadeck@naturalbridge.com>
	* tree-promote-statics.c (try-replace): Fixed missing CONST_DECL case.

2005-03-05  Jan Hubicka  <jh@suse.cz>

	* tree-flow.h (maybe_fold_stmt_indirect): Declare.
	* tree-inline.c (copy_body_r): Declare.
	(maybe_fold_stmt_indirect): Export.

2005-03-05  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (optimize_inline_calls): Fold conditionals before
	cleaning up CFG; verify CFG and stmts.

2005-03-05  Jan Hubicka  <jh@suse.cz>

	* tree-cfg.c (fold_cond_expr_cond): Use boolean types for condition.

2005-03-03  Jan Hubicka  <jh@suse.cz>

	* cgraphunit.c (cgraph_analyze_function): Initialize bitmap obstack.
	* tree-ssa-dce.c (eliminate_unnecessary_stmts): Return true when
	something is elliminated.
	(perform_tree_ssa_dce): Delete unreachable blocks for cddce.
	* common.opt (fearly-optimizations): New flag.
	* opts.c (decode_options): Enable at -O2.
	* passes.c (pass_rest_of_compilation): Kill CFG.
	* sched-rgn.c (compute_trg_info): Silence uninitialized warning.
	* tree-flow-inline.h (mark_call_clobbered): New sanity check.
	* tree-optimize.c (gate_early_optimizations): New function.
	(pass_all_early_optimizations): New pass.
	(execute_free_cfg_annotations): Break out from ...
	(execute_free_datastructures): here; do not mess up with stmts list;
	free
	dominance info.
	(pass_cfg_annotations): New pass.
	(init_tree_optimization_passes): Add new passes.
	(tree_early_local_passes): Temporarily disable TER.
	(tree_rest_of_compilation): Do not allocate vars_to_rename.
	* tree-ssa-operands.c (free_ssa_operands): Export.
	* tree-ssa-operands.h (free_ssa_operands): Declare.
	* tree-ssa.c (delete_tree_ssa): Kill the operands and phi nodes too; do
	not kill
	* tree-ssanames.c (release_defs): Kill addreses_taken and ssa operands.
	annotations.

2005-03-03  Jan Hubicka  <jh@suse.cz>

	* tree-dfa.c (add_referenced_var): Don't walk initializer of external
	and non-constant public variables.

2005-03-01  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-20050301)

2005-02-22  Razya Ladelsky  <razya@il.ibm.com>

	* tree-inline.c (copy_body_r): add versioning case for handling
	exceptions.
        (inlining_p): new function to test if we're inlining.

2005-02-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	* bitmap.h: Added useful documentation.
	* builtin-attrs.def: Added ATTR_POINTER_NO_ESCAPE_CONST_NOTHROW_LIST.
	* builtins.def: Changed constant_p to use
	ATTR_POINTER_NO_ESCAPE_CONST_NOTHROW_LIST.
	* ipa-static-vars-anal.c (ipa_static_star_count_of_interesting_type, 
	ipa_static_star_count_of_interesting_or_array_type, 
	ipa_static_type_contained_p, ipa_static_address_not_taken_of_field, 
	mark_any_type_seen, mark_type, count_stars, 
	check_function_parameter_and_return_type, check_call, close_type_seen,
	close_type_full_escape): Changed way types were traversed.
	* ipa-static-vars-anal.c (has_proper_scope_for_analysis, check_call):
	Fixed scanning call parms code.
	* ipa-static-vars-anal.c (do_type_analysis):
	Fixed improper use of bitvector iterators.
	* tree-ssa-alias.c (may_alias_p): Changed the way calls into
	ipa_static_address_not_taken_of_field are set up.
	* tree-ssa-operands: (add_call_clobber_ops): Added comment to
	point out future work.

2005-02-12  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20050211)

2005-02-09  Razya Ladelsky  <razya@il.ibm.com>

 	* ipa_prop.c: Change/add comments and adjust to GNU standards.
        (hashtab.h, toplev.h, flags.h, debug.h, target.h, varray.h,
 	tree-gimple.h): Remove dependency.
        (ipa_node_create, ipcp_method_is_cloned, ipcp_method_set_orig_node,
        ipcp_method_orig_node, ipa_cloned_create, ipcp_method_dont_insert_const,
	ipa_cloned_create, ipcp_update_callgraph, ipcp_redirect, ipcp_propagate_stage
	ipa_edges_create, ipcp_type_is_const, ipcp_asm_walk_tree_1, ipcp_after_propagate): New functions.
        (ipcp_cs_get_first, ipcp_cs_get_next,
	ipcp_cs_not_last): Remove functions.
        (ipcp_stage1, ipcp_stage2, ipcp_stage3): Rename to -
        (ipcp_init_stage, ipcp_iterate_stage, ipcp_insert_stage) Respectively.
        (ipcp_method_dont_insert_const): Rename to (ipcp_method_dont_propagate).
        (ipcp_method_compute_modify): check DECL_UNINLINABLE
        instead of calling tree_inlinable_function_p to find out if a given
	function is inlinable.
        (ipcp_driver): Update.
 	* ipa_prop.h: Change Comment.
        (struct ipa_node): Add new fields.
	* cgraph.h:  (varray.h): New include.
	(update_call_expr, cgraph_copy_node_for_versioning,
 	cgraph_function_versioning): New declarations.
	* Makefile.in (CGRAPH_H): Add dependency to varray.h.
 	* common.opt: Remove fipa-no-cloning flag.
	* cgraphunit.c (cgraph_optimize):
	Support for IPA constant propagation.
	(update_call_expr, cgraph_copy_node_for_versioning,
	cgraph_function_versioning): New functions to support versioning.
	* integrate.c: (copy_decl_for_inlining): renamed and removed to tree-inline.c.
        * integrate.h: (copy_decl_for_inlining): renamed and removed to tree-inline.h.
	* gimplify.c: (create_function_name): New function.
	* tree-gimple.h: (create_function_name): New declaration.
	* tree-inline.c: (struct inline_data): New fields to support versioning.
	(copy_arguments_for_versioning, copy_static_chain, function_versionable_p,
	tree_function_versioning, replace_ref_tree):
	New functions to support tree function versioning.
        (copy_decl_for_inling): moved from integrate.c and renamed to copy_decl_for_dup.
	(remap_decl, copy_body_r, copy_tree_r, copy_cfg_body): Support function versioning.
        (copy_cfg_body): a fix to the copying of the edge between the EXIT block and its 
        predecessor in the case of saving_or_cloning.
	* tree-inline.h: (tree_versionable_function_p,
	tree_function_versioning): New declarations.
        *langhooks.c: (lhd_tree_inlining_copy_res_decl_for_inlining): change call to 
	copy_decl_for_inlining.
        * common.opt: (fipa-no-cloning): Remove fipa-no-cloning flag.
        * doc/invoke.texi: (fipa-no-cloning): Same.

2005-02-03  Razya Ladelsky  <razya@il.ibm.com>

	* tree-eh.c (duplicate_stmt_eh_region_mapping): Use ggc_free to free
	ggc memory.

2005-02-06  Kenneth Zadeck <zadeck@naturalbridge.com> with inclusions from 
	Daniel Berlin  <dberlin@dberlin.org> and Jan Hubicka  <jh@suse.cz>

	* Makefile.in: Added tree-promote-statics.c.
	* tree-promote-statics.c: New optimization pass to promote certain 
  	statics into registers.
	* tree-optimize.c: Added call to pass_promote_statics.
	* treepass.h: added pass-promote-statics.
	* alias.c (nonoverlapping_component_refs_p,nonoverlapping_memrefs_p):
	Ifdefed out agressive structure aliasing code.
	* c-typeck.c (convert_arguments): Added missing null check.
	* cgraph.c (dump_cgraph_node, cgraph_function_body_availability):
	Added cgraph_function_flags_ready flag to keep 
	cgraph_function_body_availability from being called to early by 
	debugging where it could get wrong answer. 
	* ipa-static-vars-analysis.c (unique_type_id_for,
	ipa_static_type_contained_p,
	ipa_static_address_not_taken_of_field,
	check_function_parameter_and_return_types, close_addressof,
	do_type_analysis): Fixed bugs with missing types.
	* ipa-static-vars-analysis.c (propagate_bits,
	do_type_analysis) Fixed typos.
	* ipa-static-vars-analysis.c (clean_function): New function to clear 
	computed effects of functions that can be replaced.

2005-02-02  Daniel Berlin  <dberlin@dberlin.org>

	* c-typeck.c (convert_arguments): Only warn for normal builtin
	function replacements, not error.

2005-02-02  Jan Hubicka  <jh@suse.cz>

	* opts.c (flag_inline_functions_set): New static variable.
	(common_handle_option): set it; enable inlinining and value profiling
	with -fprofile-use.

2005-01-27  Daniel Berlin  <dberlin@dberlin.org>

	* c-typeck.c (build_unary_op): It's not the symbol that is addressable
	in a mem_ref that has it's address taken.

2005-01-25  Jan Hubicka  <jh@suse.cz>

	* ipa-inline.c (cgraph_decide_inlining_of_small_functions): Kill bogus
	assert check.

2005-01-23  Daniel Berlin  <dberlin@dberlin.org>

	* doc/c-tree.texi: Add cursory docs for MEM_REF.
	* doc/tree-ssa.texi: Add MEM_REF to gimple grammar.

2005-01-22  Kenneth Zadeck <zadeck@naturalbridge.com>
	* alias.c : Fixed typos in header comment.

	* alias.c (nonoverlapping_memrefs_p): Added code to use
	ipa_static_vars_analysis infomation to determine if a
	pointer and a structure may alias.
	* builtin-attrs.def, builtins.def, c-common.c, tree.h:
	Renamed "free" attribute to "pointer_no_escape" and made the
	free libc function have this attribute by adding a builtin for
	it.
	* calls.c (flag_from_decl_or_type): Ditto.
	* ipa_static_vars_anal.c (ipa_static_star_count_of_interesting_or_array_type): 
	New function.
	* ipa_static_vars_anal.c (mark_any_type_seen, mark_type, close_type_seen,
	close_type_full_escape, do_type_analysis): 
	Added code to properly handle array types.
	* ipa_static_vars_anal.c (parent_type_p): Fixed problems in
	not properly determining if a class was a parent class.
	* ipa_static_vars_anal.c (check_cast, look_for_address_of, look_for_casts, 
	check_call): Missed marking some types as seen.
	* ipa_static_vars_anal.c
	* (check_function_parameter_and_return_type): Was invalidly
	taking apart a gimple tree.
	* ipa_static_vars_anal.c (check_call): Added code to process 
	pointer_no_escape flag.
	* ipa_static_vars_anal.c (okay_pointer_operation, scan_for_static_refs): 
	Preliminary code to allow some pointer increments as ok.
	* ipa_static.h: Added ipa_static_star_count_of_interesting_or_array_type.

2005-01-18  Kenneth Zadeck <zadeck@naturalbridge.com>
	
	* alias.c: Fixed header comment.
	* c-common.c: (handle_free_attribure) 
	New function to handle "free" attribute. 
	* c=decl.c (merge_decls): Process "free" attribute.
	* calls.c (flags_from_decl_or_type): process "free" attribute.
	* ipa-static-vars-anal.c (unique_type_id_for, 
	ipa_static_star_count_of_interesting_type, ipa_static_type_contained_p,
	ipa_static_address_not_taken_of_field, mark_any_type_seen, 
	mark_type_seen, mark_type, mark_interesting_type, parent_type_p, 
	count_stars, check_cast_type, check_cast, 
	check_function_parameter_and_return_types, 
	mark_interesting_addressof, type_for_uid, subtype_map_for_uid, 
	close_type_seen, compare_type_brand, get_name_of_type, 
	discover_unique_type, close_type_exposed_parameter, 
	close_type_full_escape, delete_addressof_map,close_addressof, 
	do_type_analysis): New function for type escape analysis.
	* ipa-static-vars-anal.c (check_operand, check_tree, 
	look_for_address_of, check_call, scan_for_static_refs, ipa_init, 
	analyze_function, static_execute): Fixed to perform type escape 
	analysis.
	* ipa-static-vars-anal.c (convert_UIDs_in_bitmap, propagate_bits): 
	Fixed typo.
	* ipa-static-vars-anal.c (searchc_env): Added missing cast.
	* ipa-static-vars-anal.c (get_base_var): Moved from tree-gimple.c.
	* ipa-static-vars-anal.c (check_call): Renamed from 
	process_call_for_static_vars.
	* ipa-static-vars-anal.c (analyze_variable): Added debugging.
	* ipa-static-vars-anal.c (static_execute): Removed debugging.
	* tree-dfa.c (create_stmt_ann) Fixed typo.
	* tree.c (build4_stat) Fixed typo.
	* tree-inline-flow.h: Fixed typo.
	* tree-ssa-alias.c (may_alias_p): Improvements to aliasing based on 
	type escape analysis.
	* tree.h: added free attribute. 

2005-01-18  Daniel Berlin  <dberlin@dberlin.org> (committed by Kenneth Zadeck <zadeck@naturalbridge.com>)

	* c-typeck.c (build_array_ref): Build a MEM_REF instead of
	an indirect_ref if we can.
	(build_unary_op): Drop MEM_REF to pointer addition when you
	take the address of it.
	(lvalue_p): MEM_REF is the same as INDIRECT_REF here.
	* emit-rtl.c (set_mem_attributes_minus_bitpos):
	Handle MEM_REF.
	* expr.c (expand_expr_real_1): Abort if we try to expand a MEM_REF.
	* gimple-low.c (lower_memref): New function.
	(lower_memrefs): Ditto.
	(pass_lower_memref): Ditto.
	* gimplify.c (gimplify_expr): Add gimplification of MEM_REF.
	(check_pointer_types_r): Add MEM_REF.
	* tree-eh.c (tree_could_trap_p): MEM_REF is like INDIRECT_REF here.
	* tree-gimple.c (is_gimple_addressable): Add MEM_REF.
	(is_gimple_min_lval): Ditto.
	(get_base_address): Handle MEM_REF.
	* tree-inline.c (estimate_num_insns_1): Ditto.
	* tree-optimize.c: Add memref lowering passes
	* tree-pass.h: Add pass_lower_memref.
	* tree-pretty-print.c (dump_generic_node): Print out MEM_REF.
	* tree-ssa-alias.c (find_ptr_dereference): Add MEM_REF handling.
	* tree-ssa-loop-im.c (for_each_index): Ditto.
	* tree-ssa-operands.c (get_mem_ref_operands): New function.
	(build_ssa_operands): Add MEM_REF.
	(get_expr_operands): Use get_mem_ref_operands. 
	* tree-ssa-pre (is_copy_stmt, follow_copies_till_vuse, do_eustores, 
	gate_eustores): new function to eliminate useless stores.

2005-01-18  Jan Hubicka  <jh@suse.cz> (committed by Kenneth Zadeck <zadeck@naturalbridge.com>)
	* cgraphunit.c (cgraph_optimize): fixed improperly initialized bitmap obstack.
	* tree-optimize.c (tree_lowering_passes, tree_early_local_passes): 
	fixed improperly initialized bitmap obstack.


2005-01-15  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgrpah_edge): Take bb argument instead of
	current_basic_block.
	(dump_cgraph_node): Dump loop nest.
	(cgraph_clone_edge): Maintain loop nest.
	(cgraph_clone_node): Likewise.
	* cgraph.h (cgraph_node): Remove current_basic_block field; add
	loop_nest.
	(cgraph_create_edge, cgraph_clone_edge, cgraph_clone_node): Modify
	prototype.
	* cgraphunit.c: Include cfgloop.h
	(current_basic_block): New static.
	(record_call): Update.
	(cgraph_analyze_function): Build loop tree.
	* ipa-inline.c (cgraph_clone_inlined_nodes): Maintain loop depth.
	(cgraph_edge_baddness): Consider nest.
	(cgraph_decide_recursive_inlining): Update call of cgraph_clone_node.
	* tree-inline.c (copy_body_r): Update call of cgraph_clone_edge.
	(expand_call_inline): Update call of cgraph_create_edge.
	* tree-optimize.c (tree_rest_of_compilation): Update call of edge clonning.

2005-01-09  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20050107)

2004-12-20  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20041219)

2004-12-19  Jan Hubicka  <jh@suse.cz>

	* ipa-static-vars-anal.c: Fix type of index for new bitmap API.

2004-12-17  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (initialize_inlined_parameters): Do not throw away
	DECLs from BIND expr.

2004-12-15  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20041215)
	
2004-12-15  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20041212)
	
2004-12-15  Jan Hubicka  <jh@suse.cz>

	* cgraphunit.c (cgraph_varpool_analyze_pending_decls): Move
	ipa_analyze_variable from here....
	(cgraph_optimize): ... to here.

2004-12-08  Jan Hubicka  <jh@suse.cz>

	* ipa-inline.c (cgraph_edge_badness): Simplify.
	(cgraph_decide_inlining_of_small_functions): Avoid recursive inlining.
	(cgraph_decide_inlining): Sanity check.
	* tree-inline.c (optimize_inline_calls): Recount frequencies.

2004-12-07  Kenneth Zadeck  <Kenneth.Zadeck@NaturalBridge.com>

	* ipa-static-vars-anal.c (get_asm_expr_operands): keep any function		with volatile asm from being marked const or pure.
	(static_execute): turn off pure if the function contains backedges.

2004-12-07  Jan Hubicka  <jh@suse.cz>

	* basic-block.h (REG_BR_PROB_BASE): Define here.
	* cgraph.c (cgraph_create_node): Set estimated_growth.
	(dump_cgraph_node): Print profile.
	(cgraph_clone_edge): Add count argument.
	(cgraph_clone_node): Likewise; update profile.
	* cgraph.h (cgraph_global_info): Add estimated_growth.
	(cgraph_node): Add count; kill most_desirable.
	(cgraph_edge): Kill desirability and undesirable fields.
	(cgraph_clone_edge, cgraph_clone_node): Update prototypes.
	* cgraphunit.c (cgraph_reset_node): Requeue nodes to reanalyze.
	(cgraph_analyze_function): Initialize profile, do not perform IPA.
	(cgraph_finalize_compilation_unit): Update comment; avoid
	redundant work when called multiple times; do not dump cgraph
	to avoid quadratic dumping on IMA; prettier -Q output.
	(cgraph_optimize): Prettier -Q output; analyze functions.
	* ipa-inline.c: Change heuristics to work per edge, not per inline
	candidate, replace previous profile driven heuristics by common
	implementation.
	(max_insns): change into int.
	(max_count): New static variable.
	(cgraph_clone_inlined_nodes, cgraph_clone_inlined_nodes_1,
	cgraph_mark_inline_edge): Rever the changes from cfginliner patch;
	update profile.
	(cgraph_estimate_growth): Cache result.
	(update_caller_keys): Likewise
	(update_callee_keys): Use update_caller_keys.
	(lookup_recursive_calls): Use priority heap.
	(cgraph_decide_recursive_inlining): Reorganize to use priority heap.
	(cgraph_edge_badness): New function.
	(cgraph_decide_inlining_of_small_functions): Reorganize to work per
	edge instead of per inline candidate.
	(cgraph_decide_inlining): Add TV_INLINE_HEURISTICS timevar; 
	do not call cgraph_profile_driven_inlining.
	(cgraph_profile_driven_inlining, cgraph_pick_most_desirable_edge,
	cgraph_desirability): Kill.
	* rtl.h (REG_BR_PROB_BASE): Move definition to basic-block.h.
	* timevar.def (TV_INLINE_HEURISTICS): New TV.
	* tree-inline.c (copy_cfg_body, copy_body): New count argument;
	update profile.
	(copy_body_r, expand_call_inline): Update profiling.
	* tree-optimize.c (tree_rest_of_compilation): Update.

2004-12-02  Dale Johannesen  <dalej@apple.com>

        * basic-block.h (scale_bbs_frequencies_int):  New declaration.
        (scale_bbs_frequencies_gcov_type):  New declaration.
        * cfgloopmanip.c (scale_bbs_frequencies):  Renamed to
        scale_bbs_frequencies_int and moved to cfg.c.
        (scale_loop_frequencies):  Adjust call to it.
        (duplicate_loop_to_header_edge):  Adjust calls to it.
        * cfg.c (RDIV): New (copied from cfgloopmanip.c).
        (scale_bbs_frequencies_int):  Moved from cfgloopmanip.c.
        (scale_bbs_frequencies_gcov_type):  New.
        * tree-ssa-loop-ch.c (copy_loop_headers):  Propagate profiling info.

2004-12-05  Dale Johannesen  <dalej@apple.com>

        * except.c (get_maybe_saved_eh_throw_stmt_table):  Remove.
        * except.h (get_maybe_saved_eh_throw_stmt_table):  Remove.
        * tree-eh.c (duplicate_stmt_eh_region_mapping):   Call
        get_eh_throw_stmt_table instead of above.
        * tree-inline.c (struct inline_data):  Add callee_cfun.
        (copy_body_r):  Use it.
        (copy_cfg_body):  Set and use it.
        (clone_body):  Set it.
        (save_body):  Set it.

2004-12-05  Andrew Pinski  <pinskia@physics.uc.edu>

	* c-typeck.c (tagged_tu_seen): Add val field.
	(comptypes): Move functional to comptypes_internal
	and free tagged_tu_seen.
	(comptypes_internal): New function and call comptypes_internal
	instead of comptypes. Speed up by sibcalling
	tagged_types_tu_compatible_p.
	(alloc_tagged_tu_seen): New function
	(free_all_tagged_tu_seen_up_to): New function.
	(tagged_types_tu_compatible_p): Return the val of the seen two
	types.
	Add that the two types are the same to tagged_tu_seen_base
	if they are and call comptypes_internal instead of comptypes.
	<case UNION_TYPE>: Speed up common type where the fields are
	in the same order.
	(function_types_compatible_p): Call comptypes_internal instead of
	comptypes.
	(type_lists_compatible_p): Likewise.

2004-12-03  Jan Hubicka  <jh@suse.cz>

	* cgraph.c: Fix whitespace problems introduced by previous patch.
	* cgraphunit.c: Kill bogues FIXME comment introduced by previous
	patch; re-enable cgraph checking
	* ipa.c (cgraph_remove_unreachable_nodes): Kill hack brought in by
	previous patch.

2004-12-02  Kenneth Zadeck  <Kenneth.Zadeck@NaturalBridge.com>

	Removal of const and pure detection from rtl level:	
	* alias.c (nonlocal_mentioned_p_1,nonlocal_mentioned_p,
	nonlocal_referenced_p_1,nonlocal_referenced_p,nonlocal_set_p_1,
	nonlocal_set_p,mark_constant_function): removed
	* calls.c (flags_from_decl_or_type):removed cgraph_rtl_info refs
	* passes.c (rest_of_handle_cfg) remove calls to mark_constant_function
	* cgraph.h (const_function, pure_function) flags removed from 
	cgraph_rtl_info

	Addition of const and pure function detection to ipa static as well as
	detection of readonly static variables are removal of addressable bit 
	from static varaiables.:
	* ipa_static_vars_anal.c (bool has_proper_scope_for_analysis,
	check_operand,check_tree,look_for_address_of,check_rhs_var,
	check_lhs_var,get_asm_expr_operands,process_call_for_static_vars,
	scan_for_static_refs,get_static_name_by_uid,propagate_bits,ipa_init
	analyze_variable,analyze_function,static_execute) added functionality.
	* tree-cfg.c (need_fake_edge_p): added comment that needs work.
	
	* ipa_static_vars_anal.c (add_static_var): added debugging.
	* tree-inline.c (inline_forbidden_p): added debugging.

	Move calls_read_all and calls_write_all from cgraph_node structure to 
	ipa_static_info structure.
	* cgraph.c (dump_cgraph_node) removed refs vars. 

	Fixed spelling error in *_OVERWRITTABLE
	* cgraph.h
	* cgraph.c (cgraph_master_clone,cgraph_function_body_availability,
	cgraph_variable_initializer_availability)

	Fixed indention and nesting problem in source:
	cgraphunit.c (record_call_1)


2004-12-02  Jan Hubicka  <jh@suse.cz> committed by Kenneth Zadeck
	Fixes to make variable and functions appear at proper time in ipa analysis.
	*cgraph.c (enqueue_needed_varpool_node): renamed to 
	cgraph_varpool_enqueue_needed_node	
	(cgraph_varpool_reset_queue): new function. 
	(cgraph_varpool_mark_needed_node, decide_is_variable_needed) add calls.
	(cgraph_varpool_finalize_decl) renamed function call
	* cgraphunit.c (cgraph_optimize) disabled recovery of useless nodes.
	* ipa.c (cgraph_remove_unreachable_nodes) disabled detection.

2004-12-02  Jan Hubicka  <jh@suse.cz>

	Temporarily avoid unreachable node removal for IPA stuff.
	* cgraphunit.c (cgraph_optimize): Remove unreachable nodes.
	* ipa-inline.c (cgraph_decide_inlining): Do not remove unreachable
	nodes.

2004-12-02  Jan Hubicka  <jh@suse.cz>

	* cgraph.h (cgraph_varpool_node): Add non_ipa field.
	* cgraphunit.c (cgraph-varpool_analyze_pending_decls): Set noipa flag
	for declarations comming late.
	(cgraph_varpool_assemble_pending_decls): Do not call IPA for nonipa variables.
	(cgraph_optimize): Analyze pending decls early.
	(cgraph_remove_unreachable_node): Clear analyzed flag.

2004-12-02  Steven Bosscher  <stevenb@suse.de>

	* tree-inline.c: Fix indenting and other style issues.

2004-12-01  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (copy_body_r): Do not alter source stmt when
	removing return of void.

2004-12-01  Jan Hubicka  <jh@suse.cz>

	* cfg.c (update_bb_profile_for_threading): Watch for overflow.

2004-12-01  Jan Hubicka  <jh@suse.cz>

	* cgraph.h (cgraph_node): Kill unused fileds brought by cfg inliner
	patch.
	(cgraph_edge): Add undesirable field.
	* cgraphunit.c: Include coverage.h
	(cgraph_estimate_size_after_inlining): Rever hack brought by cfg
	inliner patch; add sanity check.
	(cgraph_decide_recursive_inlining): Don't work hard if function
	has no uninlined callees.
	(cgraph_maybe_hot_edge_p): New predicate.
	(cgraph_desirability): Compute something nonzero.
	(cgraph_pick_most_desirable_edge): Don't inline already inlined;
	don't bypass inline limits.
	(cgraph_analyze_function_inlinability): Compute nonzero function sizes.
	* tree-inline.c (estimate_num_insns): Kill bogus void cast.

2004-11-30  Jan Hubicka  <jh@suse.cz>

	* Makefile.in (ipa.o,ipa-inline.o): New.
	* cgraph.h: Reorganize prototypes.
	(cgraph_remove_unreachable_nodes, cgraph_postorder,
	cgraph_default_inline_p, cgraph_analyze_function_inlinability,
	cgraph_decide_inlining_incrementally): Declare.
	* cgraph.c (cgraph_inline_p): Move here from...
	* cgraphunit.c (cgraph_inline_p): ... here.
	Update overall comment.
	Do not include fibheap.h
	(cgraph_create_edges): Make static.
	(cgraph_postorder, cgraph_remove_unreachable_nodes): Move to ipa.c
	(INSN_PER_CALL, cgraph_default_inline_p,
	cgraph_decide_inlining_incrementally, ncalls_inlined,
	nfunction_inlined, initial_insns, overall_insns, max_insns,
	cgraph_estimate_size_after_inlining, cgraph_estimate_growth,
	already_cloned, cgraph_clone_inlined_nodes_1,
	cgraph_clone_inlined_nodes, cgraph_mark_inline_edge,
	cgraph_mark_inline, cgraph_check_inline_limits,
	cgraph_default_inline_p, cgraph_recursive_inlinig_p,
	update_callee_keys, lookup_recursive_calls,
	cgraph_decide_recursive_inlining, cgraph_set_inline_failed,
	cgraph_desirability, cgraph_pick_most_desirable_edge,
	cgraph_profile_driven_inlining,
	cgraph_decide_inlining_of_small_functions, cgraph_decide_inlining,
	cgraph_decide_inlining_incrementally, cgraph_apply_inline,
	cgraph_gate_inlining, pass_ipa_inlinine): Move to ipa-inline.c
	(cgraph_inline_p): Move to cgraph.c
	(cgraph_function_and_variable_visibility): Update 
	cgraph_remove_unreachable_nodes call.
	* ipa-inline.c: New file; all code from cgraphunit.c
	* ipa.c: Likewise.

2004-11-29  Jan Hubicka  <jh@suse.cz>

	* cgraphunit.c (cgraph_decide_inlining_of_small_function): Kill
	forgotten sanity check.
	* passes.c (rest_of_clean_state): Do not call coverage_end_function.
	* profile.c (branch_prob): Call it here.

2004-11-29  Jan Hubicka  <jh@suse.cz>

	* cgraph.h (cgraph_node): Add "lowered" flag.
	(cgraph_build_cfg): Kill.
	(cgraph_lower_function): New.
	* cgraphunit.c: Kill bunch of includes introduced by cfg inliner patch.
	(cgraph_build_cfg): Kill.
	(cgraph_finalize_function): Set lowered flag.
	(cgraph_lower_function): New function.
	(cgraph_analyze_function): Lower the function; do early local passes iff
	unit-at-a-time
	(cgraph_expand_function): Do early passes iff !unit_at_a_time
	(cgraph_build_static_cdtor): Lower the function.
	* tree-optimize.c (all_lowering_passes): New static variable.
	(init_tree_optimization_passes): Split up lowering and optimization.
	(tree_early_local_passes): Do not lower function body.
	(tree_lowering_pass): New.
	* tree-pass.h (tree_lowering_passes): Declare.
	* cp/method.c: Include tree-pass.h
	(use_thunk): lower the body by hand.

2004-11-28  Jan Hubicka  <jh@suse.cz>

	* Changelog.profiling:  Fix up entries
	* Changelog: Move tree-profiling entries where they belong
	* cgraph.c (cgraph_function_body_availability): Fix inlining condition.
	* cgraphunit.c (cgraph_build_cfg): Do not build profile.
	(cgraph_varpool_analye_pending_decls): Add timevar.
	(cgraph_analyze_function): Do early optimizations passes,
	push/pop context.
	(cgraph_optimize): Add timevars.
	(cgraph_build_static_cdtor): Do early passes.
	* ipa-static-vars-anal.c: Include timevar.h.
	(analyze_function): Reorganize to work on CFG.
	(pass_ipa_static): Set timevar.
	* timevar.def (TV_CGRAPHOPT): Kill.
	(TV_IPA_OPT, TV_IPA_ANALYSIS, TV_IPA_STATIC_VAR): New.
	* tree-cfg.c: Undo all of cfg inliner merge patch except
	for build_tree_cfg bits.
	* tree-optimize.c (pass_gimple): Revert cfg inliner patch.
	(all_early_local_passes): New static variable.
	(init_tree_optimization_passes): Cleanup mess introduced by cfg inliner patch;
	re-enable profiling and ipa-static vars, introduce early passes.
	(tree_early_local_passes): New function.
	* tree-pass.h (tree_early_local_passes): Declare.
	(pass_lower_cf): Revert cfg inliner patch.

2004-11-17  Stuart Hastings <stuarth@apple.com>
	    Dale Johannesen  <dalej@apple.com>

	* Makefile.in (tree-inline.o): Add dependency on $(TREE_FLOW_H) and
	on except.h.
	(tree-eh.o): Don't depend on gt-tree-eh.h.
	(tree-pretty-print.o): Don't depend on tree-iterator.h.
	(except.o): Add dependency on $(TREE_FLOW_H).
	(cgraph.o): Likewise.
	(cgraphunit.o): Add dependency on except.h and coverage.h.
	(GTFILES): Remove $(srcdir)/except.c.  Add $(srcdir)/tree-inline.c.
	* basic-block.h (FOR_EACH_BB_FN, FOR_EACH_BB_REVERSE_FN): New.
	(FOR_EACH_BB, FOR_EACH_BB_REVERSE): Define in terms of the above.
	* cfg.c (init_flow): Don't clear n_edges.
	* cfglayout.c (flow_obstack): Don't declare.
	* cgraph.c: Include basic-block.h.
	(cgraph_create_edge): Set edge_count.
	(cgraph_remove_node): Remove nodes for inlined nested functions.
	* cgraph.h: Include tree.h and basic-block.h.
	(struct cgraph_node): Add the fields current_basic_block,
	insn_size, and most_desirable.
	(cgraph_node, cgraph_edge, cgraph_varpool_node, cgraph_inline_p,
	cgraph_mark_inline_edge, cgraph_clone_inlined_nodes,
	cgraph_build_static_cdtor): Cleanup prototypes.
	* cgraphunit.c: Include basic-block.h, tree-iterator.h, tree-flow.h,
	value-prof.h, coverage.h, and except.h.
	(cgraph_build_cfg): New.  Build the CFG for a function.
	(record_call_1): Don't look at STATEMENT_LIST nodes.
	(cgraph_create_edges): Handle FUNCTION_DECLs as special cases when
	looking for things to add to the call graph.
	(verify_cgraph_node): Use walk_tree with a pointer set instead of
	walk_tree_without_duplicates.
	(cgraph_varpool_analyze_pending_decls): Only look at DECL_INITIAL
	for things to add to the call graph when it is non-NULL.
	(cgraph_analyze_function): Build the CFG from here.
	(cgraph_expand_function): Make sure there is a CFG at this point.
	(cgraph_estimate_growth): Avoid negative size estimates.
	(cgraph_clone_inlined_nodes): Avoid cleating duplicate, unnecessary
	clones.
	(cgraph_clone_inlined_nodes_1): New, callback for the above.
	(cgraph_mark_inline_edge): Handle simple recursion.
	(cgraph_desirability): New, determine how "desirable" it is for
	some given function to be inlined.
	(cgraph_pick_most_desirable_edge): New, find the inline candidate
	most desirable to be inlined.
	(cgraph_profile_driven_inlining): New.
	(cgraph_decide_inlining_of_small_function): Don't compute max_insns
	from here.
	(cgraph_decide_inlining): Do it here.
	(cgraph_build_static_cdtor): If all else fails, build a CFG from here,
	for irregular functions such as mudflap.
	* except.c: Include tree-iterator.h, tree-inline.h, and tree-flow.h.
	(struct eh_status): Add per-function throw_stmt_table hash table.
	(eh_region_must_not_throw_p): New.
	(expand_resx_expr): Add sanity check.
	(current_function_has_exception_handlers):
	(duplicate_eh_region_1): Rewrite for trees.
	(duplicate_eh_region_2): Likewise.
	(duplicate_eh_regions): Likewise.
	(remove_eh_handler): No longer static.  Make sure there is EH info
	for the current function cfun.
	(change_to_nothrow): New, fixup EH statements for which we've later
	figured out that they don't actually throw.
	(set_nothrow_function_flags): Call it.
	(set_eh_throw_stmt_table): New.
	(get_eh_throw_stmt_table): New.
	(get_maybe_saved_eh_throw_stmt_table): New.
	(get_eh_last_region_number): New.
	(get_eh_cur_region): New.
	(set_eh_cur_region): New.
	* except.h (duplicate_eh_regions): Adjust prototype after rewrite.
	(add_stmt_to_eh_region_fn, remove_stmt_from_eh_region_fn,
	lookup_stmt_eh_region_fn): New prototypes.
	(struct throw_stmt_node): Moved from tree-eh.c.
	(remove_eh_handler, set_eh_throw_stmt_table, get_eh_throw_stmt_table,
	get_maybe_saved_eh_throw_stmt_table, get_eh_last_region_number,
	get_eh_cur_region, set_eh_cur_region, eh_region_must_not_throw_p):
	More new prototypes.
	* expr.c (expand_expr_real): Beware of MODIFY_EXPRs and RETURN_EXPRs
	that might throw at the end of a function.
	* function.c (allocate_struct_function): Clear n_edges here.
	* function.h (struct function): Add saved_eh and saved_cfg fields.
	* gengtype.c (open_base_files): Remove except.h from headers to
	analyze.
	* gimple-low.c (lower_function_body): No longer static.
	* integrate.c (copy_decl_for_inlining): Clear LABEL_DECL_UID for
	copied labels.
	* langhooks-def.h (lhd_tree_inlining_add_pending_fn_decls,
	lhd_tree_inlining_start_inlining, lhd_tree_inlining_end_inlining):
	Remove prototypes.
	(lhd_tree_inlining_copy_res_decl_for_inlining): Add prototype.
	(LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS,
	LANG_HOOKS_TREE_INLINING_START_INLINING,
	LANG_HOOKS_TREE_INLINING_END_INLINING): Remove.
	(LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING): New hook.
	(lhd_tree_inlining_disregard_inline_limit):
	(lhd_tree_inlining_add_pending_fn_decls):
	(lhd_tree_inlining_auto_var_in_fn_p):
	(lhd_tree_inlining_copy_res_decl_for_inlining):
	(lhd_tree_inlining_anon_aggr_type_p):
	(lhd_tree_inlining_start_inlining):
	(lhd_tree_inlining_end_inlining):
	* langhooks.c (lhd_tree_inlining_add_pending_fn_decls,
	lhd_tree_inlining_start_inlining, lhd_tree_inlining_end_inlining):
	Remove.
	(lhd_tree_inlining_copy_res_decl_for_inlining): New default hook.
	* langhooks.h (struct lang_hooks_for_tree_inlining): Adjust.
	* passes.c: Don't include alloc-pool.h.
	* print-tree.c: Include tree-iterator.h.
	(print_node): Print STATEMENT_LIST nodes.
	* tree-cfg.c (build_tree_cfg): No longer static.  Create
	ENTRY_BLOCK_PTR and EXIT_BLOCK_PTR here.
	(make_blocks): Purge basic_block_info.  Rechain split statements.
	Let statements in an EH region end a basic block.
	(make_edges): Make edges for blocks ending with an EH statement.
	(label_to_block): Rename to...
	(label_to_block_fn): ... this.  Work per function.
	(remove_useless_stmts_warn_notreached): Disable.
	(remove_useless_stmts_bind): Likewise.
	(remove_useless_stmts_1): Don't use them. Tighten up checks.
	(remove_useless_stmts): Rewrite to be basic block aware.
	(set_bb_for_stmt): Force the multiply to happen before the divide.
	(tree_forwarder_block_p): Don't forward forced labels.
	* tree-eh.c (struct throw_stmt_node): Removed here, moved to except.c.
	(add_stmt_to_eh_region_fn): New.
	(remove_stmt_from_eh_region_fn): New.
	(lookup_stmt_eh_region_fn): New.
	(record_stmt_eh_region): Get the table from cfun.
	(add_stmt_to_eh_region): Likewise.
	(remove_stmt_from_eh_region): Likewise.
	(lookup_stmt_eh_region): Likewise.
	(duplicate_stmt_eh_region_mapping): New function to preserve stmt EH
	mapping during inlining.
	(honor_protect_cleanup_actions): Use build_resx.
	(lower_try_finally_onedest): Likewise.
	(lower_try_finally_copy): Likewise.
	(lower_try_finally_switch): Likewise.
	(lower_eh_constructs): No longer static.
	(make_eh_edges): If a MUST_NOT_THROW region contains a call that
	throws, don't remove it.
	* tree-flow.h (build_tree_cfg): New prototype.
	(label_to_block): Make it a define.  Rename prototype to...
	(label_to_block_fn): ... this.
	(do_tree_profiling): New prototype.
	* tree-inline.c: Mostly rewritten for CFG inlining.
	* tree-inline.h (remap_decl_v): New prototype.
	(push_cfun, pop_cfun): Likewise.
	* tree-optimize.c (pass_gimple): Remove.
	(pass_lower_cf, pass_lower_eh, pass_build_cfg): Disable, we do
	this much earlier.  Needs to be cleaned up.
	(pass_tree_profile, pass_profile): Disable for now.
	(init_tree_optimization_passes): Hard-code initial properties.
	(tree_rest_of_compilation): Register the tree cfg hooks.  Preserve
	the CFG and EH data before optimizing.
	(pass_ipa_static): Disable for now, see the comments in that pass that
	need addressing.
	* tree-pass.h (pass_lower_cf): Remove.
	* tree-pretty-print.c: Don't include tree-iterator.h.
	* tree-profile.c (do_tree_profiling): No longer static.
	* tree.c (build_resx): New.
	* tree.h (lower_function_body, duplicate_stmt_eh_region_mapping,
	lower_eh_constructs): New prototypes.

2004-11-08  Kenneth Zadeck  <Kenneth.Zadeck@NaturalBridge.com>

	* Makefile.in (cgraph.h, ipa-static.h, ipa-static-vars-anal.c): 
	Add dependencies.
	* (ipa-static.h, ipa-static-vars-anal.c) : New files to implement
	the analysis if compilation wide static variables.
	* cgraph.c (cgraph_create_node, cgraph_remove_node
	dump_cgraph_node): Now handles master_clone_nodes and ipa_static info.
	(cgraph_is_master_clone, cgraph_master_clone,
	cgraph_immortal_master_clone): Added.
	(cgraph_function_body_availability): Handles inlinable and
	overwrittable functions. 
	* cgraph.h (availablilty):Handles inlinable and
	overwrittable functions. 
	(cgraph_node) Has static vars analyis info.
	* cgraph_unit (cgraph_function_and_variable_visibility): Fixed
	comments and removed external bit.
	* regclass.c (regset_release_memory): removed call to
	bitmap_release_memory which does not work with ipa reorganization.
	* tree-dfa.c: (find_referenced_vars) Add initialization code for 
	static vars analysis.
	* tree-flow.h: (static_vars_info): Added.
	* tree-gimple.c (get_base_var) Added.
	* tree.h (get_base_var) Added.
	* tree-pass.h (pass_ipa_static) Added.
	* tree-sra.c (sra_insert_before, sra_insert_after) Made public.
	(sra_type_can_be_decomposed_p) renamed from
	type_can_be_decomposed_p and made public. 
	(sra_init_cache): new.
	(tree_sra) Added call to sra_init_cache. 
	* tree-ssa-operands.c: (get_call_expr_operands,
	add_call_clobber_ops, add_call_read_ops) changed to clobber fewer
	static variables.
	
2004-11-27  Jan Hubicka  <jh@suse.cz>

	Temporarily apply Zdenek Dvorak's patch:
	PR tree-optimization/18040
	* tree-gimple.c (is_gimple_component): New function.
	(is_gimple_addressable, get_base_address): Use is_gimple_component.

2004-11-08  Andrew Pinski  <pinskia@physics.uc.edu>

	* Makefile.in: Rename ipa_static-vars-anal.o to
	ipa-static-vars-anal.o.
	* cgraph.c (cgraph_varpool_node_name): Remove one definition.
	(availability_names): Update for the new enum availability's.
	* cgraph.h (enum availability): Remove one definition.

2004-11-02  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgraph_varpool_node_name): New function.
	(availability_names): New static variable.
	(dump_cgraph_node): Dump availability.
	(dump_cgraph_varpool_node): New function.
	(dump_varpool): New function.
	(cgraph_function_body_availability): Likewise.
	(cgraph_variable_initializer_availability): Likewise.
	* cgraph.h (availability): New enum
	(dump_varpool,dump_cgraph_varpool_node,
	cgraph_function_availaibility,
	cgraph_variable_initializer_availability): New.
	* cgraphunit.c (cgraph_optimize): Dump varpool.

2004-10-29  Jan Hubicka  <jh@suse.cz>

	* cgraphunit.c (cgraph_reset_node): Break out from ...
	(cgraph_finalize_function): ... here.
	(cgraph_finalize_compilation_unit): Prune out finalized functions
	that has been taken back by frontend (ugh ugh); add sanity checking

2004-10-28  Steven Bosscher  <stevenb@suse.de>

	Ported from mainline:
	2004-10-22  Kazu Hirata  <kazu@cs.umass.edu>
	* sbitmap.h (EXECUTE_IF_SET_IN_SBITMAP): Don't access PTR
	beyond its end.

2004-10-24  Kenneth Zadeck <zadeck@naturalbridge.com>

	* gcc/Makefile.in: removed ggc for cgraphunit.
	* gcc/cgraph.c.dump_cgraph_node: removed static var analysis.
	* gcc/cgraph.h: removed static var analysis data structures and calls.
	* gcc/cgraphunit.c:
	cgraph_function_and_variable_visibility: removed references to 
	external bit
	(print_order,convert_UIDs_in_bitmap,new_static_vars_info,
	cgraph_reset_static_var_maps,get_global_static_vars_info,
	get_global_statics_not_read,get_global_statics_not_written,searchc,
	cgraph_reduced_inorder,has_proper_scope_for_analysis,check_rhs_var,
	check_lhs_var,get_asm_expr_operands,process_call_for_static_vars,
	scan_for_static_refs,cgraph_characterize_statics_local,
	clear_static_vars_maps,cgraph_propagate_bits,
	cgraph_characterize_statics): removed.
	(cgraph_optimize,init_cgraph): removed calls to static vars analysis
	* gcc/tree-dfa.c find_referenced_vars: removed call to static vars
	analysis
	* gcc/tree-flow.h static_vars_info: removed
	* gcc/tree-ssa-operands.c (add_call_clobber_ops,add_call_read_ops):
	removed calls to static vars analysis.
	get_call_expr_operands: removed callee variable. 

2004-10-25  Jan Hubicka  <jh@suse.cz>

	* cfgexpand.c (pass_expand): Update.
	* cgraphunit.c: Include tree-pass.h
	(cgraph_analyze_function_inlinability): Break out from ...
	(cgraph_analyze_function): ... here; call passmanager.
	(cgraph_analyze_variable): Call passmanager.
	(cgraph_decide_recursive_inlining): Use dump file.
	(cgraph_set_inline_failed): Likewise.
	(cgraph_decide_inlining_of_small_function): Likewise.
	(cgraph_decide_inlining): Likewise.
	(cgraph_apply_inline): Do the inlining, move from tree-inline.c
	(cgraph_gate_inlining): New function.
	(pass_ipa_inline): New structure.
	(cgraph_optimize): Call the passmanager.
	* gimple-low.c (pass_lower_cf, pass_remove_useless): Update.
	* passes.c (pass_rest_of_compil): Update
	* predict.c (pass_profile): Update
	* tree-cfg.c (pass_build_cfg): Update.
	(pass_remove_useless): Update.
	(pass_split_crit_edges): Update.
	(pass_warn_function_return): Update.
	* tree-complex.c (pas_lower_vector_operations, pass_pre_expand): Update.
	* tree-dfa.c (pass_referenced_vars): Update.
	* tree-eh.c (pass_lower_eh): Update.
	* tree-if-conv.c (pass_if_conversion): Update.
	* tree-into-ssa.c (pass_build_ssa): Update.
	* tree-mudflap.c (pass_mudflap_1, pass_mudflap_2): Update.
	* tree-nomudflap.c (pass_mudflap_1, pass_mudflap_2): Update.
	* tree-nrv.c (pass_nrv): Update.
	* tree-optimize.c (all_ipa_passes): New static variable.
	(execute_inline, pass_inline): Kill.
	(pass_gimple, pass_cleanup_cfg_pre_optimizing, pass_all_optimizations,
	pass_cleanup_cfg_post_optimizing, pass_free_datastructures,
	pass_init_datasturcutres);  Update.
	(register_one_dump_file): Add argument IPA, deal with IPA dumps.
	(register_dump_files): Likewise.
	(init_tree_optimization_passes): Do not add pass_inline; enqueue IPA passes.
	(execute_pass_hook): New enum.
	(execute_todo): Deal with new hooks and IPA.
	(execute_one_pass): Likewise.
	(ipa_analyze_function, ipa_analyze_variable, ipa_modify_function,
	ipa_modify_variable, ipa_passes): New entry points.
	(tree_rest_of_compilation): Execute ipa_modify_function.
	* tree-outof-ssa.c (pass_del_ssa): Update.
	* tree-pass.h (tree_opt_pass): Add new hooks and documentation.
	(pass_ipa_inline): Declare.
	(ipa_analyze_function, ipa_analyze_variable, ipa_modify_function,
	ipa_modify_variable, ipa_passes): Declare.
	* tree-profile.c (pass_tree_profile): Update.
	* tree-sra.c (pass_sra): Update.
	* tree-ssa-alias.c (pass_may_alias): Update.
	* tree-ssa-ccp.c (pass_ccp, pass_fold_builtins): Update.
	* tree-ssa-copyrename.c (pass_rename_ssa_copies): Update.
	* tree-ssa-dce.c (pass_dce): Update.
	(pass_cd_dce): Update.
	* tree-ssa-dom.c (pass_dominator): Update.
	* tree-ssa-dse.c (pass_dse): Update.
	* tree-ssa-forwprop.c (gate_forwprop): Update.
	* tree-ssa-loop-ch.c (pass_ch): Update.
	* tree-ssa-loop.c (pass_loop, pass_loop_init, pass_lim, pass_unswitch,
	pass_vectorize, pass_linear_transform, pass_iv_canon,
	pass_record_bounds, pass_complete_unroll, pass_iv_optimize, 
	pass_loop_done): Update.
	* tree-ssa-phiopt.c (pass_phiopt): Update.
	* tree-ssa-pre.c (pass_pre, pass_fre): Update.
	* tree-ssa.c (pass_redundant_phi_nodes, pass_early_warn_unitialized,
	pass_late_warn_unintialized): Update.
	* tree-tailcall.c (pass_tail_recursion, pass_tail_calls): Update.

2004-10-23  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (decide_is_variable_needed): Set externally_visible flag.
	* cgraph.h (cgraph_local_info, cgraph_varpool_node): Add
	externally_visible flags.
	(decide_is_function_needed): Set externally_visible flag.
	(cgraph_finalize_function): Mark language level entry points as reachable.
	(record_call_1): Record extern variables too.
	(cgraph_mark_local_and_external_functions): Rename to ...
	(cgraph_function_and_variable_visibility): ... this one.
	(cgraph_optimize): Update call of
	cgraph_function_and_variable_visibility.
	* common.opt (fwhole-program): Add.
	* flags.h (flag_whole_program): Declare.
	* opts.c (common_handle_option): Add OPT_fwhole_program.
	* toplev.c (flag_whole_program): Define.
	* invoke.texi (-fwhole-program): Document.

2004-10-22  Dale Johannesen <dalej@apple.com>

	* Makefile.in (value-prof.o): New dependencies on $(DIAGNOSTIC_H)
	$(TREE_H) and $(COVERAGE_H).
	* coverage.c (compute_checksum): Use DECL_NAME not DECL_ASSEMBLER_NAME.
	* opts.c (common_handle_option): Enable tree-based value transforms.
	* toplev.c (process_options): Ditto.
	* value-prof.h (struct histogram_value_t): Redefine. "Adjust" below
	refers to references to this type.
	* tree-flow.h: (struct stmt_ann_d): Add histograms field.
	* rtl-profile.c (rtl_gen_interval_profiler): Adjust. Remove checks
	for may_be_more, may_be_less.
	(rtl_gen_pow2_profiler): Adjust.
	(rtl_gen_one_value_profiler_no_edge_manip): Adjust.
	(rtl_gen_one_value_profiler): Adjust.
	(rtl_gen_const_delta_profiler): Adjust.
	* tree-profile.c (tree_gen_interval_profiler): Implement.
	(tree_gen_pow2_profiler): Ditto.
	(tree_gen_one_value_profiler): Ditto.
	(tree_profiling): New.
	(pass_tree_profile): Reference it.
	* value-prof.c: Include tree-flow.h, tree-flow-inline.h, diagnostic.h,
	tree.h, gcov-io.h.
	(insn_divmod_values_to_profile): Rename to 
	rtl_divmod_values_to_profile. Adjust.
	(insn_values_to_profile): Rename to rtl_values_to_profile. Adjust.
	(insn_prefetch_values_to_profile): Adjust.
	(rtl_value_profile_transformations): Adjust.
	(gen_divmod_fixed_value): Rename to rtl_divmod_fixed_value.
	(gen_mod_pow2): Rename to rtl_mod_pow2.
	(gen_mod_subtract): Rename to rtl_mod_subtract.
	(divmod_fixed_value_transform): Rename to 
	rtl_divmod_fixed_value_transform.
	(mod_pow2_value_transform): Rename to rtl_mod_pow2_value_transform.
	(mod_subtract_transform): Rename to rtl_mod_subtract_transform.
	(rtl_find_values_to_profile): Adjust.
	(tree_value_profile_transformations): Implement.
	(tree_divmod_values_to_profile): New.
	(tree_values_to_profile): New.
	(tree_divmod_fixed_value): New.
	(tree_mod_pow2): New.
	(tree_mod_subtract): New.
	(tree_divmod_fixed_value_transform): New.
	(tree_mod_pow2_value_transform): New.
	(tree_mod_subtract_transform): New.
	(tree_find_values_to_profile): Implement.
	* profile.c (instrument_values):  Free histograms.
	(compute_value_histograms): Adjust. Implement tree version.

2004-10-22  Jan Hubicka  <jh@suse.cz>

	Merge from mainline (tree-profiling-merge-20041022)

2004-10-17  Jan Hubicka  <jh@suse.cz>

	Merge from mainline (tree-profiling-merge-20041017)

2004-10-16  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (decide_is_variable_needed): New function.
	(cgraph_varpool_finalize_decl): Use it.
	* cgraphunit.c (cgraph_optimize): Assemble_pending_decls when not doing
	unit-at-a-time.
	* final.c (output_addr_const): Do not call mark_referenced.
	* passes.c (rest_of_decl_compilation): ifdef out DECL_RTL_SET_P hack;
	always go via cgraph.
	* toplev.c (wrapup_global_declarations): Kill non-unit-at-a-time code.
	(check_global_declarations): Ifdef out code clearing DECL_RTL.
	* tree-optimize.c (execute_inline): Mark functions called.
	* i386.c (output_pic_addr_const): Do not call mark_decl_referenced.

2004-10-11  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgraph_varpool_first_unanalyzed_node): New global voriable
	(cgraph_varpool_last_needed_node): New static variable.
	(enqueue_needed_varpool_node): Break out from ...; add items to the end of queue;
	update first pointers.
	(cgraph_varpool_mark_needed_node): ... here.
	(cgraph_varpool_finalize_decl): Use enqueue_needed_varpool_node.
	(cgraph_varpool_assemble_pending_decls): Move to cgraphunit.c
	* cgraph.h (cgraph_varpool_node): Add analyzed field.
	(cgraph_varpool_first_unanalyzed_node): Declare.
	* cgraphunit.c: Include output.h.
	(cgraph_varpool_analyze_pending_decls): New function.
	(cgraph_varpool_assemble_pending_decls): Move from cgraph.c; bail out for errors,
	analyze pending decls.
	(cgraph_finalize_compilation_unit): Only analyze decls.
	(cgraph_optimize): Assemble the decls after expanding.

	* decl2.c (finish_objects): Mark ctor as needed.
	(cp_finish_file): Output variables only in nonunit-at-a-time.

	* Make-lang.in (class.o, decl.o): Depend on cgraph.h.
	* class.c: Include cgraph.h
	(make_local_functoin_alias): Mark aslias as needed.
	* resource.c: Include cgraph.h
	(compile_resource_data): Go via cgraph interface.

2004-10-02  Jan Hubicka  <jh@suse.cz>

	* toplev.c (flag_web): Disable by default.

2004-09-30  Jan Hubicka  <jh@suse.cz>

	* tree-ssa-pre.c: Disable PRE on nops.

2004-09-26  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline.

2004-09-19  Jan Hubicka  <jh@suse.cz>

	* Merge form mainline (tree-profiling-merge-20040918)

2004-09-17  Jan Hubicka  <jh@suse.cz>

	* tree-cfg.c (thread_jumps): Fix profile updating.

2004-09-17  Jan Hubicka  <jh@suse.cz>

	* basic-block.h (update_bb_profile_after_threading): Declare.
	* cfg.c (update_bb_profile_after_threading): Break out from ...
	* cfgcleanup.c (try_forward_edges): ... here; use it.
	* tree-ssa-dom.c (thread_across_edge): Use it.
	* tree-ssa-threadupdate.c (create_block_for_threading): Zero out
	profile of the new BB.

2004-09-17  Jan Hubicka  <jh@suse.cz>

	* opts.c (common_handle_option): Disable value profiling again.

2004-09-16  Jan Hubicka  <jh@suse.cz>

	* predict.c: Synchronize with mainline.

2004-09-14  Jan Hubicka  <jh@suse.cz>

	* cfgexpand.c: Fix merge problems.

2004-09-12  Jan Hubicka  <jh@suse.cz>

	* cfgbuild.c:  Revert changes no longer needed.

2004-09-12  Jan Hubicka  <jh@suse.cz>

	Merge from mainline (tree-profiling-merge-20040912)
	
2004-09-09  Jan Hubicka  <jh@suse.cz>

	* function.c (free_after_compilation): Plug Steven's grand memory leak

2004-09-09  Jan Hubicka  <jh@suse.cz>

	Merge from mainline (tree-profile-merge-20040829)

2004-08-29  Jan Hubicka  <jh@suse.cz>

	* predict.c (predict_loops): Use number_of_iterations_exit.

2004-08-28  Razya Ladelsky  <razya@il.ibm.com>

	* ipa_prop.c: New File: IPA constant propagation. 
	* ipa_prop.h: New File: Same.
	* Makefile.in (ipa_prop.c, ipa_prop.h): Add new files.
	* common.opt (fipa-cp, fipa-no-cloning): New flags for IPA
	constant propagation. 
	* cgraphunit.c (cgraph_optimize, record_call_1): Support for IPA 
	constant propagation.

2004-08-16  Jan Hubicka  <jh@suse.cz>

	* predict.c (estimate_probability): Run BB level predictors just once per block.
	(return_prediction): Return the expected outcome.
	(apply_return_prediction): Use the expected outcome.
	* predict.def (PRED_CONST_RETURN, PRED_NEGATIVE_RETURN,
	PRED_NULL_RETURN): Fill in values matching the new implementation.

2004-08-14  Jan Hubicka  <jh@suse.cz>

	* predict.c (return_prediction): Do not predict floats.

2004-08-08  Jan Hubicka  <jh@suse.cz>

	* predict.c (apply_return_prediction): New function.
	(tree_bb_level_predictions): Use apply_return_prediction; kill old
	return prediction code.
	(tree_estimate_probability): Fix early return prediction.

2004-08-06  Jan Hubicka  <jh@suse.cz>

	* predict.c: Include tree-scalar-evolution.h and cfgloop.h
	(predict_loops): Use tree-ssa-loop-niter module to predict
	number of iterations on trees.

	* basic-block.h (struct control_flow_graph): add profile status
	(profile_status): New macro.
	* cfg.c (check_bb_profile): use profile_status
	* cfgbuild.c (find_basic_blocks): Set profile_status.
	* cfgexpand.c (tree_expand_cfg): Likewise.
	* predict.c (estimate_probability): Likewise.
	* profile.c (branch_prob): Likewise.
	* tree-cfg.c (build_tree_cfg): Likewise.

2004-08-02  Jan Hubicka  <jh@suse.cz>

	* merge from mainline (tree-profiling-merge-20040602)

2004-06-16  Jan Hubicka  <jh@suse.cz>

	* function.c (free_after_compilation): Do not free computed_goto_common*.
	* function.h (struct function): Kill computed_goto_common*.
	* stmt.c (expand_computed_goto): Do not commonize the computed gotos.
	* tree-cfg.c (disband_implicit_edges): Do not forward across the
	commonized computed goto.

2004-06-10  Steven Bosscher  <stevenb@suse.de>

	Based on patch by Stuart Hastings <stuart@apple.com>
	* Makefile.in: Add function.h to BASIC_BLOCK_H.  Remove all
	references to gt-tree-cfg.h.
	* basic-block.h (struct basic_block_def): Don't skip rbi
	for garbage collection.
	(struct reorder_block_def): Make GTY-able.
	(struct control_flow_graph): New structure.
	(n_edges, n_basic_blocks, last_basic_block, basic_block_info,
	BASIC_BLOCK, EXIT_BLOCK_PTR, ENTRY_BLOCK_PTR): No longer vars,
	but instead defines to the control_flow_graph for cfun.
	(label_to_block_map): New define, points to the label map of
	the control_flow_graph for cfun.
	(n_edges_for_function, n_basic_blocks_for_function,
	last_basic_block_for_function, basic_block_info_for_function,
	EXIT_BLOCK_PTR_FOR_FUNCTION, ENTRY_BLOCK_PTR_FOR_FUNCTION,
	basic_block_info_for_function, label_to_block_map_for_function):
	Counterparts for the above, taking a struct function as an extra
	argument.
	(alloc_rbi_pool, free_rbi_pool): Remove prototypes.
	* cfg.c: Include function.h.
	(n_edges, n_basic_blocks, last_basic_block,
	basic_block_info, ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR): Remove.
	(alloc_rbi_pool, free_rbi_pool): Remove.
	(initialize_bb_rbi): Use ggc_alloc_cleared instead of pool_alloc.
	* cfganal.c, cfgloopanal.c, cfghooks.c, conflict.c, dominance.c,
	loop-doloop.c, loop-init.c, loop-iv.c, loop-unroll.c,
	loop-unswitch.c, sbitmap.c, tracer.c, var-tracking.c,
	tree-complex.c, tree-flow.h, tree-phinodes.c, tree-sra.c,
	tree-ssa-ccp.c, tree-ssa-dce.c, tree-ssa-dse.c, tree-ssa-forwprop.c,
	tree-ssa-phiopt.c, tree-ssa-pre.c: include function.h.
	* cfglayout.c: Likewise.
	(cfg_layout_initialize): Don't allocate the rbi pool here...
	(cfg_layout_finalize) ...and don't free it here.
	(copy_bbs): Rename n_edges to num_edges.
	* cfgloop.c: Include function.h.
	(get_loop_exit_edges): Rename n_edges to num_edges.
	* cfgloopmanip: Include function.h.
	(fix_irreducible_loops): Rename n_edges to num_edges.
	(unloop): Likewise.
	* cfgrtl.c (cfg_layout_delete_block): Zero out rbi so it gets
	garbage collected.
	* flow.c (free_basic_block_vars): Set label_to_block_map and
	n_edges to zero too.
	* function.h (struct function): Add cfg field.
	* function.c (allocate_struct_function): Allocate the cfg.
	* tree-cfg.c (label_to_block_map): Remove.
	(build_tree_cfg): Don't allocate the rbi pool here...
	(delete_tree_cfg_annotations): ...and don't free it here.
	Also don't nullify label_to_block_map for cfun.
	(dump_cfg_stats): Rename n_edges to num_edges.

2004-06-04  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20040602)

2004-05-27  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20040527)

2004-05-26  Steven Bosscher  <stevenb@suse.de>

	* profile.def (PRED_MUDFLAP): New predictor.
	* tree-mudflap.c (mf_build_check_statement_for): Use the new
	predictor instead of PRED_BUILTIN_EXPECT.

2004-05-25  Steven Bosscher  <stevenb@suse.de>

	* cfgexpand.c (expand_block): Expect an edge that has been removed
	to point to free()ed memory.

2004-05-21  Steven Bosscher  <stevenb@suse.de>

	* tree-mudflap.c (mf_decl_cache_locals): Skip labels before
	inserting the cache variables.

	* tree-mudflap.c: Include headers to make basic_block available.
	Move functions around such that related functions are near each
	other.  Add prototypes for all static functions.  Add comments
	briefly explaining what IR the mudflap1 and mudflap2 work on and
	what they do.
	(mudflap_function_decls): Rename to execute_mudflap_function_decls.
	(mudflap_function_ops): Rename to execute_mudflap_function_ops.
	(pass_mudflap_1, pass_mudflap_2): Update.
	(mf_decl_cache_locals): Make it work on the CFG instead of the saved
	function tree.
	(mf_build_check_statement_for): Make it work on the CFG.
	(mf_xform_derefs_1): Likewise.  Cleanup code style.
	(mf_xform_derefs): Likewise.
	* tree-optimize.c (init_tree_optimization_passes):
	Move pass_mudflap_2 before pass_del_cfg.

2004-05-18  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline (tree-profiling-merge-20040518)

2004-04-29  Jan Hubicka  <jh@suse.cz>

	* Merge from tree-ssa.

2004-04-21  Jan Hubicka  <jh@suse.cz>

	* cfgexpand.c (add_reg_br_prob_note): Deal with condjump around jump case.
	(expand_block): Compute return block frequencies correctly.

2004-04-19  Jan Hubicka  <jh@suse.cz>

	* basic-block.h (guess_outgoing_edge_probabilities): Declare.
	* cfgbuild.c (compute_outgoing_frequencies): Use it.
	* predict.c (bb_estimate_probability_locally): Break out from ...
	(estimate_probability): ... this one.
	(guess_outgoing_edge_probabilities): New function.
	(set_even_probabilities): Break out from ...
	(combine_predictions_for_bb): ... here.

2004-04-19  Jan Hubicka  <jh@suse.cz>

	* predict.c (counts_to_freqs): Make global.
	(tree_estimate_probability): Bail out when profile has been read.
	* predict.h (counts_to_freqs): Declare.
	* profile.c (compute_branch_probabilities): Use it.

2004-04-18  Jan Hubicka  <jh@suse.cz>

	* tree-cfg.c (tree_split_edge, thread_jumps): Update the profile.
	* tree-ssa-dce.c (remove_dead_stmt): Likewise.
	* tree-ssa-dom.c (redirect_edges_and_update_ssa_graph): Fix comment.
	(thread_across_edge): Update the profile.

2004-04-18  Jan Hubicka  <jh@suse.cz>

	* predict.c (combine_predictions_for_bb): Fix pasto.

2004-04-18  Jan Hubicka  <jh@suse.cz>

	* cfgexpand.c (add_reg_br_prob_note): New debug output.
	(expand_block): Pass file argument.
	(construct_exit_block): Properly compute frequencies of exit block.
	(tree_expand_cfg): Output function name being lowered.

2004-04-18  Jan Hubicka  <jh@suse.cz>

	* basic-block.h (check_bb_profile):  Declare.
	* cfg.c (check_bb_function):  Break out from...
	(dump_flow_info): This one.
	* tree-cfg.c (dump_function_to_file): Use it.
	* tree-pretty-print.c (dump_bb_header): Likewise.

2004-04-04  Jan Hubicka  <jh@suse.cz>

	* predict.c (tree_estimate_probability): Fix early return predictor.

2004-04-04  Jan Hubicka  <jh@suse.cz>

	* cfgbuild.c (control_flow_insn_p): Sibling call is control flow.
	* cfgexpand.c (expand_block): Reprganize call_stmt expansion to handle
	sqrt builtin.

2004-04-03  Jan Hubicka  <jh@suse.cz>

	* tree-cfg.c (tree_block_ends_with_call_p,
	tree_block_ends_with_condjump_p):  Do not segfault on empty blocks.

2004-04-02  Jan Hubicka  <jh@suse.cz>

	* builtins.def (expect): Make const/notrhow.
	* predict.c (process_note_prediction): Rename to:
	(predict_paths_leading_to): ... this one.
	(expr_expected_value): New function.
	(tree_predict_by_opcode): Analyze builtin_expect.
	(return_prediction): New function.
	(tree_bb_level_predictions): New function.
	(strip_builtin_expect): New function.
	(tree_esitmate_probability): Add noreturn edges; do
	bb_level_predictions; enable return heuristics; strip
	builtin_expect_calls.

2004-03-31  Jan Hubicka  <jh@suse.cz>

	* cfgbuild.c (control_flow_insn_p):  Conditional noreturn call is not
	control flow insn.

2004-03-31  Jan Hubicka  <jh@suse.cz>

	* Merge from tree-ssa (tree-profiling-merge-20030330)

2004-03-18  Jan Hubicka  <jh@suse.cz>

	* predict.c (tree_estimate_probability): Temporarily disable return
	predictor.

2004-03-18  Jan Hubicka  <jh@suse.cz>

	* predict.c (propagate_freq): Compute correctly frequency of
	EXIT_BLOCK.

2004-03-18  Jan Hubicka  <jh@suse.cz>

	* merge with tree-ssa branch.

2004-03-17  Jan Hubicka  <jh@suse.cz>

	* tree-optimize.c (pass_cleanup_cfg): New.
	(init_tree_optimization_passes): add cleanupcfg pass after profilng.

2004-03-16  Jan Hubicka  <jh@suse.cz>

	* cfgexpand.c (expand_block): DO not expand COND_EXPR twice;
	fix profile updating.
	(construct_init_block, construct_exit_block): Fix profile updating.

2004-03-16  Jan Hubicka  <jh@suse.cz>

	* opts.c (common_handle_option): Disable value profilng until it is
	updated for tree-ssa.

2004-03-15  Jan Hubicka  <jh@suse.cz>

	* gimple-low.c (lower_cond_expr):  Do not re-use explicit gotos.
	* profile.c (branch_prob): Do not verify flow info; re-invent fallthru
	flags on trees; output coverage info for trees.
	* toplev.c (flag_tree_based_profiling): Enable it by default.
	(process_options): Do not sorry about coverage on trees.
	* tree-cfg.c (make_edges): Only delete unreachable block or mess the
	coverage info.
	(make_goto_expr_edges): Preserve locators for elliminated explicit
	gotos.
	(tree_find_edge_insert_loc): Deal with inserting just before return
	statement.
	* tree-optimize.c (init_tree_optimization_passes): Make tree-profilng
	to be run even when not optimizing.
	* tree-profile.c (do_tree_profiling): Don't run profilng when we are
	not profilng.

2004-03-15  Jan Hubicka  <jh@suse.cz>

	* cfgrtl.c (rtl_create_basic_block): Pre-allocate basic_block_info
	array.

2004-03-15  Jan Hubicka  <jh@suse.cz>

	* cfgexpand.c (tree_expand_cfg): Do not cleanup control flow.

2004-03-15  Jan Hubicka  <jh@suse.cz>

	* cfgcleanup.c (try_forward_edges): Take into account PRE_LOOP flag
	only when loop optimizer is run.

2004-03-14  Jan Hubicka  <jh@suse.cz>

	* tree-ssa.c (rewrite_into_ssa, compute_global_livein): Fix.

2004-03-14  Jan Hubicka  <jh@suse.cz>

	* opts.c (decode_options): Disable flag_loop_optimize.

2004-03-07  Jan Hubicka  <jh@suse.cz>

	* except.c (emit_to_new_bb_before):  Break fallthru edges.

	* except.c (can_throw_internal): Notice RESX instructions.

	* cfgexpand.c (tree_expand_cfg): Do not destroy the CFG.
	* passes.c (rest_of_compilation):  Do not call init_flow;
	do not build CFG.
	* tree-cfg.c (delete_tree_cfg_annotations): Clear RBI pointers.

	* tree-cfg.c (label_to_block): Emit missing langes
	* tree-optimize.c (tree_rest_of_compilation): Revert patch disabling
	compilation with errorcount/sorrycount.

2004-03-05  Steven Bosscher  <stevenb@suse.de>

	* cfgexpand.c (expand_block, construct_init_block): Minor code
	cleanups.  Use macros from tree.h.  Use extract_true_false_edge.
	Comment updates.

	* version.c: Rename to tree-profiling.

2004-03-03  Jan Hubicka  <jh@suse.cz>

	* Merge from tree-ssa (tree-profilng-merge-20040303)

2004-02-25  Stuart Hastings  <stuart@apple.com>

	* gimple-low.c (expand_var_p) Remove redundant call.
	
2004-02-25  Stuart Hastings  <stuart@apple.com>

	* tree-optimize.c (execute_inline) New.
	Make inliner into a PASS, move after first gimplification step.
	
2004-02-22  Jan Hubicka  <jh@suse.cz>

	* Merge from tree-ssa (tree-profilng-merge-20040222)

2004-02-22  Jan Hubicka  <jh@suse.cz>

	* cfgexpand.c:  Include flags.h
	(tree_expand_cfg): Do cleanup only when optimizing.
	* tree-optimize.c (init_tree_optimization_passes): Always build cfg.
	(tree_rest_of_compilation): Don't get into RTL when errorcount/sorrycount
	is set.

2004-02-21  Jan Hubicka  <jh@suse.cz>

	* Makefile.in (builtins.o): Include basic-blocks.h.
	(cfgexpand.o): New file.
	* builtins.c: Inlucde basic-blocks.h
	(entry_of_function): New static function.
	(expand_builtin_saveregs, expand_builtin_apply_args): Use it.
	* cfgexpand.c: New file.
	* tree-cfg.c (cleanup_control_flow): Make global.
	(delete_tree_annotations): Break out from...
	(delete_tree_cfg): ... this one.
	* tree-dump.c (dump_files): Add expanded.
	* tree-flow.h (delete_tree_cfg_annotations): Declare.
	(tree_expand_cfg, cleanup_control_flow): Declare.
	* tree-optimize.c (execute_del_cfg): Do not delete the basic block
	datastructure.
	(tree_rest_of_compilation): Use tree_expand_cfg if needed.

2004-02-20  Jan Hubicka  <jh@suse.cz>

	* cfgcleanup.c (try_optimize_cfg): Do not merge blocks separated by
	tablejump.

	* tree-cfg.c (cleanup_control_expr_graph): Update profile.

	* tree-cfg.c (disband_implicit_edges): Set fallthru edges correctly.

	* cfg.c (dump_flow_info): Work on trees too.

	* tree-pretty-print.c (dump_generic_bb_stuff):  Do not touch bb
	annotations when not allocated.

2004-02-16  Jan Hubicka  <jh@suse.cz>

	* Merge from tree-ssa branch  (tree-profilng-merge-20040216)

2004-02-16  Jan Hubicka  <jh@suse.cz>

	* cfgbuild.c (find_bb_boundaries): Add extra argument.
	collect list of labels whose address has been taken
	(control_flow_insn_p): Recognize noreturn call instructions
	and EH instructions followed by barrier as control flow insns.

