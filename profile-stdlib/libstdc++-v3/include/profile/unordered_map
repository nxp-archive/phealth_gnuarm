// Profiling unordered_map/unordered_multimap implementation -*- C++ -*-

// Copyright (C) 2003, 2004, 2005, 2006, 2007
// Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

/** @file profile/unordered_map
 *  This file is a GNU profile extension to the Standard C++ Library.
 */

#ifndef _GLIBCXX_PROFILE_UNORDERED_MAP
#define _GLIBCXX_PROFILE_UNORDERED_MAP 1

#include <profile/base.h>

#ifdef __GXX_EXPERIMENTAL_CXX0X__
# include <unordered_map>
#else
# include <c++0x_warning.h>
#endif

#define _GLIBCXX_BASE unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>
#define _GLIBCXX_STD_BASE _GLIBCXX_STD_PR::_GLIBCXX_BASE

namespace std
{
namespace __profile
{
  template<typename _Key, typename _Tp,
	   typename _Hash  = std::hash<_Key>,
	   typename _Pred = std::equal_to<_Key>,
	   typename _Alloc =  std::allocator<_Key> >
    class unordered_map
    : public _GLIBCXX_STD_BASE
    {
      typedef typename _GLIBCXX_STD_BASE _Base;

    public:
      typedef typename _Base::size_type       size_type;
      typedef typename _Base::hasher          hasher;
      typedef typename _Base::key_equal       key_equal;
      typedef typename _Base::allocator_type  allocator_type;
      typedef typename _Base::key_type        key_type;
      typedef typename _Base::value_type      value_type;
      typedef typename _Base::difference_type difference_type;
      typedef typename _Base::reference       reference;
      typedef typename _Base::const_reference const_reference;
      typedef typename _Base::mapped_type      mapped_type;
      typedef std::pair<typename _Base::iterator, bool> pair_type;
      typedef typename _Base::insert_return_type insert_return_type;

      typedef typename _Base::iterator iterator;
      typedef typename _Base::const_iterator const_iterator;

      explicit
      unordered_map(size_type __n = 10,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _Base(__n, __hf, __eql, __a)
      {
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }

      template<typename _InputIterator>
        unordered_map(_InputIterator __f, _InputIterator __l,
              size_type __n = 10,
              const hasher& __hf = hasher(),
              const key_equal& __eql = key_equal(),
              const allocator_type& __a = allocator_type())
      : _Base(__f, __l, __n, __hf, __eql, __a)
      {
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }

      unordered_map(const _Base& __x)
      : _Base(__x) 
      { 
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }

      unordered_map(unordered_map&& __x)
      : _Base(std::forward<_Base>(__x)) 
      {
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }

      ~unordered_map()
      {
        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());
      }

      unordered_map&
      operator=(unordered_map&& __x)
      {
        // NB: DR 675.
        _Base::clear();
        _Base::swap(__x);
        return *this;
      }

      _Base&
      _M_base()       { return *this; }

      const _Base&
      _M_base() const { return *this; }


      void
      clear()
      {
        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());
	    _Base::clear();
      }
     
       insert_return_type
      insert(const value_type& __obj)
      {
        size_type old_size =  _Base::bucket_count();
        insert_return_type __res = _Base::insert(__obj);
        profile_resize(this, old_size,  _Base::bucket_count()); 
        return __res;
      }
      iterator
      insert(iterator __iter, const value_type& __v)
      { 
        size_type old_size = _Base::bucket_count(); 
        iterator res = _Base::insert(__iter, __v);
        profile_resize(this, old_size,  _Base::bucket_count()); 
        return res;
      }

      const_iterator
      insert(const_iterator __iter, const value_type& __v)
      { 
        size_type old_size = _Base::bucket_count(); 
        const_iterator res =_Base::insert(__iter, __v);
        profile_resize(this, old_size,  _Base::bucket_count()); 
        return res;
      }

      template<typename _InputIter>
      void
      insert(_InputIter __first, _InputIter __last)
      {
        size_type old_size = _Base::bucket_count(); 
        _Base::insert(__first.base(), __last.base());
        profile_resize(this, old_size,  _Base::bucket_count()); 
      }

      void
      insert(const value_type* __first, const value_type* __last)
      {
        size_type old_size = _Base::bucket_count(); 
        _Base::insert(__first, __last);
        profile_resize(this, old_size,  _Base::bucket_count()); 
      }
     
      // operator []
      mapped_type&
      operator[](const _Key& _k)
      {
        size_type old_size =  _Base::bucket_count();
        mapped_type& __res = _M_base()[_k];
        size_type new_size =  _Base::bucket_count();
        profile_resize(this, old_size,  _Base::bucket_count()); 
        return __res;
      }   
      void
      swap(unordered_map&& __x)
      {
        _Base::swap(__x);
      }
      
      void rehash(size_type __n)
      {
        size_type old_size =  _Base::bucket_count();
        _Base::rehash(__n);
        profile_resize(this, old_size,  _Base::bucket_count()); 
      }
    private:
      void profile_resize(void* obj, size_type old_size, size_type new_size)
      {
        if (old_size != new_size)
        {
          __profcxx_hashtable_resize(this, old_size, new_size);
        }
     }
   };
  template<typename _Key, typename _Tp, typename _Hash,
       typename _Pred, typename _Alloc>
    inline void
    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
     unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { __x.swap(__y); }

  template<typename _Key, typename _Tp, typename _Hash,
       typename _Pred, typename _Alloc>
    inline void
    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&& __x,
     unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { __x.swap(__y); }

  template<typename _Key, typename _Tp, typename _Hash,
       typename _Pred, typename _Alloc>
    inline void
    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
     unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&& __y)
    { __x.swap(__y); }

#undef _GLIBCXX_BASE
#undef _GLIBCXX_STD_BASE
#define _GLIBCXX_BASE unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>
#define _GLIBCXX_STD_BASE _GLIBCXX_STD_PR::_GLIBCXX_BASE

  template<typename _Key, typename _Tp,
	   typename _Hash  = std::hash<_Key>,
	   typename _Pred = std::equal_to<_Key>,
	   typename _Alloc =  std::allocator<_Key> >
    class unordered_multimap
    : public _GLIBCXX_STD_BASE
    {      
      typedef typename _GLIBCXX_STD_BASE _Base;

    public:
      typedef typename _Base::size_type       size_type;
      typedef typename _Base::hasher          hasher;
      typedef typename _Base::key_equal       key_equal;
      typedef typename _Base::allocator_type  allocator_type;
      typedef typename _Base::key_type        key_type;
      typedef typename _Base::value_type      value_type;
      typedef typename _Base::difference_type difference_type;
      typedef typename _Base::reference       reference;
      typedef typename _Base::const_reference const_reference;
      typedef std::pair<typename _Base::iterator, bool> pair_type;
      typedef typename _Base::insert_return_type insert_return_type;

      typedef typename _Base::iterator iterator;
      typedef typename _Base::const_iterator const_iterator;

      explicit
      unordered_multimap(size_type __n = 10,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _Base(__n, __hf, __eql, __a)
      {
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }
      template<typename _InputIterator>
        unordered_multimap(_InputIterator __f, _InputIterator __l,
              size_type __n = 10,
              const hasher& __hf = hasher(),
              const key_equal& __eql = key_equal(),
              const allocator_type& __a = allocator_type())
      : _Base(__f, __l, __n, __hf, __eql, __a)
      {
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }

      unordered_multimap(const _Base& __x)
      : _Base(__x)
      {
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }

      unordered_multimap(unordered_multimap&& __x)
      : _Base(std::forward<_Base>(__x))
      {
        __profcxx_hashtable_construct(this, _Base::bucket_count());
      }

      ~unordered_multimap()
      {
        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());
      }

      _Base&
      _M_base()       { return *this; }

      const _Base&
      _M_base() const { return *this; }


      void
      clear()
      {
        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());
        _Base::clear();
      }

      insert_return_type
      insert(const value_type& __obj)
      {
        size_type old_size =  _Base::bucket_count();
        insert_return_type __res = _Base::insert(__obj);
        profile_resize(this, old_size,  _Base::bucket_count()); 
        return __res;
      }
      iterator
      insert(iterator __iter, const value_type& __v)
      { 
        size_type old_size = _Base::bucket_count(); 
        iterator res = _Base::insert(__iter, __v);
        profile_resize(this, old_size,  _Base::bucket_count()); 
        return res;
      }

      const_iterator
      insert(const_iterator __iter, const value_type& __v)
      { 
        size_type old_size = _Base::bucket_count(); 
        const_iterator res =_Base::insert(__iter, __v);
        profile_resize(this, old_size,  _Base::bucket_count()); 
        return res;
      }

      template<typename _InputIter>
      void
      insert(_InputIter __first, _InputIter __last)
      {
        size_type old_size = _Base::bucket_count(); 
        _Base::insert(__first.base(), __last.base());
        profile_resize(this, old_size,  _Base::bucket_count()); 
      }

      void
      insert(const value_type* __first, const value_type* __last)
      {
        size_type old_size = _Base::bucket_count(); 
        _Base::insert(__first, __last);
        profile_resize(this, old_size,  _Base::bucket_count()); 
      }

      unordered_multimap&
      operator=(unordered_multimap&& __x)
      {
        // NB: DR 675.
        _Base::clear();
        _Base::swap(__x);
        return *this;
      }

      void
      swap(unordered_multimap&& __x)
      {
        _Base::swap(__x);
      }

      void rehash(size_type __n)
      {
        size_type old_size =  _Base::bucket_count();
        _Base::rehash(__n);
        profile_resize(this, old_size,  _Base::bucket_count()); 
      }
    private:
      void profile_resize(void* obj, size_type old_size, size_type new_size)
      {
        if (old_size != new_size)
        {
          __profcxx_hashtable_resize(this, old_size, new_size);
        }
     }
    };
  template<typename _Key, typename _Tp, typename _Hash,
       typename _Pred, typename _Alloc>
    inline void
    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
     unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { __x.swap(__y); }

  template<typename _Key, typename _Tp, typename _Hash,
       typename _Pred, typename _Alloc>
    inline void
    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&& __x,
     unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { __x.swap(__y); }

  template<typename _Key, typename _Tp, typename _Hash,
       typename _Pred, typename _Alloc>
    inline void
    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
     unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&& __y)
    { __x.swap(__y); }

} // namespace __profile
} // namespace std

#undef _GLIBCXX_BASE
#undef _GLIBCXX_STD_BASE

#endif
