2007-06-12  Ira Rosen  <irar@il.ibm.com>

	Reverted revisions 122088, 120826, 120824.

2007-06-08  Ira Rosen  <irar@il.ibm.com>

	Backport from mainline:

	2007-05-03  Dorit Nuzman  <dorit@il.ibm.com>

	PR tree-optimization/31699
	* tree-vect-analyze.c (vect_update_misalignment_for_peel): Remove wrong
	code.
	(vect_enhance_data_refs_alignment): Compute peel amount using
	TYPE_VECTOR_SUBPARTS instead of vf.
	* tree-vect-transform.c (vect_gen_niters_for_prolog_loop): Likewise.

2007-06-07  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-transform.c (vectorizable_load): Fix assert (accidentally
	left out from previous commit)

2007-06-07  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_compute_data_ref_alignment): Don't fail if
	the inner step doesn't divide the vector-size. Change verbosity level.
	* tree-vect-transform.c (vect_create_data_ref_ptr): Fix a typo.
	(vect_setup_realignment): Takes additional argument. Handle the case
	when the realignment setup needs to take place inside the loop.
	(vectorizable_load): Call vect_setup_realignment with additional
	argument. Handle the case when the realignment setup needs to take 
	place inside the loop.

2007-06-05  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vectorizer.c (vect_supportable_dr_alignment): Misaligned
	accesses now supported for inner-loop references within outer-loop
	vectorization.
	* tree-vectorizer.h (dr_alignment_support): Renamed
	dr_unaligned_software_pipeline to dr_explicit_realign_optimized.
	Added a new value dr_explicit_realign.
	* tree-vect-trasnform.c (vect_setup_realignment): Takes additional
	argument dr_alignment_support.
	(vect_create_data_ref_ptr): Added comment and an assert.
	(bump_vector_ptr): Updated to support the new dr_explicit_realign
	scheme: takes additional argument bump; argument ptr_incr is now
	optional; updated documentation.
	(vectorizable_store): Fix typos. Call bump_vector_ptr with additional
	argument.
	(vect_setup_realignment): Support the dr_explicit_realign scheme. Takes
	additional argument alignment_support_scheme. Updated documentation.
	(vectorizable_load): Fix typos. Support the dr_explicit_realign scheme.
	Support misaligned inner-loop references within outer-loop
	vectorization.  Call vect_setup_realignment with additional argument.
	Call bump_vector_ptr with additional argument.

2007-06-05  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-scalar-evolutions.c (number_of_latch_executions_1): New.
	Contains code that was factored out from number_of_latch_executions.
	(number_of_latch_executions): Call number_of_latch_executions_1
	instead of code that was factored out.
	(number_of_exit_cond_executions): Takes additional argument
	may_be_zero. Call  number_of_latch_executions_1 instead of
	number_of_latch_executions.	
	* tree-scalar-evolutions.h (number_of_latch_executions_1): New.
	(number_of_exit_cond_executions): Takes additional argument.
	* tree-vect-analyze.c (vect_analyze_operations): Avoid vectorization
	in case the loop-bound is a COND_EXPR and peeling needs to be done.
	(vect_get_loop_niters): Call number_of_exit_cond_executions with
	additional argument may_be_zero. Use it to build a (potentially)
	conditional expression for the loop niters.	

	* tree-vect-transform.c (vect_generate_tmps_on_preheader): Remove
	redundant code.

2007-05-28  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_analyze_data_ref_access): Don't fail on 
	zero step in the outer-loop for loads.
	* tree-vect-transform.c (vect_create_data_ref_ptr): Takes additional
	argument (inv_p). Support zero step in the outer-loop.
	(vect_init_vector): Takes additional argument (bsi). Use it, if
	available, to insert the vector initialization.
	(get_initial_def_for_induction): Pass additional argument in call to
	vect_init_vector.
	(vect_get_vec_def_for_operand): Likewise.
	(vectorizable_store): Pass additional argument in call to
	vect_create_data_ref_ptr.
	(vect_setup_realignment): Likewise.
	(vectorizable_load): Likewise. Handle invariant load.

2007-05-22  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-transform.c (vect_create_addr_base_for_vector_ref): Takes
	additional argument loop. Updated the function documentation. Handle
	the 'nested_in_vect_loop' case (the case when the dataref is in an
	inner-loop nested in an outer-loop that is now being vectorized).
	(vect_create_data_ref_ptr): Call vect_create_addr_base_for_vector_ref
	with additional argument. Handle the 'nested_in_vect_loop' case.
	(vectorizable_load): Handle the 'nested_in_vect_loop' case.
	(vectorizable_store): Handle the 'nested_in_vect_loop' case.
	(vect_gen_niters_for_prolog_loop): Call
	vect_create_addr_base_for_vector_ref with additional argument.
	(vect_create_cond_for_align_checks): Likewise.
	* tree-vect-analyze.c (vect_compute_data_ref_alignment): Handle the
	'nested_in_vect_loop' case.
	(vect_analyze_data_ref_access): Likewise.
	(vect_analyze_data_refs): Likewise. Call split_constant_offset.
	* tree-vectorizer.c (new_stmt_vec_info): Initialize new fields.
	(vect_supportable_dr_alignment): Handle the 'nested_in_vect_loop' case.
	* tree-vectorizer.h (_stmt_vec_info): Added new fields:
	dr_base_address, dr_init, dr_offset, dr_step, and dr_aligned_to, along
	with new access functions for these fields: STMT_VINFO_DR_BASE_ADDRESS,
	STMT_VINFO_DR_INIT, STMT_VINFO_DR_OFFSET, STMT_VINFO_DR_STEP, and
	STMT_VINFO_DR_ALIGNED_TO.
	* tree-data-refs.c (split_constant_offset): New (brought over from
	mainline).
	* tree-data-refs.h (split_constant_offset): Likewise.

2007-05-22  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vectorizer.c (vect_is_simple_use): Remove multitypes check.
	Moved to vectorizable_* functions.
	* tree-vect-transform.c (vectorizable_reduction): Call
	nested_in_vect_loop_p. Check for multitypes in the inner-loop.
	(vectorizable_call): Likewise.
	(vectorizable_conversion): Likewise.
	(vectorizable_operation): Likewise.
	(vectorizable_type_promotion): Likewise.
	(vectorizable_type_demotion): Likewise.
	(vectorizable_store): Likewise.
	(vectorizable_load): Likewise.
	(vectorizable_live_operation): Likewise.

	* tree-vectorizer.c (supportable_widening_operation): Also check if
	used by an outer-loop reduction.
	(vect_is_simple_reduction): Takes a loop_vec_info as argument instead
	of struct loop. Call nested_in_vect_loop_p and don't require
	flag_unsafe_math_optimizations if it returns true.
	* tree-vectorizer.h (vect_is_simple_reduction): Takes a loop_vec_info
	as argument instead of struct loop.
	* tree-vect-analyze.c (vect_analyze_scalar_cycles_1): New function.
	Same code as what used to be vect_analyze_scalar_cycles, only with
	additional argument loop, and loop_info passed to
	vect_is_simple_reduction instead of loop.
	(vect_analyze_scalar_cycles): Codee factored out into
	vect_analyze_scalar_cycles_1. Call it for each relevant loop-nest.
	Updated documentation.
	(vect_mark_stmts_to_be_vectorized): 'relevant' doen't change to
	vect_used_by_reduction in case it is vect_used_in_outer*.
	(vect_analyze_loop_1): Don't call vect_analyze_scalar_cycles.
	* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Check if there
	are uses in the loop.
	* tree-vect-transform.c (vectorizable_reduction): pass loop_info to
	vect_is_simple_reduction instead of loop.

	* tree-vect-analyze.c (process_use): Remove printouts.
	* tree-vect-transform.c (get_initial_def_for_induction): Fix
	indentation.
	
	* tree-vectorizer.h (nested_in_vect_loop_p): New function.
	* tree-vect-transform.c (vect_init_vector): Call nested_in_vect_loop_p.
	(get_initial_def_for_reduction): Likewise.
	(vect_create_epilog_for_reduction): Likewise.

2007-05-02  Victor Kaplansky <victork@il.ibm.com>
	
	Merged the following revisions from
	svn+ssh://gcc.gnu.org/svn/gcc/trunk
          123210-123860
	  123861-123909
	  123910-123942
	  123943-123947
	  123948-123954
	  123955-124330


2007-04-02  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vectorizer.c (new_stmt_vec_info): When setting def_type for
	phis differentiate loop-header phis from other phis.
	(bb_in_loop_p): New function.
	(new_loop_vec_info): Inner-loop phis already have a stmt_vinfo, so just
	update their loop_vinfo.  Order of BB traversal now matters - call
	dfs_enumerate_from with bb_in_loop_p.
	(destroy_loop_vec_info): Takes additional argument to control whether
	stmt_vinfo of the loop stmts should be destroyed as well.
	(vect_is_simple_use): Check for multiple-types in inner-loop (currently
	not supported during outer-loop vectorization).
	(vect_is_simple_reduction): Allow the "non-reduction" use of a
	reduction stmt to be defines by a non loop-header phi.
	(vectorize_loops): Call destroy_loop_vec_info with additional argument.
	* tree-vectorizer.h (vect_relevant): Add enum values
	vect_used_in_outer_by_reduction and vect_used_in_outer.
	(is_loop_header_bb_p): New. Used to differentiate loop-header phis
	from other phis in the loop.
	(destroy_loop_vec_info): Add additional argument to declaration.
	* tree-vect-analyze.c (analyze_operations): Check for inner-loop
	loop-closed exit-phis during outer-loop vectorization that are live or
	not used in the outerloop, cause this requires special handling.
	(vect_enhance_data_refs_alignment): Don't consider versioning for
	nested-loops.
	(vect_analyze_data_refs): Check that there are no datarefs in the
	inner-loop.
	(vect_mark_stmts_to_be_vectorized): Also consider vect_used_in_outer
	and vect_used_in_outer_by_reduction cases.
	(process_use): Also consider the case of outer-loop stmt defining an
	inner-loop stmt.
	(vect_analyze_loop_1): New function.
	(vect_analyze_loop_form): Extend, to allow a restricted form of nested
	loops.  Call vect_analyze_loop_1.
	(vect_analyze_loop): Skip (inner-)loops within outer-loops that have
	been vectorized.  Call destroy_loop_vec_info with additional argument.
	* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Add check for
	GIMPLE_MODIFY_STMT (in case we encounter a phi in the loop).
	* tree-vect-transform.c (vect_init_vector): Check which loop to work
	with, in case there's an inner-loop.
	(get_initial_def_for_inducion): Extend to handle outer-loop
	vectorization.
	(vect_get_vec_def_for_operand): Support phis in the case vect_loop_def.
	In the case vect_induction_def get the vector def from the induction
	phi node (instead of calling get_initial_def_for_inducion.
	(vect_finish_stmt_generation): Support the case that the new stmt is
	to be added after a label (rather than before some other stmt).
	(get_initial_def_for_reduction): Extend to handle outer-loop
	vectorization.
	(vect_create_epilog_for_reduction): Extend to handle outer-loop
	vectorization.
	(vectorizable_reduction): Check for multiple-types in inner-loop
	(currently not supported during outer-loop vectorization).
	(vect_transform_loop): Change assert to just skip this case.  Add a
	dump printout.

2007-03-28  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vectorizer.h (_loop_vec_info): Remove unused field exit_cond.
	(stmt_vec_info_type): Add enum value loop_exit_ctrl_vec_info_type.
	* tree-vectorizer.c (new_loop_vec_info): Remove setting of
	LOOP_VINFO_EXIT_COND.
	* tree-vect-analyze.c (vect_stmt_relevant_p): Replace use of
	LOOP_VINFO_EXIT_COND with use of loop_exit_ctrl_vec_info_type.
	(vect_analyze_loop_form): Likewise.

	* tree-vectorizer.h (stmt_vec_info_type): Add enum value
	induc_vec_info_type.
	(vectorizable_induction): New function declaration.
	* tree-vect-transform.c (get_initial_def_for_induction): No need to
	check if already vectorized.  Find first place in BB where nre stmts
	can be inserted.
	(vectorizable_induction): New function.
	(vect_transform_stmt): Add case for induc_vec_info_type to call
	vectorizable_induction.
	(vect_transform_loop): Consider phis for vectorization.
	* tree-vect-analyze.c (analyze_operations): Call
	vectorizable_induction when analyzing phis and when analyzing
	stmts.

	* tree-vectorizer.c (vect_is_simple_use): Remove redundant check.
	(destroy_loop_vec_info): Set loop->aux to NULL.

	* tree-vect-analyze.c (vect_determine_vectorization_factor): Simplify
	condition. Add dump print.
	(vect_analyze_operations): Fix indenetation.  Fix a comment.  Fix a
	print message.
	(vect_analyze_scalar_cycles): Fix indentation.
	(vect_enhance_data_refs_alignment): Fix check in case of peeling.
	(vect_mark_relevant): Include phis in relevance analysis.
	(process_use): New function.
	(vect_mark_stmts_to_be_vectorized): Factor out code to process_use.
	Check phis in all bbs.

	* tree-vect-patterns.c (widened_name_p): Remove redundant check.

	* tree-vect-analyze.c (vect_analyze_operations): Reorganize calls to
	vectorizable_* functions.
	* tree-vect-transform.c (vectorizable_call): Add check for
	STMT_VINFO_RELEVANT_P, STMT_VINFO_DEF_TYPE and STMT_VINFO_LIVE_P.
	(vectorizable_store): likewise.
	(vectorizable_conversion): Add check for STMT_VINFO_DEF_TYPE.
	Add comments.
	(vectorizable_operation, vectorizable_type_demotion): Likewise.
	(vectorizable_type_promotion, vectorizable_load): Likewise.
	(vectorizable_live_operation, vectorizable_condition): Likewise.
	(vectorizable_assignment): Add check for STMT_VINFO_DEF_TYPE and
	STMT_VINFO_LIVE_P.
	(vect_transform_stmt): Reorganize calls to vectorizable_* functions.
	(vect_analyze_loop_form): Use the new NITERS_KNOWN_P macro so that
	this check could be done without creating a loop_vinfo first.  Record
	loop_vinfo in loop->aux.

	* tree-vect-transform.c (get_initial_def_for_reduction): Clean away
	the unused code for reduction without adjust-in-epilog to simplify the
	function.

	* tree-vect-transform.c (vect_transform_loop): Add an assert.

	* tree-ssa-reassoc.c (gate_reassoc): New function.
	* common.opt (tree-reassoc): New flag.
	(pass_reassoc): Add gate.
	
2007-03-26  Victor Kaplansky <victork@il.ibm.com>
	
	Merged revisions 121640-123210 from 
	svn+ssh://gcc.gnu.org/svn/gcc/trunk

2007-03-26  Revital Eres  <eres@il.ibm.com>

	* tree-ssa-dse.c (get_use_of_stmt_lhs): New function
	which walks virtual def-use chains to find redundant stores.
	(dse_optimize_stmt): Call it.

2007-03-26  Revital Eres  <eres@il.ibm.com>

	* tree-ssa-propagate.c (all_vdef_have_same_lattice_const_value):
	New function to get the defining stmt.
	(get_def_of_stmt_rhs): New helper function
	which walks on the virtual use-def chain to get the defining
	stmt.
	(replace_vuses_in): Call all_vdef_have_same_lattice_const_value
	to perform the final replacement and add new parameter which
	indicates whether store cpp analysis should be extended to
	analyze memory references based on the virtual use-def chain.
	(do_store_ccp): New function.
	(substitute_and_fold): Add new parameter.
	* tree-ssa-propagate.h (all_vdef_have_same_lattice_const_value):
	Declare.
	(substitute_and_fold): Change declaration.
	* tree-vrp.c (vrp_finalize): Call substitute_and_fold with new
	argument.
	* tree-ssa-ccp.c (ccp_finalize): Likewise.
	(visit_assignment): Call all_vdef_have_same_lattice_const_value
	while performing the propogation.
	* tree-ssa-copy.c (fini_copy_prop): Call substitute_and_fold with
	new argument.

2007-03-26  Revital Eres  <eres@il.ibm.com>

	* passes.c (init_optimization_passes): move complete-unrolling
	pass before the vectorizer and add constant propagation,
	store-ccp, dse and dce passes after it.
	* common.opt (-ftree-complete-unroll): Add the new flag.
	* doc/invoke.texi (-ftree-complete-unroll): Document it.
	* tree-ssa-loop.c (gate_tree_complete_unroll): Add
	-ftree-complete-unroll flag to the gate.

2007-03-15  Zdenek Dvorak  <dvorakz@suse.cz>
	    Revital Eres   <eres@il.ibm.com>
 
	* tree-ssa-loop-im.c: Include tree-affine.h.
	(struct mem_ref): Remove next field.  Add is_movable field.
	(determine_lsm_ref, hoist_memory_references): Use is_movable instead of
	the set of clobbered vops.
	(gather_mem_refs, gather_mem_refs_stmt): Record memory references to
	vector instead of linked list.  Record also non-movable references.
	(find_more_ref_vops): Removed.
	(free_mem_refs): Work with a vector instead of a list.
	(vtoe_hash, vtoe_eq, vtoe_free, record_vop_access, get_vop_accesses,
	cannot_overlap_p, mem_refs_may_alias_p,
	disable_sm_for_conflicting_refs): New functions.
	(determine_lsm_loop): Use disable_sm_for_conflicting_refs instead of
	find_more_ref_vops.
	* tree-affine.c: Include tree-gimple.h and hashtab.h.
	(name_expansion_hash, name_expansion_eq, aff_combination_expand,
	tree_to_aff_combination_expand, get_inner_reference_aff): New
	functions.
	* tree-affine.h (aff_combination_expand,
	tree_to_aff_combination_expand, get_inner_reference_aff): Declare.
	* Makefile.in (tree-affine.o): Add $(TREE_GIMPLE_H dependency.
	(tree-ssa-loop-im.o): Add tree-affine.h dependency.

2007-02-06  Victor Kaplansky <victork@il.ibm.com>
	
	Merged revisions 121374-121640 via svnmerge from 
	svn+ssh://gcc.gnu.org/svn/gcc/trunk

2007-02-05  Victor Kaplansky <victork@il.ibm.com>
	
	Merged revisions 120432-121374 via svnmerge from 
	svn+ssh://gcc.gnu.org/svn/gcc/trunk

2007-01-04  Victor Kaplansky <victork@il.ibm.com>
	
	Merged revisions 120362-120432 via svnmerge from 
	svn+ssh://gcc.gnu.org/svn/gcc/trunk

2007-01-03  Victor Kaplansky <victork@il.ibm.com>

	Created branch from latest mainline.

