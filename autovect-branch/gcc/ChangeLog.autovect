2005-11-17  Chao-ying Fu  <fu@mips.com>
	    Dorit Nuzman  <dorit@il.ibm.com>

	* config/mips/mips-ps-3d.md (vcondv2sf, sminv2sf3, smaxv2sf3): New
	patterns.
	* config/mips/mips-protos.h: Declare mips_expand_fp_vcond and
	mips_expand_fp_vector_minmax.
	* config/mips/mips.c (mips_expand_fp_vcond,
	mips_expand_fp_vector_minmax): New functions.

2005-10-31  Toon Moene  <toon@moene.indiv.nluug.nl>

	* BASE-VER: Add branch name to base version.

2005-10-27  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_recog_sad_pattern): Detect also on targets
	that don't directly support widening-summation.
	(vect_recog_mult_hi_pattern): Detect also on targets that don't
	directly support widening-multiplication.
	(vect_recog_dot_prod_pattern): Detect also on targets that don't
	directly support widening-summation and/or widening-multiplication.
	(vect_recog_widen_mult_pattern): Don't directly compare types.
	(vect_recog_unsigned_subsat_pattern): Don't directly compare types.
	Use correct tree-code in call to optab_for_tree_code.
	* tree-vect-transform.c (vect_transform_loop): Add new-line to printf 
	string.
	(vectorizable_promotion, vectorizable_demotion): Set vectype according
	to the operand type.

2005-10-23  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_pattern_recog_funcs): Move 
	vect_recog_sad_pattern to later in the initialization so it could use
	previously detected widen-sum.
	(vect_recog_sad_pattern): Push last_stmt instead of stmt. Check for
	optab of SAD_EXPR (accidentally was MULT_HI_EXPR). 
	(vect_recog_mult_hi_pattern): Don't push the widen-mult pattern-stmt
	into the stmt-list.
	(vect_recog_dot_prod_pattern): Rely on previously detected widen-mult
	and widen-sum.
	* tree-vect-transform.c (vectorizable_reduction): Allow other kinds
	of def-types for the uses of the reduction.

2005-10-23  Dorit Nuzman  <dorit@il.ibm.com>

	* expr.c (expand_expr_real_1): Implement MULT_HI_EXPR case.
	* genopinit.c (sad_optab): Initialize new optab.
	* optabs.c (optab_for_tree_code): Add case for SAD_EXPR.
	(sad_optab): Initialize new optab.
	* optabs.h (OTI_sad): New optan index.
	(sad_optan): New optab.
	* tree-inline.c (estimate_num_insns_1): Add case for SAD_EXPR.
	* tree-pretty-print.c (dump_generic_node): Add case for SAD_EXPR.
	(op_prio): Add case for SAD_EXPR.
	* tree-vect-analyze.c (vect_recog_sad_pattern): New function.
	(vect_recog_mult_hi_pattern): Implement.	
	(vect_recog_dot_prod_pattern, vect_recog_widen_mult_pattern):
	(vect_recog_widen_sum_pattern, vect_recog_unsigned_subsat_pattern):
	(vect_pattern_recog_1): Replace build with appropriate buildN.
	* tree-vect-transform.c (get_initial_def_for_reduction): Add case for
	SAD_EXPR.
	* tree-vectorizer.h (NUM_PATTERNS): Set to 6.
	(vect_recog_sad_pattern): New function declaration.
	* tree.def (SAD_EXPR): New tree-code.

2005-10-20  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_mark_relevant): Third argument "bool 
	relevant_p" changed to "enum vect_relevant relevant".  Record the
	max of STMT_VINFO_RELEVANT and 'relevant' instead of their or.
	(vect_stmt_relevant_p): Third argument "bool relevant_p" changed to 
	"enum vect_relevant relevant".  Record the value "vect_used_in_loop"
	instead of "true".
	(vect_mark_stmts_to_be_vectorized): Variable "bool relevant_p" changed 
	to "enum vect_relevant relevant".  For reduction case, set relevant to
	"vect_used_by_reduction" instead of "true".  
	* tree-vect-transofrm.c (vectorizable_type_promotion): Pass 'stmt' to
	supportable_widening_operation, instead of 'orig_stmt_in_pattern'.
	* tree-vectorizer.c (new_stmt_vec_info): STMT_VINFO_RELEVANT_P replaced
	with STMT_VINFO_RELEVANT. Initialize STMT_VINFO_LIVE_P to false instead
	of 0. 
	(supportable_widening_operation): Check STMT_VINFO_RELEVANT instead of
	checking immediate uses.
	* tree-vectorizer.h (vect_relevant): New enum type. 
	(_stmt_vec_info): Field relevant changed from bool to enum vect_relevant.
	(STMT_VINFO_RELEVANT): New macro to access the field 'relevant'.
	(STMT_VINFO_RELEVANT_P): Changed to check the value of field 'relevant'.

2005-10-19  Dorit Nuzman  <dorit@il.ibm.com>

	* expr.c (expand_expr_real_1): Add implementation for cases 
	VEC_PACK_MOD_EXPR and VEC_PACK_SAT_EXPR;
	* genopinit.c (vec_pack_sat): Removed. Replaced with...
	(vec_spack_sat, vec_upack_sat): New optabs.
	(vec_unpack_hi_optab, vec_unpack_lo_optab): Removed. Replaced with:
	(vec_unpacks_hi_optab, vec_unpacks_lo_optab, vec_unpacku_hi_optab):
	(vec_unpacku_lo_optab): New optabs.
	* optabs.c (optab_for_tree_code): Fix uses of removed optabs.
	(expand_binop): Support expand for vec_*pack_*_optab.
	(init_optabs): Fix uses of removed optabs.
	* optabs.h (optabs_index, optab_table): Fix uses of removed optabs.
	* tree-vect-analyze.c (widened_name_p): Takes additional argument. 
	Extended to support defs out-side the loop. Move check for 
	STMT_VINFO_IN_PATTERN_P from callers into the function.
	(vect_recog_dot_prod_pattern, vect_recog_widen_mult_pattern):
	(vect_recog_widen_sum_pattern): Update calls to widened_name_p.
	(vect_pattern_recog_1): Check if stmt is in the loop before attempting
	to access it's stmt_vec_info.
	* tree-vect-generic.c (expand_vector_operations_1): 
	Check for VEC_PACK_*_EXPR.	
	* tree-vect-transform.c (vectorizable_type_demotion): New function.
	(vectorizable_type_promotion): Minor cleanup.
	(vect_transform_stmt): Add call to vectorizable_type_demotion.
	* tree-vectorizer.c (supportable_widening_operation): Fix 80 column
	overflow.
	* tree-vectorizer.h (vectorizable_type_demotion): New function 
	declaration.
	* config/rs6000/altivec.md (vec_unpack_hi_v16qi, vec_unpack_hi_v8hi):
	(vec_unpack_lo_v16qi, vec_unpack_lo_v8hi): Removed. Replaced with:
	(vec_unpacks_hi_v16qi, vec_unpacks_hi_v8hi, vec_unpacks_lo_v16qi):
	(vec_unpacks_lo_v8hi): New patterns.
	(vec_pack_mod_v8hi, altivec_pack_mod_v4si): New patterns.

2005-10-17  Dorit Nuzman  <dorit@il.ibm.com>

	* tree.def (VEC_WIDEN_MULT_HI_EXPR, VEC_WIDEN_MULT_LO_EXPR):
	(VEC_UNPACK_HI_EXPR, VEC_UNPACK_LO_EXPR, VEC_PACK_MOD_EXPR):
	(VEC_PACK_SAT_EXPR): New tree-codes.
	* expr.c (expand_expr_real_1): Add cases for VEC_UNPACK_HI_EXPR,
	VEC_UNPACK_LO_EXPR, VEC_WIDEN_MULT_HI_EXPR, VEC_WIDEN_MULT_LO_EXPR. 
	Remove WIDEN_MULT_EXPR case.  Add cases for VEC_PACK_MOD_EXPR and 
	VEC_PACK_SAT_EXPR (yet to be implemented).
	* genopinit.c (vec_widen_umult_hi_optab, vec_widen_smult_hi_optab):
	(vec_widen_umult_lo_optab, vec_widen_smult_lo_optab):
	(vec_unpack_hi_optab, vec_unpack_hi_optab, vec_pack_mod_optab):
	(vec_pack_sat_optab): New optabs.
	* optabs.c (optab_for_tree_code): Add cases for new tree-codes.
	(expand_widen_pattern_expr): Add documentation. Add support for
	widening-multiplication and type-conversion.
	(init_optabs): Initalize new optabs.
	* optabs.h (OTI_vec_widen_umult_hi, OTI_vec_widen_smult_hi):
	(OTI_vec_widen_umult_lo, OTI_vec_widen_smult_lo, OTI_vec_unpack_hi):
	(OTI_vec_unpack_lo, OTI_vec_pack_mod, OTI_vec_pack_sat): New optab 
	indices.
	* target-def.h (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN):
	(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): New hooks.
	* target.h (builtin_mul_widen_even, builtin_mul_widen_odd): New hooks.
	* tree-inline.c (estimate_num_insns_1): Add cases for new tree-codes.
	* tree-pretty-print.c (dump_generic_node): Add cases for new tree-codes.
	(op_prio): Add cases for new tree-codes.
	* tree-vect-anlyze.c (vect_analyze_operations): Call 
	vectorizable_type_promotion. 
	(vect_mark_relevant): Add check for STMT_VINFO_RELATED_STMT.
	(vect_mark_stmts_to_be_vectorized): Fix typo.
	(widened_name_p): Add documentation.
	(vect_recog_mult_hi_pattern, vect_recog_dot_prod_pattern):
	(vect_recog_widen_mult_pattern, vect_recog_widen_sum_pattern):
	(vect_recog_unsigned_subsat_pattern): Change arguement name from
	pattern_type to pattern_vectype.
	(vect_recog_widen_mult_pattern): Call supportable_widening_operation.
	(vect_recog_unsigned_subsat_pattern): Check target support.
	(vect_pattern_recog_1): Remove target support check. Record
	STMT_VINFO_RELATED_STMT for all the stmts in the sequence.
	* tree-vect-generic.c (expand_vector_operations_1): Check for
	VEC_WIDEN_MULT_HI_EXPR, VEC_WIDEN_MULT_LO_EXPR, VEC_UNPACK_HI_EXPR,
	and VEC_UNPACK_LO_EXPR.
	* tree-vect-transform.c (vect_create_epilog_for_reduction):
	(vectorizable_target_reduction_pattern, vectorizable_reduction): Add
	check for STMT_VINFO_IN_PATTERN_P.
	(vectorizable_operation): Check if result size is same as arguments 
	size.
	(vectorizable_type_promotion): New function.
	(vect_transform_stmt): Call vectorizable_type_promotion.
	* tree-vectorizer.c (supportable_widening_operation): New function.
	* tree-vectorizer.h (type_promotion_vec_info_type):
	(type_promotion_vec_info_type): New stmt_vec_info_type enum values.
	(supportable_widening_operation, vectorizable_type_promotion): New
	function declarations.
	* config/rs6000/altivec.md (UNSPEC_VMULWHUB, UNSPEC_VMULWLUB):
	(UNSPEC_VMULWHSB, UNSPEC_VMULWLSB, UNSPEC_VMULWHUH, UNSPEC_VMULWLUH):
	(UNSPEC_VMULWHSH, UNSPEC_VMULWLSH): New define_constants.
	(vec_unpack_hi_v16qi, vec_unpack_hi_v8hi, vec_unpack_lo_v16qi):
	(vec_unpack_lo_v8hi, vec_widen_umult_hi_v16qi):
	(vec_widen_umult_lo_v16qi, vec_widen_smult_hi_v16qi):
	(vec_widen_smult_lo_v16qi, vec_widen_umult_hi_v8hi):
	(vec_widen_umult_lo_v8hi, vec_widen_smult_hi_v8hi):
	(vec_widen_smult_lo_v8hi): New define_expands.
	* config/rs6000/rs6000.c (rs6000_builtin_mul_widen_even):
	(rs6000_builtin_mul_widen_even): New function declarations.
	(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN):
	(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Define.
	(rs6000_builtin_mul_widen_even, rs6000_builtin_mul_widen_odd): New.
	(altivec_init_builtins): Remove TARGET_ALTIVEC check.

2005-10-06  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-transform.c (vectorizable_reduction): Support vectorization 
	in the presence of multiple-data-types (i.e. - the vectorization factor
	is bigger than the number of elements in vectype for this operation).
	(vectorizable_operation): Add documentation. Fix support for constant 
	and invariant operands.
	(vectorizable_store, vectorizable_load): Add documentation.
	* config/rs6000/altivec.md (sdot_prodv16qi): Pattern removed.

2005-09-29  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_determine_vectorization_factor): Don't fail
	in the presence of data-types of different sizes. Record the maximum 
	nunits as the vectorization-factor.
	(vect_analyze_data_ref_dependence): Don't record datarefs as same_align
	if they are of different sizes.
	(vect_update_misalignment_for_peel): Compare misalignments in terms of
	number of elements rather than number of bytes.
	(vect_enhance_data_refs_alignment): Add debug printouts.
	(vect_pattern_recog): Fix debug printout.
	* tree-vect-transform.c (vect_create_data_ref_ptr): Add new argument - 
	PTR_INCR.
	(vect_finish_stmt_generation): Set a stmt_info to newly generated stmts.
	(vect_create_epilog_for_reduction): Remove redundant assert.
	(vectorizable_target_reduction_pattern): Check if multiple-types 
	support is needed. If so - fail for now.
	(vectorizable_reduction, vectorizable_assignment):
	(vectorizable_condition): Likewise.
	(vectorizable_operation): Support vectorization in the presence of
	multiple-data-types (i.e. - the vectorization factor is bigger than
	the number of elements in vectype for this operation).
	(vectorizable_load, vectorizable_store): Likewise.
	(vect_gen_niters_for_prolog_loop): element_size is calculated using
	the data-types.
	(vect_trsnform_loop): Remove assert.

2005-09-29  Dorit Nuzman  <dorit@il.ibm.com>

	Bring over from mainline:

	2005-09-22  Richard Henderson  <rth@gcc.gnu.org>

	* tree-flow.h (merge_alias_info): Declare.
	* tree-ssa-copy.c (merge_alias_info): Export.
	* tree-vect-transform.c (vect_create_index_for_vector_ref): Remove.
	(vect_create_data_ref_ptr): Use create_iv directly.
	(vectorizable_load): Use correct types for integer constants.
	(vect_generate_tmps_on_preheader): Likewise.
	(vect_gen_niters_for_prolog_loop): Likewise.

2005-09-23  Devang Patel  <dpatel@apple.com>

	* tree-ssa-forwaprop.c (replacable_use_in_cond_expr): Do not
	a eliminate type conversion which feeds an equality comparison
	if the original type or either operand in the comparison is a
	function pointer.

2005-09-23  Dorit Nuzman  <dorit@il.ibm.com>

	* expr.c (expand_expr_real_1): Add DOT_PROD_EXPR case. Tentatively add
	cases for WIDEN_MULT_EXPR and MULT_HI_EXPR.
	* genopinit.c (sdot_prod_optab, udot_prod_optab): Initialize new optabs.
	* optabs.c (optab_for_tree_code): Add cases for DOT_PROD_EXPR,
	WIDEN_MULT_EXPR and MULT_HI_EXPR.
	(expand_widen_pattern_expr): Extend to handled widening patterns with
	more than two arguments. 
	(init_optabs): Initalize new optabs sdot_prod_optab, udot_prod_optab.
	* optabs.h (OTI_sdot_prod, OTI_udot_prod): New optabs indexes.
	(expand_widen_pattern_expr): Add argument to function declaration,
	* tree-inline.c (estimate_num_insns_1): Add cases for DOT_PROD_EXPR,
	WIDEN_MULT_EXPR and MULT_HI_EXPR.
	* tree-pretty-print.c (dump_generic_node, op_prio): Add cases for 
	DOT_PROD_EXPR, WIDEN_MULT_EXPR and MULT_HI_EXPR.
	(op_symbol): Added cases for WIDEN_MULT_EXPR and MULT_HI_EXPR.
	* tree-ssa-operands (get_expr_operands): Add case for DOT_PROD_EXPR.
	* tree.def (WIDEN_MULT_EXPR, MULT_HI_EXPR, DOT_PROD_EXPR): New 
	tree-codes.
	
	* tree-vect-analyze.c (widened_name_p): New function.
	(vect_pattern_recog_funcs): Add new pattern recognition functions to 
	the initialization.
	(vect_recog_mult_hi_pattern): New function (not yet implemented).
	(vect_recog_dot_prod_pattern): New function.
	(vect_recog_widen_mult_pattern): New function.
	(vect_recog_widen_sum_pattern): Call widened_name_p. Fix type 
	comparison. Do not consider stmts that have already been recognized
	as part of a pattern.
	(vect_recog_unsigned_subsat_pattern): Do not consider stmts that have
	already been recognized as part of a pattern.
	* tree-vect-transform.c (get_initial_def_for_reduction): Add case for
	DOT_PROD_EXPR.
	(vect_create_epilog_for_reduction): Add assert.	
	(vectorizable_reduction): Support reductions with more than two 
	arguments.
	* tree-vectorizer.h (ternary_op): New operation_type.
	(NUM_PATTERNS): Set to 5.
	(vect_recog_widen_mult_pattern): New function declaration.
	(vect_recog_mult_hi_pattern): New function declaration.	
	(vect_recog_dot_prod_pattern): New function declaration.

	* config/rs6000/altivec.md (altivec_vmsumshm, altivec_vmsumuhs):
	(altivec_vmsumshs, altivec_vmsumu<VI_char>m, altivec_vmsumm<VI_char>m): 
	(widen_usum<mode>3, widen_ssumv16qi3, widen_ssumv8hi3): Expose the PLUS.
	(udot_prod<mode>, sdot_prodv16qi, sdot_prodv8hi): New patterns.

2005-09-22  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-transform.c (vect_create_epilog_for_reduction): Fix 
	merge from mainline.

2005-09-21  Dorit Nuzman  <dorit@il.ibm.com>

	* expr.c (expand_expr_real_1): Add case WIDEN_SUM_EXPR.
	* genopinit.c (ssum_widen_optab): Init new optab.
	(usum_widen_optab): Likewise.
	* optabs.c (optab_for_tree_code): Add case WIDEN_SUM_EXPR.
	(expand_widen_pattern_expr): New function.
	(init_optabs): Initialize new optabs ssum_widen_optab and
	usum_widen_optab.
	* optabs.h (OTI_ssum_widen, OTI_usum_widen): New optabs.
	(ssum_widen_optab,  usum_widen_optab): New optabs.
	(expand_widen_pattern_expr): New function declaration.
	* tree-pretty-print.c (dump_generic_node): Add case WIDEN_SUM_EXPR.
	(op_prio): Add case WIDEN_SUM_EXPR.
	(op_symbol): Add case WIDEN_SUM_EXPR.
	* tree.def (WIDEN_SUM_EXPR): New tree-code.

	* tree-vect-analyze.c (recog.h): Add include.
	(vect_pattern_recog_funcs): Add function to initialization.
	(vect_recog_widen_sum_pattern): New function.
	(vect_pattern_recog_1): Update documentation.
	* tree-vect-transform.c (vect_init_vector): Take vectype from the
	reduction variable instead of STMT_VINFO_VECTYPE.
	(get_initial_def_for_reduction): Likewise. Also add case WIDEN_SUM_EXPR.
	(vect_create_epilog_for_reduction): Take vectype from the
	reduction variable instead of STMT_VINFO_VECTYPE. Take code,
	scalar_dest and scalar_type from orig_stmt if available. Add assert.
	(vectorizable_reduction): Handle reduction patterns.
	* tree-vectorizer.h (NUM_PATTERNS): Set to 2.
	(vect_recog_widen_sum_pattern): New function declaration.
	* tree-vect-generic (expand_vector_operations_1): Handle WIDEN_SUM_EXPR.

	* config/rs6000/altivec.md (widen_usum<mode>3): New pattern.
	(widen_ssumv16qi3, widen_ssumv8hi3): New patterns.
	* config/rs6000/rs6000.c (altivec_builtin_widening_summation): Removed.
	(target_vect_pattern_recog_funcs): Remove initialization.
	(target_vect_recog_widening_summation_pattern): Function removed.
	(rs6000_expand_builtin): Removed handling of case
	ALTIVEC_BUILTIN_WIDENING_SUMMATION.
	(altivec_init_builtins): Remove initialization of builtin
	ALTIVEC_BUILTIN_WIDENING_SUMMATION.
	* config/rs6000/rs6000.h (TARGET_VECT_NUM_PATTERNS): Set to 0.

	* tree-pretty-print.c (op_symbol): Remove case REDUC_PLUS_EXPR.
	* tree-vect-analyze.c (vect_recog_unsigned_subsat_pattern): Move
	debug printout.

2005-09-21  Dorit Nuzman  <dorit@il.ibm.com>

	Bring over from mainline:

	2005-09-20  Daniel Berlin  <dberlin@dberlin.org>

	* tree-ssa-structalias.c (get_constraint_for_component_ref): Add
	argument.  Allow and set any offset if needs_anyoffset is passed
	in.
	(get_constraint_for): Add argument here too.
	Pass it down.
	(do_structure_copy): Pass NULL to get_constraint_for.
	(handle_ptr_arith): Ditto.
	(find_func_aliases): Ditto.

2005-09-20  Dorit Nuzman  <dorit@il.ibm.com>

	* passes.c (pass_scev_cprop): Temporarily disable.
	* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_vars): 
	Add comment for temporarily disabling eliminate_unnecessary_casts.

2005-09-14  Ira Rosen  <irar@il.ibm.com>

	Merge from mainline (autovect-merge-20050906)

2005-08-15  Sebastian Pop  <pop@cri.ensmp.fr>

	Reverted 2005-07-05  Ira Rosen  <irar@il.ibm.com>.

2005-08-01  Sebastian Pop  <pop@cri.ensmp.fr>

	* common.opt: Add -fcheck-data-deps.
	* lambda-code.c (lambda_vector_lexico_pos): Moved ...
	* lambda.h (lambda_vector_lexico_pos): ... here.
	Make it static inline.
	* timevar.def (TV_CHECK_DATA_DEPS): New.
	* tree-data-ref.c (compute_subscript_distance,
	initialize_data_dependence_relation, compute_affine_dependence):
	Make static.
	(initialize_data_dependence_relation): Initialize DDR_CSYS, 
	DDR_POLYHEDRON, DDR_OMEGA to NULL.  Initialize DDR_SIZE_VECT,
	DDR_DIST_VECT, DDR_DIR_VECT to allocated data.
	(analyze_subscript_affine_affine, analyze_overlapping_iterations):
	Correctly print the ending parenthesis in the dump file.
	(subscript_dependence_tester): Moved after
	build_classic_dist_vector and build_classic_dir_vector.
	Computes the classic representations.  Takes a new parameter.
	(build_classic_dist_vector): Add an extra check for ensuring that 
	the output is a lexicographically vector.
	(build_classic_dist_vector, build_classic_dir_vector): Don't
	initialize the DDR_SIZE_VECT, DDR_DIST_VECT and DDR_DIR_VECT.
	(compute_affine_dependence): Add code for flag_check_data_deps.
	(compute_all_dependences): Move the call compute_subscript_distance
	to a lower level, in subscript_dependence_tester.
	(compute_data_dependences_for_loop): Move the calls 
	build_classic_dist_vector and build_classic_dir_vector in 
	subscript_dependence_tester.
	(tree_check_data_deps): New.
	* tree-data-ref.h (initialize_data_dependence_relation,
	compute_affine_dependence, compute_subscript_distance,
	build_classic_dist_vector): Remove extern declarations.
	* tree-flow.h (tree_check_data_deps): Declared.
	* tree-optimize.c: Schedule pass_check_data_deps.
	* tree-pass.h (pass_check_data_deps): Declared.
	* tree-ssa-loop.c (check_data_deps, gate_check_data_deps): New.
	(pass_check_data_deps): Instantiated.

2005-07-18  Sebastian Pop  <pop@cri.ensmp.fr>

	* Makefile.in (polyhedron.o): Add missing dependences.
	* omega.c, omega.h: Add more comments, clean-up.
	* polyhedron.c, polyhedron.h: Some clean-ups.
	* tree-data-ref.c (print_direction_vector): New.
	(dump_data_dependence_relation, dump_dist_dir_vectors): Call
	print_direction_vector.
	(init_csys_eq_with_af, init_csys_for_ddr): Distance variables
	are placed at the beginning such that Omega can protect them.
	(omega_compute_classic_representations): Put some preliminary code
	for extracting from DDR_OMEGA classic representations.
	(omega_dependence_tester): Call omega_simplify_problem instead of
	omega_solve_problem.
	* tree-data-ref.h (data_dependence_relation): Label each edge of the
	DDG with an omega_dependence problem.
	(DDR_OMEGA): New.
	* tree-loop-linear.c (linear_transform_loops): Call
	print_direction_vector.
	* tree-ssa-loop-niter.c (find_loop_niter_by_omega): New, not yet used.

2005-07-05  Ira Rosen  <irar@il.ibm.com>

	* lambda-code.c (gcc_loop_to_lambda_loop): Call analyze_scalar_evolution 
	with correct parameters.
	* tree-data-ref.c (analyze_array_indexes): Likewise.
	(analyze_indirect_ref): Likewise and check if the reference is loop
	invariant with the help of the new parameter of analyze_scalar_evolution.
	(analyze_offset_expr): Likewise.
	* tree-elim-check.c (try_eliminate_check): Call 
	analyze_scalar_evolution with correct parameters.
	* tree-scalar-evolution.c (follow_ssa_edge_inner_loop_phi, 
	unify_peeled_chrec, interpret_loop_phi, interpret_condition_phi, 
	interpret_rhs_modify_expr): Likewise.
	(compute_scalar_evolution_in_loop): Call 
	analyze_scalar_evolution_1 with correct parameters.
	(analyze_scalar_evolution_1): Add parameters to always analyze evolution 
	and to decide whether it is unknown. Fix parameters of 
	interpret_rhs_modify_expr and analyze_scalar_evolution_1. 
	(analyze_scalar_evolution): Add parameters to always analyze evolution 
	and to decide whether it is unknown. Fix parameters of 
	analyze_scalar_evolution_1. 
	(instantiate_parameters_1): Call analyze_scalar_evolution with correct 
	parameters.
	(analyze_scalar_evolution_for_all_loop_phi_nodes): Likewise.
	* tree-scalar-evolution.h (analyze_scalar_evolution): Add parameters to 
	the declaration.
	* tree-vect-analyze.c (vect_analyze_scalar_cycles): Call 	
	analyze_scalar_evolution with correct parameters. Skip invariant phis 
	with the help of unknown_evolution.
	(vect_can_advance_ivs_p): Likewise.
	* tree-vect-transform.c (vect_get_vec_def_for_operand): Handle invariant 
	phis.
	(vect_update_ivs_after_vectorizer):  Call analyze_scalar_evolution with 
	correct parameters. If no evolution, it must be an unknown evolution.
	* tree-vectorizer.h (enum vect_def_type): Add vect_invariant_phi_def.

2005-06-21  Ira Rosen  <irar@il.ibm.com>

        * tree-data-ref.c (initialize_data_dependence_relation): Perform
        dependence test based on dimensions of data-refs for arrays.

2005-06-19  Ira Rosen  <irar@il.ibm.com>

        * tree-data-ref.c (initialize_data_dependence_relation): Remove
        dependence test based on dimensions of data-refs.

2005-06-19  Dorit Nuzman  <dorit@il.ibm.com>

	* tree.def (VEC_LSHIFT_EXPR, VEC_RSHIFT_EXPR): Fix typo.

2005-06-19  Dorit Nuzman  <dorit@il.ibm.com>

	* config/rs6000/altivec.md (vec_shli_<mode>, vec_shri_<mode>): Add comment.
	Bit-and with 7 instead 3.

2005-06-17  Dorit Nuzman  <dorit@il.ibm.com>

	* optabs.c (expand_vec_shift_expr): Make sure GEN_FCN succeeded.
	* optabs.h (OTI_vec_shli, OTI_vec_shri): Update comment.
	* tree-vect-transform.c (vect_create_epilog_for_reduction): Generate
	a shift in bits instead of bytes.	
	* tree.def (VEC_LSHIFT_EXPR, VEC_RSHIFT_EXPR): Update comment.
	* config/rs6000/altivec.md (vec_shli_<mode>, vec_shri_<mode>): 
	Take shift argument in bits instead of bytes.

2005-06-15  Dorit Nuzman  <dorit@il.ibm.com>

	* genopinit.c (vec_shli_optab, vec_shri_optab): Initialize new optabs.
	(reduc_plus_optab): Removed.  Replcaed with...
	(reduc_splus_optab, reduc_uplus_optab): Initialize new optabs.
	* optabs.c (optab_for_tree_code): Return reduc_splus_optab or
	reduc_uplus_optab instead of reduc_plus_optab.
	(expand_vec_shift_expr): New function.
	(init_optabs): Initialize new optabs. Remove initialization of
	reduc_plus_optab.
	* optabs.h (OTI_reduc_plus): Removed. Replaced with...
	(OTI_reduc_splus, OTI_reduc_uplus): New.
	(reduc_plus_optab): Removed.  Replcaed with...
	(reduc_splus_optab, reduc_uplus_optab): New optabs.
	(vec_shli_optab, vec_shri_optab): New optabs.
	(expand_vec_shift_expr): New function declaration.

	* tree.def (VEC_LSHIFT_EXPR, VEC_RSHIFT_EXPR): New tree-codes.
	* tree-inline.c (estimate_num_insns_1): Handle new tree-codes.
	* expr.c (expand_expr_real_1): Handle new tree-codes.
	* tree-pretty-print.c (dump_generic_node, op_symbol, op_prio): Likewise.

	* tree-vect-transform.c (vect_create_epilog_for_reduction): Add two
	alternatives for generating reduction epilog code.
	(vectorizable_reduction): Don't fail of direct reduction support is
	not available.
	(vectorizable_target_reduction_pattern): Likewise.

	* config/rs6000/altivec.md (reduc_smax_v4si, reduc_smax_v4sf,
	reduc_umax_v4si, reduc_smin_v4si, reduc_smin_v4sf, reduc_umin_v4si,
	reduc_plus_v4si, reduc_plus_v4sf): Removed.
	(vec_shli_<mode>, vec_shri_<mode>, altivec_vsumsws_nomode,
	reduc_splus_<mode>, reduc_uplus_v16qi): New.

2005-06-12  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (base_addr_differ_p): Compare addresses.
	(analyze_array): Initialize access functions based on object.
	(init_data_ref): Initialize access functions based on first 
	location.
	(object_analysis): Don't update BASE_OBJECT for INDIRECT_REFs.
	(create_data_ref): Don't update access function for INDIRECT_REFs.
	(find_data_references_in_loop): Initialize access functions.
	* tree-data-ref.h (struct first_location_in_loop): New data structure.
	(struct base_object_info): New data structure.
	(struct data_reference): Move fields to the new structures.
	(DR_BASE_OBJECT): Update according to the new data structures.
	(DR_ACCESS_FNS, DR_BASE_ADDRESS, DR_OFFSET, DR_INIT, DR_STEP): 
	Likewise.
	(DR_OBJECT_ACCESS_FNS, DR_FIRST_LOCATION_ACCESS_FNS): New macros.

2005-06-12  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (record_ptr_differ_p): Peel COMPONENT_REFs to get 
	to the base.
	(record_array_differ_p): Likewise.

2005-06-11  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_mark_stmts_to_be_vectorized): Fix typo and
	add documentation.
	(get_initial_def_for_reduction): Add documentation. Remove 
	ADJUST_IN_EPILOG checks.

2005-06-10  Dorit Nuzman  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_analyze_operations): Fail vectorization
	in case of a relevant phi.
	(vect_analyze_data_ref_dependence): Check if distance modulo VF is
	zero. Check if absolute distance is greater than 0. Updated debug
	printouts accordingly.
	(vect_mark_relevant): Phis may be marked as relevant.
	(vect_mark_stmts_to_be_vectorized): Last use of a reduction does not
	mark its defining phi as relevant. Update documentation accordingly.
	(vect_pattern_recog_1): Remove setting of STMT_VINFO_EXTERNAL_USE.
	(vect_can_advance_ivs_p): Skip reduction phis.
	* tree-vect-transform.c (vect_get_vec_def_for_operand): Takes 
	additional argument. Reduction is handled inside the switch. Return a 
	vector def instead of a scalar def for reduction by calling 
	get_initial_def_for_reduction. The scalar_def is returned in the new
	argument.
	(vectorizable_target_reduction_pattern, vectorizable_reduction) 
	(vectorizable_assignment, vectorizable_operation, vectorizable_store) 
	(vectorizable_select): Update call to vect_get_vec_def_for_operand.
	(get_initial_def_for_reduction): Last argument changed from bool* to
	tree*. Second argument name changed to init_val. Move ADJUST_IN_EPILOG
	ifdefs.
	(vect_create_epilog_for_reduction): Update call to 
	vect_get_vec_def_for_operand. Call to get_initial_def_for_reduction
	moved to vect_get_vec_def_for_operand. Remove ifdef ADJUST_IN_EPILOG.
	Remove use of STMT_VINFO_EXTERNAL_USE, find immediate uses instead.
	(vect_update_ivs_after_vectorizer): Skip reduction phis.
	* tree-vectorizer.h (after_loop_use): Field removed from stmt_vec_info.
	(STMT_VINFO_EXTERNAL_USE): Macro removed.  

	* tree-vect-analyze.c (vect_determine_vectorization_factor)
	(vect_analyze_operations, vect_enhance_data_refs_alignment)
	(vect_stmt_relevant_p): Remove ENABLE_CHECKING guard around gcc_assert.
	* tree-vect-transform (vect_finish_stmt_generation)
	(vectorizable_reduction, vectorizable_target_reduction_pattern)
	(vectorizable_target_reduction_pattern, vectorizable_assignment)
	(vectorizable_operation, vectorizable_select, vect_transform_loop)
	(vect_do_peeling_for_loop_bound, vect_do_peeling_for_alignment): Remove
	ENABLE_CHECKING guard around gcc_assert.
	(vect_create_cond_for_align_checks): Replace an abort with a gcc_assert.
	* tree-vectorizer.c (slpeel_update_phi_nodes_for_guard1)
	(new_stmt_vec_info): Remove setting of STMT_VINFO_EXTERNAL_USE.
	(vect_is_simple_use): Update documentation.
	(reduction_code_for_scalar_code): Update documentation. Swap operands
	if needed.
	* tree-vect-transform.c (vect_get_new_vect_var): Remove redundant code.
	* tree.def: Fix typo.
	
2005-06-07  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (record_ptr_differ_p): New function.
	(record_array_differ_p, array_ptr_differ_p): Likewise.
	(base_object_differ_p): Call record_ptr_differ_p, 
	record_array_differ_p and array_ptr_differ_p.

2005-06-06  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (ptr_ptr_may_alias_p): New function.
	(may_alias_p): Call ptr_ptr_may_alias_p.
	(base_object_differ_p): Handle COMPONENT_REF and INDIRECT_REF bases.
	(omega_compute_classic_representations): Put within #if 0 to avoid 
	warnings.
	(omega_dependence_tester): Likewise.

2005-05-24  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (ptr_decl_may_alias_p): New function.
	(may_alias_p): New function.
	(base_object_differ_p): Call ptr_decl_may_alias_p and may_alias_p
	instead of alias_sets_conflict.
	(base_addr_differ_p): Likewise.
	* tree-flow.h (is_aliased_with): Declare.
	* tree-ssa-alias.c (is_aliased_with): New function.

2005-05-25  Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vect-analyze.c (vect_determine_vectorization_factor): Fix 80
	columns overflow.
	(vect_analyze_operations): Check RELEVANT_P stmts and LIVE_P stmts
	separately. Call vectorizable_live_operation. Check if vectorization
	is needed.
	(vect_enhance_data_refs_alignment): New line after declarations.
	(vect_stmt_relevant_p): Remove redundant comment.
	(vect_mark_stmts_to_be_vectorized): Add comments. Move invariant
	computation out of the loop.
	(vect_can_advance_ivs_p): Fix print format.
	(vect_analyze_loop): Fix comment.
	* tree-vect-transform (vectorizable_assignment): Remove handling of
	LIVE_P case (factored out to vectorizable_live_operation).
	(vectorizable_live_operation): New.
	(vect_transform_stmt): Handle RELEVANT_P stmts and LIVE_P stmts
	separately. Call vectorizable_live_operation.
	* tree-vectorizer.h (vectorizable_live_operation): New declaration.

2005-05-24  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (base_object_differ_p): Fix parameters of 
	get_alias_set.
	(base_addr_differ_p): Likewise.

2005-05-03  Leehod Baruch  <leehod@il.ibm.com>

	* tree-vect-analyze.c (vect_enhance_data_refs_alignment): Remove 
	the misalign update of datarefs with the same alignment, and the 
	restore of the misalignment if the peeling fails.
	(vect_update_misalignment_for_peel) : Add special care for 
	datarefs with the same alignment.

2005-04-21  Sebastian Pop  <pop@cri.ensmp.fr>

	* Makefile.in (POLYHEDRON_H): New variable.
	(TREE_DATA_REF_H): Depends on POLYHEDRON_H.
	(OBJS-common): Depends on polyhedron.o.
	(polyhedron.o): New rule.
	* lambda-code.c (gcd): Moved to lambda.h.
	(gcd_vector): Renamed lambda_vector_gcd, and moved to lambda.h.
	(lambda_compute_target_space): Rename uses of gcd_vector.
	* lambda-mat.c (lambda_matrix_row_exchange): Moved to lambda.h.
	* lambda.h (lambda_matrix_row_exchange): Make it static inline.
	(lambda_vector_div_const, lambda_vector_gcd, lambda_vector_normalize,
	lambda_vector_scalar_product, lambda_vector_linear_combine_1, 
	lambda_matrix_extend, lambda_matrix_exchange_columns, 
	lambda_matrix_copy_columns, lambda_matrix_copy_c2v,
	lambda_matrix_copy_v2c, lambda_vector_exchange): New functions.
	* omega.c (wild_name): Allocate more elements.
	(omega_eqn_is_red): Check bounds of printed variable, avoid the use
	of omega_current_get_var_name.
	(omega_delete_geq, omega_delete_geq_extra): Make static.
	(omega_initialize): Initialize current variables names for
	pretty printing.
	* omega.h (omega_current_get_var_name): Remove declaration.
	(omega_delete_geq, omega_delete_geq_extra): Moved to omega.c.
	* polyhedron.c, polyhedron.h: New files.
	* tree-data-ref.c (gcd): Moved to lambda.h.
	(init_csys_eq_with_af, find_loops_surrounding, init_csys_for_ddr,
	polyhedra_dependence_tester, omega_compute_classic_representations,
	omega_dependence_tester): New.
	(compute_affine_dependence): Insert entry point to the new 
	dependence analyzers, but they are disabled for now.
	* tree-data-ref.h: Depend on omega.h and polyhedron.h.
	(data_dependence_relation): Add two fields:
	dependence_constraint_system, and dependence_polyhedron.
	(DDR_CSYS, DDR_POLYHEDRON): New.

2005-04-20  Sebastian Pop  <pop@cri.ensmp.fr>

	* omega.h, omega.c: Write some documentation for functions, 
	continue cleanup.

2005-04-20  Sebastian Pop  <pop@cri.ensmp.fr>

	* Makefile.in (OBJS-common): Add omega.o.
	(omega.o): Update dependences.
	* omega.h, omega.c: Rewrite some functions and variables names using
	GCC's rules.

2005-04-20  Ira Rosen  <irar@il.ibm.com>

	* tree-ssa-loop-niters.c (tree_simplify_using_condition_1): Use te
	instead of expr.

2005-04-19  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-data-ref.c: Remove some declarations of static functions.
	(compute_data_dependences_for_loop): Don't pass nb_loops as a 
	parameter, deduce it from the computation of the loop_nest.
	(analyze_all_data_dependences): Update uses of
	compute_data_dependences_for_loop.
	* tree-data-ref.h (compute_data_dependences_for_loop): Update
	declaration.
	* tree-loop-linear.c (linear_transform_loops): Update uses of
	compute_data_dependences_for_loop.  The size of the matrices is
	computed as loop_nest->level.
	* tree-vect-analyze.c (vect_analyze_data_refs): Update uses of
	compute_data_dependences_for_loop.
	* tree-vectorizer.c (loops_num): Make it static.
	* tree-vectorizer.h (loops_num): Remove the extern declaration.

2005-04-19  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (base_object_differ_p): Rename (from 	
	array_base_name_differ_p). Use alias analysis to handle pointers. Make 
	static.
	(base_addr_differ_p): Make static. Call base_object_differ_p if there 
	exist objects for both data-refs. Compare base address and offset 
	otherwise.
	(dump_data_reference): Change base_name to base_object. 
	(analyze_array): Change DR_BASE_NAME to DR_BASE_OBJECT, DR_INIT_OFFSET 
	to DR_OFFSET, and initialize DR_INIT.
	(init_data_ref): Likewise.
	(address_analysis): Remove detailed_analysis parameter.
	(object_analysis): Remove detailed_analysis parameter. Change 
	DR_BASE_NAME to DR_BASE_OBJECT.
	(analyze_offset): New function.
	(create_data_ref): Remove detailed_analysis parameter. Change 
	DR_BASE_NAME to DR_BASE_OBJECT, DR_INIT_OFFSET to DR_OFFSET, and set 
	DR_INIT. Update access_fn of INDIRECT_REF to match DR_BASE_OBJECT or 
	DR_BASE_ADDRESS + DR_OFFSET. Fix printings.
	(initialize_data_dependence_relation): Change array_base_name_differ_p 
	to base_object_differ_p.
	(find_data_references_in_loop): Remove detailed_analysis parameter. 
	Change DR_BASE_NAME to DR_BASE_OBJECT, DR_INIT_OFFSET to DR_OFFSET, and 
	initialize DR_INIT.
	(compute_data_dependences_for_loop): Remove detailed_analysis parameter.
	(analyze_all_data_dependences): Call compute_data_dependences_for_loop 
	without detailed_analysis parameter.
	(analyze_all_data_dependences): Change array_base_name_differ_p to 
	base_object_differ_p.
	* tree-data-ref.h (struct data_reference): Rename base_name to 
	base_object, initial_offset to offset. Add new field, init. Update 
	access macros.
	(find_data_references_in_loop): Remove detailed_analysis parameter. 
	(compute_data_dependences_for_loop): Likewise.
	(array_base_name_differ_p): Remove.
	* tree-loop-linear.c (linear_transform_loops): Call 
	compute_data_dependences_for_loop without detailed_analysis parameter.
	* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Call 
	find_data_references_in_loop without detailed_analysis parameter.
	* tree-vect-analyze.c (vect_analyze_data_ref_dependence): Add printing.
	(vect_analyze_data_refs): Call compute_data_dependences_for_loop without 
	detailed_analysis parameter. Change DR_BASE_NAME to DR_BASE_OBJECT, 
	DR_INIT_OFFSET to DR_OFFSET.
	* tree-vect-transform.c (vect_create_addr_base_for_vector_ref): Add 
	DR_INIT to first access calculation.
	(vect_gen_niters_for_prolog_loop): Change DR_INIT_OFFSET to DR_OFFSET.

2005-04-14  Keith Besaw  <kbesaw@us.ibm.com>

	* tree-vect-transform.c (vect_create_cond_for_align_checks):
	construct a statement list tree to return instead of
	inserting the generated statements.  Also return the
	conditional expression for use by loop versioning.
	(vect_transform_loop): Call vect_create_cond_for_align_checks
	before loop_version (rather than after).  Insert the statement
	list returned from vect_create_cond_for_align_checks in the
	loop version control block generated by loop_version.

2005-04-13  Sebastian Pop  <pop@cri.ensmp.fr>
	    Daniel Berlin  <dberlin@dberlin.org>

	* omega.c, omega.h: New files.
	* Makefile.in (omega.o): New rule.

2005-04-12  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (compute_all_dependences): Add new 
	parameter compute_self_and_read_read_dependences.
	Compute self and read-read dependences if it is true.
	(compute_data_dependences_for_loop): Add new parameter
	compute_self_and_read_read_dependences. Call 
	compute_all_dependences with the new parameter.
	(analyze_all_data_dependences): Call 
	compute_data_dependences_for_loop with additional
	parameter.
	* tree-data-ref.h (compute_all_dependences): Add new
        parameter compute_self_and_read_read_dependences.
	* tree-loop-linear (linear_transform_loops): Call 
	compute_data_dependences_for_loop with new parameter
	compute_self_and_read_read_dependences.
	* tree-vect-analyze.c (vect_analyze_data_refs): 
	Likewise.

2005-04-10  Devang Patel  <dpatel@apple.com>

	* tree-ssa-forwprop.c (all_uses_are_replacable): Use
	BREAK_FROM_SAFE_IMM_USE instead of 'break'.

2005-04-10  Dorit Naishlos  <dorit@il.ibm.com>

	Merge from mainline (autovect-merge-20050406)

2005-04-05  Ira Rosen  <irar@il.ibm.com>

	* tree-inline.c (estimate_num_insns_1): Add VEC_COND_EXPR case.

2005-04-05  Keith Besaw  <kbesaw@us.ibm.com>

	* common.opt: add the ftree-vect-loop-version option
	and the flag flag_tree_vect_loop_version initialized to 1.
	* tree-data-ref.c (init_data_ref): New parm with points-to
	info (type ptr_info_def *) used to set DR_POINTSTO_INFO
	for the new data reference.	
	(analyze_array): init DR_POINTSTO_INFO to NULL.
	(analyze_indirect_ref): extract points-to info when base
	is an SSA_NAME and passes it to init_data_ref.
	(object_analysis): move DR_POINTSTO_INFO to final data ref.
	(create_data_ref): print DR_POINTSTO_INFO to dump_file.
	* tree-data-ref.h (struct data_reference): add field
	pointsto_info and extraction macro DR_POINTSTO_INFO.
	* tree-ssanames.c (duplicate_ssa_name): Replace common
	code with call to duplicate_ssa_name_ptr_info.
	(duplicate_ssa_name_ptr_info): New.
	duplicates points-to info into a new SSA_NAME.
	* tree-vect-analyze.c (vect_enhance_data_refs_alignment):
	Add checks of flag_tree_vect_loop_version and optimize_size
	to control lop versioning.
	* tree-vect-transform.c (vect_create_data_ref_ptr): use
	DR_POINTSTO_INFO from scalar data ref to define vector
	pointer SSA_NAME replacement.
	* tree.h (duplicate_ssa_name_ptr_info): declare extern.
	* invoke.texi: Add documentation for
	ftree-vect-loop-version.

2005-04-03  Dorit Naishlos  <dorit@il.ibm.com>

	* defaults.h (TARGET_VECT_NUM_PATTERNS): New.
	* target-def.h (TARGET_VECTORIZE_BUILTIN_VECT_PATTERN_RECOG): New.
	* target.h (builtin_vect_pattern_recog): New.
	* tree-vect-analyze.c (target.h): Include.
	(vect_pattern_recog_1): Removed static qualifier. Declaration moved to
	tree-vectorizer.h.
	(vect_recog_unsigned_subsat_pattern): Takes additional argument.
	Removed dump print. Handle target-reduction-pattern case.
	(vect_pattern_recog): Call targetm.vectorize.builtin_vect_pattern_recog.
	(vect_analyze_loop): Move call to vect_pattern_recog to after the call 
	to vect_analyze_scalar_cycles.
	(vect_determine_vectorization_factor): Change skip test from checking 
	for reduction, to checking for STMT_VINFO_LIVE_P. Handle the case of 
	vectype being already initialized.
	(vect_analyze_operations): Call vectorizable_target_reduction_pattern.
	(vect_mark_relevant): When dealing with the last stmt in a sequence
	that was recognized as a certain idiom - use the pattern-stmt that
	replaces the sequence.
	(vect_mark_stmts_to_be_vectorized): Remove special handling of
	STMT_VINFO_IN_PATTERN_P.
	* tree-vect-transform.c (vect_create_epilog_for_reduction): New
	function. Contains functionality that was factored out of
	vectorizable_reduction.
	(vectorizable_target_reduction_pattern): New function.
	(vectorizable_reduction): Epilog creation code was factored out into
	a new function vect_create_epilog_for_reduction.
	(vect_transform_stmt): Call vectorizable_target_reduction_pattern.
	* tree-vectorizer.h (target_reduc_pattern_vec_info_type): New enum
	value.
	(vect_recog_unsigned_subsat_pattern): Takes additional argument.
	(_recog_func_ptr): Takes additional argument.
	(vectorizable_target_reduction_pattern): New function declaration.
	(vect_pattern_recog_func): Rename to vect_pattern_recog_funcs.

	* tree-inline.c (estimate_num_insns_1): Add missing cases -
	REDUC_MAX_EXPR, REDUC_MIN_EXPR, REDUC_PLUS_EXPR.
	* tree-ssa-operands.c (get_expr_operands): Remove redundant cases -
	REDUC_MAX_EXPR, REDUC_MIN_EXPR, REDUC_PLUS_EXPR.
	* tree-vect-transform.c (get_initial_def_for_reduction): Remove case
	that is not supported yet.
	* tree.def (REDUC_BIT_AND_EXPR, REDUC_BIT_IOR_EXPR, REDUC_BIT_XOR_EXPR)
	(REDUC_MULT_EXPR): Remove tree-codes that are not yet supported.
	* tree-vectorizer.c (reduction_code_for_scalar_code): Remove cases that
	are not yet unsupported.
	(vect_is_simple_reduction): Fix comment.
	* tree-vect-analyze.c (vect_analyze_operations): Minor changes to print
	messages.
	(vect_mark_stmts_to_be_vectorized): Likewise.
	(vect_determine_vectorization_factor): Likewise.

	* config/rs6000/rs6000.c (tree-flow.h, tree-data-ref.h)
	(tree-vectorizer.h): Include.
	(altivec_builtin_widening_summation): New global variable to hold the
	decl of the builtin widening_summation.
	(target_vect_recog_widening_summation_pattern): New pattern recognition
	function.
	(target_vect_pattern_recog_funcs): New global array to hold pointers
	to pattern-recognition functions.
	(rs6000_builtin_vect_pattern_recog): New function. Implements the target
	builtin vect_pattern_recog.
	(rs6000_expand_builtin): Support ALTIVEC_BUILTIN_WIDENING_SUMMATION
	case.
	(altivec_init_builtins): Add new function type v4si_ftype_v8hi_v4si.
	Initialize a new target builtin __builtin_altivec_widening_summation.
	Set altivec_builtin_widening_summation.
	* config/rs6000/rs6000.c (TARGET_VECT_NUM_PATTERNS): New define.
	(ALTIVEC_BUILTIN_WIDENING_SUMMATION): New builtin.
	* config/rs6000/t-rs6000 (tree-flow.h, tree-data-ref.h)
	(tree-vectorizer.h): Add dependency.

2005-03-22  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (address_analysis): Perform alignment
	comparison in trees. 
	(object_analysis): Likewise.

2005-03-21  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (address_analysis): Use TYPE_ALIGN_UNIT.
	(object_analysis): Use DECL_ALIGN_UNIT.
	(create_data_ref): Fix printings.

2005-03-16  Dorit Naishlos  <dorit@il.ibm.com>
            Leehod Baruch  <leehod@il.ibm.com>
            Keith Besaw  <kbesaw@us.ibm.com>

	* tree-vect-analyze.c (vect_enhance_data_refs_alignment): Fix comment.
	(vect_recog_unsigned_subsat_pattern): Likewise.
	(vect_analyze_data_refs): Fix print message.
	(vect_analyze_operations): Fix print message.
	(vect_analyze_data_ref_dependence): Add print message.
	(vect_analyze_data_refs): Fix verbosity level and print message.
	* tree-vect-transform (vect_create_data_ref_ptr): Likewise.
	* tree-vectorizer.c (slpeel_add_loop_guard): Likewise.
	(slpeel_update_phi_nodes_for_guard1): Likewise.
	(slpeel_update_phi_nodes_for_guard2): orig_bb not needed.
	(vect_recog_unsigned_subsat_pattern): Likewise.

2005-03-13  Ira Rosen  <irar@il.ibm.com>

	* tree-vectorizer.h (enum verbosity_levels): Add new verbosity
	level REPORT_DR_DETAILS.

	* tree-vect-analyze.c (vect_analyze_data_ref_dependence): Print
	if verbosity level is REPORT_DR_DETAILS. 
	(vect_analyze_data_ref_access): Likewise.

2005-03-10  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (compute_data_dependences_for_loop): Call 
	build_classic_dist_vector with correct parameters.
	
	* tree-vect-analyze.c (vect_analyze_data_ref_dependence): Start 
	loop_depth from 0. Print distance 0 message with 
	REPORT_VECTORIZED_LOOPS level.

	* tree-vect-transform.c (vect_get_vec_def_for_operand): Move call to
	vect_is_simple_use out of gcc_assert.
	(vectorizable_reduction): Likewise.

2005-03-08  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (base_addr_differ_p): Check parameters.
	(analyze_offset_expr): Remove redundant convert.
	(get_ptr_offset): Change in function parameter - alignment in bytes
	instead of type.
	(address_analysis): New parameter - boolean flag to determine the 
	analysis mode. Change in parameter - alignment in bytes instead of 
	type. Call object_analysis with additional parameter. Use alignment 
	in bytes and call get_ptr_offset with different parameter.
	(object_analysis):  New parameter - boolean flag to determine the 
	analysis mode. Change in parameter - alignment in bytes instead of type.
	Return after dr creation if the flag is false. Use alignment in bytes
	instead of alignment type.
	(create_data_ref):  New parameter - boolean flag to determine the 
	analysis mode. Change in parameter - alignment in bytes instead of type.
	Call object_analysis with new parameters. Fix printings.
	(initialize_data_dependence_relation): Call base_addr_differ_p if 
	possible.
	(compute_all_dependences): Skip read-read dependences.
	(find_data_references_in_loop): New parameters - boolean flag to 
	determine the analysis mode and required alignment in bytes. Call 
	create_data_ref.
	(compute_data_dependences_for_loop): New parameters - boolean flag to 
	determine the analysis mode and required alignment in bytes. Call
	find_data_references_in_loop with new parameters.
	
	* tree-data-ref.h: New parameters in functions 
	find_data_references_in_loop and compute_data_dependences_for_loop. 
	Remove (make static) create_data_ref and base_addr_differ_p.

	* tree-loop-linear.c (linear_transform_loops): Call 
	compute_data_dependences_for_loop with new parameters.

	* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Call
	find_data_references_in_loop with new parameters.

	* tree-vect-analyze.c (vect_build_dist_vector): Remove.
	(vect_analyze_data_ref_dependence): Use ddr fields set previously. 
	Compute loop depth for use of distance vector. Fix printings.
	(vect_analyze_data_ref_dependences): Go through ddrs instead of 
	data-refs.
	(vect_compute_data_ref_alignment): All data-refs are now stored in one
	varray, and loads and stores are not separated.
	(vect_update_misalignment_for_peel, vect_verify_datarefs_alignment,
	vect_enhance_data_refs_alignment,  vect_analyze_data_ref_accesses): 
	Likewise.
	(vect_analyze_data_refs): Fix comment. Call 
	compute_data_dependences_for_loop to find and analyze data-refs in the 
	loop.
	
	* tree-vect-transform.c (vect_update_inits_of_drs): All data-refs are 
	now stored in one varray, and loads and stores are not separated.
	
	* tree-vectorizer.c (new_loop_vec_info): Initialize data-refs and ddr 
	structures (varray).
	(destroy_loop_vec_info): Clear data-refs and ddr structures (varray).

	* tree-vectorizer.h (struct _loop_vec_inf): All data-refs are now 
	stored in one varray, datarefs, and loads and stores are not separated. 
	New field, ddrs. Macros for new fields.	

2005-03-08  Dorit Naishlos  <dorit@il.ibm.com>

	* tree.def (SAT_REDUC_PLUS_EXPR): Removed.
	(REDUC_MAX_EXPR, REDUC_MIN_EXPR): New.
	* expr.c (expand_expr_real_1): Remove SAT_REDUC_PLUS_EXPR case. Add new
	cases for REDUC_MAX_EXPR, REDUC_MIN_EXPR.
	* tree-ssa-operands.c (get_expr_operands): Likewise.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	(op_symbol): Remove SAT_REDUC_PLUS_EXPR case.
	* optabs.c (optab_for_tree_code): Remove SAT_REDUC_PLUS_EXPR case. Add
	new cases for REDUC_MAX_EXPR, REDUC_MIN_EXPR.
	(init_optabs): Remove sat_reduc_plus_optab initialization. Initialize
	reduc_smax_optab, reduc_umax_optab, reduc_smin_optab, reduc_umin_optab.
	* optabs.h (OTI_sat_reduc_plus): Removed.
	(OTI_reduc_smax, OTI_reduc_umax, OTI_reduc_smin, OTI_reduc_umin): New.
	(sat_reduc_plus_optab): Removed.
	(reduc_smax_optab, reduc_umax_optab, reduc_smin_optab, 
	reduc_umin_optab): New.
	* genopinit.c (sat_reduc_plus_optab): Optab removed.
	(reduc_smax_optab, reduc_umax_optab, reduc_smin_optab, 
	reduc_umin_optab): New optabs.
	* tree-vectorizer.h (vect_is_simple_reduction): Remove last argument.
	(reduction_code_for_scalar_code): Remove last argument.
	* tree-vectorizer.c (reduction_code_for_scalar_code): Remove argument
	sat_p. Handle MAX_EXPR and MIN_EXPR.
	(vect_is_simple_reduction): Remove argument sat_p. Check for flag_trapv
	instead of flag_wrapv.
	* tree-vect-analyze.c (vect_analyze_scalar_cycles): Remove argument
	sat_p from call to vect_is_simple_reduction.
	* tree-vect-transform.c	(vectorizable_reduction): Likewise.
	* tree-vect-transform.c: Include tree.h.
	(get_initial_def_for_reduction): New.
	(vect_get_vec_def_for_operand): Return the scalar def instead of a 
	vector def in case of reduction.
	(vectorizable_reduction): Bitpos used for BIT_FIELD_REF depends on 
	endianess. Correctly adjust the result with the initial value of the
	reduction variable.
	* config/rs6000/altivec.md (sat_reduc_plus_v4si): Removed.
	(reduc_smax_v4si, reduc_smax_v4sf, reduc_umax_v4si, reduc_smin_v4si, 
	reduc_smin_v4sf, reduc_umin_v4si): New.

2005-03-02  Devang Patel  <dpatel@apple.com>

	* tree-vect-analyze.c (vect_build_dist_vector): Use loop_nest's depth.

2005-02-24  Dorit Naishlos  <dorit@il.ibm.com>

	* Makefile.in (tree-vect-analyze.o, tree-vect-transform.o): New.
	(tree-vectorizer.o): Added missing dependencies.

	* tree-vectorizer.h (vect_dump, vect_verbosity_level): Added extern
	decleration.
	(slpeel_tree_peel_loop_to_edge): Function externalized (had a static
	declaration in tree-vectorizer.c, now has an extern declaration in
	tree-vectorizer.h).
	(slpeel_make_loop_iterate_ntimes, slpeel_can_duplicate_loop_p,
	slpeel_verify_cfg_after_peeling, vect_strip_conversion,
	get_vectype_for_scalar_type, vect_is_simple_use,
	vect_is_simple_iv_evolution, vect_can_force_dr_alignment_p,
	vect_supportable_dr_alignment, new_loop_vec_info, destroy_loop_vec_info,
	new_stmt_vec_info, vect_analyze_loop, vectorizable_load,
	vectorizable_store, vectorizable_operation, vectorizable_assignment,
	vect_transform_loop, vect_print_dump_info, vect_set_verbosity_level,
	find_loop_location, vect_is_simple_reduction, 
	reduction_code_for_scalar_code, vect_recog_unsigned_subsat_pattern, 
	vectorizable_reduction, vectorizable_select): Likewise.

	* tree-vectorizer.c (langhooks.h): #include removed.
	(slpeel_tree_peel_loop_to_edge): Function externalized. Declaration
	moved to tree-vectorized.h.
	(slpeel_make_loop_iterate_ntimes, slpeel_can_duplicate_loop_p,
	slpeel_verify_cfg_after_peeling, vect_strip_conversion,
	get_vectype_for_scalar_type, vect_is_simple_use,
	vect_is_simple_iv_evolution, vect_can_force_dr_alignment_p,
	vect_supportable_dr_alignment, new_loop_vec_info,
	destroy_loop_vec_info, new_stmt_vec_info, vect_print_dump_info,
	vect_set_verbosity_level, find_loop_location, vect_is_simple_reduction):
	Likewise.

	(vect_analyze_loop): Function externalized. Declaration moved to
	tree-vectorized.h. Function definition moved to tree-vect-analyze.c.
	(vect_analyze_loop_form): Moved to tree-vect-analyze.c.
	(vect_mark_stmts_to_be_vectorized, vect_analyze_scalar_cycles,
	vect_analyze_data_ref_accesses, vect_analyze_data_ref_dependences,
	vect_analyze_data_refs_alignment, vect_compute_data_refs_alignment,
	vect_enhance_data_refs_alignment, vect_analyze_operations,
	exist_non_indexing_operands_for_use_p, vect_mark_relevant,
	vect_stmt_relevant_p, vect_get_loop_niters,
	vect_analyze_data_ref_dependence, vect_compute_data_ref_alignment,
	vect_analyze_data_ref_access, vect_analyze_pointer_ref_access,
	vect_can_advance_ivs_p, vect_get_ptr_offset, vect_analyze_offset_expr,
	vect_base_addr_differ_p, vect_object_analysis, vect_address_analysis,
	vect_get_memtag, vect_recog_unsigned_subsat_pattern, 
	vect_build_dist_vector, vect_determine_vectorization_factor, 
	vect_update_misalignment_for_peel, vect_pattern_recog, 
	vect_pattern_recog_1): Likewise.

	(vectorizable_load): Function externalized. Declaration moved to
	tree-vectorized.h. Function definition moved to tree-vect-transform.c.
	(vectorizable_store, vectorizable_operation, vectorizable_assignment,
	vectorizable_reduction, vectorizable_select, vect_transform_loop):
	 Likewise.
	(vect_transform_stmt): Moved to tree-vect-transform.c.
	(vect_align_data_ref, vect_create_destination_var,
	vect_create_data_ref_ptr, vect_create_index_for_vector_ref,
	vect_create_addr_base_for_vector_ref, vect_get_new_vect_var,
	vect_get_vec_def_for_operand, vect_init_vector,
	update_vuses_to_preheader, vect_finish_stmt_generation, 
	vect_generate_tmps_on_preheader, vect_build_loop_niters, 
	vect_update_ivs_after_vectorizer, vect_gen_niters_for_prolog_loop, 
	vect_update_init_of_dr, vect_update_inits_of_drs, 
	vect_do_peeling_for_alignment, vect_do_peeling_for_loop_bound, 
	vect_is_simple_cond): Likewise.

	* tree-vect-analyze.c: New file.
	* tree-vect-transform.c: New file.

2005-02-22  Dorit Naishlos  <dorit@il.ibm.com>

	* tree.def (REDUC_PLUS_EXPR, SAT_REDUC_PLUS_EXPR): New.
	* expr.c (expand_expr_real_1): Added new cases SAT_REDUC_PLUS_EXPR and
	REDUC_PLUS_EXPR.
	* tree-pretty-print.c (dump_generic_node, op_prio, op_symbol): Likewise.
	* tree-ssa-operands.c (get_expr_operands): Likewise.
	* optabs.c (optab_for_tree_code): Likewise.
	(init_optabs): Initialize new optabs reduc_plus_optab and 
	sat_reduc_plus_optab.
	* genopinit.c (reduc_plus_optab, sat_reduc_plus_optab): New optabs.
	* optabs.h (OTI_reduc_plus, OTI_sat_reduc_plus): New.
	(reduc_plus_optab, sat_reduc_plus_optab) New.
	* tree-flow.h (replace_immediate_uses): Add declaration.
	* tree-ssa.c (replace_immediate_uses): Externalize.
	* tree-vectorizer.h (vect_scalar_var): New value for enum vect_var_kind.
	(after_loop_use): New filed in _stmt_vec_info.
	(STMT_VINFO_EXTERNAL_USE): New access macro.
	* tree-vectorizer.c (vectorizable_reduction): New. 
	Call replace_immediate_uses.
	(vect_is_simple_reduction): New.
	(reduction_code_for_scalar_code): New.
	(vect_get_vec_def_for_operand): Handle vect_reduction_def case.
	(vect_transform_stmt): Handle reduc_vec_info_type case.
	(vect_is_simple_use): Don't fail on vect_reduction_def.
	(vect_determine_vectorization_factor): Check if vect_reduction_def.
	(vect_analyze_operations): Call vectorizable_reduction.
	(vect_analyze_scalar_cycles): Call vect_is_simple_reduction.
	(vect_transform_loop): Check STMT_VINFO_LIVE_P.
	(vectorizable_assignment): Check STMT_VINFO_RELEVANT_P and
	STMT_VINFO_DEF_TYPE.
	(vectorizable_operation, vectorizable_load, vectorizable_select): 
	Likewise.
	(vect_stmt_relevant_p): Set STMT_VINFO_EXTERNAL_USE.
	(new_stmt_vec_info): Initialize new field STMT_VINFO_EXTERNAL_USE.
	(vect_get_new_vect_var): Handle new vect_scalar_var case.
	(vect_create_destination_var): Likewise.
	* config/rs6000/altivec.md (sat_reduc_plus_v4si): New define_expand.
	(reduc_plus_v4si, reduc_plus_v4sf): New define_expand.

2005-02-22  Ira Rosen  <irar@il.ibm.com>

	* tree-data-ref.c (array_base_name_differ_p): Remove gcc_assert.
	(base_addr_differ_p): New function. Moved from tree-vectorizer.c
	(init_data_ref): Update new data-ref fields. Make static.
	(analyze_indirect_ref): Add checks of initial condition and evolution 
	for new data-ref fields.
	(strip_conversion): New function. Moved from tree-vectorizer.c
	(analyze_offset_expr, get_ptr_offset, address_analysis, object_analysis):
	Likewise.
	(create_data_ref): New function. API to data-ref analysis.
	(initialize_data_dependence_relation): Remove check of DR_BASE_NAME.
	Call base_addr_differ_p.
	(find_data_references_in_loop): Initialize new data-ref fields.

	* tree-data-ref.h (struct data_reference): New fields for base address, 
	offset, step, memory tag and misalignment info of data-ref in loop. 
	Macros for new fields access.
	(init_data_ref): Remove declaration.
	(create_data_ref, base_addr_differ_p): Add declarations.

	* tree-vectorizer.c (new_stmt_vec_info): Remove fields update.
	(vect_get_ptr_offset, vect_strip_conversions, vect_analyze_offset_expr): 
	Remove.
	(vect_create_addr_base_for_vector_ref): Use data-ref structure fields.
	( vect_create_data_ref_ptr, vect_gen_niters_for_prolog_loop): Likewise.
	(vect_base_addr_differ_p): Remove.
	(vect_analyze_data_ref_dependence): Call base_addr_differ_p.
	(vect_compute_data_ref_alignment): Use data-ref structure fields. Remove 
	misalignment modulo computation.
	(vect_analyze_data_ref_access): Use data-ref structure fields. 
	(vect_analyze_pointer_ref_access, vect_get_memtag, vect_address_analysis,
	vect_object_analysis): Remove. 
	(vect_analyze_data_refs): Fix comment. Call create_data_ref.

	* (tree-vectorizer.h): Remove fields from struct _stmt_vec_info and remove 
	their macros.

2005-02-21  Devang Patel  <dpatel@apple.com>

	* gcc/tree-vectorizer.c (vect_analyze_data_ref_dependence): Check for NULL
	distance vector.

2005-02-16  Dorit Naishlos  <dorit@il.ibm.com>

	Merge vectorizer related changes made on mainline
	between autovect-merge-20050127 and 20050215.
	* tree-vectorizer.c: Merge changes from mainline.
	* tree-vectorizer.h: Likewise.
	* tree-data-ref.c: Merge vectorizer related changes from mainline.
	* common.opt: Likewise.
	* opts.c: Likewise.
	* tree.h: Likewise.
	* docs/invoke.texi: Likewise.

2005-02-14  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-data-ref.c (subscript_dependence_tester): Count only once 
	dependent relations instead of incrementing num_dependence_dependent 
	for each subscript.
	* tree-scalar-evolution.c (add_to_evolution): Don't handle REAL_CST.
	(number_of_iterations_for_all_loops): Count the number of loops for 
	which there is an estimation of the number of iterations.
	(number_of_iterations_for_all_loops): Print nb_estimated_loops.
	(chrec_stats): Add nb_other.
	(reset_chrecs_counters): Initialize to zero nb_other.
	(dump_chrecs_stats): Dump nb_other, the number of compound
	expressions.
	(gather_chrec_stats): Count the number of undetermined chrecs before 
	the classification.  On the default case, increment nb_other.
	(analyze_scalar_evolution_for_all_loop_phi_nodes): Avoid iterating 
	over the loop phis, because some of them could be removed
	during the analysis.  Record the phi nodes that have to be analyzed 
	in a vector of trees.

2005-02-12  Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vectorizer.h (vect_def_type): New enum definition.
	(_stmt_vec_info): New fields "live"  and "def_type" added.
	(STMT_VINFO_LIVE_P, STMT_VINFO_DEF_TYPE): New macros to access above
	new fields.
	(set_stmt_info): Argument type changed to tree_ann_t.
	(vinfo_for_stmt): Type of variable "ann" changed to tree_ann_t. 
	* tree-vectorizer.c (vect_analyze_scalar_cycles): Function made void 
	instead of bool. Set STMT_VINFO_DEF_TYPE for phi nodes.
	(vect_is_simple_use): Takes additional arguments. Consider 
	STMT_VINFO_DEF_TYPE.
	(vect_mark_relevant): Takes additional arguments. Set STMT_VINFO_LIVE_P.
	(vect_stmt_relevant_p): Takes additional arguments.
	(new_stmt_vec_info): Initialize the new fields STMT_VINFO_LIVE_P and
	STMT_VINFO_DEF_TYPE.
	(new_loop_vec_info): Set a stmt_vec_info for phi node.
	(destroy_loop_vec_info): Free the stmt_vec_info for phi nodes.
	(vect_get_vec_def_for_operand): Use new outputs of vect_is_simple_use.
	(vectorizable_assignment): Use new API for vect_is_simple_use.
	Support the case when the def of the assignment is used out of the loop
	and the use of the assignment is invariant. 
	(vectorizable_operation): Use new API for vect_is_simple_use. Check
	if the def of the operation is used out side the loop.
	(vectorizable_load): Likewise.
	(vectorizable_select) Likewise.
	(vectorizable_store): Use new API for vect_is_simple_use.
	(vect_is_simple_cond): Use new API for vect_is_simple_use.
	(vect_analyze_operations): Check if operations are used after the loop.
	Also check phi nodes.
	(vect_enhance_data_refs_alignment): Call vect_can_advance_ivs_p.
	(vect_mark_stmts_to_be_vectorized): Check vect_stmt_relevant_p also for
	phis when initializing the worklist. Use new API for vect_mark_relevant
	ans vect_stmt_relevant_p. Use new API for vect_is_simple_use. Mark
	"liveness" (i.e. presence of uses after loop) seperately from 
	"relevance" (i.e. need to be vectorized).
	(vect_analyze_loop): Call to vect_analyze_scalar_cycles moved earlier.
	(vect_pattern_recog_1): Cast to tree_ann_t in call to set_stmt_info.
	(vect_transform_loop): Likewise.
	(vect_update_ivs_after_vectorizer): Add debug printouts.
	(vect_can_advance_ivs_p): Likewise.

2005-02-10  Devang Patel  <dpatel@apple.com>

        * config/rs600/altivec.md (altivec_vsr<VI_char>): Rename to ..
        (lhsr<mode>3): ... new name.
        (altivec_vsra<VI_char>): Rename to ..
        (ashr<mode>3): ... new name.
        * config/rs6000/rs6000.c (builtin_description): Rename shift
        operations.

2005-02-02  Keith Besaw  <kbesaw@us.ibm.com>

	* tree-vectorizer.c (vectorizable_load): Remove call to
	mark_call_clobbered_vars_to_rename.

2005-02-02  Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vectorizer.c (slpeel_update_phi_nodes_for_guard): Removed.
	(slpeel_update_phi_nodes_for_guard1): New function.	
	(slpeel_update_phi_nodes_for_guard2): New function.	
	(slpeel_tree_peel_loop_to_edge): Call above new functions instead of
	slpeel_update_phi_nodes_for_guard.
	(vect_update_ivs_after_vectorizer): Remove assersion.
	(vect_transform_loop): Remove redundant argument 
	need_loop_closed_rewrite and its uses.
	(vectorize_loops): Remove all uses of need_loop_closed_rewrite. Remove
	call to loop_closed_rewrite.
	
	(vect_is_simple_iv_evolution): Remove redundant argument.
	(vect_analyze_scalar_cycles): Call vect_is_simple_iv_evolution with one
	less argument.
	(vect_analyze_pointer_ref_access): Likewise.
	(vect_analyze_pointer_ref_access): Remove redundant check.
	(vect_enhance_data_refs_alignment): Remove wrong comment and check.

2005-02-02  Keith Besaw  <kbesaw@us.ibm.com> 
	    Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vectorizer.c (new_loop_vec_info): Initialize
	LOOP_VINFO_MAY_MISALIGN_STMTS.
	(destroy_loop_vec_info); varray_clear of LOOP_VINFO_MAY_MISALIGN_STMTS.
	(vect_create_cond_for_align_checks): New function.
	(vect_transform_loop): Add calls to tree_ssa_loop_version and
	vect_create_cond_for_align_checks.
	(vect_build_dist_vector): Change loop_info to loop_vinfo as it is
	called elsewhere.
	(vect_update_misalignment_for_peel): New function.
	(vect_enhance_data_refs_alignment): Decide when to do loop
	versioning and update data structcures.
	(vect_analyze_data_refs_alignment): Fix comment.
	(vect_pattern_recog): Fix comment.
	(vectorize_loops): Tmporarily move call to rewrite_into_loop_closed_ssa
	so it's done each time it's needed rather than once at the end.
	(vect_verify_datarefs_alignment): New function.
	* tree-vectorizer.h (struct _loop_vec_info): Add fields ptr_mask and
	may_misalign_stmts.
	(MAX_RUNTIME_ALIGNMENT_CHECKS): New named constant.

2005-01-31  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-data-ref.c (datadep_stats): Add the following fields:
	num_dependence_tests, num_dependence_dependent, 
	num_dependence_independent, num_dependence_undetermined,
	num_subscript_tests, num_subscript_undetermined, 
	num_same_subscript_function.
	Removed num_tested and num_unimplemented.
	(can_use_analyze_subscript_affine_affine): Print some text 
	when executed.
	(analyze_siv_subscript, analyze_miv_subscript):
	Increment dependence_stats counters apropriately in missing cases.
	(chrec_steps_divide_constant_p): Deal with undetermined symbols.
	(analyze_miv_subscript): Adapt for chrec_steps_divide_constant_p.
	(analyze_overlapping_iterations, subscript_dependence_tester, 
	compute_affine_dependence, compute_data_dependences_for_loop): 
	Use the new counters.

2005-01-31  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-scalar-evolution.c (unify_peeled_chrec): Use
	standard_iv_increment_position for computing the iv update 
	location.
	* tree-ssa-loop-manip.c (standard_iv_increment_position): 
	Fix as suggested by Zdenek.

2005-01-31  Dorit Naishlos  <dorit@il.ibm.com>

	Merge from mainline (autovect-merge-20050127).

2005-01-19 Mostafa Hagog <mustafa@il.ibm.com>

	* cfg.c (clear_bb_flags): Don't clear BB_DISABLE_SCHEDULE.
	* cfgloop.h (doloop_valid_p): Make external.
	(rtl_loop_copy_header): New.
	* common.opt (frtl-loop-hc): New.
	* ddg.c (create_ddg_dependence): Ignore register ANTI_DEP.
	* loop-doloop.c (doloop_valid_p): Make external.
	* loop-unroll.c (SIMPLE_LOOP_P, rtl_loop_single_full_bb_p,
	rtl_loop_ch_appropriate_p, cfg_duplicate_sese_region,
	rtl_loop_copy_header) : New.
	* modulo-sched.c: Many changes to use loop info and work in
	cfg-layout mode and updates to the scheduling algorithm.
	* params.def (PARAM_LOOP_CH_MAX_SIZE): New.
	* params.h (LOOP_CH_MAX_SIZE): New.
        * passes.c (rest_of_handle_sms): Call cfg_layout_initialize and
	cfg_layout_finalize.
	(rest_of_handle_loop2): Call rtl_loop_copy_header.

2005-01-14  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-data-ref.c (analyze_subscript_affine_affine): Implement a 
	solution for the FIXME concerning the symbolic affine
	dependence testing; remove the FIXME.
	(can_use_analyze_subscript_affine_affine): New function.
	(analyze_siv_subscript): Use it.

2005-01-13  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-scalar-evolution.c (already_unified): New bitmap.
	(follow_ssa_edge): Include a comment for the return value.
	(unify_peeled_chrec): New function...
	(analyze_evolution_in_loop): ... called from here.
	(scev_initialize): Initialize already_unified.
	(scev_finalize): Free already_unified.
	* tree-ssa-loop-ivopts.c (find_bivs): Allow the scev analyzer
	to remove or add loop phi nodes in the analyzed loop.

2005-01-13  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-data-ref.c (analyze_subscript_affine_affine): Clarify
	function's comment.  Include a FIXME note for the symbolic case.
	(analyze_siv_subscript, analyze_miv_subscript): Ensure that no 
	symbolic evolution is passed to analyze_subscript_affine_affine.

2005-01-12  Ira Rosen  <irar@il.ibm.com>
	    Dorit Naishlos  <dorit@il.ibm.com>

	Merged from mainline
	* tree-vectorizer.c (vect_analyze_offset_expr): Use 
	expr_invariant_in_loop_p.  Initialize outputs first thing in the 
	function.
	(vect_update_ivs_after_vectorizer): Call initial_condition_in_loop_num.
	(vect_is_simple_iv_evolution): Call initial_condition_in_loop_num.
	(vect_analyze_pointer_ref_access): Check that the initial condition of 
	the access function is loop invariant.

2005-01-11 Mostafa Hagog <mustafa@il.ibm.com>

	* basic-block.h (extract_true_false_edges_from_block): Declare.
	* cfg.c (extract_true_false_edges_from_block): Move to here.
	* cfghooks.c (lv_flush_pending_stmts, loop_version_call_back):
	New.
	* cfghooks.h (loop_version_call_back, flush_pending_stmts): New
	in cfg_hooks.
	(lv_flush_pending_stmts, loop_version_call_back): Declare.
	* cfgloop.h (create_preheader): Make extern.
	(duplicate_loop_to_header_edge): Change return type to bool.
	(loop_version): Declare.
	* cfgloopmanip.c (cfghooks.h): Include.
	(duplicate_loop_to_header_edge): Change return type to bool.
	(create_preheader): Make external.
	(loop_version): Move here.
	* cfgrtl.c (cfgloop.h): Include.
	(rtl_verify_flow_info_1): Fix.
	(rtl_lv_add_condition_to_bb, rtl_lv_adjust_loop_entry_edge,
	rtl_loop_version_call_back): New.
	(rtl_cfg_hooks, cfg_layout_rtl_cfg_hook): Add two new hooks.
	* tree-cfg.c (lv_adjust_loop_header_phi,
	tree_lv_add_condition_to_bb, tree_lv_adjust_loop_entry_edge):
	Move here and rename.
	(tree_loop_version_call_back): New.
	(tree_cfg_hooks): Add two new hooks.
	(extract_true_false_edges_from_block): Remove from here.
	* tree-flow.h (extract_true_false_edges_from_block): Remove from
	here.
	* tree-ssa-loop-manip.c (lv_adjust_loop_header_phi,
	lv_adjust_loop_entry_edge, tree_ssa_loop_version): Remove from
	here.

2005-01-06  Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vectorizer.h: (peeling_for_alignment): Fix spelling in comment
	for this field.

	(vect_recog_unsigned_subsat_pattern): Argument changed from varray_type
	to varray_type*.
	(_recog_func_ptr): Argument changed from varray_type to varray_type*.
	* tree-vectorizer.c (vect_pattern_recog_1): Argument changed from
	varray_type to varray_type*. Pass &stmt_list instead of stmt_list
	when calling pattern_recog_func.
	(vect_recog_unsigned_subsat_pattern): Argument changed from varray_type
	to varray_type*.
	(vect_pattern_recog): pattern_recog_func takes varray_type* instead of
	varray_type.

	(vect_enhance_data_refs_alignment): Fix DR_MISALIGNMENT setting to
	value in bytes.

	(new_loop_vec_info): Initialize LOOP_PEELING_FOR_ALIGNMENT with 0
	instead of false.
	(vect_enhance_data_refs_alignment): Avoid 80 column overflow.

	Merged from mainline:
	* tree-vectorizer.c (vect_mark_relevant) First argument changed from
	varray_type to varray_type*. 
	(vect_mark_stmts_to_be_vectorized): Pass &worklist instead of worklist
	when calling vect_mark_relevant.

2005-01-06  Ira Rosen  <irar@il.ibm.com>

	* tree-vectorizer.c (vect_get_ptr_offset): Return value in bytes.
	(vect_analyze_offset_expr): Use size arithmetics. Reorganize the code.
	(vect_get_base_and_offset): Use size arithmetics. Call
	handled_component_p.
	(vect_create_addr_base_for_vector_ref): Add comment.
	(vect_create_data_ref_ptr): Use TYPE_SIZE_UNIT.
	(vectorizable_load): Use size arithmetics.
	(vect_gen_niters_for_prolog_loop): Test for INTEGER_CST.
	(vect_compute_data_ref_alignment): Use size arithmetics.
	(vect_analyze_data_ref_access): Use tree_int_cst_compare and
	TYPE_SIZE_UNIT.
	(vect_analyze_pointer_ref_access): Use size arithmetics.
	(vect_get_memtag_and_dr): Use size arithmetics.

2004-12-30  Sebastian Pop  <pop@cri.ensmp.fr>

	* version.c (version_string): Automatically update the name of 
	the branch.

2004-12-27  Zdenek Dvorak  <dvorakz@suse.cz>

	* tree-ssa-loop-niter.c (tree_simplify_using_condition): Expand simple
	definitions of ssa names in condition.  Split recusive part to ...
	(tree_simplify_using_condition_1): New function.
	(expand_simple_operations): New function.

2004-12-20  Sebastian Pop  <pop@cri.ensmp.fr>

	* tree-chrec.c (eq_evolutions_p): New.
	* tree-chrec.h (eq_evolutions_p): Declared.
	* tree-data-ref.c (analyze_overlapping_iterations): Use eq_evolutions_p.

2004-12-20  Sebastian Pop  <pop@cri.ensmp.fr>

	* Makefile.in (OBJS-common): Add tree-elim-check.o.
	(tree-elim-check.o): New.
	* common.opt (ftree-elim-checks): New.
	* timevar.def (TV_TREE_ELIM_CHECKS): New.
	* tree-flow.h (eliminate_redundant_checks): Declared.
	* tree-optimize.c (init_tree_optimization_passes): Execute 
	pass_elim_checks.
	* tree-pass.h (pass_elim_checks): Declare.
	* tree-ssa-loop-niter.c (number_of_iterations_exit): Handle a 
	special case of EQ_EXPR.
	* tree-ssa-loop.c (tree_elim_checks, gate_tree_elim_checks): New.
	(pass_elim_checks): Defined.
	* doc/invoke.texi (-ftree-elim-checks): Document the flag.
	* tree-elim-check.c: New file, adapted from LNO-branch.

2004-12-16  Devang Patel  <dpatel@apple.com>

	* tree-ssa-forwprop.c (replacable_use_in_cond_expr): Add SSA_NAME check
	for operands.

2004-12-15  Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vectorizer.h (same_align_refs): New field in struct 
	_stmt_vec_info.
	(STMT_VINFO_SAME_ALIGN_REFS): New macro to access above new field.
	(unknown_alignment_for_access_p): Replaced by 
	known_alignment_for_access_p.
	(known_alignment_for_access_p): New.
	(do_peeling_for_alignment): Field made int instead of bool and renamed
	to peeling_for_alignment.
	(LOOP_DO_PEELING_FOR_ALIGNMENT): Renamed to LOOP_PEELING_FOR_ALIGNMENT.

	* tree-vectorizer.c (vect_determine_vectorization_factor): New. This
	functionality used to be in vect_analyze_operations.
	(vect_analyze_operations): Code to determine vectorization factor was
	moved to vect_determine_vectorization_factor.
	(vect_gen_niters_for_prolog_loop): Handle known alignment case more
	efficiently. Use LOOP_PEELING_FOR_ALIGNMENT.
	(vect_do_peeling_for_alignment): Use fold.
	(vect_transform_loop): Use new name of LOOP_DO_PEELING_FOR_ALIGNMENT.
	
	(vect_enhance_data_refs_alignment): Function made bool instead of void.
	Documentation moved before the function. Consider datarefs with same
	alignment. Update to correct alignment when it is known instead of -1.
	Set peeling factor in LOOP_PEELING_FOR_ALIGNMENT.
	Check if there remain unsupported datarefs  - this was moved from
	vect_analyze_data_refs_alignment.
	(vect_analyze_data_refs_alignment): Some of the functionality moved to
	vect_enhance_data_refs_alignment.
	(new_stmt_vec_info): Initialize same_align_datarefs varray.
	(destroy_loop_vec_info): Clear same_align_datarefs varray.
	(vect_analyze_data_ref_dependence): Push drs into the 
	same_align_datarefs varray in case the dependence distance is 0.

	(vect_analyze_loop): Call vect_determine_vectorization_factor (used to
	be part of vect_analyze_operations).  
	Call vect_enhance_data_refs_alignment (used to be in 
	vect_analyze_data_refs_alignment).
	
	(vect_update_inits_of_dr): Renamed to vect_update_init_of_dr.
	(vect_update_inits_of_drs): Use new name of vect_update_inits_of_dr.
	(vectorizable_store): Fix assertion to use == instead of =.
	(vect_do_peeling_for_loop_bound, vect_analyze_loop): Change debug 
	printing.
	

2004-12-15  Daniel Berlin  <dberlin@dberlin.org>

	* Makefile.in (tree-chrec.o): Add cfgloop.h

	* tree-chrec.c: Add cfgloop.h, tree-flow.h.
	(evolution_function_is_invariant_p): New function.
	(evolution_function_is_affine_multivariate_p): Use
	evolution_function_is_invariant_p instead of
	evolution_function_is_constant_p.

	* tree-chrec.h: Add prototype for
	evolution_function_is_invariant_p.
	(evolution_function_is_affine_p): Use
	evolution_function_is_invariant_p. 

	* tree-data-ref.c (analyze_overlapping_iterations): chrecs that
	are equal overlap on every iteration.
	
2004-12-14  Ira Rosen  <irar@il.ibm.com>

	PR tree-optimization/18179
	* tree-vectorizer.h (struct _stmt_vec_info): Add new fields:
	initial_offset, step, misalignment and base_aligned_p and macros
	to access them.
	* tree-vectorizer.c (vect_analyze_offset_expr): New function.
	(new_stmt_vec_info): Initialize the new fields of stmt_vec_info.
	(vect_create_data_ref_ptr): Fix printings.
	(vect_get_base_and_offset): Call get_inner_reference and
	vect_analyze_offset_expr. Renamed (previous name
	vect_get_base_and_bit_offset).
	(vect_create_addr_base_for_vector_ref): Build address_base by
	combining base and initial_offset fields of vect_stmt_info.
	(vect_update_inits_of_dr): Update offset of data-ref instead of its
	access-fn. Remove argument.
	(vect_update_inits_of_drs): Call vect_update_inits_of_dr with new
	arguments.
	(vect_compute_data_ref_alignment): Check misalignment info in
	vect_stmt_info. Remove argument.
	(vect_compute_data_refs_alignment): Call
	vect_compute_data_ref_alignment with correct argument.
	(vect_analyze_data_ref_access): Check access info in vect_stmt_info.
	(vect_analyze_pointer_ref_access): Update step and initial_offset
	fields of vect_stmt_info.
	(vect_get_memtag_and_dr): Call vect_get_base_and_offset and set the
	fields of stmt_vec_info. Reorganize. Add memtag retrieval. Renamed
	(previous name vect_get_symb_and_dr).
	(vect_analyze_data_refs): Find vectype and pass it to
	vect_get_memtag_and_dr. Remove memtag retrieval.
	(vect_get_first_index): Remove.
	(vect_compute_array_base_alignment): Remove.
	(vect_compute_array_ref_alignment): Remove.

2004-12-14  Dorit Naishlos  <dorit@il.ibm.com>

	Merge from mainline (autovect-merge-20041213).

2004-12-13  Dorit Naishlos  <dorit@il.ibm.com>

	* tree.def (SAT_MINUS_EXPR): New tree code.
	* expr.c (expand_expr_real_1): Add SAT_MINUS_EXPR case.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	(op_prio, op_symbol): Likewise.
	* optabs.c (optab_for_tree_code): Likewise.
	(init_optabs): Initializae ssat_sub_optab, usat_sub_optab.
	* optabs.h (OTI_ssat_sub, OTI_usat_sub): New.
	(ssat_sub_optab, usat_sub_optab): New.
	* genopinit.c (ssat_sub_optab, usat_sub_optab): New optabs.
	* tree-vectorizer.c (vect_pattern_recog): New function.
	(vect_pattern_recog_1): New function.
	(vect_recog_unsigned_subsat_pattern): New function.
	(new_stmt_vec_info): Initialize new fields IN_PATTERN_P and RELATED_STMT.
	(vectorizable_operation): Handle the case that the stmt to be vectorized is a
	new stmt that was added to replace a pattern.
	(vect_mark_relevant): Hanlde stmts that are marked as IN_PATTERN.
	(vect_mark_stmts_to_be_vectorized): Don't reset to 0.
	(vect_analyze_loop): Call vect_pattern_recog.
	* tree-vectorizer.h (in_pattern_p, related_stmt): New fields in struct
	_stmt_vec_info.
	(TMT_VINFO_IN_PATTERN_P, STMT_VINFO_RELATED_STMT): New macros to access the
	new fields.
	(vect_pattern_recog_func): New array of pattern recognition functions.
	* config/rs6000/altivec.md (usat_subv16qi3, usat_subv8hi3, usat_subv4si3): New.

2004-12-08 Devang Patel  <dpatel@apple.com>

        * tree-ssa-forwprop.c (cast_conversion_assignment_p): New.
        (replace_use_in_cond_expr): New.
        (all_uses_are_replacable): New.
        (eliminate_unnecessary_casts): New.
        (tree_ssa_forward_propagate_single_use_var): Eliminate unnecessary
        casts.

2004-12-08 Devang Patel  <dpatel@apple.com>

        * config/rs6000/rs6000.c (rs6000_emit_vector_select): Adjust
        vector select insn parameters.

2004-12-06  Keith Besaw  <kbesaw@us.ibm.com>

	* tree-vectorizer.c (update_vuses_to_preheader): New, fixup VUSEs for
	loads added to loop preheader block.
	(vect_create_data_ref_ptr): Remove code which sets the bitmap
	vars_to_rename.
	(vectorizable_store): Call copy_virtual_operands to copy V_MAY_DEFs
	from array element store to vector store and then update the statements
	defining the virtual SSA_NAMES.
	(vectorizable_load): Call copy_virtual_operands to copy VUSEs from
	array element load to vector load.  Call update_vuses_to_preheader for
	loads inserted into loop preheader block.
	(vect_do_peeling_for_alignment): Add need_loop_closed_rewrite parm.
	(vect_transform_loop): Add need_loop_closed_rewrite_parm.
	(vectorize_loops): Eliminate call to rewrite_into_ssa, only call
	rewrite_into_loop_closed_ssa if tree_duplicate_loop_to_edge has been
	called in vect_do_peeling_for_alignment or vect_transform_loop.
	* rs6000.c (altivect_init_builtins): Add the "const" attribute to
	__builtin_altivec_mask_for_store and 
	__builtin_altivec_mask_for_load.

2004-11-29  Daniel Berlin  <dberlin@dberlin.org>

	* tree-data-ref.c (dependence_stats): New structure.
	(analyze_indirect_ref): New function.
	(analyze_ziv_subscript): Track ziv tests using dependence_stats.
	(get_number_of_iters_for_loop): New function.
	Replace repeated idiom to get number of real/estimated iterations
	in loop with this function.
	(analyze_siv_subscript_cst_affine): Track siv stats using
	dependence_stats.
	No dependence exists if first overlap is outside of the loop.
	(analyze_subscript_affine_affine): No dependence exists if first
	overlap of either variable is outside of the loop.
	(analyze_siv_subscript): Track siv stats using dependence_stats.
	(analyze_miv_subscript): Ditto for miv.
	(analyze_overlapping_iterations): Track total number of tests
	using dependence_stats.
	(compute_affine_dependence): Print out failing reference if affine
	test is unusable.
	(find_data_references_in_loop): Rewrite to handle indirect_ref as
	well using analyze_indirect_ref.
	(compute_data_dependences_for_loop): Initialize stats structure,
	print out stats if request.
	
2004-11-22  Daniel Berlin <dberlin@dberlin.org>

	* tree-ssa-loop.c (pass_vectorize): Require PROP_align.
	
2004-11-22  Devang Patel  <dpatel@apple.com>

	Backport from Mainline.
	2004-11-22  Devang Patel  <dpatel@apple.com>

        * tree-if-conv.c (clean_predicate_lists): Clean all basic blocks. 

2004-11-17  Daniel Berlin  <dberlin@dberlin.org>

	* Makefile.in (OBJS-common): Add tree-ssa-align.o
	(tree-ssa-align.o): Add.
	* tree-flow.h (struct alignment_d): New.
	(dump_align_info): Add proto.
	(debug_align_info): Add proto.
	* tree-optimize.c (init_tree_optimization_passes): Add
	pass_align_info. 
	* tree-pass.h (PROP_align): New.
	(pass_align_analysis): New.
	* tree-ssa-align.c: New file.
	* tree-vectorizer.c (vect_get_ptr_offset): Copy code from
	lno-branch, written by Ira Rosen (irar@il.ibm.com).
	
2004-11-12  Devang Patel  <dpatel@apple.com>

	* optabs.c (vector_compare_rtx): Use tcc_comparison.

2004-11-12  Devang Patel  <dpatel@apple.com>

	Backport from Mainline.

	2004-11-12  Sebastian Pop  <pop@cri.ensmp.fr>

        * tree-data-ref.c (analyze_subscript_affine_affine): Correctly
        compute the first overlapping iterations.

2004-11-12  Devang Patel  <dpatel@apple.com>
	
	* tree-data-ref.c (compute_subscript_distance): Make externally visible.
	(build_class_dist_vector): Same.
	* tree-data-ref.h (compute_subscript_distance): New external decl.
	(build_class_dist_vector): Same.
	* tree-vectorizer.c (loops_num): New variable.
	(vect_build_dist_vector): New function.
	(vect_analyze_data_ref_dependence): Use distance vector to determine
	dependence.
	(vect_analyze_data_ref_dependences): Remove local variable loop.
	(vect_analyze_loop): Analyze operations before data dependences
	(vectorize_loops): Remove local variable loops_num.

2004-11-12  Devang Patel  <dpatel@apple.com>

	* tree-vectorizer.c (vectorizable_select): New function.
	(vect_is_simple_cond): New function.
	(vect_analyze_operations): Handle conditional expr.
	* tree-vectorizer.h (stmt_vec_info_type): New member, select_vec_info_type.

