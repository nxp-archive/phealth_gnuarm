2005-02-01  Diego Novillo  <dnovillo@redhat.com>

	Merge from mainline (tree-cleanup-merge-20050201).

2005-01-06  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (collect2.o-warn): Remove.
	* tree-optimize.c (init_tree_optimization_passes): Schedule
	pass_insert_range_assertions after pass_referenced_vars.
	* tree-vrp.c (opposite_comparison): Remove.
	(build_assert_exprs): Remove.
	(negate_assert_exprs): Remove.
	(build_assert_expr_for): New function.
	(maybe_add_assert_expr_on_edges): New function.
	(execute_insert_range_assertions): Change linear traversal of
	basic blocks to a recursive call maybe_add_assert_expr_on_edges 
	for the edges going out of ENTRY_BLOCK_PTR.

2004-12-14  Diego Novillo  <dnovillo@redhat.com>

	Add expression assertions to GIMPLE.

	* tree-vrp.c: New file.
	* tree.def (ASSERT_EXPR): Define.
	* Makefile.in (collect2.o): Compile with -Wno-error.
	(tree-vrp.o): New rule.
	(OBJS-common): Add tree-vrp.o.
	* timevar.def (TV_TREE_INSERT_ASSERT): Define.
	* fold-const.c (fold): Handle ASSERT_EXPR.
	* tree-cfg.c (verify_expr): Likewise.
	* tree-gimple.c (is_gimple_formal_tmp_rhs): Likewise.
	* tree-inline.c (estimate_num_insns_): Likewise.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	* tree-scalar-evolution.c (follow_ssa_edge_in_rhs): Likewise.
	(interpret_rhs_modify_expr): Likewise.
	* tree-ssa-dom.c (record_equivalences_from_stmt): Likewise.
	* tree-ssa-operands.c (get_expr_operands): Likewise.
	* tree-ssa-ccp.c (likely_value): Likewise.
	(pass_ccp): Add TODO_cleanup_cfg to todo_flags_finish.
	* tree-optimize.c (init_tree_optimization_passes): Schedule
	pass_insert_range_assertions and pass_remove_range_assertions.
	* tree-pass.h (pass_insert_range_assertions): Declare.
	(pass_remove_range_assertions): Declare.
	* tree-ssa-copy.c (stmt_may_generate_copy): Remove unnecessary
	checks for aliased loads and aliased stores.

2004-12-10  Diego Novillo  <dnovillo@redhat.com>

	* tree-flow-inline.h (clear_call_clobbered): New function.
	* tree-ssa-alias.c (init_alias_info): Call it.

2004-12-09  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (REWRITE_THIS_STMT): Define.
	(mark_def_sites): Clear REWRITE_THIS_STMT for statements that
	don't need any operands rewritten.
	(rewrite_stmt): Ignore statements that don't need to be
	rewritten.
	(rewrite_operand): Validate that an existing SSA_NAME is
	identical to the current reaching definition of the operand.

2004-12-09  Diego Novillo  <dnovillo@redhat.com>

	* tree-sra.c (mark_all_v_defs): Also mark VUSEs for renaming.
	* tree-vectorizer.c (vectorizable_load): Mark call-clobbered
	variables for renaming if we just introduced a CALL_EXPR.

2004-12-07  Devang Patel  <dpatel@apple.com>

	* tree-if-conv.c (find_phi_replacement_condition): New parameter, loop.
	While selecting replacement condition pay attention to loop header.

2004-12-05  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-phiopt.c (conditional_replacement): Release newly
	created SSA name if we can't use it.

2004-12-05  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-copy.c (copy_prop_visit_assignment): Return
	SSA_PROP_VARYING when the RHS cannot be propagated into the
	LHS.
	(pass_store_copy_prop): Add TODO_cleanup_cfg to
	todo_flags_finish.

2004-12-04  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-alias.c (setup_pointers_and_addressables): If VAR
	already had a type tag, mark the tag for renaming before
	replacing it with a new one.
	* tree-ssa.c (verify_ssa_name): Add argument 'mark_visited'.
	If 'mark_visited' is true, set TREE_VISITED on the given SSA name.
	Update all callers.

2004-12-04  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (cleanup_tree_cfg_loop): Call
	calculate_dominance_info before fixing loop structures.

2004-12-03  Diego Novillo  <dnovillo@redhat.com>

	* tree-flow.h (add_type_alias): Declare.
	* tree-pass.h (TODO_verify_loops): Define.
	* tree-loop-linear.c (linear_transform_loops): Don't call
	verify_loop_closed_ssa.
	* tree-optimize.c (execute_todo): Call verify_loop_closed_ssa
	if TODO_verify_loops is set.
	* tree-ssa-loop-ivopts.c (rewrite_address_base): Fix to call
	add_type_alias if VAR didn't have one already.
	Mark variables in the original statement for renaming.
	(tree_ssa_iv_optimize): Do not called verify_loop_closed_ssa
	nor verify_stmts before returning.
	* tree-ssa-alias.c (add_type_alias): New function.
	* tree-ssa-loop.c (pass_linear_transform): Add
	TODO_verify_loops to todo_flags_finish.
	(tree_ssa_loop_ivopts): Mark all statements modified before
	returning.
	(pass_iv_optimize): Add TODO_rename_vars, TODO_cleanup_cfg,
	TODO_verify_ssa and TODO_verify_loops to todo_flags_finish.
	* tree-vectorizer.c (vect_create_data_ref_ptr): Call
	add_type_alias, if necessary.
	(struct _stmt_vec_info): Fix documentation for field MEMTAG.

2004-10-19  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-copy.c (copy_prop_visit_phi_node): Always
	start with a nil copy-of value.

2004-10-19  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-ccp.c (replace_vuses_in): Revert inadvertent
	early return.

2004-10-19  Diego Novillo  <dnovillo@redhat.com>

	* common.opt (-ftree-store-copy-prop): New flag.
	* opts.c (decode_options): Enable STORE-COPY-PROP at O2.
	* timevar.def (TV_TREE_STORE_COPY_PROP): Define.
	* tree-flow.h (execute_copy_prop): Add boolean argument.
	* tree-optimize.c (init_tree_optimization_passes): Schedule
	STORE-COPY-PROP after SRA.
	* tree-pass.h (pass_store_copy_prop): Declare.
	* tree-ssa-ccp.c (set_lattice_value): Fix typo in comment.
	(replace_uses_in): Call may_propagate_copy before doing the
	final propagation.
	(replace_vuses_in): Call get_value_loaded_by.
	(ccp_lattice_meet): Do not test for memory reference equality
	if DO_STORE_CCP is false.
	(ccp_fold): Call get_value_loaded_by.
	(visit_assignment): Likewise.
	Set all the virtual definitions in the statement to the newly
	computed value.
	(ccp_visit_stmt): Reformat dump output.
	(do_ssa_store_ccp): If STORE-CCP is not enabled, run standard
	CCP.
	(gate_store_ccp): Return true if either CCP or STORE-CCP are
	enabled.
	(pass_store_ccp): Rename dump suffix.
	* tree-ssa-copy.c (cached_last_copy_of): Declare.
	(stmt_may_generate_copy): Return false if the name occurs in
	an abnormal PHI.
	(copy_chains): Remove.  Update all functions to use COPY_OF
	instead.
	(get_copy_of_val): Rename from get_first_copy.  Return a
	pointer to the COPY_OF slot for VAR.
	(set_copy_of_val): Rename from set_first_copy_of.
	Used CACHED_LAST_COPY_OF to determine whether the copy-of
	chain has changed.
	(copy_prop_visit_assignment): Do not call may_propagate_copy.
	In the case of STORE-COPY-PROP set the copy-of value for all
	the virtual definitions.
	(copy_prop_visit_stmt): Reformat dump output.
	(copy_prop_visit_phi_node): Support STORE-COPY-PROP by
	checking memory references for each argument.
	Do not allow copies to flow through abnormal edges.
	(init_copy_prop): Allocate cached_last_copy_of.
	(fini_copy_prop): Free cached_last_copy_of
	(execute_copy_prop): Add new boolean argument to determine
	whether to enable STORE-COPY-PROP.
	(do_copy_prop): New function.
	(pass_copy_prop): Call do_copy_prop.
	(gate_store_copy_prop): New function.
	(store_copy_prop): New function.
	(pass_store_copy_prop): Define.
	* tree-ssa-propagate.c (first_vuse): Remove.
	(get_value_loaded_by): New function.
	* tree-ssa-propagate.h (first_vuse): Remove.
	(get_value_loaded_by): Declare.
	* doc/invoke.texi (-ftree-store-copy-prop): Document.
	(-fdump-tree-store_copyprop): Document.

2004-10-15  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-ccp.c: Document SSA-CCP and STORE-CCP.

2004-10-14  Diego Novillo  <dnovillo@redhat.com>

	* tree-optimize.c (execute_one_pass): Stop timer right after
	executing the pass.

2004-10-14  Diego Novillo  <dnovillo@redhat.com>

	* tree-outof-ssa.c (check_replaceable): Return false for
	calls with side-effects.

2004-10-14  Diego Novillo  <dnovillo@redhat.com>

	* tree-flow.h (unmodifiable_var_p): Declare.
	* tree-flow-inline.h (unmodifiable_var_p): New function.
	* tree-ssa-alias.c (compute_flow_insensitive_aliasing): If the
	variable is read-only but the tag isn't, or vice versa, they
	cannot alias each other.
	(maybe_create_global_var): Do not create .GLOBAL_VAR if there
	are no call-clobbered variables.
	* tree-ssa-operands.c (get_call_expr_operands): Fix comment.
	(add_stmt_operand): If the variable is read-only and the
	operand is a V_MAY_DEF or V_MUST_DEF, change it to a VUSE.
	Likewise when adding V_MAY_DEF for members of may-alias sets.
	(add_call_clobber_ops): Call unmodifiable_var_p.

2004-10-14  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-pre.c (valid_in_set): Return false for
	tcc_declaration.
	(create_value_expr_from): Return NULL if one of the operands
	in the expression is an overflowed constant.
	(compute_avail): Only insert new expression if
	create_value_expr_from returns non-NULL.

2004-10-14  Diego Novillo  <dnovillo@redhat.com>

	Constant propagation of stores and loads.

	* common.opt (ftree-store-ccp): New flag.
	* opts.c (decode_options): Enable STORE-CCP at -O2.
	* timevar.def (TV_TREE_STORE_CCP): New timer.
	* tree-flow.h (struct prop_value_d): Declare.
	(unmodifiable_var_p): Declare.
	* tree-optimize.c (init_tree_optimization_passes): Re-arrange
	CCP, FRE and copy-prop passes.
	Add call to pass_store_ccp.
	* tree-pass.h (pass_store_ccp): Declare.
	* tree-ssa-ccp.c (value): Remove.  Update all users.
	(const_val): Declare.
	(value_vector): Remove.  Update all users.
	(ccp_lattice_t): Rename from latticevalue.  Update all users.
	(do_store_ccp): Declare.
	(debug_lattice_value): New function.
	(get_default_value): Re-write.
	(set_lattice_value): Do not allow lattice transitions to lower
	lattice values (with the exception of CONSTANT->UNKNOWN_VAL).
	Return false on UNINITIALIZED->UNDEFINED transitions.
	(def_to_varying): Remove.
	(likely_value): Re-write.
	(need_imm_uses_for): Call likely_value if VAR is defined by an
	assignment.
	(ccp_initialize): Remove variable 'is_may_def'.
	(struct prop_stats_d): Declare.
	(prop_stats): Declare.
	(replace_uses_in): Count number of constants and copies
	propagated.
	(replace_vuse_in): Likewise.
	(replace_phi_args_in): Factor out from ...
	(substitute_and_fold): ... here.
	Initialize prop_stats.
	Always remove EH edges if the statement no longer has EH
	information.
	(ccp_lattice_meet): Re-write.  Add documentation for
	UNKNOWN_VAL.
	(ccp_visit_phi_node): Do not handle UNKNOWN_VAL if
	do_store_ccp is false.
	(ccp_fold): Do not handle loads if do_store_ccp is false.
	(visit_assignment): Re-write.
	(ccp_visit_stmt): Visit all assignments.
	(execute_ssa_ccp): Add argument 'store_ccp'.
	(do_ssa_ccp): New function.
	(do_ssa_store_ccp): New function.
	(gate_store_ccp): Declare.
	* tree-ssa-copy.c (copy_of): Declare.
	(do_store_copy_prop): Declare.
	(stmt_may_generate_copy): New function.
	(need_imm_uses_for): Call it.
	(get_first_copy_of): Use copy_of instead of SSA_NAME_VALUE.
	(get_last_copy_of): Likewise.
	(set_first_copy_of): Likewise.
	(dump_copy_of): Likewise.
	(copy_prop_visit_assignment): Likewise.
	(copy_prop_visit_cond_stmt): Likewise.
	(copy_prop_visit_stmt): Likewise.
	(init_copy_prop): Likewise.
	(fini_copy_prop): Likewise.
	* tree-ssa-dom.c (struct opt_stats_d): Add fields
	num_const_prop and num_copy_prop.
	(tree_ssa_dominator_optimize): Do not execute more than once.
	(dump_dominator_optimization_stats): Show constants and copies
	propagated.
	(cprop_into_successor_phis): Do not replace if NEW == ORIG.
	(cprop_operand):  Do not replace if OP == VAL.
	Do not call get_virtual_var when VAL is a GIMPLE register.
	Keep statistics on propagated copies and constants.
	* tree-ssa-propagate.c (first_vuse): New function.
	(first_vdef): New function.
	(stmt_makes_single_load): New function.
	(stmt_makes_single_store): New function.
	* tree-ssa-propagate.h (first_vuse): Declare.
	(first_vdef): Declare.
	(stmt_makes_single_load): Declare.
	(stmt_makes_single_store): Declare.
	* tree-ssa.c (verify_ssa): Call verify_stmts.
	* doc/invoke.texi (-fdump-tree-storeccp): Document.
	(-ftree-store-ccp): Document.

2004-10-07  Andrew Pinski  <pinskia@physics.uc.edu>

	PR tree-opt/17671
	* tree-ssa-phiopt.c (tree_ssa_phiopt): Rewrite so we base the
	bbs on the COND_EXPR instead of the PHI_NODEs.
	(candidate_bb_for_phi_optimization): Remove.
	(replace_phi_with_stmt): Rename to ...
	(replace_phi_edge_with_variable): this and change so that we
	replace the phi argument instead of removing the PHI.
	(conditional_replacement): Change so we deal with PHI with more
	than two arguments.
	(value_replacement): Likewise.
	(abs_replacement): Likewise.

2004-10-06  Andrew MacLeod  <amacleod@redhat.com>

	PR tree-optimization/16447
	* tree-cfg.c (bsi_commit_one_edge_insert): Rename from 
	bsi_commit_edge_inserts_1, and make funtion external.  Return new block.
	(bsi_commit_edge_inserts): Use renamed bsi_commit_one_edge_insert.
	* tree-optimize.c (pass_cleanup_cfg_post_optimizing): Enable listing.
	* tree-flow.h (bsi_commit_one_edge_insert): Extern decl.
	* tree-outof-ssa.c (rewrite_trees): Don't commit edges here.
	(same_stmt_list_p): New.  Return TRUE if edge is to be forwarded.
	(identical_copies_p): New.  Return true is two copies are the same.
	(identical_stmt_lists_p): New.  Return true if stmt lists are the same.
	(analyze_edges_for_bb): New.  Determine how best to insert edge stmts 
	for a basic block.
	(perform_edge_inserts): New.  Determine what to do with all stmts that
	have been inserted on edges.
	(remove_ssa_form):  Analyze and commit edges from here.

2004-09-30  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-ccp.c (replace_uses_in, replace_vuse_in,
	substitute_and_fold): Bring from tree-ssa-propagate.c

2004-09-21  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (tree-ssa-copy.o): Add dependency on
	tree-ssa-propagate.h.
	* common.opt (ftree-copy-prop): New switch.
	* opts.c (decode_options): Set flag_tree_copy_prop at -O1 and
	higher.
	* timevar.def (TV_TREE_COPY_PROP): Define.
	* tree-cfg.c (tree_can_merge_blocks_p): Update comment.
	(find_taken_edge): Call fold if VAL is a comparison operator.
	* tree-flow.h (get_ptr_info): Declare.
	(kill_redundant_phi_nodes): Remove.
	(execute_ssa_ccp): Declare.
	(execute_copy_prop): Declare.
	* tree-optimize.c (init_tree_optimization_passes): Add
	pass_copy_prop and pass_fre.  Add more instances of pass_ccp.
	* tree-pass.h (pass_copy_prop): Declare.
	* tree-ssa-alias.c (get_ptr_info): Remove static declaration.
	* tree-ssa-ccp.c (get_default_value): Add parameter
	may_use_default_p.
	Update all callers.
	(set_lattice_value): Set SSA_NAME_VALUE.
	(need_imm_uses_for): Return true on PHI nodes and assignments
	that have no V_MAY_DEFs.
	(ccp_initialize): Do not initialize to VARYING DEFs and
	V_MUST_DEFs whose default value is VARYING.
	(execute_ssa_ccp): Make extern.
	* tree-ssa-copy.c: Update header documentation.
	(may_propagate_copy): Do not abort if ORIG is a GIMPLE reg.
	(merge_alias_info): Synchronize flow sensitive alias
	information.
	(need_imm_uses_for, get_first_copy_of, get_last_copy_of,
	set_first_copy_of, dump_copy_of, copy_prop_visit_assignment,
	copy_prop_visit_cond_stmt, copy_prop_visit_stmt,
	copy_prop_visit_phi_node, init_copy_prop, fini_copy_prop,
	execute_copy_prop): New local functions.
	* tree-ssa-pre.c (compute_avail): Also process DECLs.
	(execute_fre): Make extern.
	* tree-ssa-propagate.c: Update copyright years.
	(ssa_prop_init): Clear SSA_NAME_VALUE for every name.
	(replace_uses_in, replace_vuse_in, substitute_and_fold): Move
	from tree-ssa-ccp.c.
	* tree-ssa-propagate.h: Update copyright years.
	(replace_uses_in, substitute_and_fold): Declare.
	* tree-ssa.c (propagate_into_addr, replace_immediate_uses,
	get_eq_name, check_phi_redundancy, kill_redundant_phi_nodes,
	pass_redundant_phi): Remove.
	* tree.h (struct tree_ssa_name): Update comment for field
	value_handle.
	* doc/invoke.texi: Document -ftree-copy-prop.
