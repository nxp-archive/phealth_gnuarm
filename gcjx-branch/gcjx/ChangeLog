2005-10-19  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* dump.cc (pretty_printer::print_method): Do not descend into
	the return type of the method, just print the pretty name.
	(pretty_printer::visit_forwarding_type): Do not descend into
	RES_TYPE, just print the pretty name.
	(pretty_printer::visit_forwarding_resolved): Likewise.

2005-10-18  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (model_method): Set body,
	is_instance_initializer.

2005-10-18  Tom Tromey  <tromey@redhat.com>

	* model/classinst.hh (model_class_instance::type_map_match_p):
	Removed.
	* model/method.cc (apply_type_map): Updated.
	* model/method.hh (model_method::instance_cache): New field.
	* model/class.cc (create_instance): Updated.
	* model/class.hh (model_class::instances): Removed.
	(model_class::instance_cache): New field.
	* model/parameters.cc (find_instance): New method.
	(add_instance): Likewise.
	* model/parameters.hh (class model_instance_cache): New class.

	* model/class.cc (create_type_map): Removed.
	(create_instance): Updated.
	* model/parameters.hh (model_parameters::create_type_map):
	Declare.
	* model/parameters.cc (create_type_map): New method.
	* model/class.hh (model_class::create_instance): Updated
	documentation.
	(model_class::create_type_map): Removed.
	* model/method.hh (model_method::do_method_conversion_p):
	Declare.
	(model_method::method_conversion_p): Likewise.
	* model/method.cc (do_method_conversion_p): New methods.
	(method_conversion_p): Use it.  Return a method.
	(method_conversion_p): New overload.

	* model/invoke.hh (model_invocation_base::compute_type_parameters):
	Declare.
	* unify.cc: New file.
	* unify.hh: New file.
	* Makefile.am (headers): Added unify.hh.
	(model_sources): Added unify.cc.
	* model/classinst.cc (get_type_map): New method.
	* model/classinst.hh (model_class_instance::get_type_map): New
	overload.
	* model/wildcard.hh (model_wildcard::wildcard_p): New method.
	(model_wildcard): New constructor.
	(model_wildcard::has_bound_p): New method.
	* model/class.hh (model_class::get_type_parameters): New method.
	(model_class::wildcard_p): Likewise.
	* model/parameters.hh (model_parameters::begin): New method.
	(model_parameters::end): Likewise.
	* model/method.hh (model_method::get_type_parameters): New
	method.
	* model/classinst.hh (model_class_instance::get_type_map):
	Declare.
	* model/wildcard.hh (model_wildcard::super_p): New method.
	(model_wildcard::get_bound): Likewise.

2005-10-14  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (potentially_applicable_p): New methods.
	* model/invoke.hh (model_invocation_base::potentially_applicable_p):
	Declare.
	(model_generic_invocation::potentially_applicable_p): Likewise.
	* model/parameters.hh (model_parameters::size): New method.
	* model/method.hh (model_method::potentially_applicable_p):
	Declare.
	* model/method.cc (method_conversion_p): Removed early
	applicability test.
	(potentially_applicable_p): New methods.

2005-10-14  Tom Tromey  <tromey@redhat.com>

	* bytecode/cpool.hh (constant_pool::get_indices): Declare.
	* bytecode/cpool.cc (get_indices): New method.
	(get_name_and_type): Use it.
	(get_fieldref): Likewise.
	(get_methodref): Likewise.

2005-10-14  Tom Tromey  <tromey@redhat.com>

	* factory.cc (find_derived_file): Handle case where directory is
	the empty string.

2005-10-14  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (visit): Added missing 'template<>'s.

2005-10-13  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* dump.cc (pretty_printer::descend): Actually iterate over the given
	list.
	(pretty_printer::print_method): Utility method to print out a
	method description.
	(pretty_printer::print_class): Utility method to print out a class
	description.
	(pretty_printer): Implement pending visitor methods.

2005-10-13  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* model/invoke.hh (model_type_qualified_invocation::klass): Make
	protected instead of private.
	(model_type_qualified_invocation::super): Likewise.
	(model_super_invocation::finit): Likewise.
	(model_super_invocation::synthetic): Likewise.
	(model_generic_invocation::visit): Declare.
	* model/invoke.cc (model_generic_invocation::visit): Implement
	for all the default instantiations.
	* model/annotation.cc (model_annotation::visit): Do not abort.
	* model/memberref.cc (model_memberref_enum::visit): Likewise.
	* model/arrayinit.cc (model_annotation_initializer::visit): Likewise.
	* model/new.hh (model_new_primary::simple_name): Make protected
	instead of private.
	(model_new_primary::type_params): Likewise.
	* visitor.hh (visitor::visit_generic_invocation): New method.
	(visitor::visit_annotation): Likewise.
	(visitor::visit_annotation_initializer): Likewise.
	(visitor::visit_memberref_enum): Likewise.
	* fold.cc (fold_visitor): Implement new visitor methods.
	* defassign.cc (definite_assignment_visitor): Likewise.
	* dump.cc (dumper, pretty_printer): Likewise.
	* bytecode/generate.hh (bytecode_generator): Likewise.

2005-10-13  Ranjit Mathew  <rmathew@gcc.gnu.org>

	Add a new -fdump-tree flag for printing out the AST.
	* compiler.hh (compiler::dump_tree): New compiler flag.
	* compiler.cc (compiler::dump_tree): Initialize to false.
	(compiler::do_analyze_unit): Dump AST at the end of semantic
	analysis, if requested.
	* main.cc (features): Add "dump-tree".

2005-10-12  Tom Tromey  <tromey@redhat.com>

	* model/arrayref.hh (model_array_ref::get_array): New method.
	(model_array_ref::get_index): Likewise.

2005-10-12  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* model/annotype.hh (model_annotation_type::visit): Declare.
	* model/annotype.cc (model_annotation_type::visit): Implement.
	* model/arraytype.hh (model_array_type::visit): Declare.
	* model/arraytype.cc (model_array_type::visit): Implement.
	* model/block.hh (model_block::statements): Make protected.
	* model/bytecode.hh (model_phony_block::visit): Declare.
	* model/bytecode.cc (model_phony_block::visit): Implement.
	* model/class.hh (model_class::visit): Declare.
	* model/class.cc (model_class::visit): Implement.
	* model/classinst.hh (model_class_instance::visit): Declare.
	* model/classinst.cc (model_class_instance::visit): Implement.
	* model/constructor.hh (model_constructor::visit): Declare.
	* model/constructor.cc (model_constructor::visit): Implement.
	* model/enum.hh (model_enum::visit): Declare.
	* model/enum.cc (model_enum::visit): Implement.
	* model/enumconst.hh (model_enum_constant::visit): Declare.
	* model/enumconst.cc: New file.
	* model/init.hh (model_initializer_block::visit): Declare.
	* model/init.cc (model_initializer_block::visit): Implement.
	* model/javadoc.hh (model_javadoc::visit): Declare.
	* model/javadoc.cc: New file.
	* model/method.hh (model_abstract_method::visit): Declare.
	* model/method.cc (model_abstract_method::visit): Implement.
	* model/new.hh (model_new_primary::visit): Declare.
	* model/new.cc (model_new_primary::visit): Implement.
	* model/null.hh (model_null_type::visit): Declare.
	* model/null.cc (model_null_type::visit): Implement.
	* model/package.hh (model_package::name): Make protected.
	(model_unnamed_package::visit): Declare.
	(model_primordial_package::visit): Declare.
	* model/package.cc (model_unnamed_package::visit): Implement.
	(model_primordial_package::visit): Likewise.
	* model/primitive.hh (model_primitive_base::visit): Make abstract.
	(model_primitive_boolean::visit): Declare.
	(model_int_primitive::visit): Likewise.
	(model_fp_primitive::visit): Likewise.
	* model/primitive.cc (model_primitive_base::visit): Remove.
	(model_primitive_boolean::visit): Implement.
	(model_int_primitive::visit): Likewise.
	(model_fp_primitive::visit): Likewise.
	(model_fp_primitive<jfloat>): Instantiate.
	(model_fp_primitive<jdouble>): Likewise.
	* model/this.hh (model_this_outer::visit): Declare.
	(model_synthetic_this::visit): Likewise.
	* model/this.cc (model_synthetic_this::visit): Implement.
	(model_this_outer::visit): Likewise.
	* model/typevar.hh (model_type_variable::visit): Declare.
	* model/typevar.cc (model_type_variable::visit): Implement.
	* model/void.hh (model_void_type::visit): Declare.
	* model/void.cc: New file.
	* model/wildcard.hh (model_wildcard::visit): Declare.
	* model/wildcard.cc (model_wildcard::visit): Implement.
	* visitor.hh (visitor::visit_primitive): Remove.
	(visitor::visit_abstract_method): New method.
	(visitor::visit_annotation_type): Likewise.
	(visitor::visit_array_type): Likewise.
	(visitor::visit_class): Likewise.
	(visitor::visit_class_instance): Likewise.
	(visitor::visit_constructor): Likewise.
	(visitor::visit_enum): Likewise.
	(visitor::visit_enum_constant): Likewise.
	(visitor::visit_fp_primitive): Likewise.
	(visitor::visit_int_primitive): Likewise.
	(visitor::visit_primitive_boolean): Likewise.
	(visitor::visit_initializer_block): Likewise.
	(visitor::visit_new_primary): Likewise.
	(visitor::visit_null_type): Likewise.
	(visitor::visit_phony_block): Likewise.
	(visitor::visit_primordial_package): Likewise.
	(visitor::visit_unnamed_package): Likewise.
	(visitor::visit_synthetic_this): Likewise.
	(visitor::visit_this_outer): Likewise.
	(visitor::visit_type_variable): Likewise.
	(visitor::visit_void_type): Likewise.
	(visitor::visit_wildcard): Likewise.
	(visitor::visit_javadoc): Likewise.
	* defassign.cc (definite_assignment_visitor): Implement new visitor
	methods.
	* dump.cc (dumper, pretty_printer): Likewise.
	* fold.cc (fold_visitor): Likewise.
	* bytecode/generate.hh (bytecode_generator): Likewise.
	* Makefile.am (model_sources): Add model/enumconst.cc,
	model/javadoc.cc and model/void.cc.
	* Makefile.in: Regenerate.

2005-10-11  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (visit): Pass 'finit' as argument to visitor.
	* defassign.cc (definite_assignment_visitor::visit_super_invocation):
	Updated.
	* fold.cc (fold_visitor::visit_super_invocation): Updated.
	* bytecode/generate.cc (visit_super_invocation): Updated.
	* bytecode/generate.hh (bytecode_generator::visit_super_invocation):
	Updated.
	* dump.cc (dumper::visit_super_invocation): Updated.
	(pretty_printer::visit_super_invocation): Likewise.
	* visitor.hh (visitor::visit_super_invocation): Added argument.

2005-10-11  Tom Tromey  <tromey@redhat.com>

	* model/primitive.hh (model_int_primitive::convert): Perform
	intermediate conversions.

2005-10-10  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* model/element.hh (model_element::visit): Make abstract.
	* model/element.cc: Remove file.
	* visitor.hh (visitor::visit_element): Remove.
	(visitor::visit_annotation_member): New method.
	(visitor::visit_annotation_value): Likewise.
	(visitor::visit_import_single): Likewise.
	(visitor::visit_import_on_demand): Likewise.
	(visitor::visit_static_import_single): Likewise.
	(visitor::visit_static_import_on_demand): Likewise.
	(visitor::visit_unit_source): Likewise.
	(visitor::visit_unit_class): Likewise.
	(visitor::visit_unit_fake): Likewise.
	* model/annovalue.hh (model_annotation_value::visit): New method.
	* model/annovalue.cc: New file.
	* model/annomember.hh (model_annotation_member::visit): New method.
	* model/annomember.cc (model_annotation_member::visit): Implement.
	* model/import.hh (model_import_base::visit): New method.
	(model_import_single::visit): Likewise.
	(model_import_on_demand::visit): Likewise.
	(model_static_import_base::visit): Likewise.
	(model_static_import_single::visit): Likewise.
	(model_static_import_on_demand::visit): Likewise.
	* model/import.cc (model_import_single::visit): Implement.
	(model_import_on_demand::visit): Likewise.
	(model_static_import_single::visit): Likewise.
	(model_static_import_on_demand::visit): Likewise.
	* model/unit.hh (model_unit::visit): New method.
	(model_unit_source::visit): Likewise.
	(model_unit_class::visit): Likewise.
	(model_unit_fake::visit): Likewise.
	* model/unit.cc (model_unit_source::visit): Implement.
	(model_unit_class::visit): Implement.
	(model_unit_fake::visit): Implement.
	* dump.cc (dumper, pretty_printer): Dummy implementations of new
	visitor methods.
	* defassign.cc (definite_assignment_vistor): Likewise.
	* fold.cc (fold_visitor): Likewise.
	* bytecode/generate.hh (bytecode_generator): Likewise.
	* Makefile.am (model_sources): Add model/annovalue.cc and remove
	model/element.cc.
	* Makefile.in: Regenerated.

2005-10-10  Tom Tromey  <tromey@redhat.com>

	* aot/mangle.cc (update_cxx): New method.
	(mangler): Use it.
	* aot/mangle.hh (mangler::update_cxx): Declare.
	* header/cni.hh (cni_code_generator::keyword_p): Removed.
	* header/cni.cc (keywords): Moved to util.cc.
	(NUM_KEYWORDS): Likewise.
	(keyword_p): Likewise.
	(write_method): Updated.
	(write_field): Likewise.
	* util.cc (keywords): New global.
	(NUM_KEYWORDS): New macro.
	* util.hh (cxx_keyword_p): Declare.

2005-10-09  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_field_ref): Removed unneeded casts.

2005-10-09  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (class field_init_forwarding_catcher): New class.
	(class static_field_catcher): Likewise.
	(resolve): Use it.

2005-10-09  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* dump.cc (pretty_printer): Implement all the remaining visitor
	methods.

2005-10-09  Tom Tromey  <tromey@redhat.com>

	* model/element.hh (model_element): Constructor now protected.
	* source/parse.cc (compilation_unit): Make an empty statement,
	not a model_element, for error reporting.
	* model/binary.cc (resolve): Updated for removal of model_binary.
	* model/binary.hh (model_binary_base): Constructor now protected.
	(class model_binary): Removed.
	(class model_plus): Updated.
	(class model_arith_shift): Likewise.
	(class model_equality_comparison): Likewise.
	(class model_numeric_comparison): Likewise.
	(class model_logical_binary): Likewise.  Constructor now
	protected.
	* model/expr.hh (model_expression): Constructor now protected.
	* model/invoke.hh (model_invocation_base): Constructor now
	protected.
	* model/literal.hh (model_literal_base): Constructor now
	protected.
	* model/primitive.hh (model_primitive_base): Constructor now
	protected.
	(model_primitive): Likewise.
	* model/stmt.hh (model_stmt): Constructor now protected.
	* model/type.hh (model_type): Constructor now protected.
	* model/loop.hh (model_loop): Constructor now protected.
	* model/for.hh (model_for_base): Constructor now protected.

2005-10-09  Tom Tromey  <tromey@redhat.com>

	* model/forenhanced.hh (class model_for_enhanced): Added
	documentation.
	* model/for.hh (class model_for_base): Added documentation.
	(class model_for): Likewise.
	* model/identifier.hh (class model_identifier): Updated
	documentation.
	* model/instanceof.hh (class model_instanceof): Added
	documentation.
	* model/loop.hh (class model_loop): Added documentation.
	* model/label.hh (class model_label): Added documentation.
	* model/javadoc.hh (class model_javadoc): Added documentation.
	* model/newarray.hh (class model_new_array): Added documentation.
	* model/null.hh (class model_null_type): Added documentation.
	(class model_null_literal): Likewise.
	* model/return.hh (class model_return): Added documentation.
	* model/switch.hh (class model_switch_block): Added
	documentation.
	(class model_switch): Likewise.
	* watch.hh (class watch): Added documentation.
	* model/throw.hh (class model_throw): Added documentation.
	* model/throwsclause.hh (class model_throws_clause): Added
	documentation.
	* model/try.hh (class model_try): Added documentation.
	* model/unary.hh (class model_unary): Added documentation.
	(class model_prefix_simple): Likewise.
	(model_logical_not): Likewise.
	(class model_prefix_side_effect): Likewise.
	(class model_postfix): Likewise.
	* model/varref.hh (class model_simple_variable_ref): Added
	documentation.
	* model/varstmt.hh (class model_variable_stmt): Added
	documentation.
	* model/void.hh (class model_void_type): Added documentation.
	* model/blockscope.hh (class model_block_scope): Added
	documentation.
	* model/bytecode.hh (class model_bytecode_block): Added
	documentation.
	* model/declstmt.hh (class model_class_decl_stmt): Added
	documentation.
	* model/cond.hh (class model_conditional): Added documentation.
	* model/binary.hh (class model_binary_base): Added documentation.
	* model/assert.hh (model_assert::result): Added documentation.
	* model/if.hh (model_if::false_branch): Added documentation.

2005-10-08  Ranjit Mathew  <rmathew@gcc.gnu.org>

	Start implementation of a pretty-printer for AST nodes.
	* dump.hh (dump_tree): New method for printing a node from the AST.
	* dump.cc (dumper::visit_field_ref): Remove const qualifier from
	model_field * parameter
	(dumper::visit_field): New method.
	(dumper::visit_method_invocation): Remove const qualifier for METH.
	(dumper::visit_forwarding_type): Remove const qualifier for
	model_type * parameter.
	(dumper::visit_forwarding_resolved): New method.
	(dumper::visit_forwarding_owned): Likewise.
	(dumper::visit_forwarding_simple): Likewise.
	(dumper::visit_forwarding_array): Likewise.
	(dumper::visit_forwarding_element): Likewise.
	(dumper::visit_forwarding_full): Likewise.
	(dumper::visit_forwarding_inner): Likewise.
	(dumper::visit_forwarding_parameterized): Likewise.
	(pretty_printer): New class for pretty-printing AST nodes.
	(dump_tree): Implement.
	* visitor.hh (visitor::visit_field_ref): Remove const qualifier from
	model_field * parameter
	(visitor::visit_field): New method.
	(visitor::visit_method_invocation): Remove const qualifier for METH.
	(visitor::visit_forwarding_type): Remove const qualifier for
	model_type * parameter.
	(visitor::visit_forwarding_resolved): New method.
	(visitor::visit_forwarding_owned): Likewise.
	(visitor::visit_forwarding_simple): Likewise.
	(visitor::visit_forwarding_array): Likewise.
	(visitor::visit_forwarding_element): Likewise.
	(visitor::visit_forwarding_full): Likewise.
	(visitor::visit_forwarding_inner): Likewise.
	(visitor::visit_forwarding_parameterized): Likewise.
	* model/fwdtype.hh (model_forwarding_resolved::visit): New method.
	(model_forwarding_owned::visit): Likewise.
	(model_forwarding_simple::visit): Likewise.
	(model_forwarding_array::visit): Likewise.
	(model_forwarding_element::visit): Likewise.
	(model_forwarding_full::visit): Likewise.
	(model_forwarding_inner::visit): Likewise.
	(model_forwarding_parameterized::visit): Likewise.
	* model/fwdtype.cc (model_forwarding::resolved::visit): Implement.
	(model_forwarding_owned::visit): Likewise.
	(model_forwarding_simple::visit): Likewise.
	(model_forwarding_array::visit): Likewise.
	(model_forwarding_element::visit): Likewise.
	(model_forwarding_full::visit): Likewise.
	(model_forwarding_inner::visit): Likewise.
	(model_forwarding_parameterized::visit): Likewise.
	* model/field.hh (model_field::visit): New method.
	* model/field.cc (model_field::visit): Implement.
	* fold.cc (fold_visitor): Adjust for visitor changes.
	* defassign.cc (definite_assignment_visitor): Likewise.
	* bytecode/generate.hh (bytecode_generator): Likewise.
	* bytecode/generate.cc (bytecode_generator): Likewise.

2005-10-07  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* visitor.hh (visitor::visit_forwarding_type): New method.
	(visitor::visit_variable_decl): Likewise.
	(visitor::visit_parameter_decl): Likewise.
	(visitor::visit_catch_decl): Likewise.
	(visitor::visit_package): Likewise.
	(visitor::visit_primitive): Likewise.
	(visitor::visit_type): Likewise.
	(visitor::visit_identifier): Likewise.
	(visitor::visit_element): Likewise.
	* model/element.hh (model_element::visit): New method.
	* model/element.cc: New file.
	* model/identifier.hh (model_identifier::visit): New method.
	* model/identifier.cc: New file.
	* model/fwdtype.hh (model_forwarding_type::visit): New method.
	* model/fwdtype.cc (model_forwarding_type::visit): Implement.
	* model/variable.hh (model_variable::visit): New method.
	(model_parameter_decl::visit): Likewise.
	(model_catch_decl::visit): Likewise.
	* model/variable.cc (model_variable::visit): Implement.
	(model_parameter_decl::visit): Likewise.
	(model_catch_decl::visit): Likewise.
	* model/package.hh (model_package::visit): New method.
	* model/package.cc (model_package::visit): Implement.
	* model/primitive.hh (model_primitive_base::visit): New method.
	* model/primitive.cc (model_primitive_base::visit): Implement.
	* model/type.hh (model_type::visit): New method.
	* model/type.cc (model_type::visit): Implement.
	* model/javadoc.hh (model_javadoc::visit): New method.
	* bytecode/generate.hh: Dummy implementations of new visitor methods.
	* defassign.cc: Likewise.
	* dump.cc: Likewise.
	* fold.cc: Likewise.
	* Makefile.am (model_sources): Add "model/element.cc" and
	"model/identifier.cc".
	* Makefile.in: Regenerated.

2005-10-04  Tom Tromey  <tromey@redhat.com>

	* compiler.cc (semantic_analysis): Updated assert.

2005-10-03  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* source/lex.cc (lexer::get_line): Also save and restore NUM_CHARS
	and POSITION.

2005-10-03  Tom Tromey  <tromey@redhat.com>

	* source/lex.cc (get_raw): Increment column.
	(get): Don't increment line number when newline comes from unget.

	* source/iconv.cc (get): Rewrote.
	(iconv_ucs2_reader): Updated.
	(refill): Updated.
	(get): Rewrote.
	* source/iconv.hh (iconv_ucs2_reader::get): Updated.
	(iconv_ucs2_reader::next): Removed.
	* source/ucs2.cc (internal_get): New method.
	(get): Rewrote.
	* source/ucs2.hh (ucs2_reader::get): Changed prototype.
	(fallback_ucs2_reader::val): New field.
	(fallback_ucs2_reader::internal_get): Declare.
	* source/lex.cc (lexer): Initialize new fields.
	(get_raw): Rewrote.
	* source/lex.hh (lexer::chars): New field.
	(lexer::num_chars): Likewise.
	(lexer::position): Likewise.

	* scope.cc (resolution_scope): Initialize it.
	(update_cache): New method.
	(get_current_class): Removed.
	(push_scope): New method.
	(push_iscope): Moved from .hh file.
	* scope.hh (resolution_scope::current_class): New field.
	(resolution_scope::update_cache): Declare.
	(resolution_scope::get_current_class): Now inline.
	(push_iscope::save): New field.
	(push_iscope): Outline.
	(~push_iscope): New destructor.
	(resolution_scope::push_scope): Outline.

	* model/ideprecatable.hh (IDeprecatable::set_deprecated): Removed
	overload.
	* source/tstream.cc (lex_file): Handle javadoc here.
	(get_javadoc): Rewrote.
	(get_token): Removed.
	(peek_token): Removed.
	* source/parse.hh (class parse): Updated.
	* source/parse.cc (any_method_declarator): Changed argument type
	from ref_javadoc to bool.
	(field_declarator): Likewise.
	(void_method): Likewise.
	(member_decl): Likewise.
	(class_body_declaration): Updated.
	(class_or_interface_declaration): Likewise.
	* source/tstream.hh (token_stream::javadoc_is_ok): Removed.
	(token_stream): Updated.
	(token_stream::deprecated): New field.
	(token_stream::get_token): Now inline.
	(token_stream::get_javadoc): Changed return type.
	(token_stream::peek_token): Now inline.
	(token_stream::peek_token1): Likewise.
	(token_stream::peek_token): Removed overload.

	* source/parse.hh (parse::get): Return reference.
	(parse::peek): Likewise.
	(parse::peek1): Likewise.
	(parse::require): Likewise.
	(parse::assume): Likewise.
	* source/lex.cc (lex_token): Renamed.
	* source/lex.hh (lexer::lex_token): Renamed from get_token.  Now
	protected.
	* source/parse.cc (class_body_declaration): Use get_javadoc.
	(class_or_interface_declaration): Likewise.
	(require): Use and return reference.
	(assume): Likewise.
	(identifier): Use reference.
	(new_something): Likewise.
	(type_dot_class): Likewise.
	(class_name_dot_this): Likewise.
	(postfix_expression): Likewise.
	(unary_expression_not_plus_minus): Likewise.
	(unary_expression): Likewise.
	(relational_expression): Likewise.
	(assignment): Likewise.
	(primitive_type): Likewise.
	(type_name): Likewise.
	(final_or_attributes): Likewise.
	(assert_statement): Likewise.
	(try_statement): Likewise.
	(if_then_statement): Likewise.
	(statement): Likewise.
	(explicit_constructor_invocation): Likewise.
	(type_parameters): Likewise.
	(member_value): Likewise.
	(any_method_declarator): Likewise.
	(void_method): Likewise.
	(member_decl): Likewise.
	(class_body_declaration): Likewise.
	(interface_declaration): Likewise.
	(class_declaration): Likewise.
	(class_or_interface_declaration): Likewise.
	(type_declaration): Likewise.
	* source/tstream.cc (get_unfiltered_token): Removed.
	(peek_token): Updated.
	(peek_token1): Updated.
	(get_token): Rewrote.
	(lex_file): Added assert.
	(peek_token): New method.
	(peek_token, peek_token1): Removed.
	(class saver): Removed.
	(get_javadoc): New method.
	* source/tstream.hh (token_stream::get_unfiltered_token):
	Removed.
	(token_stream::position_type): New typedef.
	(token_stream::read_position): Use it.
	(token_stream::set_mark): Likewise.
	(token_stream::reset_to_mark): Likewise.
	(class marker): Likewise.
	(token_stream::javadoc_ok): Removed.
	(token_stream::peek_token): New overload.
	(token_stream::peek_token1): Inline.

2005-10-03  Ranjit Mathew  <rmathew@gcc.gnu.org>

	Show lines from input files in diagnostics.
	* source/ucs2.hh (ucs2_reader::limit): Rename to 'end'.
	(ucs2_reader::begin): New field.
	(ucs2_reader::posn): Likewise.
	(ucs2_reader::max_posn): Likewise.
	(ucs2_reader::get_uint8): Update POSN as needed.
	(ucs2_reader::get_posn): New method.
	(ucs2_reader::set_posn): Likewise.
	* source/ucs2.cc (ucs2_reader::ucs2_reader): Initialise new fields.
	* source/iconv.cc (iconv_ucs2_reader::refill): Use END instead of
	LIMIT.
	(iconv_ucs2_reader::get): Likewise.
	* source/lex.hh (lexer::get_line): New method.
	* source/lex.cc (lexer::get_line): Implementation of the above.
	* location.hh (location::get_column): New method.
	* format/format.hh (format_repr::src_lexer): New field.
	(format_repr::set_lexer): New method.
	* format/format.cc (format_repr::format_repr): Initialise SRC_LEXER.
	(format_repr::dump): Show source line, if possible, using SRC_LEXER.
	* exception.hh (exception_base::set_lexer): New method.
	* model/unit.hh (model_unit::src_lexer): New field.
	(model_unit::model_unit): Initialise SRC_LEXER.
	(model_unit::~model_unit): New destructor.
	(model_unit::set_lexer): New method.
	(model_unit::get_lexer): Likewise.
	* reader/source.cc (source_file_creator::apply): Set lexer for
	compilation unit and exception, if any.
	* source/parse.hh (parse::~parse): Do not destory token stream.
	* typedefs.hh: Rearrange inclusion of headers.
	* compiler.cc (compiler::do_analyze_unit): Set lexer for exception,
	if any.

2005-09-28  Tom Tromey  <tromey@redhat.com>

	* source/tstream.hh (token_stream::buffer): Changed type.
	(token_stream::buffer_size): Removed.
	(token_stream::buffer_end): Likewise.
	(token_stream::marks): Likewise.
	(token_stream::mark_buffering): Likewise.
	(token_stream::peek_buffering): Likewise.
	(token_stream::set_mark): Now inline.
	(token_stream::reset_to_mark): Likewise.
	(token_stream::unset_mark): Removed.
	(token_stream::lex_file): Declare.
	(token_stream): Updated.
	(~token_stream): Updated.
	(~marker): Updated.
	* source/tstream.cc (set_mark, unset_mark, reset_to_mark):
	Removed.
	(lex_file): New method.
	(get_unfiltered_token): Rewrote.
	(peek_token, peek_token1): Updated.

2005-09-20  Tom Tromey  <tromey@redhat.com>

	* model/enum.cc (resolve_hook): Don't reject top-level classes.
	* source/parse.cc (enum_body): Allow empty enum body.  Handle
	trailing commas and semicolons properly.
	(enum_declaration): Call set_containing_class.
	(annotation_type_declaration): Likewise.

2005-09-20  Tom Tromey  <tromey@redhat.com>

	* configure: Rebuilt.
	* configure.ac: Added --enable-gcjx-debugging.

2005-09-20  Tom Tromey  <tromey@redhat.com>

	* factory.cc (open_zip_file): Updated.
	* reader/readbuffer.cc (read_byte_buffer): Updated.
	* reader/readbuffer.hh (read_byte_buffer::where): New field.
	(read_byte_buffer): Added argument.
	* reader/fdreader.cc (read_all): Use get_location.
	(get_mtime): Use get_location.
	* reader/mmapbuffer.cc (mmap_byte_buffer): Updated.
	* reader/mmapbuffer.hh (mmap_byte_buffer::where): New field.
	(mmap_byte_buffer): Added argument.
	* reader/reader.hh (reader::get_location): New method.
	* reader/classbytes.cc (apply): Don't print a newline.

2005-09-17  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* defassign.cc (variable_state::check_loop): Complain about possible
	multiple assignments only if the variable in question is definitely
	assigned and not definitely unassigned.
	(variable_state::print): Make const method and use const iterators.
	Print out only definitely [un]assigned variables.
	
2005-09-16  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (add_captured_variable): Update field_map.

2005-09-15  Tom Tromey  <tromey@redhat.com>

	* verify.h (vfy_find_class): Handle primitive types.

2005-09-15  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (write): Write 1.5 version number if
	needed.
	* bytecode/verify.cc (check_constant): Handle resolved classes as
	well.

2005-09-14  Tom Tromey  <tromey@redhat.com>

	* bytecode/block.cc (optimize): Ensure conditional occurs just
	before goto before removing.

2005-09-13  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (emit_saved_cleanup): Handle case where
	handler variable is -2.

2005-09-13  Tom Tromey  <tromey@redhat.com>

	* bytecode/byteutil.hh (return_p): New function.
	* bytecode/block.cc (optimize): Handle 'if' optimization when
	'goto' is in following block.  Optimize a 'goto' to a 'return'.
	Include byteutil.hh.

2005-09-13  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh (finally_handler): New constructor.
	* bytecode/generate.cc (call_cleanups): Added assert.  Exit early
	if dummy entry found.
	(visit_break): Pass correct target to call_cleanups.
	(visit_do): Push a dummy finally handler.
	(visit_for_enhanced): Likewise.
	(visit_for): Likewise.
	(visit_label): Likewise.
	(visit_switch): Likewise.
	(visit_while): Likewise.

2005-09-12  Tom Tromey  <tromey@redhat.com>

	* bytecode/locals.cc (emit): Handle case where variable is
	optimized away.
	(update): Likewise.

2005-09-12  Tom Tromey  <tromey@redhat.com>

	* main.cc (argument_parser::help_options): Only print -j help if
	threads available.
	(argument_parser::parse_args): Throw better error if threads not
	available.
	* thread/thread.hh (concurrence::available): New function.

2005-09-12  Tom Tromey  <tromey@redhat.com>

	* bytecode/attribute.cc (exceptions_attribute): Unwrap the
	forwarding type.
	(emit): Likewise.

2005-09-11  Tom Tromey  <tromey@redhat.com>

	* factory.cc (find_source_file): Updated.
	(find_derived_file): Likewise.
	(process_zip_entry): Updated.
	* reader/fdreader.cc (read_all): Call note_read.
	* reader/fdreader.hh (fd_reader): Added filename argument.
	* reader/zereader.cc (read_all): Call note_read.
	* reader/zereader.hh (zip_entry_reader): Added filename argument.
	* reader/reader.hh (reader::note_read): New method.
	(reader): Added argument.
	* compiler.hh (compiler::all_files_read): New field.
	(compiler::note_file_read): New method.
	(compiler::get_all_files_read): Likewise.

2005-09-11  Tom Tromey  <tromey@redhat.com>

	* bytecode/attribute.cc (exceptions_attribute): Updated.
	(emit): Likewise.
	* bytecode/attribute.hh (exceptions_attribute::excs): Changed
	type.
	(exceptions_attribute): Updated.
	* bytecode/classwriter.cc (write): Use get_throws, not
	get_throws_as_set.

2005-09-11  Tom Tromey  <tromey@redhat.com>

	* source/parse.cc (enum_body): Push a new class scope when parsing
	body.

2005-09-11  Tom Tromey  <tromey@redhat.com>

	* model/forenhanced.hh (model_for_enhanced::elt_type): New field.
	(model_for_enhanced): Initialize it.
	(model_for_enhanced::get_element_type): New method.
	* bytecode/generate.hh
	(bytecode_generator::emit_cast_maybe_boxing): Declare.
	* bytecode/generate.cc (emit_cast_maybe_boxing): New method.
	(visit_cast): Use it.
	(visit_for_enhanced): Likewise.
	* model/forenhanced.cc (resolve): Removed error for primitive
	type; do assignment conversion in both cases.
	(find_method): New function.

2005-09-11  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (class model_class): Added some documentation.

2005-09-11  Ranjit Mathew  <rmathew@gcc.gnu.org>

	* util.hh (copy_str): New function similar to strdup().
	* format/format.hh (~format_repr): delete memory pointed to by PLAN.
	* format/format.cc (format_repr::format_repr): Use a duplicate string
	for PLAN, not the original string.

2005-07-14  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (apply_type_map): Moved body ...
	(create_instance): ... here.

2005-07-11  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (find_field): Examine erasure of field's
	type.
	(find_method): Examine erasures of method's types.

2005-07-11  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_cast): Fixed ordering of emit_cast
	arguments.

2005-07-11  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_cast): Handle Character specially.

2005-07-11  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (find_method): Don't crash if argtype is
	NULL and method is not found.

2005-07-11  Tom Tromey  <tromey@redhat.com>

	* model/throwsclause.cc (get_signature): Return empty string if
	no parameterized types seen.
	* bytecode/classreader.cc (parse_signature): Handle case where
	exceptions are elided.  Clear current_method_arguments before
	parsing method signature.
	(parse_self): Require ACC_SUPER for enums.
	* bytecode/signature.cc (parse_ref_type): Exit loop if inner class
	is parameterized.

2005-07-09  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_field_ref): Correctly call
	handle_invocation.

2005-07-09  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh (bytecode_generator::handle_invocation):
	Updated.
	* bytecode/generate.cc (handle_invocation): Added 'use_accessor'
	argument.
	(visit_method_invocation): Updated.
	(visit_type_qualified_invocation): Likewise.
	(visit_super_invocation): Likewise.
	(visit_field_ref): Likewise.
	(dereference_left_hand_side): Updated for static accessors.
	(emit_lhs_store): Likewise.
	(visit_field_ref): Likewise.
	* model/class.cc (get_accessor): Always make accessor static.
	(get_accessor): Likewise.

2005-07-08  Colin Walters  <walters@verbum.org>

	* verify.cc (class _Jv_BytecodeVerifier) <op_new>: Don't
	check for abstract classes or interfaces here; JVM spec
	says it should throw an exception, so we'll do so later.

2005-06-24  Tom Tromey  <tromey@redhat.com>

	* bytecode/verify.cc (verify_instructions_0): Correctly handle
	situation where PC falls off end.

2005-05-17  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_method): Updated.
	(visit_return): Use request().
	* bytecode/locals.cc (request(bool)): New method.
	(request(model_variable_decl*)): Use it.
	(request()): New method.
	* bytecode/locals.hh (locals::request): Declare.

2005-05-16  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_return): If there are cleanups, save
	result expression in local variable.

2005-05-16  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (class definite_assignment_visitor): Removed some
	old comments.

2005-05-07  Tom Tromey  <tromey@redhat.com>

	* verify.h (GLOM): Removed.
	(VFY_PRIMITIVE_CLASS): Likewise.

2005-04-30  Tom Tromey  <tromey@redhat.com>

	* aot/aotclass.cc (get_descriptor): New helper function.
	(add): Use it.

2005-04-28  Tom Tromey  <tromey@redhat.com>

	* header/cni.cc (generate): Use aot class' vtable layout.
	(write_include): New method.
	(write_includes): Use it.  Added 'vtable' argument.
	* header/cni.hh (cni_code_generator::factory): New field.
	(cni_code_generator::write_include): Declare.
	(cni_code_generator::write_includes): Updated.

2005-04-26  Tom Tromey  <tromey@redhat.com>

	* aot/mangle.cc (update): Create separate entry for pointer type.
	(update_array): Likewise.
	(update): Emit pending characters at end if needed.

2005-04-18  Tom Tromey  <tromey@redhat.com>

	* header/jni.cc (write_field): Actually emit #define.

2005-04-18  Tom Tromey  <tromey@redhat.com>

	* header/jni.cc (generate): Only write native methods.

2005-04-17  Tom Tromey  <tromey@redhat.com>

	* header/cni.cc (generate): Superclass of interface is Object.
	Emit attribute for java interface.

2005-04-23  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (find_method): Call 'set_used' before early
	return.

2005-04-20  Tom Tromey  <tromey@redhat.com>

	* bytecode/outpool.hh (class outgoing_constant_pool): Renamed
	from output_constant_pool.
	* bytecode/attribute.cc, bytecode/attribute.hh,
	bytecode/classwriter.cc, bytecode/classwriter.hh,
	bytecode/generate.cc, bytecode/generate.hh, bytecode/locals.cc,
	bytecode/locals.hh, bytecode/outpool.cc: Updated.

2005-04-02  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve): Put name of field in error.  Correctly
	compute found_clinit for a .class file.

2005-04-02  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (get_output_name): New method.
	* model/class.hh (model_class::get_output_name): Declare.
	* aot/mangle.cc (update): Use get_output_name.  Mangle non-ascii
	characters.
	* header/cni.cc (write_namespaces): Use get_output_name.
	(write_method): Likewise.

2005-04-02  Tom Tromey  <tromey@redhat.com>

	* bytecode/verify.cc (branch_prepass): Cast argument to sprintf.
	(verify_instructions_0): Likewise.
	(VFY_FAST_OPCODES): Changed sense of #ifdef.

2005-03-30  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (definite_assignment_visitor::visit_bytecode_block):
	Just abort.
	(definite_assignment_visitor::visit_method): Do nothing for
	bytecode.

2005-03-30  Tom Tromey  <tromey@redhat.com>

	* header/cni.cc (write_field): Emit field value.
	(generate): Change initialization of current_flags.
	(write_method): Correctly handle constructors of
	member classes.
	(write_namespaces): Correctly handle member class names.

2005-03-30  Tom Tromey  <tromey@redhat.com>

	* header/cni.hh (cni_code_generator::write_field): Updated.
	(cni_code_generator::keyword_p): Declare.
	* header/cni.cc (keywords): New global.
	(NUM_KEYWORDS): New define.
	(keyword_p): New method.
	(generate): Compute method names.
	(write_field): Added 'method_names' arguments.  Handle C++ keyword
	clash.
	(write_method): Handle C++ keyword clash.  Skip synthetic
	methods.
	* header/cni.cc (write_method): Mark more methods as virtual.

2005-03-29  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh (bytecode_generator::get_byte_count): New
	method.
	* bytecode/locals.cc (update): Changed assertion.
	(emit): Handle case where 'end' is NULL.

2005-03-29  Tom Tromey  <tromey@redhat.com>

	* main.cc (argument_parser::help_options): Document
	-nostdheaders.
	(argument_parser::parse_args): Handle -nostdheaders.
	* header/cni.cc (cni_code_generator): Initialize new field.
	(generate): Handle new field.
	* header/cni.hh (cni_code_generator::std_headers_ok): New field.
	(cni_code_generator::set_avoid_headers): New method.

2005-03-29  Tom Tromey  <tromey@redhat.com>

	* main.cc: Don't use backquote.

2005-03-29  Tom Tromey  <tromey@redhat.com>

	* main.cc (argument_parser::action_class): New field.
	(argument_parser::cni_generator): Likewise.
	(argument_parser): Initialize new field.
	(argument_parser::need_cni_generator): New method.
	(argument_parser::need_cni_class): Likewise.
	(argument_parser::parse_args): Set cni_generator.  Recognize new
	arguments.
	(argument_parser::help_options): Document new options.
	* header/cni.hh (cni_code_generator::write_field): Updated.
	(cni_code_generator::action): New enum.
	(cni_code_generator::add_action): Declare.
	(cni_code_generator::action_item_list): New typedef.
	(cni_code_generator::action_map): New field.
	(cni_code_generator::empty_list): Likewise.
	(cni_code_generator:emit_actions): Declare.
	(cni_code_generator::action_map_type): New typedef.
	* header/cni.cc (write_field): Added 'is_first' argument.
	(generate): Updated.  Call emit_actions.
	(emit_actions): New method.
	(add_action): Likewise.

2005-03-28  Tom Tromey  <tromey@redhat.com>

	* bytecode/cpool.cc (get_methodref): New method.
	* bytecode/cpool.hh (constant_pool::get_methodref): Declare.

2005-03-28  Tom Tromey  <tromey@redhat.com>

	* model/bytecode.cc (verify): Don't call allocate_flags.
	* model/bytecode.hh (model_bytecode_block::allocate_flags):
	Removed.
	(model_bytecode_block::set_flags): New method.
	* verify.h (VERIFY_INSN_START): New macro.
	(VERIFY_BRANCH_TARGET): Renamed.
	(VERIFY_SEEN): Likewise.
	(vfy_notify_verified): Removed.
	(vfy_notify_branch_target): Likewise.
	(vfy_method::flags): Removed.
	(VFY_WANT_NOTIFICATION): Removed.
	(vfy_hand_off_flags): New function.
	* bytecode/verify.cc (FLAG_SEEN): New constant.
	(branch_prepass): Don't handle notification.  Updated for change
	to 'flags'.
	(verify_instructions_0): Likewise.  Use FLAG_SEEN.
	(flags): Now 'unsigned char *'.
	(~_Jv_BytecodeVerifier): Call vfy_hand_off_flags.

2005-03-27  Tom Tromey  <tromey@redhat.com>

	* verify.h (vfy_find_class): Handle both forms of signature.
	(vfy_has_method): Ensure class members resolved.

2005-03-27  Tom Tromey  <tromey@redhat.com>

	* aot/aotclass.cc (register_something): Start at 1.

2005-03-27  Tom Tromey  <tromey@redhat.com>

	* aot/aotclass.cc (register_indirect_call): Handle constructors
	and other atable methods.

2005-03-26  Tom Tromey  <tromey@redhat.com>

	* bytecode/verify.cc (branch_prepass): Respect
	VFY_WANT_NOTIFICATION.
	(verify_instructions_0): Likewise.
	* model/bytecode.cc (verify): Call allocate_flags.
	* model/bytecode.hh (model_bytecode_block::flags): New field.
	(model_bytecode_block): Initialize it.
	(~model_bytecode_block): Delete 'flags'.
	(model_bytecode_block::allocate_flags): New method.
	(model_bytecode_block::get_flags): Likewise.
	* verify.h (VERIFY_SEEN): New define.
	(VERIFY_TARGET): Likewise.
	(VFY_WANT_NOTIFICATION): Likewise.
	(vfy_method::flags): New field.
	(vfy_notify_verified): Wrote.  Added 'method' argument.
	(vfy_notify_branch_target): New function.

2005-03-26  Tom Tromey  <tromey@redhat.com>

	* model/constructor.cc (model_constructor): Copy location of other
	constructor.

2005-03-26  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::resolve_members): Now public.

2005-03-26  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (get_accessor): Removed get_location() call.
	* model/fwdtype.cc (resolve): Do nothing if already resolved.

2005-03-24  Tom Tromey  <tromey@redhat.com>

	* bytecode/verify.cc (verify_fail): Take 'char*' argument.
	(get_type_val_for_signature): Don't use std::string.
	(verify_dimensions): Likewise.
	(state::merge): Likewise.
	(state::state_mergeable_p): Likewise.
	(push_type): Likewise.
	(compute_jump): Likewise.
	(note_branch_target): Likewise.
	(skip_padding): Likewise.
	(branch_prepass): Likewise.
	(check_pool_index): Likewise.
	(verify_instructions_0): Likewise.
	* verify.h (vfy_get_interface_count): Removed.

2005-03-24  Tom Tromey  <tromey@redhat.com>

	* bytecode/verify.cc (EITHER): New constant.
	(type::compatible): Handle EITHER.
	(type::equals): New method.
	(check_field_constant): Added 'putfield' argument.
	(verify_instructions_0): Update 'putfield' handling.
	* verify.h (vfy_fail): Fixed indentation.
	(vfy_class_has_field_p): New function.

2005-03-21  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (create_abstract_instance): Create a
	model_abstract_method.
	* aot/aotclass.cc (find_in_vtable): Strip abstract methods.
	* model/invoke.cc (find_method): Create a model_abstract_method.
	* model/method.hh (class model_abstract_method): New class.

2005-03-12  Tom Tromey  <tromey@redhat.com>

	* model/constructor.cc (model_constructor): New constructor.
	(model_constructor): Correctly set this0.
	* model/constructor.hh (model_constructor): Declare.
	* bytecode/generate.cc (visit_new): Use accessor constructor if
	needed.
	(visit_type_qualified_invocation): Handle accessor.
	(visit_super_invocation): Likewise.
	* model/invoke.cc (handle_resolve): Add extra arguments when
	calling constructor accessor.
	(resolve): Handle class in static context.
	* model/method.hh (model_method::get_parameter_count): New
	method.
	* model/class.cc (get_accessor): Create accessor constructor.

2005-03-03  Tom Tromey  <tromey@redhat.com>

	* aot/aotclass.cc (add_item): Ignore index 0.

2005-03-03  Tom Tromey  <tromey@redhat.com>

	* bytecode/classreader.cc (parse_constant_value): Special case
	initializers of boolean fields.

2005-02-27  Tom Tromey  <tromey@redhat.com>

	* header/cni.cc (write_includes): Changed argument types.
	(generate): Use get_sorted_methods.
	* header/cni.hh (cni_code_generator::method_iterator): New
	typedef.
	(cni_code_generator::write_includes): Changed argument types.
	* aot/aotclass.cc (lay_out_vtable): Use get_sorted_methods.  Skip
	final methods from Object.
	(add_item): Don't use slot 0 of constant pool.
	* model/class.cc (resolve_one_method): Updated
	source_order_methods.
	(add_method): Likewise.
	(inherit_methods): Likewise.
	(resolve_members): Likewise.
	* model/class.hh (model_class::source_order_methods): New field.
	(model_class::get_sorted_methods): New method.

2005-02-26  Tom Tromey  <tromey@redhat.com>

	* aot/aotclass.cc (lay_out_vtable): Added debug code.

2005-02-23  Tom Tromey  <tromey@redhat.com>

	* aot/mangle.cc (emit_saved): Fixed test for '0'.

2005-02-21  Tom Tromey  <tromey@redhat.com>

	* aot/aotclass.cc (add_class): New method.
	* aot/aotclass.hh (aot_class::add_class): Declare.

	* aot/mangle.cc (mangler): New constructor.
	* aot/mangle.hh (mangler): Declare.

	* aot/aotclass.hh (aot_class::pool_entry): Now public.
	(aot_class::type_assertion_entry): Likewise.
	(aot_class::get_constant_pool): New method.

2005-02-21  Tom Tromey  <tromey@redhat.com>

	* bytecode/block.cc (optimize): Optimize goto-to-goto.

2005-02-19  Tom Tromey  <tromey@redhat.com>

	* compiler.cc (find_class): Removed assertion.

	* visitor.hh (~visitor): New virtual destructor.

2005-02-09  Tom Tromey  <tromey@redhat.com>

	* aot/mangle.cc (mangler): New constructor.
	* aot/mangle.hh (mangler): Declare.

2005-02-08  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (model_method): Updated.
	* source/parse.cc (any_method_declarator): Call set_method_end.
	* model/method.hh (model_method::method_end): New field.
	(model_method::set_method_end): New method.
	(model_method::get_method_end): Likewise.
	(model_method): Updated.

2005-02-06  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (write): Don't print note about
	verification.
	* model/bytecode.cc (resolve): Verify the method.
	(verify): Print note about verification.
	* model/bytecode.hh (class model_phony_block): New class.
	* reader/classbytes.cc (apply): Removed assertion; pass 'emit' to
	add_unit.
	* factory.cc (find_derived_file): New method.
	(find_derived_file): Use it.
	(find_derived_file): New method.
	(find_derived_file): Use it.
	(load_class): Removed old comment.
	(load_source_file): Handle class and jar files.
	(jar_class_factory): Clear 'archive' on failure.
	(read_all): New method.
	* factory.hh (class_factory::find_derived_file): New abstract
	method.
	(directory_class_factory::find_derived_file): Declare.
	(jar_class_factory::find_derived_file): Likewise.
	(jar_class_factory::read_all): Declare.
	* factory.cc (jar_file_p): Moved to util.cc.
	* util.cc (jar_file_p): New function.
	(class_file_p): Likewise.
	(java_file_p): Likewise.
	* util.hh (jar_file_p): Declare.
	(class_file_p): Likewise.
	(java_file_p): Likewise.
	* bytecode/classreader.cc (parse_code): Use
	keep_class_method_body_p.
	(parse_exception_table): Handle case where method bodies aren't
	used.
	* header/cni.hh (cni_code_generator::handles_class_p): New
	method.
	* header/jni.hh (jni_code_generator::handles_class_p): New
	method.
	* codegen.hh (code_generator::handles_class_p): New method.
	(code_generator::needs_class_method_bodies_p): Likewise.
	(code_generator::handles_resources_p): Likewise.
	(code_generator::compile_resource): Likewise.
	* compiler.cc (compiler): Initialize new fields.  Don't mention
	pre_semantic_analysis.
	(find_class): Added assertion.
	(set_class_factory): Likewise.
	(semantic_analysis): Update 'state'.  Don't use
	pre_semantic_analysis.
	(generate_code): Update 'state'.
	(load_source_file): Likewise.
	(add_code_generator): Added assertion.
	(set_source_1_5): Likewise.
	(set_source_1_4): Likewise.
	(set_source_1_3): Likewise.
	(set_target_1_5): Likewise.
	(set_target_1_4): Likewise.
	(set_target_1_3): Likewise.
	(set_wall): Likewise.
	(add_unit): Use state, not pre_semantic_analysis.
	(compile_resource): New method.
	* compiler.hh (compiler::compiler_state): New enum.
	(compiler::state): New field.
	(compiler::pre_semantic_analysis): Removed.
	(compiler::can_accept_classes): New field.
	(compiler::need_class_method_bodies): Likewise.
	(compiler::keep_class_method_body_p): New method.
	(compiler::can_accept_resources): New field.
	(compiler::handles_resources_p): New method.
	(compiler::compile_resource): Declare.

2005-02-05  Tom Tromey  <tromey@redhat.com>

	* main.cc (class argument_parser): Document '-o none'.
	(class argument_parser): Recognize it.

2005-02-05  Tom Tromey  <tromey@redhat.com>

	* thread/thread.hh: Disable.

	* main.cc (gcjx_main): Pause workers.
	* compiler.cc (compiler): Initialize pause_count.
	(dispatch_job): Handle PAUSE.
	(pause_workers): New method.
	* compiler.hh (compiler::pause_monitor): New field.
	(compiler::pause_condition): Likewise.
	(compiler::pause_count): Likewise.
	(compiler::pause_waiter): Likewise.
	(PAUSE): New enum constant.
	(compiler::pause_workers): Declare.

	* Makefile.am (gcjx_LDADD): Added -lpthread.
	* directory.cc (add): Updated.
	* classcache.cc (find_class): Updated.
	* classcache.hh (class_cache::mutex): Changed type.
	(class_cache): Updated.
	* compiler.cc (add_unit): Updated.
	(generate_code): Likewise.
	(add_job): Likewise.
	(work): Likewise.
	* thread/thread.hh: Rewrote.
	* main.cc (class argument_parser): Enable -j.

2005-02-04  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (get_class_signature): Handle Object case.

2005-02-04  Tom Tromey  <tromey@redhat.com>

	* model/import.cc (resolve): New method.
	* model/import.hh (model_static_import_single::resolve): Declare.

2005-02-04  Tom Tromey  <tromey@redhat.com>

	* model/unit.cc (resolve): Indentation fixes.

2005-02-04  Tom Tromey  <tromey@redhat.com>

	* bytecode/signature.cc (parse_ref_type): End inner loop when ';'
	seen.

2005-02-04  Tom Tromey  <tromey@redhat.com>

	* bytecode/locals.cc (request): Minor rearrangement.
	(remove): Pop 'scope'.
	* bytecode/generate.cc (visit_variable_stmt): Removed old
	comment.

2005-01-30  Tom Tromey  <tromey@redhat.com>

	* aot/mangle.cc (mangler): Special case array types.

	* aot/aotclass.cc (lay_out_vtable): Skip constructors and private
	methods.

	* model/package.hh (model_package::get_simple_name): Handle
	unnamed package.
	* aot/mangle.cc (update): Handle empty package name.
	(update): Emit count before class name.

	* aot/aotclass.cc (lay_out_vtable): Check 'super' before copying
	vtable.

2005-01-29  Tom Tromey  <tromey@redhat.com>

	* aot/aotfactory.cc: Added instantiations.

	* aot/aotclass.hh (aot_class::get): New method.

	* aot/mangle.cc: New file.
	* aot/mangle.hh: New file.
	* aot/aotfactory.cc: New file.
	* aot/aotfactory.hh: New file.
	* aot/aotclass.cc: New file.
	* aot/aotclass.hh: New file.
	* Makefile.in: Rebuilt.
	* Makefile.am (aot_sources): New macro.
	(libgcjx_la_SOURCES): Use it.

2005-01-25  Tom Tromey  <tromey@redhat.com>

	* source/parse.cc (any_method_declarator): Update method return
	type if brackets follow method name.

2005-01-25  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (check_type): New method.
	(write): Use it.
	* bytecode/classwriter.hh (class_writer::check_type): Declare.
	* bytecode/generate.cc (visit_for_enhanced): Use check_type.
	(visit_cast): Likewise.
	(visit_class_ref): Likewise.
	(visit_instanceof): Likewise.
	(visit_new_array): Likewise.
	(visit_array_initializer): Likewise.

2005-01-25  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (variable_state::check_loop): New method.
	(definite_assignment_visitor::visit_for_enhanced): Use it.
	(definite_assignment_visitor::visit_for): Likewise.
	(definite_assignment_visitor::visit_while): Likewise.
	(definite_assignment_visitor::visit_do): Likewise.
	(definite_assignment_visitor::loop_depth): Removed.
	(definite_assignment_visitor): Updated.
	(~definite_assignment_visitor): Likewise.
	(variable_state::print): Updated.
	(definite_assignment_visitor::visit_for_enhanced): Create a join
	state.

2005-01-23  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (join_state::pending_target): New structure.
	(join_state::pending_pairs_type): Redefine.
	(join_state::add_pending): Rewrote.
	(join_state::abnormal_finally): Removed.
	(join_state): Updated.
	(definite_assignment_visitor::visit_try): Updated.
	(definite_assignment_visitor::propagate_branch): Unconditionally
	return when a 'try' is seen.
	(variable_state::set_definite_assignment_from): New method.

2005-01-23  Tom Tromey  <tromey@redhat.com>

	* aclocal.m4, configure, Makefile.in, gcjx-config.h.in: Rebuilt.
	* Makefile.am (AM_CPPFLAGS): Removed -D options.
	* configure.ac (_GLIBCXX_DEBUG, _GLIBCPP_USE_C99): Define.

2005-01-22  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (add_class_members): Handle 1.3 target.  Mark
	method as 'used'.
	* compiler.cc (compiler): Initialize new field.
	(set_target_1_5): Updated.
	(set_target_1_4): Updated.
	(set_target_1_3): Updated.
	* compiler.hh (compiler::target_14): New field.
	* main.cc (argument_parser::source_argument): New field.
	(argument_parser::set_source): Set it.
	(argument_parser::target_argument): New field.
	(argument_parser::set_target): Set it.
	(argument_parser::parse_args): 

2005-01-22  Tom Tromey  <tromey@redhat.com>

	* model/annotype.cc (resolve_hook): Don't special case class
	files.
	* bytecode/classreader.cc (parse): Specially handle interfaces of
	annotation types.
	* model/fwdtype.hh (model_forwarding_full::get_name): New method.

2005-01-21  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (write): Don't set ACC_SUPER for enum
	classes.
	* model/annotype.cc (element_compatible_p): Resolve members
	before using annotation.
	* bytecode/attribute.cc (emit_annotation_value): Write enum
	constants.
	* model/memberref.cc (resolve): New method.
	(visit): New method.
	* bytecode/classreader.cc (parse_parameter_annotations): Set
	annotations on each parameter.
	(parse_annotation_value): Create a model_memberref_enum.
	(parse_self): Correctly handle ACC_SUPER when ACC_ENUM is set.
	* model/memberref.hh (class model_memberref_base): New class.
	(class model_memberref_forward): Derive from
	model_memberref_base.
	* model/variable.cc (resolve_classes): Use
	resolve_annotation_classes.
	(resolve): Call resolve_annotations.
	* model/method.cc (resolve_classes): Use
	resolve_annotation_classes.
	(resolve): Call resolve_annotations.
	* model/class.cc (do_resolve_classes): Use
	resolve_annotation_classes.
	(resolve_members): Call resolve_annotations.
	* model/iannotatable.cc (resolve_annotation_classes): New method.
	* model/iannotatable.hh (IAnnotatable::resolve_annotation_classes):
	Declare.	
	* model/annotation.cc (resolve_classes): New method.
	(resolve): Don't resolve 'name'.
	* model/annotation.hh (model_annotation::resolve): Documented.
	(model_annotation::resolve_classes): Declare.

2005-01-20  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (generate): Add LocalVariableTypeTable if
	requested.
	* bytecode/locals.cc (emit): Added 'types' argument.  Changed
	return type.
	(any_parameterized_p): New method.
	* bytecode/locals.hh (locals::emit): Updated.
	(locals::size): Removed.
	(locals::any_parameterized_p): Declare.
	* bytecode/generate.hh (local_variable_table_attribute::use_types):
	New field.
	(local_variable_table_attribute::bytes): New field.
	(local_variable_table_attribute): Updated.  Added new argument.
	(local_variable_table_attribute::emit): Updated.
	(local_variable_table_attribute::size): Rewrote.

2005-01-19  Tom Tromey  <tromey@redhat.com>

	* model/annotype.cc (resolve_hook): Allow one interface when read
	from .class.
	* bytecode/classreader.hh (class_reader::parse_field_descriptor):
	Declare.
	* bytecode/classreader.cc (parse_field_descriptor): New method.
	(parse_field): Use it.
	(parse_annotation): Use it.
	(parse_annotation_value): Use it when parsing class constants and
	enum constants.

2005-01-18  Tom Tromey  <tromey@redhat.com>

	* bytecode/classreader.cc (parse_signature): Don't set interfaces
	for class.

	* model/class.cc (do_resolve_classes): Don't emit 'extends Object'
	warning for wildcards, type variables, or parameterized classes.

	* model/class.cc (get_class_signature): Superclass for interface
	will be NULL.

	* model/typevar.hh (model_type_variable::compute_descriptor): New
	method.

	* bytecode/classreader.cc (parse_signature): Don't set superclass
	for interface.

	* bytecode/attribute.cc (emit_annotation_value): Put annotation
	class as utf8.
	(emit_annotation): Likewise.  Number of pairs takes two bytes.
	(emit_annotation_value): Correctly write arrays.  Handle nested
	annotations.
	* bytecode/classreader.cc (parse_annotation): Class is stored as
	a Utf8Const.
	(parse_parameter_annotations): Only one byte for number of
	parameters.
	(parse_annotation): Read two bytes for number of elements.
	(parse_attributes): Fixed assertions.

2005-01-16  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (write): Check number of words required
	by arguments.

2005-01-15  Tom Tromey  <tromey@redhat.com>

	* bytecode/locals.cc (emit): Updated.
	(update): Update 'valid'.
	* bytecode/locals.hh (locals::valid): New field.
	(locals): Updated.
	(locals::size): New method.
	* bytecode/generate.cc (write): Don't emit the size.
	(write_line_table): Likewise.
	(count_exception_handlers): New method.
	* bytecode/outpool.hh (output_constant_pool::size): Declare.
	* bytecode/outpool.cc (size): New method.
	(write_inner_classes): Don't emit the size.
	* bytecode/attribute.cc (size): New methods.
	(emit): Write the size.  Update all other emit methods.
	* bytecode/generate.hh (line_table_attribute::size): New method.
	(local_variable_table_attribute::size): Likewise.
	(bytecode_generator::count_exception_handlers): Declare.
	(bytecode_generator::bytecode_size): New method.
	* bytecode/attribute.hh (bytecode_attribute_list::size): Declare.
	(bytecode_attribute::size): Likewise.
	(simple_name_attribute::size): New method.
	(utf8_attribute::size): New method.
	(inner_classes_attribute::size): Declare.
	(exceptions_attribute::size): New method.
	(code_attribute::size): Declare.
	(field_value_attribute::size): New method.
	(annotation_attribute::size): Likewise.
	(parameter_attribute::size): Likewise.
	(annotation_default_attribute::size): Likewise.

2005-01-15  Tom Tromey  <tromey@redhat.com>

	* model/fieldref.cc (resolve): Reverted earlier patch, with
	commentary.

2005-01-15  Tom Tromey  <tromey@redhat.com>

	* source/lex.cc (lexer): Updated.
	(get): Rewrote again.
	* source/lex.hh (lexer::was_return): New field.

2005-01-15  Tom Tromey  <tromey@redhat.com>

	* model/fieldref.cc (resolve): Use current class, not declaring
	class, as implicit qualifier.

2005-01-15  Tom Tromey  <tromey@redhat.com>

	* source/lex.cc (get): Rewrote.
	(get_raw): Don't handle newlines for purposes of location
	updating.

2005-01-15  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (generate): Write local variable table.
	(bytecode_generator): Updated.
	* bytecode/locals.cc (request): Updated.
	(get_index): Likewise.
	(remove): Likewise.
	(update): New method.
	(emit): Likewise.
	* bytecode/generate.hh (bytecode_generator::get_current): New
	method.
	(bytecode_generator::local_variable_table_attribute): New class.
	* bytecode/locals.hh (class locals): More documentation.
	(class temporary_local): Likewise.
	(locals::gen): New field.
	(locals::debug_info): New structure.
	(locals::keep_debug_info): New field.
	(locals::var_descriptions): Likewise.
	(locals): Initialize new fields.
	(locals::indexes): Removed.
	(locals::scope_map): Likewise.
	(locals::update): Declare.
	(locals::emit): Likewise.

2005-01-14  Tom Tromey  <tromey@redhat.com>

	* bytecode/block.cc (clone): Removed.
	* bytecode/block.hh (bytecode_block::clone): Removed.
	* bytecode/generate.cc (emit_saved_cleanup): Rewrote.
	(visit_synchronized): Updated.
	(visit_try): Likewise.
	(finally_creator): Removed.
	(~finally_creator): Likewise.
	(visit_try): Only emit inline cleanups once.
	(generate): Clear 'changed' before updating handlers.
	(any_cleanups_p): Removed.
	(add_exception_handler): Push handlers on back of the list again.
	* bytecode/generate.hh (bytecode_generator::finally_handler):
	Removed start, end, max_stack fields.  Added 'block'
	and 'variable' fields.
	(finally_handler): Updated.
	(bytecode_generator::finally_creator): Removed.
	(bytecode_generator::any_cleanups_p): Likewise.

2005-01-14  Tom Tromey  <tromey@redhat.com>

	* model/field.cc (type): Use const_cast.

2005-01-14  Tom Tromey  <tromey@redhat.com>

	* header/jnistub.cc (write_method): Updated.
	* header/jni.hh (jni_code_generator::translate): Updated.
	* header/jni.cc (translate): Added 'request' argument.  Throw
	exception on error.
	(write_method): Updated.
	(generate): Updated.

2005-01-14  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_for_enhanced): Removed unnecessary
	casts.

2005-01-12  Tom Tromey  <tromey@redhat.com>

	* Makefile.in, aclocal.m4, configure: Rebuilt.
	* config.h.in: Removed.
	* gcjx-config.h.in: New file.
	* typedefs.hh: Include gcjx-config.h.
	* configure.ac: Renamed header to gcjx-config.h.

	Initial checkin to GCC:
	* .cvsignore: Emptied.
	* configure.ac: Use AM_MAINTAINER_MODE.
	* aclocal.m4, Makefile.in, config.h.in, configure: New files.
	* acinclude.m4: New file.

2005-01-12  Tom Tromey  <tromey@redhat.com>

	* bytecode/signature.cc (parse_actual_type_arguments): Use a
	model_forwarding_owned.

2005-01-10  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (handle_inc_dec): Narrow value before
	storing.

2005-01-09  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh (bytecode_generator::handler): Documented.

	* bytecode/generate.cc (add_exception_handler): Push new handler
	on front of list.

	* bytecode/generate.cc (emit_null_pointer_check): Handle IGNORE
	case.

	* bytecode/generate.cc (visit_throw): Don't emit cleanups.
	(visit_assert): Removed old comment.

	* bytecode/generate.hh (bytecode_generator::handle_invocation):
	Updated.
	(bytecode_generator::emit_null_pointer_check): Declare.
	* bytecode/generate.cc (emit_null_pointer_check): New method.
	(visit_new): Use it.
	(handle_invocation): Added null_check_semantics argument.
	(visit_super_invocation): Updated.
	(visit_this_invocation): Likewise.
	(visit_field_ref): Use emit_null_pointer_check.
	* model/invoke.hh (model_invocation_base::get_expression): New
	method.

	* model/fieldref.cc (resolve): Fold qualifying expression.

	* model/invoke.cc (handle_resolve): Fold qualifying expression.

	* bytecode/generate.cc (visit_conditional): Only reduce stack
	when target is not IGNORE.

	* bytecode/generate.cc (handle_inc_dec): Don't use iinc for types
	other than 'int'.  Properly narrow result in narrow integer case.

2005-01-08  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh (bytecode_generator::finally_creator):
	New class.
	(bytecode_generator::finally_handler): New struct.
	(bytecode_generator::finally_stack_element_type): Removed.
	(bytecode_generator::fstackt): Updated.
	* bytecode/generate.cc (visit_synchronized): Handle exception
	stack effects and non-local exits from body.  Use
	finally_creator.
	(finally_creator): New constructor.
	(~finally_creator): New destructor.
	(emit_saved_cleanup): Changed arguments.  Increase max_stack if
	needed.
	(any_cleanups_p): Updated.
	(call_cleanups): Likewise.
	(visit_try): Updated.

	* model/invoke.cc (get_qualifying_class): New method.  Handle
	special Object case from binary compatibility spec.
	* model/invoke.hh (model_invocation_base::get_qualifying_class):
	Moved body to .cc file.
	* bytecode/generate.cc (handle_invocation): Use const_cast.

	* source/lex.cc (create_int_literal): Return a decimal token if
	needed.  Correctly handle overflow.
	* source/token.hh (TOKEN_DECIMAL_INT_LIT): New enum value.
	(TOKEN_DECIMAL_LONG_LIT): Likewise.
	* source/parse.cc (unary_expression): Special case for unary
	minus with decimal integer literal argument.
	(primary): Handle new tokens.  Check for most negative value.

	Rewrite the last code from GCC:
	* source/lex.hh (lexer::get_no_eof): Declare.
	* source/lex.cc (character_literal): Use better location for
	character literal.
	(get_no_eof): New method.
	(end_comment): Use it.
	(parse_javadoc): Rewrote from scratch.
	(NUM_BITS): New define.
	(numeric_literal): Likewise.
	(HOST_WIDE_INT): Removed.
	(HOST_BITS_PER_WIDE_INT): Likewise.
	(HOST_BITS_PER_CHAR): Likewise.
	(create_int_literal): New method.
	(parse_float_literal): Likewise.

	* bytecode/relocation.cc (perform): Fix offset computations in
	goto_w case.

	* fdlibm/classpath.cc (classpath_string_to_double): Check errno.

2005-01-06  Tom Tromey  <tromey@redhat.com>

	* Updated all header guard names.

	* configure.ac (BOOTCLASSPATH): Put documentation in AC_DEFINE.

2005-01-05  Tom Tromey  <tromey@redhat.com>

	* main.cc (argument_parser::handle_warning): Handle -Wno-.
	(argument_parser::help_warnings): Document -Wno-.

2005-01-04  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (check_referenced): Recognize serialization
	methods and <clinit>.

	* model/field.cc (inlineable_p): New method.
	(require_resolution): New method.
	(constant_p): Use it.
	* model/field.hh (model_field::inlineable_p): Removed body.
	(model_field::require_resolution): Declare.

2005-01-02  Tom Tromey  <tromey@redhat.com>

	* model/fieldref.cc (resolve): Use inlineable_p.
	* bytecode/generate.cc (visit_field_ref): Use inlineable_p.
	* model/field.hh (model_field::inlineable_p): New method.

2005-01-01  Tom Tromey  <tromey@redhat.com>

	* model/field.cc (check_referenced): Emit error message.
	* model/method.hh (model_method::check_referenced): Updated.
	* model/method.cc (check_referenced): Added scope argument.
	Updated.
	* model/class.hh (model_class::check_referenced): Updated.  Now
	protected.
	* model/class.cc (resolve): Call check_referenced.
	(check_referenced): Added scope argument.  Updated.

2004-12-31  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_field_ref): Inline final fields as
	required.

	* model/method.cc (resolve): Mark arguments of native or abstract
	methods as used.

	* model/throwsclause.cc (resolve): New method.  Added checking.
	* model/throw.cc (resolve): Formatting fixlet.
	* model/throwsclause.hh (model_throws_clause::resolve): Removed
	body.
	* warnings.hh (WARN_UNCHECKED): New constant.
	(warning_scope::warn_unchecked): New method.
	* warnings.cc (warnings): Added 'unchecked'.

	* model/iannotatable.cc (get_warning_flags): Updated.
	* model/iannotatable.hh (IAnnotatable::warning_bits): Changed
	type.
	(IAnnotatable::get_warning_flags): Likewise.
	(IAnnotatable): Updated.
	(IAnnotatable::warnings_set): New field.
	* compiler.cc (compiler): Changed initialization of
	warning_scope.
	* scope.hh (class resolution_scope): Changed initialization of
	warning_scope.
	* warnings.cc (~push_warnings): New destructor.
	(check_warning): Removed.
	(warning_scope): Changed field initializations.
	(set_warning): Rewrote.
	(warnings): Shortened message for -Wswitch.
	* warnings.hh (warning_flag): Removed values.
	Include limits.h.
	(warning_scope::warning_bits): Changed type.
	(warning_scope::error_bits): Likewise.
	(warning_scope::push_warnings::save): Likewise.
	(warning_scope): Changed bool argument to warning_scope*.
	(WARN_NBYTES): New define.
	(~push_warnings): Moved body to .cc file.
	(class warning_bitset): New class.
	(warning_scope::check_warning): Now inline.

2004-12-30  Tom Tromey  <tromey@redhat.com>

	Warn if variable or parameter is not used:
	* warnings.cc (warnings): Added unused-variable and
	unused-parameter.
	* compiler.cc (set_wall): Add unused-variable and
	unused-parameter.
	* model/catch.cc (resolve): Updated.
	* model/forenhanced.cc (resolve): Updated.
	* model/switch.cc (resolve): Updated.
	* model/for.cc (resolve): Updated.
	* model/method.cc (resolve): Updated.
	* model/block.cc (resolve): Updated.
	* model/constructor.cc (prepend_statements): Updated.
	* model/assign.hh (model_assignment::check_lhs): Updated.
	* model/assign.cc (check_lhs): Don't call set_left_hand_side.
	Removed 'is_compound' argument.
	(resolve): Call set_left_hand_side.
	(handle_resolve): Updated.
	* model/unary.cc (resolve): Call set_left_hand_side on
	expression.
	* model/expr.hh (model_expression::set_left_hand_side): Updated
	documentation.  Don't abort.
	* model/memberref.cc (resolve): Call set_left_hand_side on
	real expression.
	* model/memberref.hh (model_memberref_forward::is_lhs): New
	field.
	(model_memberref_forward::is_compound): Likewise.
	(model_memberref_forward): Initialize new fields.
	(model_memberref_forward::set_left_hand_side): New method.
	* model/varref.hh (model_simple_variable_ref::set_left_hand_side):
	Rewrote.
	(model_simple_variable_ref::is_use): New field.
	(model_simple_variable_ref): Initialize new field.
	(model_simple_variable_ref::resolve): Call set_used on the
	variable.
	* warnings.hh (WARN_UNUSED_VARIABLE, WARN_UNUSED_PARAMETER): New
	enum values.
	(warning_scope::warn_unused_variable): New method.
	(warning_scope::warn_unused_parameter): New method.
	* model/variable.cc (check_referenced): New method.
	* model/blockscope.cc (~model_block_scope): New destructor.
	* model/blockscope.hh (model_block_scope::scope): New field.
	(model_block_scope): Added argument.
	(~model_block_scope): Declare.
	* model/field.cc (model_field): Don't initialize 'used'.
	(check_referenced): Added 'scope' argument.  Fixed condition in
	test.  Use scope to find warning flag.  Fixed error message.
	(model_field): Updated.
	* model/field.hh (model_field::used): Removed.
	(model_field::set_used): Likewise.
	(model_field::check_referenced): Updated.
	* model/variable.hh (model_variable_decl::used): New field.
	(model_variable_decl): Initialize it.
	(model_variable_decl::set_used): New method.
	(model_variable_decl::check_referenced): Declare.
	(model_catch_decl::check_referenced): New method.
	(model_parameter_decl::check_referenced): Declare.

	* model/varstmt.cc (resolve): Put error message on variable
	itself.

	* model/enum.cc (resolve_hook): Check whether outer class is
	inner here...
	(massage_modifiers): ... not here.

	* model/enum.hh (model_enum::constants_count): New method.
	* model/switch.cc (compute_normal_completion): Warn for switch
	block without 'break'.
	(resolve): Warn for switch without 'default', and switch missing
	an enum constant.
	* compiler.cc (set_wall): Include switch and switch-default in
	-Wall.
	* warnings.cc (warnings): Added switch, switch-default,
	switch-fall-through.
	* warnings.hh (WARN_SWITCH, WARN_SWITCH_DEFAULT,
	WARN_SWITCH_FALL_THROUGH): New constants.
	(warning_scope::warn_switch): New method.
	(warning_scope::warn_switch_default): Likewise.
	(warning_scope::warn_switch_fall_through): Likewise.

	* model/class.hh (model_class::check_serialization_fields):
	Declare.
	* model/class.cc (check_serialization_fields): New method.
	(resolve): Use it.
	* model/field.hh (model_field::check_serialization_fields):
	Declare.
	* model/field.cc (check_serialization_fields): New method.  Added
	more checks.
	(resolve): Use it.

2004-12-29  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_switch): Use front method.
	(find_method): Likewise.
	* model/catch.cc (resolve): Use front method.
	(visit): Likewise.
	* model/catch.hh (model_catch::get_parameter_type): Use front
	method.
	* model/unit.cc (resolve): Use front method.
	* tree/tree.cc (visit_new_array): Use front method.
	* name.cc (classify_type_name): Use front method.
	(classify_type_name): Likewise.
	* bytecode/block.cc (optimize): Use back method.
	(optimize): Likewise.
	* bytecode/locals.cc (request): Use back method.
	* util.hh (get_simple_name): Use back method.

	* defassign.cc (definite_assignment_visitor::visit_break): Handle
	break statements that aren't in loops.

	* defassign.cc (definite_assignment_visitor::visit_variable_stmt):
	Handle switch blocks specially.
	(definite_assignment_visitor::switch_state): New field.
	(definite_assignment_visitor): Initialize it.
	(~definite_assignment_visitor): Check it.
	(definite_assignment_visitor::visit_switch): Use it.

2004-12-28  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_field_initializer): Add parens.

2004-12-27  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (write): Error on various limitation
	overflows.
	* bytecode/generate.cc (write): Error on various limitation
	overflows.
	(handle_invocation): Likewise.

	* bytecode/generate.cc (handle_op_assignment): Don't require left
	hand side to be cast when handling shift operators.

	* model/variable.cc (resolve): Fold initializer after assignment
	conversion.

	* bytecode/generate.cc (handle_op_assignment): Handle shift
	operators with 'long' right hand side.

	* model/binary.cc (value): Added comment.
	* model/primitive.hh (left_shift): Added asserts.  Mask right
	hand side.
	(right_shift): Likewise.
	(unsigned_right_shift): Likewise.

	* defassign.cc (definite_assignment_visitor::visit_assignment):
	Don't use handle_assignment.
	(definite_assignment_visitor::handle_assignment): Only for
	compound assignment.
	(INITIAL_LHS): New enum value.
	(definite_assignment_visitor::visit_array_ref): Updated.
	(definite_assignment_visitor::visit_field_ref): Likewise.
	(definite_assignment_visitor::visit_simple_variable_ref):
	Likewise.

	* dump.cc (dumper::visit_field_initializer): Skip initializer if
	it does not exist.

	* bytecode/signature.cc (parse_actual_type_arguments): Handle
	case where bound is a type variable.

	* dump.cc (dumper::visit_method): Only print body if it exists.

	* bytecode/signature.cc (parse_actual_type_arguments): Removed
	comment.
	* model/wildcard.cc (get_signature): Removed comment.

	* bytecode/signature.cc (parse_ref_type): '<' also ends the simple
	part of the type name.
	(parse_actual_type_arguments): Parse wildcards.

	* defassign.cc (definite_assignment_visitor::visit_field_ref):
	Don't consider qualified accesses to static fields.

	* model/class.hh (model_class::create_clinit_method): Updated.
	* model/class.cc (create_clinit_method): Now return 'bool'.
	(resolve): Check whether all blank final fields have been
	assigned.

	* defassign.cc (variable_state::print): New method.

	* model/fieldref.cc (resolve): Also make synthetic 'this' if
	reference is via 'super'.

	* model/invoke.cc (resolve): Error if 'super' used in Object.

2004-12-26  Tom Tromey  <tromey@redhat.com>

	* model/binary.cc (resolve): Use boolean_conversion.
	* conversions.cc (boolean_conversion): Allow unboxing to be
	disabled.

	* defassign.cc (definite_assignment_visitor::visit_class_decl_stmt):
	Check captured variables.
	* model/class.hh (model_class::get_captured_variables): New
	method.

	* defassign.cc (definite_assignment_visitor::visit_conditional):
	Handle true branch properly.

	* model/assign.cc (check_lhs): Use consider_initialized_p.
	* source/parse.cc (variable_declarator_id): Added "is_catch"
	argument.
	(formal_parameter): Likewise.
	(try_statement): Pass "true" to formal_parameter as is_catch
	argument.
	* model/variable.hh (class model_catch_decl): New class.
	(model_variable_decl::consider_initialized_p): New method.
	(model_parameter_decl::consider_initialized_p): Likewise.

	* defassign.cc (definite_assignment_visitor::visit_assert):
	Updated.
	(variable_state::set_definite_assignment_from): New method.

	* model/class.cc (add_anonymous_constructor): Check definite
	assignment for new constructor.

	* model/class.cc (generate_synthetic_field_name): Simplified.
	(add_assert_members): Added assertion.  Force field to be
	resolved.

	* model/class.cc (resolve): Don't resolve field initializer
	first.  Check definite assignment later.  Use constructor_p, not
	name comparison.
	(add_captured_constructor_arguments): Use prepend_statements.
	* model/constructor.cc (resolve): Renamed from do_resolve.
	(prepend_statements): New method.
	(resolve): Use it.
	* model/constructor.hh (model_constructor::do_resolve): Removed.
	(model_constructor::prepend_statements): Declare.
	* model/method.cc (check_definite_assignment): New method.
	(resolve): Renamed from do_resolve.
	* model/method.hh (model_method::do_resolve): Removed.
	(model_method::check_definite_assignment): Declare.

	* model/class.cc (add_captured_variable): Indentation fixlet.

	* model/classref.cc (resolve): Added assertion.  Don't generate
	class members for primitive types or void.

	* dump.cc (dumper::visit_try): Don't put more indentation around
	body or finally blocks.

2004-12-25  Tom Tromey  <tromey@redhat.com>

	* dump.cc (dumper::indent): Handle case when indentation is -1.
	(dumper::visit_for): Set indentation to -1.

	* model/new.cc (determine_enclosing_instance): Removed error.

	* configure.ac (BOOTCLASSPATH): Added --with-bootclasspath.
	* main.cc (class argument_parser): Use BOOTCLASSPATH if set.

	* main.cc (class argument_parser): Some indentation fixes.
	(argument_parser::parse_args): Set default classpath after
	checking environment variable.

	* README: Updated.

2004-12-25  Robert Olofsson  <robo@khelekore.org>

	* Makefile.am (headers): Fixed path.

2004-12-25  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (get_accessor): Removed abort.

2004-12-25  Elliott Hughes  <enh@jessies.org>

	* main.cc (argument_parser::parse_args): The default value for the
	classpath should be "." rather than "".
	(argument_parser::help_options): Document this.

2004-12-25  Elliott Hughes  <enh@jessies.org>

	Avoid name clashes for synthetic methods:
	* model/class.cc (model_class::generate_synthetic_method_name): Make
	a unique method name given a prefix to start with.
	(model_class::add_class_members): Use it.
	(model_class::get_accessor): Likewise.
	(model_class::create_finit_method): Likewise. Mark model_method as
	an instance initializer, since we can no longer tell from the name.
	* model/class.hh (model_class::generate_synthetic_method_name):
	Declare.
	* model/method.hh (model_method::is_instance_initializer): New field.
	(model_method::model_method): Initialize it.
	(model_method::instance_initializer_p): Use it.
	(model_method::set_instance_initializer): New method.

2004-12-25  Elliott Hughes  <enh@jessies.org>

	Avoid name clashes for synthetic fields:
	* model/class.cc (model_class::generate_synthetic_field_name): Make
	a unique field name given a prefix to start with.
	(model_class::get_this_0): Use it.
	(model_class::add_captured_variable): Likewise.
	(model_class::add_assert_members): Likewise. Switch to the same
	caching idiom as get_this_0.
	* model/class.hh (model_class::generate_synthetic_field_name): Declare.
	* model/class.hh (model_class::dollar_assertionsDisabled): Declare.

2004-12-25  Elliott Hughes  <enh@jessies.org>

	* bytecode/outpool.cc (output_constant_pool::add_utf): Throw an error
	if we're given a UTF-8 constant too long for the constant pool.

2004-12-24  Elliott Hughes  <enh@jessies.org>

	Detect constant pool overflow:
	* bytecode/classwriter.cc (class_writer::write): Pass the model_class
	to the output_constant_pool.
	* bytecode/outpool.cc (output_constant_pool::output_constant_pool):
	Keep the model_class.
	(output_constant_pool::increase_capacity): Increase the pool's
	capacity, and check it's not too big.
	(output_constant_pool::add_utf): Use increase_capacity.
	(output_constant_pool::add_name_and_type): Likewise.
	(output_constant_pool::add): Likewise.
	(output_constant_pool::): Likewise.
	* bytecode/outpool.hh (output_constant_pool::the_class): Declare.
	(output_constant_pool::increase_capacity): Declare.
	(output_constant_pool::output_constant_pool): Extra parameter.

	Fix FIXME in model/unit.cc:
	* model/class.cc (model_class::get_fully_qualified_name_with_slashes):
	A more efficient implementation than the join (split ()) trick.
	(model_class::compute_descriptor): Use it.
	* bytecode/outpool.cc (output_constant_pool::get_descriptor): Likewise.
	* model/unit.cc (model_unit_class::resolve): Likewise.
	* model/class.hh (model_class::get_fully_qualified_name_with_slashes):
	Declare.

2004-12-24  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_method_invocation): Updated.
	(visit_field_ref): Likewise.
	* model/class.cc (get_accessor): Fixed assertion.
	* model/invoke.cc (handle_resolve): Handle accessors for inherited
	members of outer class.
	* model/fieldref.cc (resolve): Handle accessors for inherited
	members of outer class.
	* access.hh (trampoline_required_p): Added "result" argument;
	updated documentation.
	* access.cc (trampoline_required_p): Added "result" argument.
	* verify.h (vfy_has_method): Removed hack.

	* dump.cc (dumper::klass): New field.
	(dumper): Initialize it.
	(dumper::visit_method): Set klass.
	(dumper::visit_this): Handle outer "this".

	* model/assign.hh (model_assignment::check_lhs): Updated.
	* model/assign.cc (check_lhs): Call set_left_hand_side on
	expression.  Added is_compound argument.  Added more error
	checks.
	(handle_resolve): Updated call to check_lhs.
	(resolve): Likewise.
	* model/fieldref.cc (resolve): Use is_left_hand_side.
	* model/fieldref.hh (model_field_ref::set_left_hand_side):
	New method.
	(model_field_ref::super): Moved later.
	(model_field_ref::is_left_hand_side): New field.
	(model_field_ref::is_compound): Likewise.
	(model_field_ref): Updated.  Initialize new fields.
	* model/varref.hh (model_simple_variable_ref::set_left_hand_side):
	New method.
	* model/arrayref.hh (model_array_ref::set_left_hand_side): New
	method.
	* model/expr.hh (model_expression::set_left_hand_side): New
	method.

	* verify.h (vfy_has_method): Hacked.

	* bytecode/verify.cc: Minor formatting fixes.
	* util.hh (operator+): Indentation fixlet.

2004-12-24  Elliott Hughes  <enh@jessies.org>

	* bytecode/verify.cc (verify_fail): Switch from char * to std::string.

	(_Jv_BytecodeVerifier::get_type_val_for_signature): Include detail
	of what we saw that caused us to fail verification.
	(_Jv_BytecodeVerifier::type::verify_dimensions): Likewise.
	(_Jv_BytecodeVerifier::state::merge): Likewise.
	(_Jv_BytecodeVerifier::state::state_mergeable_p): Likewise.
	(_Jv_BytecodeVerifier::pop_raw): Likewise.
	(_Jv_BytecodeVerifier::push_type): Likewise.
	(_Jv_BytecodeVerifier::set_variable): Likewise.
	(_Jv_BytecodeVerifier::get_variable): Likewise.
	(_Jv_BytecodeVerifier::compute_jump): Likewise.
	(_Jv_BytecodeVerifier::note_branch_target): Likewise.
	(_Jv_BytecodeVerifier::skip_padding): Likewise.
	(_Jv_BytecodeVerifier::branch_prepass): Likewise.
	(_Jv_BytecodeVerifier::check_pool_index): Likewise.
	(_Jv_BytecodeVerifier::verify_instructions_0): Likewise.

	(_Jv_BytecodeVerifier::type::set_uninitialized): Improve consistency.
	(_Jv_BytecodeVerifier::type::compatible): Likewise.
	(_Jv_BytecodeVerifier::type::element_type): Likewise.
	(_Jv_BytecodeVerifier::type::to_array): Likewise.
	(_Jv_BytecodeVerifier::type::verify_dimensions): Likewise.
	(_Jv_BytecodeVerifier::state::check_this_initialized): Likewise.
	(_Jv_BytecodeVerifier::pop_jump): Likewise.

	* util.hh (operator +): Allow std::string + char.

2004-12-24  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (definite_assignment_visitor::in_init): New field
	(again).
	(definite_assignment_visitor): Initialize new field.
	(definite_assignment_visitor::visit_method): Set in_init.
	(definite_assignment_visitor::visit_field_ref): Check in_init.

2004-12-23  Elliott Hughes  <enh@jessies.org>

	Fix method-invocation verification for class$ etc too:
	* model/class.cc (model_class::resolve_one_method): add to
	all_methods here...
	(model_class::get_accessor): ...rather than here.

2004-12-23  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_field_initializer): Handle case where there
	is no initializer.
	* bytecode/generate.cc (visit_field_initializer): Handle case
	where there is no initializer.
	* model/class.hh (model_class::check_init_list): Declare.
	* model/class.cc (add): Unconditionally add field to initializer
	list.
	(check_init_list): New method.
	(create_clinit_method): Use it.
	(create_finit_method): Likewise.
	* model/fieldinit.hh (class model_field_initializer): Updated
	comment.
	* defassign.cc (definite_assignment_visitor::in_field_init):
	Removed.
	(definite_assignment_visitor): Don't initialize in_field_init.
	(definite_assignment_visitor::visit_field_ref): Updated.
	(definite_assignment_visitor::decl_fields): Renamed from
	init_fields.
	(definite_assignment_visitor::field_it): Removed.
	(definite_assignment_visitor::visit_method): Don't set field_it.
	(definite_assignment_visitor::visit_field_initializer): Updated.

	* dump.cc (dumper::visit_variable_stmt): Visit variable
	initializer.

	* defassign.cc (definite_assignment_visitor::visit_method): Don't
	ignore synthetic fields.
	(definite_assignment_visitor::visit_field_initializer): Likewise.

	* defassign.cc (definite_assignment_visitor::local_fields): New
	field.
	(definite_assignment_visitor::field_it): New field.
	(definite_assignment_visitor::visit_method): Use local_fields.
	Initialize field_it.
	(definite_assignment_visitor::visit_field_initializer): Mark all
	declared fields.

	* model/memberref.cc (resolve): Use ids, not arguments, to
	determine qualification.

	* model/method.cc (do_resolve): Renamed from resolve.  Don't dump
	methods.  Don't do definite assignment checking.
	(resolve): New method.
	* model/constructor.cc (do_resolve): Renamed from resolve.  Don't
	dump methods.
	* model/constructor.hh (model_constructor::resolve): Removed.
	(model_constructor::do_resolve): Declare.
	* model/method.hh (model_method::do_resolve): Declare.

	* model/memberref.cc (resolve): Call set_qualified on field
	reference.
	* model/fieldref.hh (model_field_ref::qualified): New field.
	(model_field_ref): Initialize new field.
	(model_field_ref::set_qualified): New method.
	(model_field_ref::qualified_p): Likewise.
	* defassign.cc (definite_assignment_visitor::init_fields): New
	field.
	(definite_assignment_visitor::visit_method): Register constant
	fields in init_fields.
	(definite_assignment_visitor::visit_field_ref): Check for use
	before initialization.
	(definite_assignment_visitor::in_field_init): New field.
	(definite_assignment_visitor): Initialize it.
	(definite_assignment_visitor::visit_field_initializer): Set
	in_field_init, and update init_fields.

	* model/constructor.cc (resolve): Dump method if asked for.
	* model/method.cc (resolve): Dump method if asked for.
	* main.cc (features): Added dump-methods.
	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::dump_methods): New field.

	* model/continue.hh (model_continue::get_target): New method.
	* dump.cc (dumper::handle_target): New method.
	(dumper::visit_break): Use it.
	(dumper::visit_continue): Likewise.

	* model/class.cc (get_accessor): Indentation fixlet.
	(get_this_0): Added comment.

	* dump.cc (dumper::visit_method): Print declaring class name.

	* Makefile.am (dot_sources): Updated.
	* dump.hh: New file.
	* dump.cc: New file.

2004-12-22  Tom Tromey  <tromey@redhat.com>

	* model/imodifiable.hh (IModifiable::set_synthetic): Added
	comment.
	* model/class.cc (add_captured_variable): Call set_synthetic
	after setting modifiers.

	* bytecode/generate.cc (visit_assert): Add stack effects.

	* defassign.cc (definite_assignment_visitor::visit_field_ref):
	Error if final field is assigned outside constructor.

2004-12-21  Elliott Hughes  <enh@jessies.org>

	* verify.h (vfy_has_method): Document now, just in case.

2004-12-21  Elliott Hughes  <enh@jessies.org>

	Verify that method invocation only refers to methods that exist:
	* verify.h (vfy_has_method): New function.
	* bytecode/verify.cc (_Jv_BytecodeVerifier::verify_instructions_0):
	Use it.
	* model/class.cc (model_class::get_accessor): Ensure that we record
	accessors in all_methods.
	(model_class::has_method_with_descriptor_p): Test whether a method
	with a given name and descriptor exists.
	* model/class.hh (model_class::has_method_with_descriptor_p): Declare.

	* model/method.cc (model_method::get_signature): Fix copy/paste error
	that was corrupting the method's descriptor and preventing the new
	verification from working. Why has nothing else noticed?

	Use names like Outer$0 for anonymous inner classes in diagnostics:
	* model/class.cc (model_class::get_assigned_name): const.
	(model_class::get_pretty_name): Use assigned name.
	* model/class.hh (model_class::assigned_name): mutable.
	(model_class::get_assigned_name): const.

	* bytecode/verify.cc (_Jv_BytecodeVerifier::check_method_constant):
	Say "descriptor" instead of "signature".
	(_Jv_BytecodeVerifier::verify_instructions_0): Likewise.

	* model/class.hh (model_class::add_method): Use GNU indentation.

2004-12-21  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (handle_resolve): Use super_call_p.
	* model/invoke.hh (model_invocation_base::super_call_p): New
	method.
	(model_type_qualified_invocation::super_call_p): Likewise.
	* bytecode/generate.cc (visit_this): Use check_match.
	* model/this.hh (model_this::check_match): Now public.
	(model_synthetic_this::check_match): Likewise.

	* model/fieldref.cc (resolve): Updated.
	* model/this.cc (get_synthetic_this): Added "is_private"
	argument.
	(resolve): Use check_match.
	(check_match): New method.
	(check_context): Removed.
	* model/this.hh (model_this::get_synthetic_this): Added
	"is_private" argument.
	(model_this::check_context): Removed.
	(model_this::check_match): New method.
	(model_synthetic_this::check_match): Declare.
	(model_this_outer::check_context): Removed.

	* source/parse.cc (class_name_dot_this): Create a
	model_this_outer.
	* model/this.hh (class model_this_outer): New class.
	(model_this::check_context): Declare.
	* model/this.cc (resolve): Fix check for static context.
	(check_context): New method.
	(resolve): Use it.

	* defassign.cc: Reverted previous patch.

	* defassign.cc (definite_assignment_visitor::visit_field_ref):
	Error if final field assigned outside constructor.

2004-12-20  Tom Tromey  <tromey@redhat.com>

	* model/this.cc (get_synthetic_this): New method.
	(resolve): Error if `this' does not refer to enclosing class.
	Call check_outer.
	* model/invoke.cc (handle_resolve): Use get_synthetic_this.
	(determine_search_class): Likewise.  Throw exceptions on error.
	* model/fieldref.cc (resolve): Use get_synthetic_this.
	* model/new.cc (determine_enclosing_instance): Use new model_this
	constructor.
	(determine_enclosing_instance): Likewise.
	* model/this.hh (model_this): New constructor.
	(model_this::get_synthetic_this): Declare.
	(model_this::check_outer): Declare.
	(class model_synthetic_this): New class.

2004-12-19  Tom Tromey  <tromey@redhat.com>

	* warnings.cc (warning_scope): Initialize to having all warning
	disabled.

	* model/fieldref.cc (resolve): Only throw non-static exception if
	we infer a plain "this".

	* model/this.cc (resolve): Enable errors relating to use of
	"this" in a static context.

	Unify warning handling:
	* model/newarray.cc (resolve): Updated.
	* model/method.cc (resolve): Updated.
	* model/binary.cc (resolve): Updated.
	* model/iannotatable.cc (get_warning_flags): Updated.
	* tree/driver.cc (handle_option): Updated.
	* main.cc (argument_parser::handle_warning): Updated.
	(argument_parser::help_warnings): Likewise.
	* compiler.cc (compiler): Initialize warning_scope.  Don't
	initialize warning fields.
	(set_wall): Rewrote.
	* compiler.hh (class compiler_warning): Removed.
	(class compiler): Derive from warning_scope.  Removed all warn_*
	fields.
	* scope.cc (push_warnings): Moved to warnings.cc.
	(push_warning_context): Likewise.
	(check_warning): Likewise.
	* scope.hh (class resolution_scope): Inherit from warning_scope.
	(resolution_scope::warning_bits): Removed.
	(class resolution_scope): Removed all warn_* methods.
	(resolution_scope::push_warnings): Moved to warning_scope.
	(resolution_scope::check_warning): Likewise.
	* warnings.cc (struct warning_desc): Removed "field" field.
	(warnings): Updated.
	(find_warning_field): Removed.
	(check_warning): New method.
	(push_warning_context): Likewise.
	(push_warnings): New constructor.
	(set_warning): New method.
	* warnings.hh (class warning_scope): New class.
	(find_warning, print_warning_help): Now static methods.
	(compiler_warning_field): Removed.
	(find_warning_field): Likewise.
	(warning_flag): Renamed constants.

	* model/invoke.cc (handle_resolve): Only throw non-static
	exception if we infer a plain `this'.

	* model/iannotatable.cc (get_warning_flags): Suppress deprecated
	warning in deprecated context.

	* source/parse.cc (primary): Introduce a new scope for the
	marker.

	* bytecode/generate.cc (java_lang_wrapper_for_primitive_type):
	Removed.
	(visit_class_ref): Use box_primitive_type.
	* conversions.cc (box_primitive_type): New function.
	(boxing_conversion): Use it.
	* conversions.hh (box_primitive_type): Declare.

	* bytecode/verify.cc (verify_instructions_0) <op_return>: Special
	case Object's <init>
	* bytecode/generate.cc (visit_method_invocation): Use
	invokeinterface if qualifying class is an interface.
	(visit_this): Reference `this$0' argument, not field, in
	constructor.

	* bytecode/generate.cc (write): Catch exceptions here.

2004-12-19  Elliott Hughes  <enh@jessies.org>

	* format/format.cc (format_repr::format_repr): count unquoted
	insertions (such as "%u1").
	(format_repr::get_message): format unquoted insertions without
	quotes.

	* verify.h (vfy_fail): remove quoting from the PC values and the
	explanations of the verification errors.

	* main.cc (make_error): remove quoting from the name of the kind
	of thing (option or feature) we didn't recognize.

	* main.cc (argument_parser::help_options): correct the explanation
	of how @files are interpreted. (Jikes actually implements what gcjx
	claimed, but that's different from javac and gcjx's behavior.)

2004-12-18  Elliott Hughes  <enh@jessies.org>

	Fixing <type>.class expressions:
	* generate.cc (bytecode_generator::visit_class_ref): Rewrite the
	descriptor in the form expected by java.lang.Class.forName when
	using class$ to get a Class. Add proper handling of primitive
	types (including void), emitting an access to the TYPE field of
	the corresponding wrapper class.
	(java_lang_wrapper_for_primitive_type): New function to get the 
	appropriate wrapper class.
	(bytecode_generator::find_field): New method to find a field.
	* generate.hh (bytecode_generator::find_field): Declare.

	* compiler.hh (compiler::java_lang_Void): New field.
	* compiler.cc (compiler::compiler): Initialize.

	* util.cc (replace_all): Like Java's String.replaceAll.
	* util.hh (replace_all): Declare.

2004-12-18  Elliott Hughes  <enh@jessies.org>

	* bytecode/classreader.cc (class_reader::parse_header): Report
	invalid magic numbers in hex rather than decimal.

2004-12-18  Tom Tromey  <tromey@redhat.com>

	* main.cc (gcjx_main): Handle return result of generate_code.
	* compiler.cc (generate_code): Changed return result.
	* compiler.hh (compiler::generate_code): Changed return result.

	* verify.h (vfy_iface_iterator_done): Fix sense of test.

	* model/class.hh (class AllMethodsIterator): Indentation fixlets.

	* bytecode/generate.cc (write): Updated.
	* bytecode/outpool.hh (output_constant_pool::get_descriptor):
	Declare.
	(output_constant_pool::update_descriptor): Declare.
	(output_constant_pool::get_fake_compilation_unit): Updated.
	* bytecode/outpool.cc (get_descriptor): New method.
	(add): Use it.
	(get_fake_compilation_unit): Likewise.
	(update_descriptor): New method.
	(get_fake_compilation_unit): Add field and method types.  Added
	argument.

	* bytecode/generate.cc (write): Call get_fake_compilation_unit.
	* bytecode/outpool.cc (create_constant_pool): Removed.
	(output_constant_pool): Updated for field changes.
	(~output_constant_pool): Likewise.
	(get_fake_compilation_unit): New method.
	* bytecode/outpool.hh (output_constant_pool::create_constant_pool):
	Removed.
	(output_constant_pool::get_fake_compilation_unit): Declare.
	(output_constant_pool::ordinary_pool): Removed.
	(output_constant_pool::fake_unit): Declare.
	* verify.h (vfy_method::unit): New field.
	(vfy_method::pool): Removed.
	(vfy_method): Updated constructor arguments.
	(vfy_get_constants): Updated.
	(vfy_find_class): Rewrote.
	(vfy_is_15): Likewise.
	* model/bytecode.cc (verify): Updated.
	* model/bytecode.hh (model_bytecode_block::verify): Changed type
	of second argument.
	* model/unit.cc (find_class_from_descriptor): New method.
	* bytecode/classreader.cc (parse): Pass location to
	model_unit_class constructor.
	* model/unit.hh (model_unit_class): New constructor.
	(model_unit_class): Added location argument.
	(class model_unit_fake): New class.

	* verify.h (vfy_get_pool_resolved_class): New method.

	* verify.h (vfy_load_indexes): Look at val, not index.  Put
	values into correct result slots.
	(vfy_get_pool_string): Use get_utf8, not get_string.

	* bytecode/generate.cc (write): Verify the method.
	* Makefile.am (bytecode_sources): Updated.
	* bytecode/outpool.cc (create_constant_pool): New method.
	(output_constant_pool): Initialize new field.
	(~output_constant_pool): Delete new field.
	* bytecode/classreader.cc (parse_constant_pool): Use
	constant_pool_reader.
	* bytecode/poolreader.hh: New file.
	* bytecode/poolreader.cc: New file.
	* bytecode/outpool.hh (output_constant_pool::create_constant_pool):
	Declare.
	(output_constant_pool::ordinary_pool): New field.

2004-12-17  Tom Tromey  <tromey@redhat.com>

	* model/bytecode.hh (model_bytecode_block::verify): Updated.
	* model/bytecode.cc (verify): Added "pool" argument.
	* bytecode/verify.cc (check_pool_index): Updated.
	(check_class_constant): Likewise.
	(check_constant): Likewise.
	(check_wide_constant): Likewise.
	(handle_field_or_method): Likewise.
	* verify.h (struct vfy_method): Added "pool" field.
	(vfy_method): Updated constructor.
	(vfy_get_constants): Changed arguments.  Rewrote.
	(vfy_get_constants_size): Likewise.

	* source/token.hh: Don't include stdlib.h.
	* owner.hh: Don't include stdlib.h.
	* typedefs.hh: Include stdlib.h.

	* conversions.cc (annotation_commensurate_p): Use
	model_annotation_initializer.  Set actual type of initializer.
	* bytecode/attribute.cc (emit_annotation_value): Use
	model_annotation_initializer.
	* bytecode/classreader.cc (parse_annotation_value): Create a
	model_annotation_initializer.
	* model/annotype.cc (element_compatible_p): Use
	model_annotation_initializer.
	* model/iannotatable.cc (get_warning_flags): Use
	model_annotation_initializer.
	* model/arrayinit.cc (visit): New method.
	(resolve): Likewise.
	(set_actual_type): Likewise.
	* model/arrayinit.hh (class model_annotation_initializer): New
	class.
	(class model_array_initializer): Made fields protected.
	* source/parse.cc (member_value): Fixed comment.  Use
	model_annotation_initializer.

2004-12-16  Tom Tromey  <tromey@redhat.com>

	* scope.hh (resolution_scope): Initialize new field.
	* model/annotype.cc (element_compatible_p): Correctly handle case
	where @Target not specified.
	* model/iannotatable.cc (resolve_annotations): Fixed error
	message.
	(get_warning_flags): Expect a string literal.
	* model/annotation.cc (resolve): Call set_type.

	* Makefile.am (headers): Updated.
	(dot_sources): Updated.

	* typedefs.hh: Include warnings.hh.

	Write annotations to class files:
	* model/annotation.hh (model_annotation::get_arguments): New
	method.
	* model/classref.hh (model_class_ref::get_class): New method.
	* bytecode/attribute.cc (annotation_attribute): New constructor.
	(parameter_attribute): Likewise.
	(emit): New methods.
	(emit_primitive): New template function.
	(emit_annotation_value): New function.
	(emit_annotation): Likewise.
	(annotation_default_attribute): New constructor.
	* bytecode/attribute.hh (class annotation_attribute): New class.
	(class parameter_attribute): Likewise.
	(class annotation_default_attribute): Likewise.
	* bytecode/classwriter.cc (maybe_write_annotations): Create
	attribute objects.
	(maybe_write_parameter_annotations): Likewise.

	Handle SuppressWarnings annotation:	
	* main.cc (argument_parser::help_warnings): Use
	print_warning_help.
	(argument_parser::handle_warning): Use find_warning.
	(struct warning_flag): Removed.
	(CWARN): Removed.
	(warnings): Removed.
	* warnings.cc: New file.
	* warnings.hh: New file.
	* model/constructor.cc (resolve): Push warnings.
	* model/iannotatable.cc (get_warning_flags): New method.
	* model/iannotatable.hh (IAnnotatable::get_warning_flags):
	Declare.
	* model/assign.hh (model_assignment::handle_resolve): Updated.
	* model/newarray.cc (resolve): Use scope's warning method.
	* model/method.cc (resolve): Use scope's warning method.
	(resolve_classes): Likewise.
	(resolve): Push warnings.
	(resolve_classes): Push warnings.
	* model/label.cc (resolve): Use scope's warning method.
	* model/invoke.cc (handle_resolve): Use scope's warning method.
	* model/instanceof.cc (resolve): Use scope's warning method.
	* model/import.cc (resolve): Use scope's warning method.
	* model/fieldref.cc (resolve): Use scope's warning method.
	* model/field.cc (resolve): Use scope's warning method.
	(check_deprecated): Likewise.
	(check_referenced): Likewise.
	(type): Push warnings.
	(resolve_classes): Likewise.
	(resolve): Likewise.
	* model/class.cc (do_resolve_classes): Use scope's warning
	method.
	(add_anonymous_constructor): Push warnings.
	(do_resolve_classes): Likewise.
	(resolve_members): Likewise.
	(resolve): Likewise.
	(push_on_scope): Likewise.
	(push_on_scope_for_class): Likewise.
	* model/binary.cc (resolve): Use scope's warning method.
	* model/assign.cc (handle_resolve): Added scope argument.  Use
	scope's warning method.
	(resolve): Updated.
	* scope.hh (resolution_scope::check_warning): New method.

2004-12-16  Elliott Hughes  <enh@jessies.org>

	* tree/builtins.cc (tree_builtins::lay_out_vtable): Replace use of
	model_class::get_all_methods with iterators.
	* model/class.hh (model_class::get_all_methods): Remove method.

2004-12-16  Tom Tromey  <tromey@redhat.com>

	* util.cc (maybe_swap): Use "WORDS_BIGENDIAN".
	* configure.ac: Call AC_C_BIGENDIAN.

2004-12-15  Elliott Hughes  <enh@jessies.org>

	* bytecode/generate.cc (invokeinterface_count): New method to
	calculate the value of the invokeinterface "count" argument.
	(bytecode_generator::handle_invocation): Use it.

	(width_of_type): New method factoring out the fact that wide
	types count double in various circumstances.
	(bytecode_generator::increase_stack): Use it.
	(bytecode_generator::reduce_stack): Likewise.
	(invokeinterface_count): Likewise.

2004-12-15  Elliott Hughes  <enh@jessies.org>

	* model/class.cc (add_method): New method factoring out the
	insertion into both "methods" and "all_methods".
	(model_class::add_anonymous_constructor): Use it.
	(model_class::resolve_members): Likewise.
	(model_class::create_finit_method): Likewise.
	(model_class::add_class_members): Likewise.

	(model_class::method_inheritable_p): Use equal_range on all_methods
	to iterate over only those methods with the appropriate name, rather
	than the whole of all_methods.
	(model_class::find_members): Likewise.

	(template model_class::inherit_methods): New template method to
	inherit methods between a pair of iterators over ref_methods.
	(model_class::inherit_methods): Use template, stop copying all_methods.
	(model_class::has_any_conflicting_interface_method_p): New method,
	pulled from conversions.cc's function "casting_conversion".
	(model_class::check_uninherited_abstract_methods): Update for multimap.
	(model_class::resolve_members): Likewise.

	* model/class.hh (AllMethods): New typedef.
	(AllMethodsIterator): New class for simpler iteration over all_methods.
	(all_methods): Change from std::list to std::multimap.
	(model_class::get_all_methods): Alternative implementation, disabled
	by an assert.  tree_builtins::lay_out_vtable needs updating before we
	can remove model_class::get_all_methods; this code leaves the choice
	open, but I think it should be removed.
	(model_class::begin_all_methods): New method.
	(model_class::end_all_methods): Likewise.
	(model_class::add_method): Declaration.
	(template model_class::inherit_methods): Likewise.
	(model_class::has_any_conflicting_interface_method_p): Likewise.

	* conversions.cc (casting_conversion): Invoke new method on
	model_class to determine whether interface methods conflict.

	* header/cni.cc (cni_code_generator::write_includes): Use iterators
	rather than copying (or getting a reference to) a class' method list.
	* header/cni.hh (cni_code_generator::write_includes): Declaration.

	* factory.cc (jar_class_factory::process_zip_entry): Stop invoking
	dostime_to_unixtime, which dominates the time taken to read rt.jar.
	(dostime_to_unixtime): Move...
	* reader/zereader.cc (dostime_to_unixtime): ...here, where we only
	do the work for classes we're interested in.
	* reader/zereader.hh (dos_mtime): New field.
	(zip_entry_reader::zip_entry_reader): Initialization changes.

2004-12-15  Tom Tromey  <tromey@redhat.com>

	* model/unit.hh (model_unit_class::find_top_level_class):
	Updated.
	* model/unit.cc (find_top_level_class): Added scope and
	side_effects arguments.  Find inner classes even if not mentioned
	in InnerClasses.

	* model/fwdtype.cc (resolve): Throw exception if type not found.

2004-12-14  Tom Tromey  <tromey@redhat.com>

	* model/annotype.cc (get_retention_policy): Return RETAIN_CLASS
	if no retention policy set.
	(element_compatible_p): Fixed ANNOTATE_TYPE logic.  Give error if
	target appears more than once.

	* model/annotype.cc (element_compatible_p): Use correct names for
	enum elements.  "annotation" includes "type".

2004-12-14  Elliott Hughes  <enh@jessies.org>

	* model/method.hh (model_method::different_name_p)
	(model_method::has_name_p): New methods to avoid allocating
	temporary strings in hot loops.

	* model/class.cc (model_class::method_inheritable_p)
	(model_class::find_members): Only invoke 'end' on the list of members
	once per iteration, and call our new methods. We might want to avoid
	keeping members in a big (unordered?) list.

2004-12-14  Elliott Hughes  <enh@jessies.org>

	* factory.cc (jar_class_factory::open_zip_file): Create a byte_buffer
	rather than keeping a file descriptor for further use.
	(jar_class_factory::checked_seek): Removed.
	(jar_class_factory::read_zip_file_header): Use byte_buffer.
	(jar_class_factory::seek_to_end_of_zip_central_directory): Renamed
	to find_end_of_zip_central_directory, changed to use byte_buffer.
	(jar_class_factory::process_zip_central_directory): Use byte_buffer.
	(jar_class_factory::process_zip_entry): Likewise.
	(jar_class_factory::process_zip_entries): Likewise.
	(jar_class_factory::jar_class_factory): Likewise.
	(jar_class_factory::~jar_class_factory): Likewise.
	* factory.hh: Update declarations and comments.

	* reader/zereader.cc (zip_entry_reader::read_all): Use byte_buffer,
	remove file handling.
	* reader/zereader.hh (zip_entry_reader::zip_entry_reader): Take a
	byte_buffer instead of a file descriptor.
	* reader/zereader.hh: Update declarations and comments.

2004-12-13  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.hh (class_writer::maybe_write_annotations):
	Declare.
	(class_writer::maybe_write_parameter_annotations): Likewise.
	(class_writer::classify_annotation): Likewise.
	* bytecode/classwriter.cc (maybe_write_annotations): New method.
	(write): Use it.
	(classify_annotation): New method.
	(maybe_write_parameter_annotations): New method.
	(write): Use it.
	* model/iannotatable.hh (IAnnotatable::get_annotations): New
	method.

	* model/switch.cc (resolve): Don't fold expression when type is
	enum type.  Unwrap forwarding member reference as well.

	* model/annotation.cc (find_annotation): New method.
	* model/annotation.hh (enum annotation_retention): New enum.
	(enum annotation_kind): Specify values.
	(model_annotation::find_annotation): Declare.
	* model/iannotatable.cc (resolve_annotations): Check whether model
	type is valid for annotation.
	* model/annotype.cc (element_compatible_p): New method.
	(get_retention_policy): Likewise.
	* model/constructor.hh (model_constructor::get_annotation_kind):
	New method.
	* model/annotype.hh (model_annotation_type::get_annotation_kind):
	New method.
	(model_annotation_type::element_compatible_p): Declare.
	(model_annotation_type::valid_elements): New field.
	(model_annotation_type::policy): Likewise.
	(model_annotation_type::get_retention_policy): Declare.
	* model/variable.hh (model_variable_decl::set_annotations):
	Removed.
	(model_variable_decl::get_annotation_kind): New method.
	(model_parameter_decl::set_annotations): Removed.
	(model_parameter_decl::get_annotation_kind): New method.
	* model/package.hh (model_package::set_annotations): Removed.
	(model_package::get_annotation_kind): New method.
	* model/method.hh (model_method::set_annotations): Removed.
	(model_method::get_annotation_kind): New method.
	* model/field.hh (model_field::set_annotations): Removed.
	(model_field::get_annotation_kind) New method.
	* model/enumconst.hh (model_enum_constant::set_annotations):
	Removed.
	(model_enum_constant::get_annotation_kind): New method.
	* model/class.hh (model_class::set_annotations): Removed.
	(model_class::get_annotation_kind): New method.
	* model/iannotatable.hh (IAnnotatable::get_annotation_kind): New
	method.
	(IAnnotatable::set_annotations): Now public; changed interface.

	* bytecode/classreader.cc (parse_annotation_value): Handle 'e',
	'c', and '@' cases.

	* bytecode/generate.cc (visit_for_enhanced): Handle non-array
	case.
	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::java_util_Iterator): New field.

2004-12-13  Tom Tromey  <tromey@redhat.com>

	Initial code for explicit type arguments to generic method and
	constructor invocations:
	* model/memberref.hh (class model_memberref_base): Removed.
	(class model_memberref_forward): Now derived from
	model_expression.
	(model_memberref_forward): New constructor.
	(model_memberref_forward::set_ids): New method.
	* owner.cc: Added instantiation.
	* typedefs.hh (ref_new_primary): New typedef.
	(model_generic_memberref_forward): Likewise.
	* model/new.cc (finish_search_class): New method.
	(determine_search_class): New method.
	* model/fwdtype.hh (model_forwarding_parameterized): Argument now
	a const reference.
	(model_forwarding_parameterized): New constructor.
	* source/parse.hh (parse::actual_type_parameters): Declare.
	* source/parse.cc (actual_type_parameters): New method.
	(new_something): Changed argument name.  Updated for type
	parameters.
	(super_access): Handle type parameters.
	(explicit_constructor_invocation): Likewise.
	* model/invoke.cc (model_generic_invocation): New constructor.
	Added instantiations.
	* model/new.hh (model_new): New constructor.
	(class model_new_primary): New class.
	(model_new::finish_search_class): Declare.
	(model_new::simple_name): Removed.
	(model_new): Removed constructor.
	(model_generic_new): New typedef.
	(model_generic_new_primary): Likewise.
	(model_new::set_class): New method.
	* model/invoke.hh (class model_generic_invocation): New class.
	(model_generic_type_qualified_invocation): New typedef.
	(model_generic_super_invocation): Likewise.
	(model_generic_this_invocation): Likewise.

	* tree/driver.cc (init_options): Pass name to compiler
	constructor.

	* typedefs.hh: Include <sstream>.

2004-12-12  Elliott Hughes  <enh@jessies.org>

	* compiler.cc (compiler::compiler): Give each compiler instance a name.
	(compiler::get_name): New member function.
	(compiler::do_load_source_file): Use name.
	* compiler.hh: Declarations.

	* exception.hh (command_line_error): New exception.

	* main.cc (make_error): New function.
	(die_unrecognized, no_arg): Throw exceptions.
	(argument_parser::parse_args): Throw exceptions.
	(gcjx_main): Stupidly-named new function that does the work of main,
	throwing exceptions.
	(main): Catch exceptions and report the errors.

	* bytecode/classreader.cc (class_reader::parse_inner_classes): Throw
	an exception to fix a FIXME.
	(class_reader::parse_method): Fix a FIXME, the easy one about sprintf.
	(class_reader::parse_constant_pool): Fix a FIXME, adding bounds
	checking.

2004-12-12  Elliott Hughes  <enh@jessies.org>

	* bytecode/signature.cc (signature_parser::require): Improve error
	messages and remove corresponding FIXME.

	* model/type.cc (model_type::checked_exception_p): New member function.
	* model/type.hh: Declare.
	* util.cc (checked_exception_p): Remove.
	* util.hh (checked_exception_p): Remove declaration.
	* model/throw.cc: Updated for change.
	* model/throwsclause.cc: Updated for change.

2004-12-12  Elliott Hughes  <enh@jessies.org>

	* model/unit.cc (model_unit_source::resolve): Report types involved
	when more than one public class is found in a compilation unit.

2004-12-11  Elliott Hughes  <enh@jessies.org>

	* tree/builtins.cc (tree_builtins::add): Track formatting change.

2004-12-08  Elliott Hughes  <enh@jessies.org>

	* factory.cc (jar_class_factory::open_zip_file): New method; throws
	on error, which completes the regularization of the JAR error
	reporting.
	(jar_class_factory::read_zip_archive): Call new method.
	(jar_class_factory::jar_class_factory): Remove file-opening code.

2004-12-08  Elliott Hughes  <enh@jessies.org>

	* factory.cc (zip_signature_p): Removed.
	(jar_class_factory::checked_seek): Factor out the lseek(3) error
	checking and error reporting.
	(jar_class_factory::check_magic): Factor out the magic number
	checking and error reporting.
	(jar_class_factory::read_zip_archive): Replace old ostream code
	with simpler code using exceptions.
	(jar_class_factory::read_zip_file_header): Likewise.
	(jar_class_factory::process_zip_central_directory): Likewise.
	(jar_class_factory::process_zip_entry): Likewise.
	(jar_class_factory::process_zip_entries): Likewise.
	(jar_class_factory::seek_to_end_of_zip_central_directory): New
	name for jar_class_factory::find_end_of_zip_central_directory.
	(jar_class_factory::make_error): Factor out exception creation.
	(jar_class_factory::jar_class_factory): replace old output with
	exception output, removing one of the last places with `' quoting.

	* exception.hh: Shuffle #includes.
	* typedefs.hh: Shuffle #includes.

	* util.hh: Correct typo in comment.

	* format.hh: (to_hex_string): New function.

2004-12-08  Tom Tromey  <tromey@redhat.com>

	* reader/source.cc (apply): Print trailing "]".  Fixed verbose
	message.

	* bytecode/signature.cc (parse_one_parameter): Set name on type
	parameter.

	* main.cc (argument_parser::get_arg_for): Fixed logic.

	* header/jni.cc (generate): Print file name when verbose.

	* model/package.hh (model_package::get_simple_name): New method.
	(model_package::parent): New field.
	(model_package): Initialize it.
	(model_package::add): Set new field.
	(model_package::get_parent): New method.
	* header/cni.hh (class cni_code_generator): Updated.
	* header/cni.cc (write_namespaces): New method.
	(write_includes): Call it.
	(indent): New method.
	(open_package): Likewise.
	(generate): Print file name when verbose.
	(add): Use get_parent.
	(write_includes): Add the class itself.

	* bytecode/signature.hh (signature_parser::parse_one_type_variable):
	Updated.
	(signature_parser::parse_type_parameters): Updated.
	* bytecode/signature.cc (parse_one_type_variable): Changed return
	type.  Finished.
	(parse_type_parameters): Changed interface.
	(parse_method_signature): Updated.
	(parse_class_signature): Updated.

2004-12-07  Tom Tromey  <tromey@redhat.com>

	* model/variable.hh (model_variable_decl::set_declared_type): New
	method.
	* bytecode/classreader.cc (parse_exceptions): Use new field(s).
	(parse_method): Likewise.
	(parse_signature): Wrote.
	* bytecode/classreader.hh (class_reader::current_exceptions): New
	field.
	(class_reader::current_method_arguments): Likewise.

	* main.cc (argument_parser::is_form_of): Fixed logic.

	* model/typevar.hh (model_type_variable): New constructor.
	* Makefile.am (bytecode_sources): Updated.
	* bytecode/signature.cc: New file.
	* bytecode/signature.hh: New file.
	* source/parse.cc (type_name): Create a model_forwarding_inner.
	* model/fwdtype.cc (resolve): New method.
	(resolve): Simplified.
	* model/fwdtype.hh (class model_forwarding_inner): New class.
	(model_forwarding_full): New constructor.
	(model_forwarding_parameterized::name): Removed.
	(model_forwarding_parameterized::parent): Removed.
	(model_forwarding_parameterized::base): New field.
	(model_forwarding_parameterized): Updated arguments.

	* model/class.cc (get_signature): Handle "/" after package
	component, if needed.
	* model/package.hh (model_package::get_signature_fragment): Don't
	append trailing "/".

	* main.cc (argument_parser::is_form_of): Added `use_equals'
	argument.
	(argument_parser::get_arg_for): Likewise.
	(class argument_parser): Correctly handle -I.

2004-12-06  Elliott Hughes  <enh@jessies.org>

	* model/class.cc (model_class::method_inheritable_p): Include
	"<clinit>" in those methods we can't inherit. Fixes building
	with a javac-compiled java.lang.Object class.

	* model/invoke.cc (model_invocation_base::find_method): An
	empty set of maximally specific methods implies that an invocation
	is ambiguous. Fixes crash with "public class d { java.awt.Dialog d =
	new java.awt.Dialog(null); }".

	* model/method.cc (model_method::method_conversion_p): A simple
	test for signatures mismatched through numbers of arguments. Fixes
	crash compiling "public class d { java.awt.Dialog d = new
	java.awt.Dialog(); }". Not clear why existing code didn't catch this.

2004-12-05  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::push_on_scope_for_class): Declare.
	* model/class.cc (resolve_classes): Use push_on_scope_for_class.
	(push_on_scope_for_class): New method.

	* bytecode/block.cc: Include bytecode/attribute.hh.

	* model/class.cc (get_fully_qualified_name): Handle empty
	package.

	* bytecode/generate.hh (bytecode_generator::attributes): New
	field.
	(bytecode_generator::line_table_attribute): New class.
	(bytecode_generator::write_line_table): Declare.
	* bytecode/generate.cc: Include bytecode/attribute.hh.
	(generate): Use attribute objects.
	(write): Likewise.
	(write_line_table): New method.
	* bytecode/classwriter.hh (class_writer::write_class_attributes):
	Removed.
	(class_writer::write_method): Updated.
	(class_writer::write_field): Updated.
	(class_writer::add_field_value): Removed.
	* bytecode/outpool.cc (write_inner_classes): Don't write
	attribute name.
	* bytecode/classwriter.cc: Include bytecode/attribute.hh.
	(write): Use bytecode attribute objects.
	(write_class_attributes): Removed.
	(add_field_value): Removed.
	(write_field): Changed interface.  Use attribute list.
	(write_method): Likewise.
	* bytecode/attribute.cc: New file.
	* bytecode/attribute.hh: New file.

	* bytecode/classreader.cc (parse_attributes): Call
	parse_annotation_default.

2004-12-04  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (class_writer): Initialize new field.
	(write_field): Use new field.
	(write_method): Likewise.
	(write): Likewise.  Add Signature if 1.5.
	(write_class_attributes): Write out Signature.
	(write_field): Likewise.
	(write_method): Likewise.
	* bytecode/classwriter.hh (class_writer::target_15): New field.

	Compute 1.5-style signatures.
	* model/throwsclause.cc (get_signature): New method.
	* model/method.cc (get_signature): New method.
	* model/throwsclause.hh (model_throws_clause::get_signature):
	Declare.
	* model/variable.cc (get_signature): New method.
	* model/variable.hh (model_variable_decl::get_signature):
	Declare.
	* model/method.hh (model_method::get_signature): Declare.
	* model/arraytype.hh (model_array_type::get_signature): New
	method.
	* model/classinst.cc (get_signature_map_fragment): New method.
	* model/classinst.hh
	(model_class_instance::get_signature_map_fragment): Declare.
	* model/wildcard.cc (get_signature): New method.
	* model/wildcard.hh (model_wildcard::get_signature): Declare.
	* model/type.hh (model_type::get_signature): New method.
	* model/typevar.cc (get_signature): New method.
	(get_formal_signature): New method.
	* model/typevar.hh (model_type_variable::get_signature): Declare.
	(model_type_variable::get_formal_signature): Declare.
	* model/parameters.cc (get_signature): New method.
	* model/parameters.hh (model_parameters::get_signature): Declare.
	* model/class.cc (get_signature_fragment): New method.
	(get_signature): Likewise.
	(get_assigned_name): Likewise.
	(get_fully_qualified_name): Use it.
	(get_class_signature): New method.
	* model/class.hh (model_class::get_signature_fragment): Declare.
	(model_class::assigned_name): Renamed from fully_qualified_name.
	(model_class::get_assigned_name): Declare.
	(model_class::get_signature_fragment): Likewise.
	(model_class::get_class_signature): Likewise.
	(model_class::get_signature_map_fragment): New method.
	* model/package.hh (model_package::get_signature_fragment): New
	method.

	Renamed old "signature" to "descriptor" to match 1.5.
	* verify.h (vfy_get_signature): Updated.
	(vfy_find_class): Updated.
	(vfy_get_primitive_char): Updated.
	* bytecode/cpool.cc (get_fieldref): Updated.
	* bytecode/classreader.hh (class class_reader): Updated.
	* bytecode/classwriter.cc (write_field): Updated.
	(write_method): Updated.
	(write): Updated.
	* bytecode/outpool.cc (add): Updated.
	* bytecode/glue.cc (skip_one_type): Updated.
	(vfy_count_arguments): Updated.
	* bytecode/generate.cc (visit_class_ref): Updated.
	* bytecode/classreader.cc (one_type): Updated.
	(parse_method_descriptor): Renamed.
	(parse_method): Updated.
	(parse_field): Updated.
	* model/invoke.cc (find_method): Updated.
	* model/arraytype.cc (model_array_type): Updated.
	* model/fwdtype.cc (resolve): Updated.
	* model/unit.cc (find_top_level_class): Updated.
	(find_class_from_descriptor): Renamed.
	* model/type.hh (model_type::descriptor): Renamed from signature.
	(model_type::compute_descriptor): Renamed.
	(model_type::get_descriptor): Likewise.
	* model/class.cc (compute_descriptor): Renamed.
	(resolve_members): Updated.
	* model/class.hh (model_class::compute_descriptor): Renamed.
	* model/null.hh (model_null_type): Updated.
	* model/method.cc (get_descriptor): Updated.
	* model/method.hh (model_method::descriptor): Renamed from
	signature.
	(model_method::get_descriptor): Renamed.
	* model/primitive.hh (model_primitive_base): Updated.
	* model/constructor.cc (resolve_classes): Updated.
	(add_parameter): Updated.
	* model/unit.hh (model_unit::find_class_from_descriptor): Renamed
	signature to descriptor.
	(model_unit_class::find_class_from_descriptor): Likewise.
	* model/void.hh (model_void_type): Renamed signature to
	descriptor.
	* header/jni.cc (write_method): Updated.
	* header/jnistub.cc (write_method): Updated.
	* tree/tree.cc (build_jni_stub): Updated.
	* tree/lower.cc (find_model_class): Updated.
	* tree/decl.cc (build_method_symbol_type): Added comment.
	(build_method_type): Likewise.
	* name.hh (classify_primitive_type_descriptor,
	classify_type_descriptor): Updated.
	* name.cc (classify_primitive_type_descriptor): Renamed signature
	to descriptor.
	(classify_type_descriptor): Likewise.

2004-12-03  Tom Tromey  <tromey@redhat.com>

	* model/enum.cc (massage_modifiers): Error to have enum in inner
	class, or local to method.

	* model/class.hh (model_class::set_annotations): Now virtual.
	* model/enum.cc (massage_modifiers): New method.
	(add_enum): Update `constants'.
	* model/enum.hh (model_enum::massage_modifiers): Declare.
	(model_enum::constants): New field.
	* source/parse.cc (enum_body): Call set_has_body on enum
	constant.
	* model/enumconst.hh (model_enum_constant::body): New field.
	(model_enum_constant): Initialize it.
	(model_enum_constant::set_has_body): New method.
	(model_enum_constant::set_annotations): Likewise.
	(model_enum_constant::has_body_p): Likewise.

2004-12-02  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (add_anonymous_constructor): Add captured
	constructor arguments earlier.
	(add_captured_constructor_arguments): Don't resolve newly added
	statements.

	* model/class.cc (add_anonymous_constructor): Create a
	model_parameter_decl.
	(add_captured_constructor_arguments): Likewise.
	(add_class_members): Likewise.
	(get_accessor): Likewise.

	* model/iannotatable.cc (find_annotation): New method.
	(resolve_annotations): Handle @Deprecated.
	* model/class.cc (resolve_members): Call check_override on each
	method.
	* model/method.cc (model_method): Initialize new field.
	(hides_or_overrides_p): No longer const.  Set `override' when
	needed.
	(check_override): New method.
	* model/method.hh (model_method::overrides): New field.
	(model_method): Initialize it.
	(model_method::hides_or_overrides_p): No longer const.
	(model_method::check_override): Declare.
	* model/iannotatable.hh (IAnnotatable::kind): New field.
	(IAnnotatable::find_annotation): Declare.
	(class IAnnotatable): Made fields private.
	(IAnnotatable::has_annotations_p): New method.

	* compiler.cc (compiler): Initialize new fields.
	* compiler.hh (compiler::java_lang_annotation_RetentionPolicy):
	New field.
	(compiler::java_lang_annotation_ElementType): Likewise.

	* model/annovalue.hh (model_annotation_value::set_value): New
	method.
	* bytecode/classreader.hh (class_reader::parse_parameter_annotations):
	Declare.
	(class_reader::current_annotation_member): New field.
	(class_reader::parse_annotation_default): Declare.
	* bytecode/classreader.cc (parse_parameter_annotations): New
	method.
	(parse_annotation_default): New method.
	(parse_attributes): Parse parameter annotations and annotation
	defaults.
	(parse_method): Handle annotation members.

2004-12-01  Tom Tromey  <tromey@redhat.com>

	* bytecode/classreader.hh (class_reader::parse_constant_value):
	Declare.
	(class_reader::parse_simple_annotation_value): Likewise.
	(class_reader::parse_annotation_value): Likewise.
	(class_reader::parse_annotation): Likewise.
	(class_reader::parse_annotations): Likewise.
	(class_reader::current_annotations): New field.
	* bytecode/classreader.cc (parse_constant_value): New overload.
	(parse_constant_value): Use it.
	(parse_simple_annotation_value): New method.
	(parse_annotation_value): New method.
	(parse_annotation): New method.
	(parse_annotations): New method.
	(parse_attributes): Handle ordinary attributes.

	* source/parse.hh (parse::variable_declarator_id): Updated.
	(parse::formal_parameter): Likewise.
	* source/parse.cc (variable_declarator_id): Added is_parameter
	argument.
	(formal_parameter): Likewise.
	(formal_parameter_list): Pass `true' to formal_parameter.
	* model/variable.hh (class model_parameter_decl): New class.
	(model_variable_decl::clone): New method.

	* model/annomember.cc (massage_modifiers): Do nothing.
	* model/annotype.cc (add_annotation_member): Create method for
	each annotation member.
	* model/annomember.hh (model_annotation_member::get_forwarding_type):
	New method.

2004-11-30  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (check_array_store): Commented out.

1904-01-01  Tom Tromey  <tromey@redhat.com>

	* tree/abi.cc (build_class_reference): Implemented.
	* tree/builtins.cc (map_type): Set TYPE_STUB_DECL on the type.

	* tree/builtins.cc (add): Throw error if field added to Object or
	Class.
	(lay_out_class): Set TREE_READONLY on array type's length.

	* tree/tree.cc (build_jni_stub): Use assert.

	* tree/lower.cc (visit_bytecode_block) <op_dup2_x2>: Implemented.

	* tree/boehm.c (get_boehm_type_descriptor): Don't turn Class into
	procedure descriptor.  Use assert.
	(mark_reference_fields): Use assert.  Added `klass' argument.  Use
	mark_class_field_p.
	(mark_class_field_p): New function.

	* tree/builtins.cc (lay_out_class): Add `data' field to array.

2004-11-30  Tom Tromey  <tromey@redhat.com>

	* Use LGPL.

2004-11-29  Tom Tromey  <tromey@redhat.com>

	* configure.ac: Added AM_PROG_CC_C_O.
	* Makefile.am (libgcjx_la_SOURCES): Added some missing sources.
	(AM_CPPFLAGS): Added -I option.
	(mostlyclean-local): New target.
	(typedefs.hh.gch): Added libtool hack.

	* Makefile.am: New file.
	* Makefile.orig: Temporary new file.
	* Makefile: Removed.
	* configure.ac: New file.

	* model/switch.cc (resolve): Unwrap model_new from initializer.

	* model/enum.cc (model_enum): Initialize new field.
	(add_enum): Set ordinal on new constant.
	* model/enum.hh (model_enum::ordinal): New field.
	* model/enumconst.hh (model_enum_constant::ordinal): New field.
	(model_enum_constant): Initialize it.
	(model_enum_constant::set_ordinal): New method.
	(model_enum_constant::get_ordinal): Likewise.
	* model/switch.hh (model_switch_block::resolve): Updated.
	* model/switch.cc (resolve): Allow switch of enum type.
	(resolve): Added is_enum argument.  Handle cases of enum type.

	* tree/driver.cc (parse_file): Updated for new read_at_file.

	* source/parse.cc (annotation_type_member): Use assert_cast.
	* model/annotation.cc (resolve): Use annotation_p.
	* conversions.cc (annotation_commensurate_p): Use enum_p.
	* bytecode/classwriter.cc (write): Use enum_p and annotation_p.
	* model/invoke.cc (resolve): Use enum_p.
	* model/annomember.cc (type_ok_p): Use enum_p and annotation_p.
	* model/enum.hh (model_enum::enum_p): New method.
	* model/annotype.hh (model_annotation_type::annotation_p): New
	method.
	* model/type.hh (model_type::annotation_p): New method.
	(model_type::enum_p): Likewise.

2004-11-28  Elliott Hughes  <enh@jessies.org>

	* util.cc (read_at_file): Undo the bad part of my last change,
	and make it clearer that -- while empty quoted lines are bad --
	empty unquoted lines are just fine.

	* main.cc (argument_parser::read_at_file): Simplify.

2004-11-28  Elliott Hughes  <enh@jessies.org>

	* exception.hh (io_error): New exception.

	* util.cc (read_at_file): Use io_error. Fix behavior with empty
	filenames to match apparent intention; new error case for general
	read failures.
	* util.hh (read_at_file): Change declaration.

	* main.cc (argument_parser::argument_parser): Pull the @-file
	code out of the constructor.
	(read_at_file): New member function to call ::read_at_file and
	catch its exceptions.

	* location.cc (operator <<): Be consistent about ending with a ' '.

2004-11-28  Elliott Hughes  <enh@jessies.org>

	* format/format.cc: Basic internationalization support: use numbered
	arguments rather than positional ones. Better error checking and
	reporting. Automatically quote inserted text. Placeholders for code
	to choose appropriately localized quotes. New "%<" and "%>" format
	specifiers to get localized quotes.
	* format/format.hh: Declarations.

	* access.hh, classcache.cc, codegen.hh, compiler.hh, conversions.hh,
	defassign.cc, directory.hh, name.cc, scope.cc, verify.h,
	bytecode/block.cc, bytecode/block.hh, bytecode/classreader.cc,
	bytecode/classwriter.cc, bytecode/cpool.cc, bytecode/generate.cc,
	bytecode/generate.hh, bytecode/locals.hh, bytecode/outpool.cc,
	bytecode/verify.cc, header/cni.cc, header/jni.cc, header/jnistub.cc,
	model/annomember.cc, model/annotation.cc, model/annotation.hh,
	model/annotype.cc, model/annotype.hh, model/arrayinit.cc,
	model/arrayref.cc, model/arraytype.cc, model/arraytype.hh,
	model/assert.cc, model/assign.cc, model/assign.hh, model/binary.cc,
	model/cast.cc, model/catch.cc, model/class.cc, model/class.hh,
	model/cond.cc, model/constructor.cc, model/constructor.hh,
	model/continue.hh, model/do.cc, model/enum.cc, model/enum.hh,
	model/field.cc, model/field.hh, model/fieldref.cc, model/fieldref.hh,
	model/for.cc, model/for.hh, model/forenhanced.cc, model/fwdtype.cc,
	model/iannotatable.hh, model/icatcher.hh, model/if.cc, model/if.hh,
	model/ilabel.hh, model/imodifiable.cc, model/imodifiable.hh,
	model/import.cc, model/import.hh, model/instanceof.cc, model/invoke.cc,
	model/invoke.hh, model/label.cc, model/label.hh, model/literal.hh,
	model/method.cc, model/method.hh, model/modifier.cc, model/modifier.hh,
	model/new.cc, model/new.hh, model/newarray.cc, model/null.cc,
	model/package.cc, model/primitive.hh, model/return.cc, model/stmt.hh,
	model/switch.cc, model/this.cc, model/throw.cc, model/throwsclause.cc,
	model/throwsclause.hh, model/try.cc, model/try.hh, model/type.hh,
	model/typevar.cc, model/unary.cc, model/unit.cc, model/unit.hh,
	model/variable.cc, model/varstmt.cc, model/while.cc, model/wildcard.hh,
	source/iconv.cc, source/lex.cc, source/lex.hh, source/parse.cc,
	source/parse.hh, source/ucs2.cc, tree/abi.hh, tree/builtins.cc,
	tree/classobj.cc, tree/decl.cc, tree/glue.hh, tree/tree.cc,
	tree/tree.hh: Avoid "`" as left quote, using "'" or "%<" or nothing,
	as appropriate.

2004-11-28  Tom Tromey  <tromey@redhat.com>

	* bytecode/classreader.cc (known_attrs): Added AnnotationDefault.
	(parse_method): Allow AnnotationDefault attribute.
	(parse_attributes): Also ignore ATTR_ANNOTATIONDEFAULT.
	* bytecode/classreader.hh (ATTR_ANNOTATIONDEFAULT): New value.

	* model/class.cc (apply_type_map): Don't call
	check_interface_instances.
	(do_resolve_classes): Call check_interface_instances.
	(check_interface_instances): Use erasure as index into map.

	* model/class.cc (type_parameters_string): Removed.
	(get_pretty_name): Use model_parameters::get_pretty_name.
	* model/parameters.cc (get_pretty_name): New method, copied from
	type_parameters_string.
	* model/parameters.hh (model_parameters::get_pretty_name):
	Declare.

2004-11-28  Elliott Hughes  <enh@jessies.org>

	* model/class.cc (model_class::get_pretty_name): Include type
	parameters in the name.
	(type_parameters_string): New function.

2004-11-28  Tom Tromey  <tromey@redhat.com>

	* bytecode/classreader.cc (known_attrs): Typo fix.

2004-11-28  Elliott Hughes  <enh@jessies.org>

	* model/class.cc (model_class::resolve_classes): Better circular
	inheritance diagnostic.

2004-11-28  Tom Tromey  <tromey@redhat.com>

	* bytecode/classreader.cc (parse_method): Don't call
	set_synthetic.

	* bytecode/classreader.hh (class_reader::create_class): Declare.
	* bytecode/classreader.cc (parse): Clear `pool'.
	(~class_reader): Delete `pool' if it exists.
	(parse_constant_pool): Removed FIXME.
	(parse): Don't set `result'.
	(create_class): New method.
	(parse_self): Call it.

	* model/imodifiable.cc (implicitly_public): Use synthetic_p.
	(implicit_modifier): Likewise.
	* model/imodifiable.hh (IModifiable::synthetic): Removed.
	(IModifiable): Updated.
	(IModifiable::set_synthetic): Use ACC_SYNTHETIC.
	(IModifiable::synthetic_p): Likewise.
	* bytecode/classwriter.cc (write): Set ACC_ANNOTATION or ACC_ENUM
	as appropriate.
	(write_field): Don't emit Synthetic attribute for 1.5 target.
	(write_method): Don't use ACC_SYNTHETIC unless 1.5 target.
	(write_field): Likewise.

2004-11-27  Tom Tromey  <tromey@redhat.com>

	* model/annovalue.hh (model_annotation_value::get_value): New
	method.
	(model_annotation_value::has_value_p): New method.
	* model/annomember.hh (model_annotation_member::get_type): New
	method.
	* model/annotation.cc (resolve): Check completeness of arguments.
	* model/annotype.hh (model_annotation_type::check_completeness):
	Declare.
	(model_annotation_type::member_type): New typedef.
	(model_annotation_type::anno_members): Use it.
	* model/class.cc (do_resolve_classes): Resolve annotations.
	* model/package.hh (model_package::set_annotations): Added
	comment.
	* model/field.cc (resolve_classes): Don't resolve annotations.
	* model/variable.cc (resolve_classes): Resolve annotations.
	* model/varstmt.hh (model_variable_stmt::set_annotations): New
	method.
	* source/parse.hh (parse::final_or_attributes): Declare.
	* source/parse.cc (final_or_attributes): New method.
	(formal_parameter): Use it.  Set annotations on variable.
	(local_variable_declaration): Likewise.
	(annotation): Use TOKEN_ASSIGN, not TOKEN_EQUALS.  Rearrange loop
	slightly.
	(compilation_unit): Handle annotations on top-level type.
	* model/field.hh (class model_field): Don't inherit from
	IAnnotatable.
	* model/variable.hh (class model_variable_decl): Inherit from
	IAnnotatable.
	(model_variable_decl::set_annotations): New method.
	* model/annotype.cc (resolve_hook): Set interfaces, not
	superclass.  Resolve annotation members.
	(check_completeness): New method.

	* model/fieldref.cc (resolve): Only throw static context error if
	no qualifying expression is given.

	* model/annotype.cc (model_annotation_type): New constructor.
	(resolve_hook): New method.
	* model/annotype.hh (model_annotation_type): Moved body to .cc
	file.
	(model_annotation_type::resolve_hook): Declare.

	* model/annomember.cc (resolve): Check whether expression is
	commensurate with type.
	* conversions.cc (annotation_commensurate_p): New function.
	* model/arrayinit.hh (model_array_initializer::get_initializers):
	New method.
	* conversions.hh (annotation_commensurate_p): Declare.

	* model/classref.hh (class model_class_ref): Added comment.

	* model/annotype.hh (model_annotation_type): Set interface flag.
	* source/parse.cc (annotation_type_declaration): Set compilation
	unit on annotation type.
	* model/annomember.cc (type_ok_p): Allow parameterization of
	Class.

	* model/class.cc (resolve_classes): Handle case of resolving an
	inner class from a .class file.

	* model/class.cc (implicit_modifier): New method.
	(add): Removed test for static method in inner class.
	(resolve_members): Check for static method in inner class.
	* model/class.hh (model_class::implicit_modifier): Declare.

2004-11-27  Elliott Hughes  <enh@jessies.org>

	* model/method.cc (model_method::hides_or_overrides_p): Decide whether
	we need to test for overrides of deprecated methods where we have the
	type information to make the test easy and intention-revealing.
	(model_method::check_deprecated): Remove old test.

	* location.hh (location::no_line_number): Remove method.

2004-11-27  Elliott Hughes  <enh@jessies.org>

	* main.cc (argument_parser::parse_args): Adding an empty element to
	the sourcepath head better emulates javac(1), and simplifies our
	handling of absolute paths.

	* factory.cc (directory_class_factory::find_source_file): Simplify.
	* factory.cc (classpath_class_factory::load_source_file): Remove FIXME.

2004-11-26  Elliott Hughes  <enh@jessies.org>

	* factory.cc (class_factory::get_class_factory): Set source_only flag.
	* factory.cc (class_factory::is_source_only): Get source_only flag.
	* factory.hh (class_factory): Add flag and method prototype.
	* factory.hh: Fix friend declaration for get_class_factory.

	* factory.cc (directory_class_factory::find_source_file): Cope with
	absolute paths.

	* factory.cc (directory_class_factory::find_derived_file): Assert that
	we're not a source-only class factory.
	* factory.cc (jar_class_factory::find_derived_file): Likewise.
	* factory.cc (solib_class_factory::find_derived_file): Likewise.

	* factory.cc (classpath_class_factory::load_class): Only look for
	source in a source-only class factory.

	* main.cc (argument_parser::add_cp): Refactor to allow for passing
	the source_only flag through.
	* main.cc (argument_parser::parse_args): Add -sourcepath.

	* tree/driver.cc (add_cp): Track get_class_factory API change.

2004-11-26  Elliott Hughes  <enh@jessies.org>

	* location.hh (no_line_number): New function; used for its implication
	that we're looking at a class file.

	* model/fieldref.cc (method_field_ref::resolve): Emit a clearer
	diagnostic when an attempt is made to access a non-static member
	from a static context.
	* model/invoke.cc (model_invocation_base::handle_resolve): Likewise.

	* model/method.cc (model_method::hides_or_overrides_p): Check for
	overriding deprecated methods.
	* model/method.hh (model_method::check_deprecated): const.

2004-11-26  Elliott Hughes  <enh@jessies.org>

	* owner.cc (apple_gcc_hack): Remove hack; Apple's November 2004
	gcc update (3.3 build 1671) fixes the bug this worked around.

	* Makefile (CXXFLAGS): Add _GLIBCPP_USE_C99 to get std::isinf.
	* typedefs.hh: Include <unistd.h> to fix a missing system header
	file dependency when using _GLIBCPP_USE_C99.
	* fdlibm/classpath.cc (classpath_double_to_string): Use std::isinf.
	* model/value.cc (string_to_float): Likewise.

2004-11-26  Tom Tromey  <tromey@redhat.com>

	* main.cc (class argument_parser): Recognize -I.

2004-11-16  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (build_jni_stub): Use type_object.

	* tree/abi.cc (build_field_reference): Correctly build
	COMPONENT_REF.

	* tree/lower.cc (visit_bytecode_block) <op_pop2>: Handle wide
	types.

	* tree/lower.cc (visit_bytecode_block): Use type_object instead
	of object_tree.

	* tree/hooks.hh (field_slot_i): Declare.
	(field_slot_j, field_slot_f, field_slot_d, field_slot_o):
	Likewise.
	* tree/decl.cc (field_slot_i): New global.
	(field_slot_j, field_slot_f, field_slot_d, field_slot_o):
	Likewise.
	(build_class_union): Initialize new globals.
	* tree/lower.cc (visit_bytecode_block): Initialize stack and
	local variables.
	(find_generic_slot): New method.
	(find_local_slot): Removed.
	(visit_bytecode_block): Use find_generic_slot.
	(load): Likewise.
	(store): Likewise.
	(find_slot): Likewise.
	* tree/tree.cc (tree_generator): Initialize new fields.
	(~tree_generator): Destroy new fields.
	* tree/tree.hh (tree_generator::stack_slots): New field.
	(tree_generator::local_slots): Likewise.
	(tree_generator::find_local_slot): Removed.
	(tree_generator::find_generic_slot): Declare.

2004-11-15  Tom Tromey  <tromey@redhat.com>

	* factory.cc (process_zip_central_directory): Added cast.
	Include errno.h.

	* model/value.cc (isinf, isinff): Removed.
	* model/field.hh (model_field::apply_type_map): Changed return
	type.
	* model/field.cc (apply_type_map): Changed return type.
	* model/classinst.cc (resolve_member_hook): Handle new
	apply_type_map return type.

	* fdlibm/classpath.cc: Removed isinf declaration.

2004-11-05  Elliott Hughes  <enh@jessies.org>

	* main.cc (parse_args): Moved parse_args and friends into a new
	class, argument_parser. This will let us add -sourcepath without
	duplication. Fixed a bug where -tabs was calling set_target (-tabs=
	was correct; the new implementation ensures both forms of argument
	are treated identically). Made @file handling more like javac and
	Jikes, where an @file can contain filenames or arguments (but not
	references to other @files).

2004-11-02  Elliott Hughes  <enh@jessies.org>

	* main.cc (parse_args): Added "-deprecation" for javac compatibility.
	* main.cc (help_options): Document "-deprecation".

2004-11-02  Elliott Hughes  <enh@jessies.org>

	* factory.cc (jar_class_factory::read_zip_archive): Added
	better reporting of failures to track down problems reading JAR
	files on PowerPC. The major mistakes were casting a uint8[] to
	an int, and a signedness assumption. Fixed incorrect assumption
	about the location of the central directory (Java 1.5 ships with
	an rt.jar ending in a comment showing that the contents have
	been optimized using PACK200). Refactored into smaller routines.
	* factory.hh: Prototypes.

	* factory.cc (make_u2, make_u4): Standardized parochial names.

2004-11-02  Elliott Hughes  <enh@jessies.org>

	* format/format.cc (format_repr::format_repr): Fix behavior
	with format strings ending with '%'.
	* format/format.cc (operator<<): Likewise.

2004-11-01  Elliott Hughes  <enh@jessies.org>

	* Makefile: Support for Mac OS X, where shared libraries work
	differently, and for being a user other than tromey.
	* owner.cc (apple_gcc_hack): Explicit instantiations to avoid
	Apple g++ bug.
	* fdlimb/classpath.cc: C library differences.
	* fdlimb/fdlibm.h: C library differences.
	* fdlibm/w_sqrt.c: C library differences.
	* model/value.cc: C library differences.
	* reader/fdreader.cc: Missing #include for struct stat.
	* reader/mmapbuffer.cc: Missing #include for struct stat.
	* reader/readbuffer.cc: Missing #include for struct stat.
	* model/field.cc, model/field.hh: Hack for g++ 3.3.
	* model/classinst.cc: Hack for g++ 3.3.

2004-11-15  Tom Tromey  <tromey@redhat.com>

	* tree/hooks.hh (type_field_array): Declare.
	* tree/decl.cc (type_field_array): New global.

	* tree/builtins.hh (tree_builtins::find_abi): Now public.
	(tree_builtins::map_utf8const): New method.

	* tree/hooks.hh (type_slot_union): Declare.
	(type_field_info_union): Likewise.
	* tree/decl.cc (type_field_info_union): New global.
	(build_field_type): Initialize it.
	* tree/abi.hh (enum): Copied from libgcj.
	(_Jv_FIELD_UNRESOLVED_FLAG): New define.

2004-11-14  Tom Tromey  <tromey@redhat.com>

	* tree/abi.hh (gcj_abi::get_size_in_bytes): New method.
	(cxx_abi::get_size_in_bytes): Likewise.
	(bc_abi::get_size_in_bytes): Likewise.
	(gcj_abi::get_class_state): Likewise.
	(cxx_abi::get_class_state): Likewise.
	(bc_abi::get_class_state): Likewise.
	* tree/classobj.cc: New file.
	* tree/glue.hh: Include classobj.hh.
	* tree/classobj.hh: New file.

	* tree/treegen.cc (generate): Lay out class.
	* tree/abi.cc (build_field_reference): Lay out field's declaring
	class.
	* tree/tree.cc (visit_method): Lay out method's declaring class.
	(visit_new): Likewise.
	(visit_assert): Lay out field's declaring class.
	(visit_field_ref): Likewise.
	* tree/builtins.cc (map_type): Removed old comment.
	(lay_out_class): Add all methods and fields.
	(map_method): Assume method exists.
	(map_field): Assume field exists.

	* tree/decl.cc (build_class_union): New function.
	(initialize_decls): Call it.
	(type_slot_union): New global.

2004-11-13  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_array_initializer): Set TREE_SIDE_EFFECTS.

	* tree/builtins.cc (map_param_or_var): Removed old comment.
	* tree/tree.cc (add_var): Don't set DECL_CONTEXT.

	* tree/builtins.cc (build_array_reference): Added `use_checks'
	argument.
	* tree/builtins.hh (tree_builtins::build_array_reference): Added
	new argument.
	* tree/tree.cc (visit_new_array): Visit array initializer.
	(visit_array_initializer): Wrote.

	* tree/tree.cc (build_jni_stub): Use "//" comments.

	* source/iconv.cc (iconv_adapter): New template function.
	(refill): Use it.

2004-11-06  Tom Tromey  <tromey@redhat.com>

	* conversions.cc (widening_reference_conversion): Handle
	assignment of raw type to wildcard type.  Check erasure of target
	type against Object.

	* model/class.hh (model_class::set_type_parameters): New
	overload.
	* model/classinst.cc (apply_type_map): Rewrote.
	* model/typemap.hh (model_type_map::compose): Removed.
	* model/typemap.cc (compose): Removed.
	* conversions.cc (widening_reference_conversion): Handle type
	variables specially.
	* model/method.cc (same_arguments_p): Handle generic methods.
	* model/parameters.cc (create_type_map): New method.
	* model/parameters.hh (model_parameters::create_type_map):
	Declare.
	(class model_parameters): model_class_instance now a friend.

	* model/class.cc (apply_type_map): Do nothing if type map is
	empty.
	* model/typemap.hh (model_type_map::empty_p): New method.

	* model/method.cc (hides_or_overrides_p): Simplified error
	message.

2004-11-03  Tom Tromey  <tromey@redhat.com>

	* model/typevar.cc (assignable_from_p): Checked type must satisfy
	all the bounds.
	* conversions.cc (casting_conversion): Look at erasures of types.
	(widening_reference_conversion): Don't take erasure of classes
	before the loop.

	* model/class.cc (apply_type_map): Resolve classes, not members.

	* model/typevar.cc (erasure): Return the first interface.
	(validate): Added hack in place of capture conversion.

	* model/classinst.cc (resolve_member_hook): New method.
	* model/classinst.hh (model_class_instance::resolve_member_hook):
	Declare.
	* model/class.cc (resolve_members): Call resolve_member_hook.
	Call compute_object_interface_methods later.
	* model/class.hh (model_class::resolve_member_hook): New method.

	* model/class.cc (compute_object_interface_methods): Use
	create_abstract_instance.
	* model/method.cc (create_abstract_instance): New method.
	* model/method.hh (model_method::create_abstract_instance):
	Declare.

	* model/class.cc (do_resolve_classes): Don't resolve type
	parameters.
	(resolve_members): Resolve type parameters.
	(apply_type_map): Resolve members, not just classes.

2004-11-02  Tom Tromey  <tromey@redhat.com>

	* model/fieldinit.hh (model_field_initializer::get_field): New
	method.
	* model/class.cc (resolve): Push self and type parameters on
	scope before calling resolve_members.
	(create_clinit_method): Prune constant fields from static
	initializer.

2004-11-01  Tom Tromey  <tromey@redhat.com>

	* verify.cc (state::check_no_uninitialized_objects): Removed.
	(push_jump): Updated.
	(push_exception_jump): Likewise.
	(handle_ret_insn): Likewise.
	(handle_jsr_insn): Likewise.

2004-11-01  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (write): Unconditionally write
	modifiers.

2004-10-31  Tom Tromey  <tromey@redhat.com>

	* bytecode/classreader.cc (parse_self): Don't require ACC_SUPER
	on interfaces.
	* bytecode/classwriter.cc (write): Don't set ACC_SUPER on
	interfaces.

	* model/typevar.hh (model_type_variable): Mark as abstract.

	* model/class.cc (apply_type_map): Removed assert.

	* model/memberref.hh (model_memberref_forward::call_p): New
	method.
	* model/exprstmt.cc (resolve): Don't check validity of
	expression.
	* source/parse.cc (statement_expression): Throw exception if
	expression is not valid as a statement.

	* model/class.cc (apply_type_map): Use set_this_0.
	(push_on_scope): Push type parameters on scope.

	* model/class.hh (model_class::set_this_0): New method.

	* model/constructor.cc (model_constructor): Copy this$0.

	* model/class.cc (resolve_members): New overload.
	(resolve_members): Use it.
	(resolve): Likewise.
	* model/class.hh (model_class::resolve_members): New overload.

2004-10-30  Tom Tromey  <tromey@redhat.com>

	* model/wildcard.cc (resolve_hook): Don't set superclass to
	interface type.
	* model/wildcard.hh (model_wildcard::get_pretty_name): New
	method.
	* model/typevar.cc (operator%): Removed.
	* model/typevar.hh (model_type_variable::get_pretty_name): New
	method.
	(operator%): Removed.

	* model/class.cc (do_resolve_classes): Put type parameters in
	scope before resolving.
	* model/method.cc (resolve_classes): Put type parameters in scope
	before resolving.
	* model/typevar.cc (resolve): Resolve classes.

	* model/fwdtype.cc (resolve): Only resolve classes on wildcard
	parameters.

	* model/fwdtype.cc (resolve): Resolve classes on type parameters.

	* access.cc (accessible_p): Look at erasure of classes.

	* model/wildcard.cc (erasure): Always return Object.

	* model/classinst.cc (apply_type_map): Updated.
	* model/typemap.hh (model_type_map::compose): Updated.
	* model/typemap.cc (compose): Changed interface.

	* model/class.hh (model_class::generic_p): Removed.
	* model/type.hh (model_type::generic_p): Removed.
	* model/field.cc (apply_type_map): Apply type map to all class
	types.
	* model/variable.cc (apply_type_map): Apply type map to all class
	types.

	* model/classinst.cc (resolve_hook): Don't parameterize static
	members.

	* source/parse.cc (type_name): Removed shadowing declaration of
	`t'.

	* model/field.cc (apply_type_map): Updated.
	* model/typemap.hh (model_type_map::compose): Added request
	argument.
	* model/typemap.cc (compose): Added request argument.  Throw
	error when composition fails.
	* model/method.cc (model_method): Updated.
	(wrap): Added request argument.
	* model/typevar.cc (apply_type_map): Added request argument.
	(operator%): New operator.
	* model/typevar.hh (model_type_variable::apply_type_map): Added
	request argument.
	(operator%): Declare.
	* model/throwsclause.hh (model_throws_clause): Added request
	argument.
	* model/throwsclause.cc (wrap): Added request argument.
	(model_throws_clause): Likewise.
	* model/classinst.hh (model_class_instance::apply_type_map):
	Added request argument.
	* model/classinst.cc (resolve_hook): Updated.
	(apply_type_map): Added request argument.
	* model/class.cc (apply_type_map): Added request argument.
	(create_instance): Updated.
	* model/class.hh (model_class::apply_type_map): Added request
	argument.

	* model/wildcard.cc (erasure): New method.
	* model/constructor.cc (model_constructor): New constructor.
	(apply_type_map): New method.
	* model/method.cc (model_method): New constructor.
	(apply_type_map): Rewrote.
	(get_signature): Use erasures when computing signature.
	* model/imember.hh (IMember): New constructor.
	* model/imodifiable.hh (IModifiable): New constructor.
	* model/iannotatable.hh (IAnnotatable): New constructor.
	* model/ideprecatable.hh (IDeprecatable): New constructor.
	* model/element.hh (model_element): New constructor.
	* model/constructor.hh (model_constructor::apply_type_map):
	Declare.
	(model_constructor): Declare.
	* model/method.hh (model_method::apply_type_map): Now virtual.
	(model_method): Declare.
	(model_method): Initialize IMember via constructor.
	* conversions.cc (widening_reference_conversion): Handle capture
	conversion.
	* model/classinst.cc (capture_conversion_p): New method.
	* model/typemap.cc (capture_conversion_p): New method.
	* model/typemap.hh (model_type_map::capture_conversion_p):
	Declare.
	* model/classinst.hh (model_class_instance::erasure): New method.
	(model_class_instance::capture_conversion_p): Declare.
	* model/wildcard.hh (model_wildcard::can_capture_p): New method.
	(model_wildcard::erasure): Declare.
	* model/class.cc (resolve_members): Put type parameters in scope.
	(resolve): Likewise.
	* model/typevar.cc (resolve): New method.
	* model/typevar.hh (model_type_variable::resolve): Declare.
	* model/class.hh (model_class::resolve): Now virtual.
	(model_class::can_capture_p): New method.

	* tree/tree.cc (build_jni_stub): Wrote.

2004-10-28  Tom Tromey  <tromey@redhat.com>

	* tree/lower.cc (visit_bytecode_block): Use build_new_array and
	build_new_object_array.
	(find_model_class): New method.
	(find_class): Use it.
	* tree/tree.hh (tree_generator::build_new_array): New method.
	(tree_generator::build_new_object_array): Likewise.
	(tree_generator::find_model_class): Likewise.
	* tree/tree.cc (build_new_array): New method.
	(build_new_object_array): New method.

	* tree/lower.cc (handle_ldc): Push the result.

	* verify.h (vfy_alloc): Use new.
	(vfy_free): Use delete.
	(vfy_make_string): Use new.

	* tree/tree.hh (tree_generator::handle_return): Updated.
	(tree_generator::type_wide_p): Declare.
	* tree/lower.cc (load): Wrote.
	(store): Likewise.
	(visit_bytecode_block): Implemented pop, pop2, dup, dup_x1,
	dup_x2, dup2, dup2_x1, newarray.  Updated areturn.
	Include verify.h.
	(handle_return): Set side effects.
	(push): Likewise.
	(array_store): Likewise.
	(type_wide_p): New method.
	(handle_return): Added override argument.

	* model/class.cc (add_implicit_constructor): Don't mark as
	synthetic.
	(create_clinit_method): Likewise.

	* bytecode/verify.cc (_Jv_BytecodeVerifier::check_constant):
	Allow "ldc class" in 1.5 class files.
	* verify.h (vfy_is_15): New function.
	(vfy_class_type): Likewise.
	* model/unit.hh (model_unit_class::is_15_p): New method.
	* bytecode/classreader.hh (class_reader::parse_header): Updated.
	* bytecode/classreader.cc (parse_header): Return bool.
	(parse): Mark compilation unit as 1.5.

2004-10-27  Tom Tromey  <tromey@redhat.com>

	Rewrote class file parsing:
	* bytecode/classwriter.cc (write): Set ACC_SUPER on class.
	* reader/classbytes.cc: Include classreader.hh, not definer.hh.
	(apply): Create a class_reader.
	* bytecode/cpool.cc (get_utf8): Use `where'.  Updated for
	utf_data change.
	(get_string): Use `where'.
	(get_class): Likewise.
	(get_name_and_type): Likewise.
	(get_fieldref): Likewise.
	* bytecode/cpool.hh (constant_pool::utf_data): Changed type.
	(constant_pool::where): New field.
	(constant_pool): Updated.
	(~constant_pool): Likewise.
	* model/unit.hh (model_unit_class::use_15): New field.
	(model_unit_class): Initialize it.
	(model_unit_class::set_15): New method.
	* bytecode/constants.hh (MAJOR_1_5): New define.
	(MINOR_1_5): Likewise.
	* bytecode/definer.hh: Removed.
	* bytecode/definer.cc: Likewise.
	* bytecode/classreader.cc: Overwrote with definer.cc; rewrote
	class reading parts.
	* bytecode/classreader.hh: Overwrote with definer.hh; rewrote
	class reading parts.

2004-10-25  Tom Tromey  <tromey@redhat.com>

	* source/lex.cc (get_token): Remove timevar comments.

2004-10-23  Tom Tromey  <tromey@redhat.com>

	* Makefile (source/keyword.h): Rewrote.
	* source/keyword.gperf: Rewrote from scratch.
	* source/lex.cc (handle_keyword): Updated.

2004-10-19  Tom Tromey  <tromey@redhat.com>

	* compiler.cc (do_generate_code): Catch exception during code
	generation.
	* bytecode/generate.hh (bytecode_generator::find_method): Updated.
	(bytecode_generator::close_stringbuffer): Likewise.
	(bytecode_generator::handle_valueof): Likewise.
	* bytecode/generate.cc (find_method): Added request argument.
	Throw error on failure.  Updated all callers.
	(create_stringbuffer): Added request argument.
	(close_stringbuffer): Likewise.
	(handle_valueof): Likewise.
	(visit_bytecode_block): Throw an exception.

2004-10-18  Tom Tromey  <tromey@redhat.com>

	Rewrote scope handling.
	* model/invoke.hh (model_invocation_base::handle_resolve): Added
	argument.
	* model/constructor.cc (resolve): Use push_iscope.
	* model/method.hh (class model_method): Extend IScope.
	* model/varstmt.cc (resolve): Use look_up_name.
	* model/try.cc (resolve): Use push_iscope.
	* model/try.hh (class model_try): Extend IScope.
	* model/new.cc (determine_search_class): Don't use save_class.
	Ensure `this' expression for anonymous constructor is synthetic.
	* model/forenhanced.cc (resolve): Use push_iscope and
	add_binding.
	* model/for.cc (resolve): Use push_iscope.
	* model/class.hh (model_class::push_fields): Removed.
	* model/catch.cc (resolve): Use push_iscope.
	* typedefs.hh: Include new headers.  Move util.hh earlier; other
	includes later.
	* model/invoke.cc (resolve): Don't use push_static.
	(search_applicable_methods): Use look_up_name.
	(resolve): Updated.
	(handle_resolve): Updated.
	* model/bytecode.cc (verify): Use push_on_scope.
	* model/field.cc (constant_p): Use push_on_scope.
	(type): Likewise.
	* model/import.cc (find_field): Updated.
	* model/import.hh (model_import::find_field): Changed interface.
	(model_static_import_base::find_field): Likewise.
	(model_static_import_single::find_field): Likewise.
	* model/unit.cc (look_up_name): Renamed from find_local_class.
	Changed interface.
	(look_up_name): Renamed from find_static_field.
	(resolve): Use push_iscope.  Don't set compilation unit on scope.
	* model/unit.hh (class model_unit): Extend IScope.
	(model_unit::find_local_class): Removed.
	(model_unit::find_static_field): Likewise.
	(model_unit::find_static_method): Likewise.
	(model_unit_source::find_local_class): Likewise.
	(model_unit_source::find_static_field): Likewise.
	(model_unit_source::find_static_method): Likewise.
	(model_unit_source::look_up_name): Declare.
	(model_unit::push_on_scope): New method.
	* model/class.cc (do_resolve_classes): Changed how type
	parameters are pushed on scope.
	(find_type_parameter): Removed.
	(find_type_variable): Removed.
	(look_up_name): New methods.
	(push_on_scope): New method.
	(resolve_one_method): Use push_on_scope.
	(get_this_0): Likewise.
	(add_captured_variable): Likewise.
	(resolve_classes): Likewise.
	(resolve_members): Likewise.
	(resolve): Don't use push_static.
	(add_captured_constructor_arguments): Use push_iscope.
	(do_resolve_classes): Likewise.
	(push_fields): Removed.
	(resolve): Use push_iscope.
	(add_anonymous_constructor): Likewise.
	* model/class.hh (model_class::type_parameters): Now type
	model_parameters.
	(model_class::set_type_parameters): Updated.
	(model_class::find_type_parameter): Removed.
	(model_class::find_type_variable): Removed.
	(class model_class): Extend IScope.
	(model_class::look_up_name): Declare.
	(model_class::push_on_scope): Likewise.
	(model_class::is_static_scope): Likewise.
	* model/declstmt.cc (resolve): Use add_binding.
	* model/varstmt.cc (resolve): Use add_binding.
	* model/switch.cc (resolve): Rewrote scope handling.
	* model/block.cc (resolve): New method.  Rewrote scope handling.
	* model/block.hh (model_block::resolve): Moved to .cc file.
	* model/blockscope.cc: New file.
	* model/blockscope.hh: New file.
	* name.cc (classify_type_name): Simplified.
	(classify_ambiguous_name): Likewise.
	* model/method.hh (model_method::find_type_parameter): Removed.
	(model_method::type_parameters): Now of type model_parameters.
	(model_method::set_type_parameters): Rewrote.
	(model_method::is_static_scope): New method.
	* model/method.cc (find_type_parameter): Removed.
	(resolve): Rewrote scope handling.  Fixed warning message.
	* model/parameters.cc: New file.
	* model/parameters.hh: New file.
	* scope.cc (add): Removed.
	(pop): Removed.
	Removed instantiations.
	(push_method): Removed.
	(~push_method): Removed.
	(set_current_method): Removed.
	(search_for_type_name): New method.
	(static_p): New method.
	(get_compilation_unit): New method.
	(get_current_context): Likewise.
	* scope.hh (class scope): Removed.
	(resolution_scope::scope_stack): New field.
	(resolution_scope::current_class): Removed.
	(resolution_scope::current_method): Likewise.
	(resolution_scope::variables): Likewise.
	(resolution_scope::classes): Likewise.
	(resolution_scope::is_static): Likewise.
	(resolution_scope::current_catcher): Likewise.
	(resolution_scope): Updated.
	(class push_block): Removed.
	(class push_catcher): Removed.
	(class save_class): Removed.
	(class push_static): Removed.
	(class push_method): Removed.
	(resolution_scope::add): Removed.
	(class resolution_scope): Derive from IScope.
	(resolution_scope::find_class): Removed.
	(resolution_scope::find_variable): Removed.
	(resolution_scope::look_up_name): Declare.
	(resolution_scope::add_binding): Likewise.
	(resolution_scope::push_iscope): New class.
	(resolution_scope::set_current_method): Removed.
	(resolution_scope::set_compilation_unit): Likewise.
	(resolution_scope::set_static): Removed.
	(resolution_scope::set_current_catcher): Likewise.
	(resolution_scope::compilation_unit): Removed.
	(resolution_scope::get_current_context): Declare.
	* model/iscope.hh: New file.

	* defassign.cc (definite_assignment_visitor::visit_method_invocation):
	Added assert.
	
2004-10-15  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::find_type_parameter): Declare.
	* model/method.cc (resolve_classes): Save class when resolving
	type parameters.
	(find_type_parameter): New method.
	* model/class.cc (find_type_parameter): New method.
	(do_resolve_classes): Save class when resolving type parameters.
	* model/class.hh (model_class::find_type_parameter): Declare.
	* name.cc (classify_type_name): Search for type variables.

	* model/classinst.cc (resolve_hook): Resolve parent's members,
	and look in parent for our members.

	* model/method.hh (model_method::return_type_substitutable_p):
	Declare.
	* model/method.cc (same_arguments_p): Compare type erasures.
	(return_type_substitutable_p): New method.
	(hides_or_overrides_p): Handle covariant return types.

	* model/classinst.cc (resolve_hook): New method.
	* model/classinst.hh (model_class_instance::resolve_hook):
	Declare.
	* model/class.cc (apply_type_map): Use a ref_class_instance.
	Don't apply type map to members.  Set deprecated flag and
	modifiers on new class.

	* conversions.cc (widening_primitive_conversion): Allow identity
	conversion before checking for boolean type.

2004-10-14  Tom Tromey  <tromey@redhat.com>

	* model/enum.cc (resolve_hook): New method.
	(model_enum): Don't set superclass or add fields.
	* model/enum.hh (model_enum::resolve_hook): Declare.

2004-10-13  Tom Tromey  <tromey@redhat.com>

	* model/forenhanced.cc (resolve): Require array expression to be
	assignment compatible with variable type.  Require non-primitive
	type for iterators.

2004-10-12  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::check_uninherited_abstract_methods):
	Declare.
	* model/class.cc (check_uninherited_abstract_methods): New
	method.
	(resolve_members): Call it.

	* model/import.cc (find_method): Only return static methods.

	* model/unit.hh (model_unit::add): Don't register member type
	with package.
	* model/package.cc (add): Moved from .hh file.  Fixed error
	message.  Actually throw exception.  Throw exception if class
	already defined.
	* model/package.hh (model_package::add): Removed body.

2004-10-11  Tom Tromey  <tromey@redhat.com>

	* model/fwdtype.cc (resolve): Don't call check_deprecated.
	* name.cc (check_deprecated): New function.
	(classify_type_name): Use it.
	(classify_type_signature): Call check_deprecated on resulting
	class.

	* compiler.cc (do_load_source_file): Emit error message if
	factory fails.
	* factory.cc (load_source_file): Changed return type.
	* factory.hh (classpath_class_factory::load_source_file): Changed
	return type.

	* model/class.cc (get_accessor): Make warning conditional.

2004-10-10  Tom Tromey  <tromey@redhat.com>

	* model/invoke.hh (model_invocation_base::try_method_conversion):
	Declare.
	(model_invocation_base::search_applicable_methods): Declare.
	* model/invoke.cc (try_method_conversion): New method.
	(search_applicable_methods): New method.
	(find_method): Use it.
	* model/memberref.cc (resolve): Mark invocation as unqualified if
	needed.
	* model/invoke.hh (model_invocation_base::unqualified): New
	field.
	(model_invocation_base): Initialize new field.
	(model_invocation_base::set_unqualified): New method.
	* name.cc (classify_ambiguous_name): Handle static imports.
	* model/unit.cc (find_static_field): New method.
	(find_static_method): New method.
	* model/unit.hh (model_unit::find_static_field): New method.
	(model_unit_source::find_static_field): Declare.
	(model_unit::find_static_method): Declare.
	(model_unit_source::find_static_method): Likewise.
	* model/import.cc (get_class_declaration): New method.
	(model_static_import_base::resolve): New method.
	(search_for_class): New method.
	(model_static_import_on_demand::find_class): Wrote.
	(find_field): New methods.
	(find_method): New methods.
	* model/import.hh (model_static_import_single::get_class_declaration):
	Declare.
	(model_static_import_on_demand::resolved_type): New field.
	(model_static_import_single): Initialize resolved_type.
	(model_static_import_on_demand): Initialize resolved_type.
	(model_static_import_on_demand::resolve): Removed.
	(class model_static_import_base): New class.
	(class model_static_import_single): Derive from it.
	(class model_static_import_on_demand): Likewise.
	(model_import::find_field): New method.
	(model_static_import_base::find_field): Declare.
	(model_import::find_method): New method.
	(model_static_import_base::find_method): Declare.
	(model_static_import_single::find_method): Declare.

	* model/newarray.cc (already_resolved): New method.
	* model/newarray.hh (model_new_array::already_resolved): Declare.
	* model/arrayinit.cc (already_resolved): New method.
	* model/arrayinit.hh (model_array_initializer::already_resolved):
	Declare.
	* model/method.cc (method_conversion_p): Handle case where there
	are no actual arguments corresponding to the final varargs
	parameter.
	(method_conversion): Handle varargs.

	* bytecode/definer.cc (handle_method): Handle ACC_VARARGS and
	ACC_SYNTHETIC.
	* bytecode/classwriter.cc (write_method): Handle ACC_VARARGS and
	ACC_SYNTHETIC.
	* model/modifier.hh (ACC_BRIDGE): New define.
	(ACC_VARARGS): Likewise.
	(ACC_SYNTHETIC): Likewise.
	(ACC_ENUM): Likewise.
	(ACC_ANNOTATION): Likewise.
	* model/method.hh (model_method::method_conversion_p): Updated
	declaration.
	(enum method_phase): New enum.
	* model/method.cc (method_conversion_p): Added phase argument.
	Handle varargs.
	* conversions.hh (method_invocation_conversion): Added phase
	argument.
	* conversions.cc (method_invocation_conversion): Handle boxing
	and unboxing conversions.  Added phase argument.

2004-10-09  Tom Tromey  <tromey@redhat.com>

	* conversions.cc (assignment_conversion): New overload.  Handle
	boxing and unboxing.
	(assignment_conversion): Use it.
	(assignment_conversion): Likewise.

	* model/variable.cc (resolve): Don't mention "field".

	Initial support for boxing and unboxing conversion.
	* model/cond.cc (resolve): Use boolean_conversion; handle
	unboxing.
	* model/while.cc (resolve): Possibly wrap expression.
	* model/unary.cc (resolve): Possibly wrap expression.
	* model/if.cc (resolve): Possibly wrap expression.
	* model/for.cc (resolve): Possibly wrap expression.
	* model/do.cc (resolve): Possibly wrap expression.
	* model/assert.cc (resolve): Possibly wrap expression.
	* conversions.hh (maybe_cast_wrap): Declare.
	(boolean_conversion): Declare.
	(convertible_to_numeric_p): Declare.
	* model/binary.cc (model_plus::resolve): Handle unboxing.
	(model_numeric_comparison::resolve): Likewise.
	(model_bitwise_binary::resolve): Likewise.
	(model_equality_comparison::resolve): Likewise.
	(model_logical_binary::resolve): Likewise.
	* conversions.cc (unary_numeric_promotion): Handle unboxing
	conversion.
	(binary_numeric_promotion): Likewise.
	(maybe_cast_wrap): Renamed from maybe_wrap.
	(boolean_conversion): Handle unboxing.
	(boolean_conversion): New overload.
	(method_invocation_conversion): Removed old comment.
	(convertible_to_numeric_p): New function.
	(casting_conversion): Handle boxing and unboxing conversions.
	* bytecode/generate.cc (visit_cast): Handle boxing and unboxing
	conversions.

2004-10-09  Ranjit Mathew  <rmathew@hotmail.com>

	* source/iconv.hh: Include "iconv.h".
	* source/ucs2.cc: Include "langinfo.h".

2004-10-08  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (add): Set TREE_PUBLIC on new function.

	* tree/tree.cc (visit_return): Set TREE_SIDE_EFFECTS.
	(arith_shift): Likewise.

	* tree/tree.hh (tree_generator::handle_invocation): Updated.
	* tree/tree.cc (handle_invocation): Added is_super argument.
	(visit_super_invocation): Updated.
	* tree/abi.hh (gcj_abi::build_method_call): Added is_super
	argument.
	* tree/builtins.cc (map_method_call): Added is_super argument.
	* tree/builtins.hh (tree_builtins::map_method_call): Added
	is_super argument.
	* tree/abi.cc (build_method_call): Handle non-virtual dispatch.
	Prepend object to argument list as needed.

	* tree/builtins.cc (lay_out_vtable): Don't assume superclass has
	a vtable.  Look at BINFO_VTABLE of class, not pointer to class.
	(map_type): Set the TYPE_BINFO for the new class.
	(lay_out_vtable): Set DECL_VINDEX using a sizetype.

	* compiler.cc (generate_code): Don't set directory on cache.

2004-10-07  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_new): Use map_new.
	* tree/builtins.cc (map_new): New method.
	* tree/builtins.hh (tree_builtins::map_new): Declare.
	* tree/abi.cc (build_new): New methods.
	* tree/abi.hh (gcj_abi::build_new): Declare.
	(cxx_abi::build_new): Likewise.
	(bc_abi::build_new): Likewise.

	* tree/builtins.cc (map_method_call): Handle non-static reference
	to static method.
	* tree/tree.cc (visit_field_ref): Updated comments.
	(handle_invocation): Use map_method_call.

	* tree/tree.cc (visit_op_assignment): Wrote.

	* tree/tree.cc (build_class_ref): Implemented.

	* tree/tree.cc (visit_arith_binary): Use build_divide.
	(visit_op_assignment): Likewise.
	(visit_arith_binary): Use build_mod.
	(visit_op_assignment): Likewise.
	* tree/lower.cc (visit_bytecode_block): Use build_divide and
	build_mod.
	* tree/builtins.cc (build_divide): New method.
	(build_mod): Likewise.
	* tree/builtins.hh (tree_builtins::build_divide): Declare.
	(tree_builtins::build_mod): Likewise.

2004-10-06  Tom Tromey  <tromey@redhat.com>

	Merged the thread branch, and made stubs so that it will work.

	* main.cc (parse_args): Give error on -j.
	* compiler.cc (work): Disable threading for now.
	* thread/thread.hh: New file.
	* typedefs.hh: Include thread/thread.hh.

	* compiler.hh (class compiler): Typo fix.

	* classcache.cc (find_class): Synchronize.
	* classcache.hh (class_cache::mutex): New field.
	(class_cache): Added new argument.
	* main.cc (help_options): Document -j.
	(parse_args): Recognize -j.  Start new threads.
	* global.hh (global): Derive from thread_local.
	* directory.cc (add): Synchronize.
	* directory.hh (directory_cache::monitor): New field.
	* compiler.hh (compiler::job_type): New enum.
	(compiler::work_item): New structure.
	(compiler::work_monitor): New field.
	(compiler::work_condition): Likewise.
	(compiler::mt_monitor): Likewise.
	(compiler::mt_condition): Likewise.
	(compiler::work_list): Likewise.
	(compiler::multi_threaded): Likewise.
	(compiler): Declare new methods.
	(compiler::set_object_output): Removed.
	(compiler::set_output_directory): Set directory on cache.
	* compiler.cc (do_analyze_unit): New method.
	(do_generate_code): Likewise.
	(do_load_source_file): Likewise.
	(work): Likewise.
	(dispatch_job): Likewise.
	(add_job): Likewise.
	(add_code_generator): Compute generating_bytecode.
	(generate_code): Rewrote for multiple threads.
	(semantic_analysis): Likewise.
	(load_source_file): Likewise.
	(add_unit): Likewise.
	(compiler): Initialize new fields.
	* typedefs.hh: Include thread.h.

	* watch.hh (watch::operator=): Added assert.

2004-10-05  Tom Tromey  <tromey@redhat.com>

	* tree/hooks.hh (gcjx::getdecls): Declare.
	* tree/langhooks.cc (LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL):
	Removed.
	(LANG_HOOKS_WRITE_GLOBALS): Likewise.
	(gcjx::getdecls): New function.
	(LANG_HOOKS_GETDECLS): Define.

	* tree/tree.cc (handle_invocation): Use build_address_of.
	* tree/decl.cc (build_address_of): No longer static.
	* tree/hooks.hh (build_address_of): Declare.

	* tree/builtins.cc (add): Terminate arguments with
	void_list_node.
	* tree/decl.cc (initialize_builtin_functions): Initialize
	void_list_node.  Removed `endlink'.  Record pointers to
	functions.
	(build_address_of): New function from gcj.

	* tree/tree.cc (visit_method): Initialize `this_tree'.
	(handle_invocation): Fix consing of `this' expression.
	* tree/builtins.cc (add): Create DECL_RESULT even for void
	functions.  Put method base type into method's type.  Lay out
	method type.
	(map_type): Don't create all methods and fields.
	(map_field): Create new field.
	(map_method): Create new method.

	* tree/builtins.cc (map_type): Handle Object and Class here.
	(initialize_type_map): Don't handle Object or Class.

2004-10-04  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (add): Link parameters through their
	TREE_CHAIN.  Correctly create result decl.
	* tree/hooks.hh (gcjx::expand_function): Declare.
	* tree/langhooks.cc (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION):
	Define.
	(expand_function): New function.
	* tree/tree.cc (generate): Return the method tree.
	(visit_method): Set DECL_SAVED_TREE to method body, DECL_INITIAL
	to topmost block.

	* tree/treegen.cc (generate): Don't set TYPE_METHODS on class.
	Map the class type.  Handle fields properly.

	* tree/builtins.cc (map_type): Put fields and records on the
	record, not the decl.

	* tree/driver.cc (handle_option): Fixed assertion.

	* tree/decl.cc (initialize_decls): call initialize_misc_types
	after start_type_initialization.
	(push_field): Added assert.
	(start_type_initialization): Don't declare type_class.
	* tree/driver.cc (init): Call initialize_decls.
	(post_options): Return false.  Set filename in arguments.
	* tree/driver.cc (init_options): Call initialize_primitive_types.

	* Makefile (jc1): Renamed from gcj.
	(clean): Updated.
	(realclean): Likewise.

	* tree/tree.cc (visit_prefix_simple): New methods.
	* tree/builtins.cc (map_field_ref): New method.

	* tree/hooks.hh: Added GTY everywhere.
	* tree/glue.hh: Include ggc.h, debug.h.
	* tree/langhooks.cc (lang_tree_node): Define.
	Include gt-java-langhooks.h.
	(language_function): New structure.
	(lang_type): Likewise.
	(lang_decl): Likewise.
	* tree/decl.cc: Include gt-java-hooks.h, gtype-java.h.

	* Makefile: Build libgcjx.so.

	* tree/glue.hh: Include convert.h.
	* tree/langhooks.cc (convert): New function from gcj.

	* tree/glue.hh: Include libfuncs.h.
	* tree/hooks.hh	(type_method, type_method_ptr): Declare.
	(type_atable, type_atable_ptr, type_otable, type_otable_ptr):
	Likewise.
	(type_field, type_field_ptr): Likewise.
	(type_method_symbol_ptr, type_method_symbol_array): Likewise.
	(type_nativecode_ptr_array): Likewise.
	* tree/decl.cc (start_type_initialization): New function.
	(build_object_type): Remove object init.
	(build_class_type): Remove class init.
	(initialize_decls): Call new functions.
	(type_method, type_method_ptr): New globals.
	(build_method_type): New function.
	(build_oa_table_types): Likewise.
	(type_atable, type_atable_ptr, type_otable, type_otable_ptr): New
	globals.
	(build_field_type): New function.
	(type_field, type_field_ptr): New globals.
	(type_method_symbol_ptr, type_method_symbol_array): New globals.
	(type_nativecode_ptr_array): New global.
	(all_decls): New global.
	(pushdecl): New function.
	(push_super_field): New function from gcj.

	* tree/lang.opt (fcni-headers): New option.

	* tree/tree.cc (visit_field_ref): Removed syntax error.
	* tree/glue.hh: Include opts.h.
	* tree/driver.cc (handle_option): Hack out add_enable_assert for
	now.

2004-10-03  Tom Tromey  <tromey@redhat.com>

	* tree/decl.cc (build_utf8_record): Use correct type name.
	(build_class_type): Make accflags type_jushort.

	* tree/hooks.hh (type_dtable): Declare.
	(type_dtable_ptr): Likewise.
	(boolean_array_vtable, byte_array_vtable, char_array_vtable,
	short_array_vtable, int_array_vtable, long_array_vtable,
	float_array_vtable, double_array_vtable): Likewise.
	* tree/decl.cc (build_utf8_record): Fix "data" field's type.
	(type_dtable): New global.
	(type_dtable_ptr): Likewise.
	(initialize_misc_types): Initialize new globals.
	(boolean_array_vtable, byte_array_vtable, char_array_vtable,
	short_array_vtable, int_array_vtable, long_array_vtable,
	float_array_vtable, double_array_vtable): New globals.

	* tree/builtins.cc (build_class_ref): Hack.
	* tree/langhooks.cc (decl_ok_for_sibcall): Hack.

	* tree/glue.hh: Include flags.h, tree-inline.h.

	* main.cc (read_file): Removed.
	(read_at_file): Likewise.
	(main): Updated.
	* util.cc (read_file): Moved from main.cc.
	(read_at_file): Likewise.  Updated API.
	Include <fstream>.
	* util.hh (read_at_file): Declare.

	* tree/driver.cc: Include code generator headers.

	* tree/glue.hh: Include except.h.
	* tree/hooks.hh (type_method_symbol): Renamed.
	(type_utf8const_ptr): Declare.
	* tree/decl.cc (type_method_symbol): Renamed.
	(build_utf8_record): Use correct type names.
	(type_utf8const_ptr): New global.
	(build_utf8_record): Initialize it.
	(build_constant_type): Use correct type names.
	(build_class_type): Likewise.
	(build_method_symbol_type): Likewise.

	* tree/builtins.cc (map_field_ref): Updated.
	(map_method_call): Likewise.
	(build_class_ref): Likewise.
	* tree/builtins.hh (class tree_builtins): Added some friends.
	* tree/abi.cc: Updated all methods.
	* tree/abi.hh (class gcj_abi): Added `builtins' argument to all
	methods.

	* tree/glue.hh: Include toplev.h.
	* tree/driver.cc (struct arg_info): Made char* fields "const".
	(add_cp): Copied from main.cc.
	Include source/ucs2.hh.

	* tree/hooks.hh: Don't declare flags already declared in
	options.h.
	* tree/glue.hh: Include options.h.

	* tree/decl.cc (initialize_decls): Call initialize_misc_types.

	* tree/langhooks.cc (LANG_HOOKS_BUILTIN_FUNCTION): Define.
	* tree/hooks.hh (gcjx::builtin_function): Declare.
	* tree/decl.cc (gcjx::builtin_function): New function from gcc.

	* tree/hooks.hh (gcjx::parse_file): Fixed prototype.

	* tree/glue.hh: Include langhooks-def.h and langhooks.h.

	* tree/langhooks.cc (tree_code_type): Updated for new gcc.

	* tree/tree.cc (visit_method): Use flag_jni.
	* tree/lower.cc (visit_bytecode_block): Use
	flag_use_divide_subroutine.
	* tree/builtins.cc (check_reference): Use flag_check_references.
	(build_array_reference): Use flag_bounds_check.
	* tree/hooks.hh (flag_check_references): Declare.
	(flag_bounds_check): Likewise.
	(flag_use_divide_subroutine): Likewise.
	(flag_jni): Likewise.
	(flag_hash_synchronization): Likewise.

	* tree/abi.hh (class bc_abi): Added missing `public'.

	* tree/abi.cc: Updated includes.
	* tree/langhooks.cc: Updated includes.
	* tree/treegen.cc: Updated includes.
	* tree/tree.cc: Updated includes.
	* tree/lower.cc: Updated includes.
	* tree/driver.cc: Updated includes.
	* tree/decl.cc: Include tree/glue.hh.
	* tree/builtins.cc: Updated includes.
	* tree/glue.hh: Include typedefs.hh, tree/builtins.hh,
	tree/hooks.hh.
	* tree/builtins.hh: Include tree/abi.hh.

	* codegen.hh (class code_generator): Updated comment.

2004-10-02  Tom Tromey  <tromey@redhat.com>

	* tree/hooks.hh: Declare global trees.

	* tree/hooks.hh: New file.
	* tree/lang.c: Removed.
	* tree/langhooks.cc: Copied in code from lang.c.  Renamed methods
	into gcjx namespace.  Defined more langhooks.

	* tree/langhooks.cc: New file.
	Use globals and not function notation.
	* tree/langhooks.c: Removed.
	* tree/lower.cc: Use globals and not function notation.
	* tree/tree.cc: Use globals and not function notation.
	* tree/builtins.cc (tree_builtins): Updated.
	(value_null): Removed.
	(value_zero): Likewise.
	(value_one): Likewise.
	(value_minusone): Likewise.
	(int_type_node, class_type_node, object_ptr_type_node,
	long_type_node): Likewise.
	(runtime_function::init): Likewise.
	(runtime_function::runtime_function): Likewise.
	(runtime_function::~runtime_function): Likewise.
	Use globals and not function notation.
	* tree/builtins.hh (class tree_builtins): Removed all builtin
	functions and values.
	(class runtime_function): Removed.
	* tree/decl.cc (initialize_builtin_functions): New function.
	(type_object_ptr): New global.
	(type_class_ptr): Likewise.
	Added globals for all builtin functions.
	(build_object_type): Create object pointer type.
	(build_class_type): Create class pointer type.

	* tree/builtins.cc (old_abi_p): Removed.
	(find_abi): New method.
	(build_class_ref): Use it.
	(map_field_ref): Rewrote.
	(map_method_call): Use find_abi.
	* tree/builtins.hh (tree_builtins::old_abi): New field.
	(tree_builtins::new_abi): Likewise.
	(tree_builtins::find_abi): Declare.
	(tree_builtins::old_abi_p): Removed.
	* tree/abi.cc (build_method_call): Added assertion.
	(cxx_abi::build_field_reference): Likewise.
	(bc_abi::build_field_reference): Implemented.
	* tree/abi.hh (class gcj_abi): Wrote some documentation.

2004-09-30  Tom Tromey  <tromey@redhat.com>

	* tree/abi.cc: New file.
	* tree/abi.hh: New file.
	* tree/driver.cc: Put all functions into gcjx namespace.
	* tree/builtins.hh (tree_builtins::initialize_type_map): Declare.
	(class tree_builtins): Removed all builtin_type fields.
	(class builtin_type): Removed.
	* tree/treegen.cc (~tree_code_generator): New destructor.
	(tree_code_generator): Initialize new field.
	(generate): Initialize type map on first call.
	* tree/treegen.hh (~tree_code_generator): Declare.
	(tree_code_generator::first_time): New field.
	* tree/builtins.cc (build_utf8_record): Moved to decl.cc.
	(build_symbol_type): Likewise.
	(build_constant_type): Likewise.
	(build_class_type): Likewise.
	(push_field): Likewise.
	(initialize_type_map): New method.
	(builtin_type): Removed.
	(tree_builtins): Updated.
	(map_method_call): Use abi object.
	(build_class_ref): Likewise.
	* tree/decl.cc: New file.

	* tree/lang.opt: New file.
	* tree/driver.cc (java_init_options): Set bounds_check flag here.
	(java_handle_option): Added all warning and feature options.
	* compiler.cc (compiler): Updated.
	* compiler.hh (compiler::target_check_references): Removed.
	(compiler::target_bounds_check): Likewise.
	(compiler::target_jni): Likewise.
	(compiler::target_divide_subroutine): Likewise.

	* main.cc (warning_flag::in_all): Removed field.
	(warnings): Updated.
	(parse_args): Use set_wall.
	(warn_all): Removed.
	* compiler.cc (set_wall): New method.
	* compiler.hh (compiler::set_wall): Declare.

	* compiler.cc (generate_code): Do nothing if no code generators
	specified.

	* tree/langhooks.c: Changed to use builtins class.
	* tree/driver.cc: New file.
	* tree/builtins.hh (tree_builtins::type_jushort): New field.
	(tree_builtins::type_jubyte): Likewise.
	(tree_builtins::value_true): Likewise.
	(tree_builtins::value_false): Likewise.

2004-09-28  Tom Tromey  <tromey@redhat.com>

	* model/bytecode.hh: Documented.
	* model/block.hh: Documented.
	* model/synchronized.hh: Documented.
	* model/do.hh: Documented.

	* model/while.hh: Documented.
	* model/if.hh: Documented.

	* model/switch.hh (model_switch::label_referenced): Removed.
	* model/loop.hh (model_loop::label_referenced): Removed.
	* model/label.hh (model_label::label_referenced): Removed.
	* model/stmt.hh (model_stmt::label_referenced): Removed.
	Added more documentation.

2004-09-26  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (build_utf8_record): New method.
	(build_symbol_type): Likewise.
	(build_constant_type): Likewise.
	(build_class_type): Likewise.
	(push_field): Likewise.

2004-09-25  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (tree_generator): Updated.
	* tree/tree.hh (tree_generator): Added builtins argument.
	* tree/treegen.cc (tree_code_generator): Initialize new field.
	(generate): Pass builtins to tree_generator constructor.
	* tree/treegen.hh (tree_code_generator::builtins): New field.

	* main.cc: Removed "USE_TREE" code.

2004-09-23  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (build_int): Fixed call to build_int_cst.
	(build_long): Likewise.
	* tree/lower.cc (visit_bytecode_block): Correctly find constant
	pool.
	* tree/builtins.cc (lay_out_vtable): Fixed call to build_int_cst.

	* tree/glue.hh: Include <iostream> before gcc headers.

	* main.cc (help_options): Document --tabs.
	(set_source): New function.
	(set_target): Likewise.
	(set_tabs): New function.
	(parse_args): Use them.  Recognize "=" forms of long arguments.
	Recognize --tabs.
	* source/lex.cc (lexer): Moved from .hh file.  Initialize
	tab_width.
	(get_raw): Compute column based on tab width.
	* source/lex.hh (lexer::tab_width): New field.
	(lexer): Moved body to .cc file.
	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::tab_width): New field.
	(compiler::set_tab_width): New method.
	(compiler::get_tab_width): Likewise.

2004-09-20  Tom Tromey  <tromey@redhat.com>

	* main.cc (features): Added -fverify.
	* compiler.cc (compiler): Initialize it.
	* compiler.hh (compiler::target_verify): New field.

	* model/bytecode.hh (model_bytecode_block::cpool): Removed.
	(class model_bytecode_block): Don't initialize.
	(model_bytecode_block::set_constant_pool): Removed.
	(model_bytecode_block::get_constant_pool): Likewise.
	* bytecode/definer.cc (parse): Updated for new model_unit_class
	constructor.
	(handle_code): Don't set constant pool on block.
	* model/unit.hh (model_unit_class::cpool): New field.
	(model_unit_class): Added constant pool argument; initialize new
	field.
	(model_unit_class::get_constant_pool): New method.

	* bytecode/constants.hh (CONSTANT_ResolvedClass): New constant.
	(CONSTANT_ResolvedString): Likewise.
	* bytecode/glue.cc: New file.
	* tree/lower.cc (visit_bytecode_block): Verify the method.
	* bytecode/verify.cc: New file from libgcj.
	* verify.h: New file.
	* bytecode/definer.cc (handle_code): Use current_block.
	(handle_exception_table): New method.
	* bytecode/definer.hh (defining_class_reader::current_block): New
	field.
	(defining_class_reader::handle_exception_table): Declare.
	* owner.cc: Added new instantiation.
	* typedefs.hh (ref_bytecode_block): New typedef.
	* model/bytecode.cc (verify): New method.
	Include verify.h.
	* model/bytecode.hh (model_bytecode_block::get_bytecode): New method.
	(model_bytecode_block::get_max_stack): Likewise.
	(model_bytecode_block::get_max_locals): Likewise.
	(model_bytecode_block::get_code_length): Likewise.
	(model_bytecode_block::verify): Declare.
	(model_bytecode_block::exception): New type.
	(model_bytecode_block::exc_length): New field.
	(model_bytecode_block::excs): Likewise.
	(model_bytecode_block::verified): Likewise.
	(model_bytecode_block): Initialize new fields.
	(~model_bytecode_block): New destructor.
	(model_bytecode_block::set_exceptions): New method.
	(model_bytecode_block::get_exception_length): Likewise.
	(model_bytecode_block::get_exceptions): Likewise.

2004-09-19  Tom Tromey  <tromey@redhat.com>

	* main.cc (warning_flag::in_all): Now bool.
	(warnings): Added zero-shift, negative-shift, and large-shift.
	Updated.
	* model/binary.cc (model_arith_shift::resolve): Make warnings
	conditional.
	* compiler.cc (compiler): Initialize new fields.
	* compiler.hh (compiler::warn_zero_shift): New field.
	(compiler::warn_negative_shift): Likewise.
	(compiler::warn_large_shift): Likewise.

	* model/class.cc (add_implicit_constructor): Use location of
	class for constructor.

	* model/fieldref.cc (resolve): Print location of field.
	* model/invoke.cc (handle_resolve): Print location of method.

	* model/class.cc (resolve): Use push_static object.

	* scope.cc (push_method): Moved from .hh file.
	(~push_method): Likewise.
	* scope.hh (class push_method): Derive from push_static.
	(class push_static): Made data members protected.

	* model/class.cc (resolve_members): Use POST_MEMBERS.
	(resolve): Likewise.
	(get_this_0): Likewise.
	* model/class.hh (model_class::resolution_state_value): Added
	POST_MEMBERS.

	* model/field.cc (constant_p): Only resolve compilation unit if
	there is one.
	* model/class.hh (model_class::resolve_one_method): Declare.
	* model/class.cc (resolve_one_method): New method.
	(get_accessor): Resolve method if needed.
	* bytecode/generate.cc (bytecode_generator): Initialize it.
	(generate): Set line_count properly.
	* bytecode/generate.hh (bytecode_generator::line_count): New
	field.

	* model/class.cc (get_accessor): Don't return a value from the
	write accessor.
	* bytecode/generate.cc (dereference_left_hand_side): Handle
	METHOD_CALL case.
	(duplicate_lhs_value): Likewise.
	(emit_lhs_store): Rewrote METHOD_CALL code.
	* bytecode/generate.hh (left_hand_side_info::method): New field.

	* bytecode/generate.cc (visit_field_ref): Handle static fields
	properly.
	(generate): Correctly compute whether any block has a line
	number.

	* access.cc (trampoline_required_p): Fixed bug with protected
	access checking.

	* compiler.cc (compiler): Initialize target_debug to false.

	* model/class.cc (get_accessor): Set parameters and throws on new
	method.  Set method name on invocation.

	* bytecode/generate.cc (visit_field_ref): Emit call to trampoline
	method.
	(emit_lhs_store): Updated for METHOD_CALL.
	(duplicate_lhs_value): Likewise.
	(dereference_left_hand_side): Likewise.
	(visit_method_invocation): Emit call to trampoline method.
	* bytecode/generate.hh (left_hand_side_type::METHOD_CALL): New
	enum value.

	* bytecode/generate.cc (generate): Add "LineNumberTable" utf8
	constant if needed.
	(write): Likewise.

	* access.cc (trampoline_required_p): Corrected comment.

	* bytecode/generate.hh (bytecode_generator::note_line): Declare.
	* bytecode/generate.cc (note_line): New method.
	(visit_assert): Updated.
	(visit_break): Likewise.
	(visit_continue): Likewise.
	(visit_do): Likewise.
	(visit_expression_stmt): Likewise.
	(visit_for_enhanced): Likewise.
	(visit_for): Likewise.
	(visit_if): Likewise.
	(visit_label): Likewise.
	(visit_return): Likewise.
	(visit_switch): Likewise.
	(visit_synchronized): Likewise.
	(visit_throw): Likewise.
	(visit_try): Likewise.
	(visit_while): Likewise.
	(write): Emit line number table.
	* bytecode/block.cc (clone): Set line number.
	* bytecode/block.hh (bytecode_block::line): New field.
	(bytecode_block): Initialize it.
	(bytecode_block::set_line_number): New method.
	(bytecode_block::get_line_number): Likewise.

	* bytecode/classwriter.cc (write): Use correct access modifiers.

	* model/invoke.cc (handle_resolve): Create accessor if required.
	* model/fieldref.cc (resolve): Create accessor if required.
	* model/return.hh (model_return): New constructor.
	* main.cc (warnings): Added enclosing-access.
	* compiler.cc (compiler): Initialize it.
	* compiler.hh (compiler::warn_enclosing_access): New field.
	* model/class.cc (get_accessor): New methods.
	* model/class.hh (model_class::accessors): New field.
	(model_class::settors): Likewise.
	(model_class::get_accessor): Declare.

2004-09-18  Tom Tromey  <tromey@redhat.com>

	* main.cc (warning_flag): Added `in_all'.
	(warnings): Updated all entries.
	(warn_all): New function.
	(help_warnings): Document -Wall and -Eall.
	(parse_args): Recognize -Wall and -Eall.

2004-09-09  Tom Tromey  <tromey@redhat.com>

	* owner.cc: Added missing instantiation.

2004-09-07  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh
	(bytecode_generator::get_stringbuffer_class): Declare.
	* bytecode/generate.cc (get_stringbuffer_class): New method.
	(create_stringbuffer): Use it.
	(close_stringbuffer): Likewise.
	(visit_arith_binary): Likewise.
	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::java_lang_StringBuilder): New field.

2004-09-04  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (resolve_classes): Call resolve_annotations.
	* model/field.cc (resolve_classes): Call resolve_annotations.
	* model/iannotatable.cc: New file.
	* model/annotype.hh (model_annotation_type::anno_members):
	Changed type.
	(model_annotation_type::add_annotation_member): Moved to .cc.
	* model/annotype.cc: New file.
	* model/iannotatable.hh: Added some documentation.
	(IAnnotatable::resolve_annotations): Declare.
	* model/annotation.cc (resolve): Wrote.
	* model/annomember.cc (type_ok_p): New method.
	(resolve): Likewise.
	* model/annomember.hh (model_annotation_member::resolve):
	Declare.
	(model_annotation_member::type_ok_p): Likewise.
	* model/annovalue.hh (model_annotation_value::resolve): New
	method.
	(model_annotation_value::get_name): Likewise.

	* model/annomember.cc: New file.
	* model/annotype.hh: New file.
	* owner.cc: Added instantiations.
	* typedefs.hh: Include annomember.hh, annotype.hh.
	(ref_annotation_member): New typedef.
	(ref_annotation_type): Likewise.
	* model/annomember.hh: New file.
	* model/annovalue.hh (class model_annotation_value): Documented.
	* source/parse.hh (parse::annotation_type_declaration): Declare.
	(parse::annotation_type_member): Likewise.
	(parse::member_decl): Updated.
	(parse::class_body_declaration): Likewise.
	(parse::class_body): Likewise.
	* source/parse.cc (class_or_interface_declaration): Parse
	annotation type declarations.
	(annotation_type_declaration): New method.
	(class_body_declaration): Handle case where "@" starts annotation
	type declaration.
	(member_decl): Parse annotation type declarations.
	(annotation_type_member): New method.
	(member_decl): Added `parse_annotation' argument.
	(class_body_declaration): Likewise.
	(enum_body): Updated.
	(class_body): Added `parse_annotation' argument.

	* model/method.cc (massage_modifiers): Removed
	constructor-specific code.
	* model/constructor.cc (massage_modifiers): New method.
	* model/constructor.hh (model_constructor::massage_modifiers):
	Declare.

	* model/annotation.cc: New file.
	* model/annotation.hh (class model_annotation): Now inherits from
	model_expression.
	(model_annotation::args): Changed type.
	(model_annotation): Updated.
	(model_annotation::compute_constant_p): New method.
	(model_annotation::resolve): Declare.
	(model_annotation::visit): Likewise.
	* typedefs.hh: Include annovalue.hh.
	(ref_annotation_value): New typedef.
	* model/annovalue.hh: New file.
	* source/parse.hh (parse::member_value): Declare.
	* source/parse.cc (member_value): New method.
	(annotation): Parse annotations.

	* bytecode/classwriter.cc (write): Use Object as superclass for
	interfaces.

	* model/invoke.cc (resolve): Throw exception if explicit super
	call seen.
	* model/class.cc (add_anonymous_constructor): Mark super call as
	synthetic.
	(add_implicit_constructor): Likewise.
	* source/parse.cc (explicit_constructor_invocation): Mark super
	call as synthetic.
	* model/invoke.hh (model_super_invocation::synthetic): New field.
	(model_super_invocation): Initialize it.
	(model_super_invocation::set_synthetic): New method.

2004-09-01  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (init): Updated.
	(builtin_type): Updated.
	* tree/builtins.hh (runtime_function::flag_enum): Renamed
	elements.  Added E_MALLOC, E_PURE.

	* tree/langhooks.c (java_truthvalue_conversion): Removed old
	comment.
	Include headers, added copyright info.

	* tree/tree.cc (build_int): Use build_int_cst.
	(build_long): Likewise.
	* tree/builtins.cc (lay_out_vtable): Use build_int_cst.

	* source/lex.cc (ensure): Use malloc and realloc.
	(~lexer): Use free.
	* typedefs.hh (xmalloc): Removed.
	(xrealloc): Likewise.
	(xfree): Likewise.

	* main.cc: Conditionally include treegen.hh.
	(parse_args): Recognize "object" target.

2004-08-31  Tom Tromey  <tromey@redhat.com>

	* access.cc (accessible_p): Look at member type's declarer, not
	member type itself.

	* defassign.cc (definite_assignment_visitor::visit_throw): Don't
	propagate state upward.
	(join_state::pending_pairs_type): New type.
	(join_state::pending_pairs): Use it.
	(definite_assignment_visitor::visit_try): Likewise.
	(join_state::abnormal_finally): New field.
	(join_state): Initialize it.
	(definite_assignment_visitor::visit_try): Set it.
	(definite_assignment_visitor::propagate_branch): Use it.

2004-08-30  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (variable_state::merge_finally): New method.
	(variable_state::do_union): Likewise.
	(definite_assignment_visitor::visit_try): Use merge_finally.

2004-08-29  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (definite_assignment_visitor::visit_try): Handle
	definite unassignment rule for catch and finally blocks.
	(join_state::get_state): New method.
	(definite_assignment_visitor::visit_method): Use it.
	(definite_assignment_visitor::visit_do): Likewise.
	(definite_assignment_visitor::visit_for): Likewise.
	(definite_assignment_visitor::visit_label): Likewise.
	(definite_assignment_visitor::visit_switch): Likewise.
	(definite_assignment_visitor::visit_try): Likewise.
	(definite_assignment_visitor::visit_while): Likewise.
	(join_state::get_continue_state): New method.
	(definite_assignment_visitor::visit_do): Use it.
	(definite_assignment_visitor::visit_for): Likewise.
	(join_state): Added `init' argument.
	(join_state::is_set): Removed.
	(definite_assignment_visitor::visit_throw): Propagate branch
	information.
	(definite_assignment_visitor::visit_method): Emit error against
	constructor, not field.

	* reader/source.cc (apply): Use create_ucs2_reader.
	* main.cc (help_options): Document --encoding.
	(parse_args): Recognize --encoding.
	* source/ucs2.cc (compute_default_encoding): New function.
	(create_ucs2_reader): New function.
	Don't include exception.hh.
	(get): Put byte offset in error message.
	(here): New method.
	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::encoding): New field.
	(compiler::set_encoding): New method.
	(compiler::get_encoding): Likewise.
	* source/iconv.cc: New file.
	* source/iconv.hh: New file.
	* source/ucs2.hh (class ucs2_reader): Made fields protected.
	(ucs2_reader::get): Updated documentation.
	(compute_default_encoding): Declare.
	(create_ucs2_reader): Likewise.
	(ucs2_reader::here): Likewise.
	* format/format.hh (format_repr::set_location): New method.
	* exception.hh (exception_base::set_location): New method.
	* source/lex.cc (get_raw): Set location on conversion exception.
	* location.cc (operator<<): Print file name separately.  Only
	print line number if it is set.
	* location.hh (location): New constructor.
	(location): Updated.

2004-08-28  Tom Tromey  <tromey@redhat.com>

	* model/assert.cc (resolve): Add assert members.

2004-08-17  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::inherit_methods): Added argument.
	(model_class::inherit_fields): Likewise.
	(model_class::inherit_types): Likewise.
	(model_class::inherit_package_private_members): Likewise.
	* model/class.cc (inherit_methods): Added `default_access'
	argument.
	(inherit_fields): Likewise.
	(inherit_types): Likewise.
	(inherit_package_private_members): New method.
	(resolve_members): Call it.

2004-08-15  Tom Tromey  <tromey@redhat.com>

	* fdlibm/classpath.cc: New file.
	* model/value.cc (classpath_double_to_string): Declare.
	(primitive_format): Use it.
	(classpath_string_to_double): Declare.
	(string_to_double): Use it.
	(string_to_float): Likewise.
	* fdlibm/config.h: New file.
	* fdlibm/dtoa.c, fdlibm/e_acos.c, fdlibm/e_asin.c,
	fdlibm/e_atan2.c, fdlibm/e_exp.c, fdlibm/e_fmod.c, fdlibm/e_log.c,
	fdlibm/e_pow.c, fdlibm/e_remainder.c, fdlibm/e_rem_pio2.c,
	fdlibm/e_scalb.c, fdlibm/e_sqrt.c, fdlibm/fdlibm.h,
	fdlibm/ieeefp.h, fdlibm/java-assert.h, fdlibm/k_cos.c,
	fdlibm/k_rem_pio2.c, fdlibm/k_sin.c, fdlibm/k_tan.c,
	fdlibm/mprec.c, fdlibm/mprec.h, fdlibm/s_atan.c, fdlibm/s_ceil.c,
	fdlibm/s_copysign.c, fdlibm/s_cos.c, fdlibm/s_fabs.c,
	fdlibm/sf_fabs.c, fdlibm/s_floor.c, fdlibm/sf_rint.c,
	fdlibm/s_rint.c, fdlibm/s_scalbn.c, fdlibm/s_sin.c,
	fdlibm/s_tan.c, fdlibm/strtod.c, fdlibm/w_acos.c, fdlibm/w_asin.c,
	fdlibm/w_atan2.c, fdlibm/w_exp.c, fdlibm/w_fmod.c, fdlibm/w_log.c,
	fdlibm/w_pow.c, fdlibm/w_remainder.c, fdlibm/w_sqrt.c: New files
	from fdlibm.

	* model/class.cc (add_assert_members): Create initializer for new
	field.
	* model/invoke.cc (resolve): Fixed error message.

	* bytecode/generate.cc (visit_assert): Updated.
	* model/class.cc (add_assert_members): Updated.  Push new field
	on `fields'.
	* model/class.hh (model_class::add_assert_members): Return a
	model_field*.

	* model/class.cc (do_resolve_classes): Call resolve_hook.
	(resolve_classes): Removed assert.
	(apply_type_map): Resolve members.

	* model/typevar.hh (class model_type_variable): Updated.
	* model/wildcard.hh (class model_wildcard): Updated.
	* model/typevar.cc (resolve_hook): Renamed from resolve_classes.
	* model/wildcard.cc (resolve_hook): Renamed from resolve_classes.
	* model/class.hh (model_class::resolve_hook): New method.

	* model/wildcard.cc (resolve_classes): Set superclass.
	* model/typevar.cc (resolve_classes): Call resolve_classes in
	superclass.

2004-08-11  Tom Tromey  <tromey@redhat.com>

	* location.cc (operator<<): Print a trailing space.
	(LOCATION_COLUMN_BITS): Removed.
	* format/format.cc (operator<<): Put "error" or "warning" into
	output as appropriate.

	* bytecode/generate.hh (bytecode_generator::handle_invocation):
	Updated.
	* bytecode/generate.cc (handle_invocation): Added `qualifier'
	argument.  Use it.
	(visit_method_invocation): Updated.
	(visit_type_qualified_invocation): Likewise.
	(visit_super_invocation): Likewise.
	(visit_this_invocation): Likewise.
	(visit_new): Likewise.
	(visit_assert): Likewise.
	(create_stringbuffer): Likewise.
	(close_stringbuffer): Likewise.
	(visit_arith_binary): Likewise.
	(visit_field_ref): Pass qualifier to add().
	(visit_field_initializer): Updated.
	(visit_class_ref): Updated.
	(visit_assert): Updated.
	(handle_valueof): Updated.
	(visit_this): Likewise.
	* model/fieldref.cc (resolve): Set `qualifier'.  Fixed error
	message.
	* model/fieldref.hh (model_field_ref::qualifier): New field.
	(model_field_ref): Initialize it.
	(model_field_ref::get_qualifying_class): New method.
	* bytecode/outpool.cc (check): Use assert.
	(check_qual): New method.
	(add): Added `qual' argument.
	* bytecode/outpool.hh (class output_constant_pool): Added
	comment.
	(output_constant_pool::type_map_type): New typedef.
	(type_map): Use it.
	(method_map, field_map): Changed type.
	(output_constant_pool::add): Added type argument.
	(output_constant_pool::check_qual): Declare.

2004-08-08  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (apply_type_map): Resolve classes.

	* source/parse.cc (enum_body): Use add_enum.
	* model/enum.cc (add_enum): Renamed.
	* model/enum.hh (model_enum::add_enum): Renamed from `add'.

	* source/parse.hh (parse::void_method): Declare.
	* source/parse.cc (void_method): New method.
	(member_decl): Use it.  Allow generic void methods.

2004-08-07  Tom Tromey  <tromey@redhat.com>

	* source/parse.cc (type_bound_opt): Use TOKEN_BITWISE_AND.
	* source/token.hh (enum token_value) <TOKEN_AMPERSAND>: Removed.

	* source/parse.cc (member_decl): Handle `enum'.
	(try_statement): Require at least one `catch' or `finally'.

	* source/keyword.h: Rebuilt.
	* Makefile: Changed gperf arguments.

	* model/fwdtype.hh (class model_forwarding_owned): New class.
	* owner.cc (owner<model_wildcard>): Define.
	* Makefile: Updated.
	* typedefs.hh: Include wildcard.hh.
	(ref_wildcard): New typedef.
	* source/parse.cc (type_name): Handle wildcard types.
	* model/wildcard.cc: New file.
	* model/wildcard.hh: New file.

	* compiler.cc (compiler): Initialize new caches.
	* compiler.hh (class compiler): Added new class caches.

	* model/annotation.hh (enum annotation_kind): Added
	ANNOTATE_CONSTRUCTOR.

2004-08-06  Tom Tromey  <tromey@redhat.com>

	* bytecode/outpool.hh (class output_constant_pool): Updated.
	* bytecode/outpool.cc (add_if_inner): New method.
	(add): Use it.  Add method's return type.
	* model/class.cc (find_name): Wrote.
	* bytecode/definer.hh: Updated.
	* bytecode/definer.cc (find_outer_class): New method.
	(parse): Use it.

	* bytecode/outpool.cc (add): Add inner classes.
	(add): Likewise.

	* model/class.cc (add): Don't enforce initializer restriction on
	interface field from class file.
	* model/imodifiable.hh (IModifiable::from_class_p): New method.

2004-08-04  Tom Tromey  <tromey@redhat.com>

	* tree/langhooks.c: New file, from gcj.
	* tree/glue.hh (IN_GCC): Define.

2004-08-02  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (~runtime_function): New destructor.
	* tree/lang.c: New file, from gcj.
	* tree/glue.hh: Added extern "C".

2004-08-01  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (find_method): Use `search' field, not local
	variable.  Modify `search' at end of loop.
	* model/invoke.hh (model_invocation_base::search): New field.
	(model_invocation_base): Initialize it.
	(model_invocation_base::get_qualifying_class): New method.

2004-07-31  Tom Tromey  <tromey@redhat.com>

	* codegen.hh (~code_generator): Now public.
	* typedefs.hh: Include directory.hh.
	* main.cc (help_options): Document -o.
	Added some includes.
	(parse_args): Handle -o options.
	* compiler.cc (add_code_generator): New method.
	(~compiler): Delete code generators.
	(generate_code): Use back_ends.
	Removed some includes.
	* compiler.hh (compiler::dir_cache): New field.
	(compiler::get_directory_cache): New method.
	(compiler::back_ends): New field.
	(compiler::add_code_generator): Declare.
	* directory.cc (set_directory): New method
	* directory.hh (directory_cache::set_directory): Declare.
	(directory_cache): Now takes no arguments.

	* compiler.hh (compiler::target_debug): New field.
	* main.cc (help_options): More text.
	(parse_args): Handle -g.

2004-07-30  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (get_all_fields): New method.
	* model/class.hh (model_class::get_all_fields): Declare.
	* header/jnistub.cc (write_field): New method.
	* header/jnistub.hh (jni_stub_generator::write_field): Declare.
	* header/jni.hh (jni_code_generator::write_field): Declare.
	* header/jni.cc (write_field): New method.
	(generate): Write fields.

	* source/lex.cc (TYPE_PRECISION): Removed.
	(numeric_literal): Handle overflow per-type.
	* init.cc (initialize_primitive_types): Use new defines.
	* typedefs.hh (MIN_INT): New define.
	(MAX_INT): Likewise.
	(MIN_LONG): Likewise.
	(MAX_LONG): Likewise.

	* model/fieldref.cc (resolve): Error if qualified super's class
	doesn't enclose current class.

	* main.cc (read_at_file): New function.
	(read_file): Likewise.
	(main): Handle "@" files.

2004-07-29  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::add): Updated.
	* fold.cc (fold_visitor::visit_field_initializer): New method.
	* tree/tree.cc (visit_field_initializer): Hacked.
	* tree/tree.hh (tree_generator::visit_field_initializer): New
	method.
	* bytecode/generate.cc (visit_field_initializer): New method.
	(bytecode_generator): Initialize expr_target.
	* bytecode/generate.hh (bytecode_generator::visit_field_initializer):
	Declare.
	* visitor.hh (visitor::visit_field_initializer): Declare.
	* typedefs.hh: Include fieldinit.hh.
	* model/assign.cc (resolve): Removed.
	* model/assign.hh (class model_clinit_assignment): Removed.
	* model/fieldinit.cc: New file.
	* model/fieldinit.hh: New file.
	* model/class.cc (resolve): Resolve finit$ first.
	(add_anonymous_constructor): Removed old comment.
	(add): Changed interface.  Rewrote.
	(add): Add field to initializers.
	(resolve): Don't add field to initializers.
	* defassign.cc (definite_assignment_visitor::instance_init):
	Removed.
	(definite_assignment_visitor): Updated.
	(definite_assignment_visitor::visit_method): Allow reentry.
	(check_definite_assignment): Handle instance initializers.
	(definite_assignment_visitor::visit_method_invocation): Likewise.
	(definite_assignment_visitor::fields): New field.
	(definite_assignment_visitor::visit_this_invocation): Mark fields
	as set.
	(definite_assignment_visitor::visit_field_ref): Uncommented code.
	(definite_assignment_visitor::visit_field_initializer): New
	method.

2004-07-28  Tom Tromey  <tromey@redhat.com>

	* model/enum.cc (model_enum): Implicitly static.  Set superclass.

	* main.cc (help_options): Document -source, -target.
	(TABS): Removed.
	(features): Removed "1.5" and .o-only arguments.  Renamed second
	"assert" option.
	(parse_args): Handle -source and -target.
	(help_warnings): Split long line.
	* compiler.hh (class compiler): Updated.
	* compiler.cc (set_source_1_5): New method.
	(set_source_1_4): Likewise.
	(set_source_1_3): Likewise.
	(set_target_1_5): Likewise.
	(set_target_1_4): Likewise.
	(set_target_1_3): Likewise.

	* model/invoke.cc (find_method): Don't search outer class if this
	class had accessible method.

	* bytecode/generate.cc (emit_store): Reduce stack.
	(visit_catch): Updated.
	(visit_synchronized): Likewise.
	(visit_throw): Likewise.
	(visit_variable_stmt): Likewise.
	(emit_lhs_store): Likewise.
	(visit_for_enhanced): Handle stack correctly.
	* defassign.cc (definite_assignment_visitor::visit_for_enhanced):
	Wrote.

	* model/primitive.hh (model_int_primitive::mod): Cast constant 0
	to correct type.

	* model/this.cc (resolve): Commented out regressing code.
	* model/new.cc (determine_search_class): Handle `primary.new Name'
	case.
	(determine_enclosing_instance): Create a new model_this for
	with_respect_to instead of copying expression.
	* source/parse.cc (new_something): Updated comment.

	* conversions.cc (casting_conversion): Check for clashing
	interface methods.
	* model/method.hh (model_method::same_arguments_p): Declare.
	* model/method.cc (same_arguments_p): New method.
	(hides_or_overrides_p): Use it.

	* model/value.cc (primitive_format): Correctly return "Infinity",
	not "Inf".

	* model/value.cc (primitive_format): Handle Inf and NaN.
	(primitive_format): Likewise.

	* model/this.cc (resolve): Also check for static context.

	* model/class.cc (resolve): Create finit$ early.  Use finit$ as
	the catcher for exceptions.

	* main.cc (handle_warning): Set warning flag.

	* bytecode/outpool.cc (add): Updated.
	* bytecode/outpool.hh (output_constant_pool::float_map): Changed
	type.
	(output_constant_pool::double_map): Likewise.

	* main.cc (DEFAULT_BOOTCLASSPATH): Define if not already defined.
	(parse_args): Use it.
	(parse_args): Recognize -I.
	(print): New function.
	(help_warnings): Use it.
	(help_options): Likewise.  Describe -I.
	(warnings): Renamed options.  Updated descriptions.
	(help_warnings): Updated text.
	(parse_args): Handle bootclasspath= and classpath=.

	* bytecode/generate.cc (arith_shift): Added comment.

2004-07-27  Tom Tromey  <tromey@redhat.com>

	* main.cc (parse_args): Look at CLASSPATH environment variable.
	Ignore -g.

	* main.cc (parse_args): Fixed argc logic.

	* compiler.hh (compiler_warning): New constructor.
	* main.cc (main): Don't set defaults.
	(handle_feature): Accept `-fno-'.
	* compiler.cc (compiler): Explicitly initialize all flags.

	* Makefile (gcjx): Renamed from lextest.
	* main.cc: Rewrote.

	* name.cc (classify_ambiguous_name): Throw exception on
	type-qualified reference to a non-static field.

	* tree/tree.hh (tree_generator::alloc_name_constant): Declare.
	(tree_generator::build_ref_from_constant_pool): Likewise.
	* tree/tree.cc (alloc_name_constant): New method.
	(build_ref_from_constant_pool): Likewise.
	* tree/lower.cc (array_access): Hacked.

	* tree/lower.cc (visit_bytecode_block): Set stack_top and
	stack_types.
	(pop): Decrement stack_top.
	(load): Hacked.
	(store): Likewise.
	(find_local_slot): Likewise.
	* tree/tree.cc (tree_generator): Initialize new fields.
	(~tree_generator): Delete stack_types if needed.
	* tree/tree.hh (tree_generator::stack_top): New field.
	(tree_generator::stack_types): Likewise.

	* tree/lower.cc (visit_bytecode_block): Use build_int and
	build_long.  Handle bipush correctly.
	(handle_ldc): Likewise.
	(visit_bytecode_block): Handle small float and double constants.
	Handle ldc_w like ldc2_w.
	* tree/tree.cc (build_int): New method.
	(build_long): Likewise.
	(visit_switch_block): Use build_int.
	(arith_shift): Likewise.
	(visit_simple_literal): Likewise.
	(handle_float): New method.
	(visit_simple_literal): Use it.
	(handle_double): New method.
	(visit_simple_literal): Use it.
	* tree/tree.hh (tree_generator::build_int): Declare.
	(tree_generator::build_long): Likewise.
	(tree_generator::handle_float): Likewise.
	(tree_generator::handle_double): Likewise.

	* tree/tree.cc (tree_generator): Initialize new field.
	(wrap_synchronized): Use new field to generate name.
	* tree/tree.hh (tree_generator::temp_counter): New field.

	* tree/lower.cc (visit_bytecode_block): Set `labels'.
	(find_label): Use top-level get_identifier.
	(find_class): Use compilation unit to find class.
	* tree/tree.cc (tree_generator): Initialize new field.
	(tree_generator): New destructor.
	(build_class_ref): New overload.
	(build_class_ref): Use it.
	* tree/tree.hh (tree_generator::labels): New field.
	(~tree_generator): Removed body.
	(tree_generator::build_class_ref): Declare.

	* model/enum.cc (check_instantiation): New method.
	* model/enum.hh (model_enum::check_instantiation): Declare.
	* model/typevar.cc (check_instantiation): New method.
	* model/arraytype.hh (model_array_type::check_instantiation): New
	method.
	* model/typevar.hh (model_type_variable::check_instantiation):
	Declare.
	* model/new.cc (determine_search_class): Use check_instantiation.
	* model/class.cc (check_instantiation): New method.
	* model/class.hh (model_class::check_instantiation): Declare.

	* model/enum.cc (add): New method.
	* model/enum.hh (model_enum::add): Removed body.
	* model/enumconst.hh (model_enum_constant::arguments): New field.
	(model_enum_constant::set_arguments): Implemented.
	(model_enum_constant::get_arguments): New method.

2004-07-26  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_simple_literal): Rewrote.

	* tree/tree.cc (handle_string_literal): New method.
	(visit_string_literal): Use it.
	* tree/tree.hh (tree_generator::handle_ldc): Declare.
	(tree_generator::handle_string_literal): Declare.
	* tree/lower.cc (visit_bytecode_block): Implement ldc.
	(handle_ldc): New method.

	* tree/builtins.cc (build_class_ref): New method.
	* tree/builtins.hh (tree_builtins::build_class_ref): Declare.
	* tree/lower.cc (visit_bytecode_block): Use find_class in more
	places.  Implement checkcast.
	(find_class): Use declaring class properly.

	* bytecode/cpool.cc (get_name_and_type): New method.
	* bytecode/cpool.hh (constant_pool::get_fieldref): Declare.
	(constant_pool::get_name_and_type): Declare.
	* tree/tree.hh (tree_generator::find_class): Declare.
	* tree/lower.cc (find_class): New method.
	(visit_bytecode_block): Extract information from constant pool.

	* format/format.hh (operator%): Declare.
	* format/format.cc (operator%): New operator.

	* bytecode/definer.cc: Updated.
	* bytecode/classreader.hh (class_reader): Updated.
	* bytecode/classreader.cc (get_utf8): Removed.
	(get_string): Removed.
	(get_class): Removed.
	(parse_constant_pool): Updated.
	* bytecode/cpool.cc: New file.
	* bytecode/cpool.hh (constant_pool::get_utf8): New method.
	(constant_pool::get_string): Likewise.
	(constant_pool::get_class): Likewise.
	(constant_pool::utf_data): New field.
	(constant_pool): Added new argument.
	* typedefs.hh: Include cpool.hh.
	* bytecode/definer.cc (handle_code): Set constant pool on
	model_bytecode_block.
	* model/bytecode.hh (model_bytecode_block::cpool): New field.
	(model_bytecode_block): Initialize it.
	(model_bytecode_block::set_constant_pool): New method.
	(model_bytecode_block::get_constant_pool): Likewise.

	* tree/builtins.hh (tree_builtins::find_decl): Now public.
	* tree/lower.cc (visit_bytecode_block): Fixes to CALL_EXPR
	and unused variables.

	* tree/tree.cc (visit_catch): Use new method.
	(visit_do): Fixed label creation and use.
	(visit_label): Likewise.
	(visit_switch_block): Likewise.
	(visit_switch): Fixed case label creation.
	(visit_throw): Fixed build of CALL_EXPR.
	(visit_while): Fixed label creation and use.
	(visit_array_ref): Fixed array reference creation.
	(arith_shift): Find unsigned type correctly.
	(visit_cast): Fixed build of CALL_EXPR.
	(build_class_ref): Hacked.
	(handle_invocation): Fixed build of CALL_EXPR.
	(visit_new): Likewise.
	(visit_new_array): Find array's type.
	* tree/builtins.cc (build_exception_object_ref): New method.
	* tree/builtins.hh (tree_builtins::build_exception_object_ref):
	Declare.

	* tree/glue.hh: Include cgraph.h.
	(class): Don't define.
	* tree/treegen.cc (generate): Emit classes and fields.

	* tree/builtins.hh (tree_builtins::find_decl): Declare.
	* tree/builtins.cc (find_decl): New method.
	(init): Hacked.
	(old_abi_p): Don't just abort.
	(map_field_ref): Fixed call to build4.
	(lay_out_vtable): Use BINFO_VTABLE.
	(build_array_reference): Many fixes.

2004-07-25  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (build_array_reference): Use GE_EXPR.

	* source/lex.hh (lexer::skip_whitespace): Updated.
	* source/lex.cc (skip_whitespace): Added location argument.
	(get_token_internal): Updated.

	* tree/lower.cc: Use buildN functions.
	* tree/builtins.cc: Use buildN functions.
	* tree/tree.cc: Use buildN functions.

	* bytecode/generate.cc (visit_class_ref): Handle primitive type
	like array type.
	* model/class.cc (check_members): Skip synthetic methods.

	* model/classref.cc (resolve): Add class members.

2004-07-24  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_class_ref): Call `class$' if
	needed.
	* model/class.cc (add_class_members): New method.
	* compiler.cc (compiler): Initialize new fields.
	* compiler.hh (compiler::java_lang_ClassNotFoundException): New
	field.
	(compiler::java_lang_NoClassDefFoundError): Likewise.
	* model/class.hh (model_class::class_): New field.
	(model_class::add_class_members): Declare.

	* model/method.cc (note_throw_type): Handle instance
	initializers.
	* model/class.cc (create_finit_method): Updated comment.

	* model/class.cc (get_this_0): Resolve the new field.

	* model/invoke.hh (model_super_invocation::set_enclosing_class):
	Removed assertion.
	* model/invoke.cc (determine_search_class): Removed assertion.

	* model/class.hh (model_class::resolve_classes): Declare.
	(model_class::resolve_classes): No longer virtual.
	(model_class::do_resolve_classes): Declare.
	* model/new.cc (determine_search_class): Pass scope to
	resolve_classes.
	* model/declstmt.cc (resolve): Pass scope to resolve_classes.
	* model/class.cc (do_resolve_classes): New method.
	(resolve_classes): New overload.
	(resolve_classes): Rewrote.

	* model/declstmt.cc (resolve): Added comment.

	* model/assign.cc (extra_check): New method.
	* model/assign.hh (model_op_assignment::extra_check): Declare.

	* model/class.cc (resolve): Check for static context before
	calling check_members.

	* model/new.cc (determine_search_class): Set `klass'.
	* model/new.hh (class model_new): Added comment.

	* model/invoke.cc (visit): Conditionally visit finit.

	* model/class.cc (create_finit_method): Push finit_ on lists
	directly.
	* model/invoke.cc (resolve): Create and resolve finit$
	invocation.
	(visit): Visit `finit'.
	* model/invoke.hh (model_super_invocation::finit): New field.
	* model/class.hh (model_class::get_finit_method): New method.

	* bytecode/generate.hh (bytecode_generator::handle_valueof):
	Declare.
	* bytecode/generate.cc (visit_arith_binary): Optimize when lhs is
	empty string.
	(handle_valueof): New method.
	(visit_conditional): Special cases for STRING.
	(handle_op_assignment): Examine string_plus_type.

	* model/method.cc (clean_up): Uncommented.
	* model/declstmt.cc (resolve): Add class to its declaring class.
	* model/class.cc (add): Put local classes on `anon_classes'.

	* model/invoke.hh (model_super_invocation::resolve): Declare.
	* model/invoke.cc (resolve): Set static context.
	(resolve): New method.
	* scope.hh (class push_static): New class.

	* model/field.cc (constant_p): Set static flag on scope.

2004-07-23  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve): Call check_members later.
	(check_members): Allow constant fields.

	* bytecode/generate.cc (visit_this): Changed loop's test.

	* bytecode/block.cc (optimize): Added extra test.

	* model/class.cc (resolve_members): Resolve classes on new
	constructor.
	(add_anonymous_constructor): Likewise.
	* model/constructor.cc (resolve_classes): New method.
	(resolve): Add this$0 parameter in resolve_classes.
	* model/method.hh (model_method::resolve_classes): Now virtual.
	* model/constructor.hh (model_constructor::resolve_classes):
	Declare.

	* model/class.cc (add_implicit_constructor): Create a
	model_constructor.
	* bytecode/definer.cc (handle_method): Create a model_constructor
	if needed.

	* model/class.cc (add_captured_variable): Push field onto field
	list.
	(get_this_0): Likewise.
	* model/constructor.cc (resolve): Set this$0 field.

	* model/block.hh (model_block::resolve): Updated comment.

2004-07-22  Tom Tromey  <tromey@redhat.com>

	* bytecode/locals.cc (request): Resize `used'.

	* model/field.cc (model_field): Updated.
	* bytecode/definer.cc (handle_synthetic): Set class as synthetic.
	* model/imodifiable.cc (implicitly_public): Check `synthetic'.
	(implicit_modifier): Likewise.
	* model/class.cc (apply_type_map): Use set_synthetic.
	* model/field.hh (model_field::synthetic): Removed.
	(model_field::set_synthetic): Likewise.
	(model_field::synthetic_p): Likewise.
	* model/method.hh (model_method::synthetic): Removed.
	(model_method): Updated.
	(model_method::set_synthetic): Removed.
	(model_method::synthetic_p): Likewise.
	* model/imodifiable.hh (IModifiable::synthetic): New field.
	(IModifiable): Initialize it.
	(IModifiable::set_synthetic): New method.
	(IModifiable::synthetic_p): Likewise.

	* model/method.hh (model_method::resolve): Now virtual.

	* model/new.cc (determine_search_class): Changed handling of
	anonymous classes.
	* model/class.cc (add_anonymous_constructor): Resolve new
	constructor.
	* model/invoke.cc (determine_search_class): Compute qualifying
	expression and put it on the argument list.

	* model/class.cc (add_captured_constructor_arguments): Updated.
	* name.cc (create_variable_reference): Updated.
	* model/varref.hh (model_simple_variable_ref): New constructor.

	* model/invoke.cc (resolve): Put this$0 argument into this()
	call.
	* model/new.cc (determine_search_class): Push `immediate' at the
	front of the argument list.
	* model/class.cc (resolve_members): Add this$0 argument to
	constructor if needed.
	(add_anonymous_constructor): Likewise.  Also, create a
	model_constructor.
	* typedefs.hh: Include model/constructor.hh.
	* source/parse.cc (any_method_declarator): Create a
	model_constructor when needed.
	* model/constructor.cc: New file.
	* model/method.cc (add_parameter): Removed.
	(set_other_this): Likewise.
	* model/constructor.hh: New file.
	* model/method.hh (class model_method): Fields now protected.
	(model_method::constructor_p): Now virtual.
	(model_method::add_parameter): Just abort.
	(model_method::other_this): Removed.
	(model_method::set_other_this): Likewise.
	(model_method): Updated.

2004-07-21  Tom Tromey  <tromey@redhat.com>

	* access.cc (trampoline_required_p): New function.
	* access.hh (trampoline_required_p): Declare.

2004-07-20  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_this): Handle outer class
	references.

	* bytecode/generate.cc (visit_new_array): Emit correct array
	type.

	* bytecode/generate.cc (visit_switch): Always sort indices.

	* bytecode/definer.cc (parse): Set declaring class.

	* model/method.cc (add_parameter): Clear signature.
	* model/class.cc (add_captured_constructor_arguments): Do nothing
	if there are no captured arguments.

	* bytecode/relocation.cc (update): Only advance if block can
	complete normally.

2004-07-19  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (generate): Updated.
	* bytecode/block.hh (bytecode_block::mark): Updated.
	* bytecode/block.cc (optimize): Retain reference counting for
	relocations.
	(mark): Changed argument to set.

	* bytecode/block.hh (class bytecode_block): Fixed comment.

	* bytecode/block.cc (optimize): Fixed goto-to-goto optimization.
	Include conditional branches.

	* bytecode/block.cc (clone): Copy the relocation.
	* bytecode/relocation.cc (relocation): New constructor.
	* bytecode/relocation.hh (relocation::relocation): Declare.

	* bytecode/generate.cc (call_cleanups): Changed exit condition for
	loop to ensure correct cleanups run.

	* bytecode/outpool.cc (add): Maybe emit InterfaceMethodRef.

	* bytecode/generate.cc (handle_invocation): Emit invokeinterface
	bytes after constant pool reference.

2004-07-19  Ranjit Mathew  <rmathew@hotmail.com>

	Allow reading JAR/ZIP files in the classpath.
	* Makefile (MY_LDFLAGS): Added -lz for linking in zlib.
	(reader_sources): Added zereader.cc and zebuffer.cc.
	(HEADERS): Added zereader.hh and zebuffer.hh.
	* main.cc (main): Use class_factory::get_class_factory.
	* factory.hh (class_factory): New method get_class_factory.
	(directory_class_factory, jar_class_factory,
	solib_class_factory): Make constructor private.
	(jar_class_factory): New methods read_zip_archive and find_zip_entry.
	New fields arch_fd and zip_entries.
	* factory.cc: Define O_BINARY, SEEK_SET, SEEK_CUR, SEEK_END for
	systems that do not have these.
	(jar_file_p, solib_file_p, get_class_factory): New methods.
	(makeword, makelong, dostime_to_unixtime, zip_signature_p): Likewise.
	(find_zip_entry, read_zip_archive): Likewise.
	(find_source_file, find_derived_file, ~jar_class_factory): Implement.
	* reader/zebuffer.hh: New file.
	* reader/zebuffer.cc: Likewise.
	* reader/zereader.hh: Likewise.
	* reader/zereader.cc: Likewise.

2004-07-19  Tom Tromey  <tromey@redhat.com>

	* model/unit.hh (model_unit_class::find_class_from_signature):
	Updated.
	* name.cc (classify_type_signature): Updated.
	* model/unit.cc (find_class_from_signature): Added `scope'
	argument and `request' arguments.

	* bytecode/relocation.cc (perform): Updated.
	(conditional_p): Likewise.
	* bytecode/relocation.hh (enum relocation_kind): Added ifle and
	long_ifle.

	* model/class.cc (add): Not an error for <clinit> to be final in
	an interface.

	* bytecode/classwriter.cc (write): Use new constants.
	* bytecode/classreader.cc (parse_preamble): Allow any version
	number.
	* bytecode/cpool.hh: Moved constants to constants.hh.
	* bytecode/constants.hh: New file.

2004-07-18  Tom Tromey  <tromey@redhat.com>

	* bytecode/definer.cc (handle_inner_class): Inner name is utf8,
	not class.
	(handle_inner_class): Set is_member.
	* model/unit.hh (model_unit_class::find_top_level_class):
	Declare.
	* model/unit.cc (resolve): Load all inner classes.
	(find_top_level_class): New method.

2004-07-17  Tom Tromey  <tromey@redhat.com>

	* model/unit.hh (model_unit::resolved): New field.
	(model_unit): Initialize it.
	(model_unit_source::resolved): Removed.
	(model_unit_source): Don't initialize field.

	* reader/classbytes.cc (apply): Updated.
	* bytecode/definer.cc (parse): Set filename on compilation unit.
	* bytecode/definer.hh (defining_class_reader::parse): Added
	argument.

2004-07-17  Ranjit Mathew  <rmathew@hotmail.com>

	* Makefile (clean): Use 'rm -f' to suppress file not present
	warnings. Clean 'lextest' as well.
	(typedefs.hh.gch): Use 'rm -f' as above.
	(HEADERS): Remove broken dependency on 'thread/local.hh'

2004-07-16  Tom Tromey  <tromey@redhat.com>

	* tree/lower.cc (array_access): Wrote.
	* tree/builtins.cc (build_array_reference): New method.
	* tree/builtins.hh (tree_builtins::build_array_reference):
	Declare.
	* tree/tree.cc (visit_assert): Fix call to map_field.
	(visit_array_ref): Rewrote.

	* tree/tree.cc: Include cpool.hh.
	* tree/tree.hh (tree_generator::load): Declare.
	(tree_generator::store): Likewise.
	(tree_generator::array_store): Likewise.
	(tree_generator::find_local_slot): Likewise.
	(tree_generator::array_access): Likewise.
	* tree/lower.cc (load): New method.
	(store): Likewise.
	(array_store): Likewise.
	(find_local_slot): Likewise.
	(array_access): Likewise.
	* tree/builtins.hh (tree_builtins::lay_out_vtable): Declare.
	(tree_builtins::type_juint): New field.
	(tree_builtins::type_julong): New field.
	(tree_builtins::map_field_ref): New overload.
	* tree/builtins.cc (lay_out_vtable): New method.
	(lay_out_class): Use it.
	(map_method_call): Updated.
	(builtin_type): Handle unsigned types.
	(tree_builtins): Initialize new types.

	* tree/glue.hh (TARGET_VTABLE_USES_DESCRIPTORS): Temporary
	define.

	* tree/treegen.cc: Include builtins.hh.

	* tree/glue.hh (class): New define.

2004-07-15  Tom Tromey  <tromey@redhat.com>

	* header/cni.cc (write_method): Emit `deprecated'.

	* source/lex.cc (single_line_comment): No error if comment
	unterminated.

	* model/unit.cc (find_class_from_signature): Updated.
	* model/unit.hh (model_unit_class::inner_class): New struct.
	(model_unit_class::inners): New field.
	(model_unit_class): Added parameter.
	* bytecode/definer.hh (defining_class_reader::unsplit_name): New
	field.
	(defining_class_reader::inner_infos): Likewise.
	(defining_class_reader::is_member): New field.
	(defining_class_reader::outer_name): Likewise.
	* bytecode/definer.cc (handle_inner_class): Wrote.
	(start_class): Set unsplit_name.
	(defining_class_reader): Updated.
	(parse): Set name here...
	(start_class): ... not here.

2004-07-14  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (write): Updated.
	* compiler.cc: Include directory.hh.
	(generate_code): Create directory cache.  Generate CNI headers as
	well.
	* tree/treegen.cc (tree_code_generator): Updated.
	* tree/treegen.hh (tree_code_generator): Updated.
	* header/jnistub.cc (jni_stub_generator): Updated.
	* header/jnistub.hh (jni_stub_generator): Updated.
	* header/jni.cc (jni_code_generator): Updated.
	* header/jni.hh (jni_code_generator): Updated.
	* directory.cc (add): Updated.
	* directory.hh (directory_cache::suffix): Removed.
	(directory_cache): Updated.
	(directory_cache::add): Updated.
	* bytecode/bytegen.cc (bytecode_code_generator): Updated.
	(generate): Updated.
	* bytecode/bytegen.hh (bytecode_code_generator::cache): Removed.
	(bytecode_code_generator): Updated.
	* codegen.hh (code_generator::directories): New field.
	(code_generator): Added argument.
	* header/cni.hh: Updated.
	(cni_code_generator::cache): Removed.
	(cni_code_generator): Updated.
	* bytecode/classwriter.hh: Updated.
	* directory.cc, directory.hh: Moved from bytecode directory.
	* header/cni.cc (generate): Declare methods defined in
	interfaces.
	(cni_code_generator): Updated.
	(generate): Updated.
	* model/class.hh (model_class::get_all_methods): New method.

	* Makefile: Updated.
	* bytecode/classreader.cc, bytecode/classreader.hh,
	bytecode/cpool.hh, bytecode/definer.cc, bytecode/definer.hh,
	source/chartables.h, source/gen-table.pl, source/keyword.gperf,
	source/keyword.h, source/lex.cc, source/lex.hh, source/machine.hh,
	source/parse.cc, source/parse.hh, source/token.hh,
	source/tstream.cc, source/tstream.hh, source/ucs2.cc,
	source/ucs2.hh: Moved out of top-level directory.

	* defassign.cc (static_init): New field.
	(instance_init): Likewise.
	(definite_assignment_visitor::visit_field_ref): Updated.
	(definite_assignment_visitor::visit_method): Likewise.
	(definite_assignment_visitor::current_class): New field.
	(definite_assignment_visitor): Updated.
	(definite_assignment_visitor::constructor): New field.

	* model/unit.cc (find_local_class): Allow duplicate
	import-on-demands.

	* model/method.hh (model_method::exception_handled_p): New
	method.
	* model/throwsclause.cc (model_throws_clause): Look for
	superclass of each throwable.
	* model/invoke.cc (find_method): Invert test for maximality.
	* model/method.cc (more_specific_p): Don't check invocation
	conversion of declaring classes.

	* model/class.hh (model_class::check_members): Declare.
	* model/class.cc (add): Removed invalid check.
	(check_members): New method.
	(resolve): Use it.

	* defassign.cc (definite_assignment_visitor::visit_method):
	Special handling for instance and static initializers.

	* model/class.cc (compute_object_interface_methods): Remove
	`final' flag.

2004-07-13  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (hides_or_overrides_p): Error to override or
	hide final method.

	* model/method.cc (hides_or_overrides_p): Removed commented-out
	code.
	* model/method.hh (model_method::override): Removed.
	(model_method::overrides_p): Likewise.
	* model/class.cc (compute_object_interface_methods): New method.
	(resolve_members): Call it.
	(inherit_methods): Use new methods.
	* compiler.hh (compiler::object_interface_methods): New field.
	(compiler::set_object_interface_methods): New method.
	(compiler::get_object_interface_methods): Likewise.

	* model/invoke.cc (resolve): Error for type-qualified call to
	static method.

	* model/assign.cc (check_lhs): Don't allow assignment to array's
	`length' field.

2004-07-12  Tom Tromey  <tromey@redhat.com>

	* defassign.cc (variable_state::intersect): Don't introduce new
	mappings.
	(definite_assignment_visitor::visit_bytecode_block): Do nothing.
	(definite_assignment_visitor::visit_do): Rewrote.
	(definite_assignment_visitor::visit_label): Register label
	target.
	(definite_assignment_visitor::visit_return): Propagate branch
	upward.
	(definite_assignment_visitor::visit_throw): Likewise.
	(definite_assignment_visitor::visit_switch): Rewrote.
	(definite_assignment_visitor::visit_while): Likewise.
	(definite_assignment_visitor::handle_var_ref): New method.
	(definite_assignment_visitor::visit_simple_variable_ref): Use it.
	(definite_assignment_visitor::visit_variable_stmt): Likewise.
	(definite_assignment_visitor::visit_instanceof): Result is
	boolean.
	(definite_assignment_visitor::target_stack): New field.
	(definite_assignment_visitor::propagate_branch): New method.
	(definite_assignment_visitor::visit_try): Rewrote.
	(definite_assignment_visitor::loop_depth): New field.

	* model/method.cc: Include defassign.hh.
	(resolve): Check definite assignment.

2004-07-11  Tom Tromey  <tromey@redhat.com>

	* model/variable.hh (model_variable_decl::final_p): Now const.
	* defassign.cc: More work.

	* name.cc (classify_type_name): Only return accessible classes.
	* model/unit.cc (find_local_class): Only return accessible
	classes.

	* model/invoke.cc (determine_search_class): Handle case where
	there is no enclosing class.
	* parse.cc (primary): Handle "primary . super".

	* name.cc (create_variable_reference): Error if referenced
	variable is not final.

	* parse.cc (find_lexically_enclosing_loop): Handle class
	boundary.
	(labeled_statement): Likewise.
	(class_body): Push a class boundary on the label stack.

	* typedefs.hh: Include imember.hh.
	* access.hh (accessible_p): Updated.
	* access.cc (accessible_p): Changed interface.
	(accessible_p): Removed some overloads.
	(check_access): Removed.
	* parse.cc (new_something): Updated.
	(set_containing_class): Likewise.
	* model/class.hh (class model_class): Extend IMember.
	* model/method.hh (class model_method): Extend IMember.
	* model/imember.hh: New file.
	* model/fwdmem.hh: New file.
	* model/variable.hh (class model_variable_decl): Extend IMember.

	* model/fieldref.cc (resolve): Handle qualifier for `super'
	reference specially.
	* name.hh (classify_field_name): Updated.
	* name.cc (classify_field_name): Added argument.

	* model/class.hh (resolution_state_value): Added DOING_MEMBERS.
	* model/class.cc (resolve_classes): Use inherit_types.
	(compute_super_types): New method.
	(resolve_members): Use it.

2004-07-10  Tom Tromey  <tromey@redhat.com>

	* access.cc (accessible_p): Updated protected access handling.
	(check_access): Changed argument to IContext.
	(accessible_p): Updated.
	(get_top_level_class): New function.
	* model/new.cc (determine_search_class): Updated.
	* model/new.hh (model_new::determine_search_class): Updated.
	* model/invoke.hh (model_invocation_base::determine_search_class): 
	Changed interface.
	* model/invoke.cc (find_method): Updated.
	(determine_search_class): Updated.
	* bytecode/generate.cc (find_method): Updated.
	* model/class.hh (model_class::find_members): Moved to .cc file.
	(model_class::field_map): Now a multimap.
	(model_class::local_field_map): Removed.
	(model_class::ambiguous_field_map): New field.
	(model_class::inherit_fields): Declare.
	(model_class::all_member_classes): New field.
	* model/class.cc (inherit_fields): New method.
	(resolve_members): Use it.  Don't update all_methods.
	(find_members): Removed template function.
	(find_members): New method.
	(get_this_0): Updated.
	(add_assert_members): Likewise.
	Removed instantiations.
	(inherit_types): New method.

2004-07-09  Tom Tromey  <tromey@redhat.com>

	* model/unit.cc (resolve): Use package to check accessibility.
	* model/class.hh (model_class::method_inheritable_p): Updated.
	(model_class::find_members): Updated.
	* model/class.cc (method_inheritable_p): Added argument.  Updated
	use of accessible_p.
	(inherit_methods): Updated.
	(find_members): Updated use of accessible_p.  Added `qualifier'
	argument.
	* access.hh (accessible_p): Updated.
	* access.cc (accessible_p): Added arguments.
	(check_access): Added argument; handle `protected' checks
	properly.
	(accessible_p): New function.

2004-07-08  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (hides_or_overrides_p): Class inherits all
	abstract methods.

	* bytecode/generate.cc (compare): New function.
	(visit_switch): Sort indices for tableswitch.

	* bytecode/block.cc (relocate): Updated.  Added assertion.
	* bytecode/relocation.hh (relocation::perform): Updated.
	* bytecode/relocation.cc (perform): Added `block_start' argument.

	* bytecode/generate.cc (visit_switch): Increment `where' in
	tableswitch loop.  Emit default relocation.

	* bytecode/generate.cc (wide_p): Removed.
	* bytecode/generate.hh (bytecode_generator::wide_p): Removed.
	* bytecode/byteutil.hh (wide_p): New function.
	* bytecode/locals.cc (request): Update for wide types.
	(remove): Likewise.
	* bytecode/generate.cc (visit_catch): Store exception object in
	local variable slot.
	(visit_try): Note stack effects of exception object.
	(handle_block_statements): Updated.

	* reader/source.cc: Don't include stdio.h.
	(apply): Use new flag.
	* reader/classbytes.cc: Don't include stdio.h.
	(apply): Use new flag.
	* bytecode/classwriter.cc (write): Use new flag.
	* compiler.cc (semantic_analysis): Use new flag.
	* compiler.hh (compiler::verbose): New field.

	* model/invoke.cc (resolve): New method.
	* model/invoke.hh (model_type_qualified_invocation::resolve):
	Declare.

	* model/switch.cc (resolve): Push a new block.

2004-07-07  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::hides_or_overrides_p): Updated.
	* model/method.cc (hides_or_overrides_p): Allow "conflicting"
	throws clauses for two abstract methods.
	(hides_or_overrides_p): Added argument.
	* model/class.hh (class model_class): Updated.
	(model_class::resolution_state_value): Added PRE_MEMBERS.
	(model_class::find_members): Use resolve_members.
	* model/class.cc (method_inheritable_p): New method.
	(inherit_methods): Likewise.
	(resolve_members): New method.
	(resolve_classes): Use resolve_members.
	(resolve): Likewise.

	* classreader.cc (parse_class): Added gcj hack.

	* model/class.cc (resolve_classes): Error for abstract method in
	concrete class.

	* model/class.cc (resolve): Error if static field of inner class
	is not a constant.
	* model/field.cc (constant_p): Removed old comment.

	* parse.cc (explicit_constructor_invocation): Create implicit
	super() call if needed.
	(constructor_body): Rewrote.
	Include typedefs.hh.
	* model/exprstmt.hh (model_expression_stmt::get_expression): New
	method.
	* model/block.hh (model_block::get_statements): Declare.

2004-07-06  Tom Tromey  <tromey@redhat.com>

	* ucs2.cc: Include typedefs.hh.
	* ucs2.hh: Don't include typedefs.hh.
	* tstream.cc: Include typedefs.hh.
	* lex.hh: Don't include typedefs.hh.

	* model/primitive.hh (model_int_primitive::mod): Don't allow mod
	by zero.  Handle special mod case.
	* model/primitive.cc (divide): Don't allow division by zero.
	Handle special division case.

	* model/binary.cc (compute_constant_p): New methods.
	* model/binary.hh (model_arith_binary::compute_constant_p):
	Declare.

	* bytecode/generate.cc (close_stringbuffer): Reverted previous
	patch.
	(visit_arith_binary): Handle IGNORE case here.

	* bytecode/generate.cc (close_stringbuffer): Handle IGNORE case.
	(visit_arith_binary): Close scope earlier.

	* model/varstmt.cc (resolve): Allow for field shadowing.
	* typedefs.hh: Move varstmt.hh before catch.hh.
	* model/catch.cc (resolve): Use model_variable_stmt::resolve.
	(visit): Updated.
	* model/varstmt.hh (model_variable_stmt::vars): Now protected.
	* model/catch.hh (class model_catch): Now a model_variable_stmt.
	(model_catch): Updated.
	(model_catch::var): Removed.
	(model_catch::set_formal_parameter): Rewrote.
	(model_catch::get_parameter_type): Likewise.

	* model/varstmt.cc (resolve): Moved from .hh file.  Check for
	shadowing.  Push variable into scope earlier.

	* model/varstmt.hh (model_variable_stmt::resolve): Moved to .cc
	file.

	* scope.hh (resolution_scope::set_static): Accept argument.
	* model/class.cc (resolve): Set static context when resolving
	static field.
	* model/invoke.cc (determine_search_class): Can't use `super' in
	static context.
	* model/fieldref.cc (resolve): Can't use `super' in static
	context.

	* model/this.cc (resolve): Error if current class is static.
	Throw the error.
	* model/fieldref.cc: Reverted previous change.  Updated error
	message.
	(resolve): Correctly determine which enclosing class to use.
	* model/invoke.cc: Likewise.
	(handle_resolve): Throw error.  Correctly determine which
	enclosing class to use.

2004-07-05  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (handle_resolve): Error if non-static method
	used in static context.
	* model/fieldref.cc (resolve): Error if non-static field used in
	static context.

	* bytecode/generate.cc (visit_assert): Do nothing if assertion
	expression is constant.  Call reduce_stack.

	* model/arrayinit.cc (resolve): Allow assignment conversion to
	introduce cast.  Fold each expression.
	* bytecode/generate.hh (bytecode_generator::emit_pop): Declare.
	* bytecode/generate.cc (visit_variable_stmt): Call reduce_stack.
	(handle_block_statements): Added assertion.
	(visit_conditional): Define false_bytes in CONDITIONAL case.
	(visit_return): Call reduce_stack.
	(visit_simple_literal): Don't call increase_stack.
	(visit_throw): Call reduce_stack and increase_stack as needed.
	(dereference_left_hand_side): Don't call increase_stack.
	(visit_synchronized): Call reduce_stack.
	(visit_array_initializer): Don't call increase_stack.
	(emit_pop): New method.
	(visit_array_ref): Use it.
	(visit_cast): Likewise.
	(visit_class_ref): Likewise.
	(visit_field_ref): Likewise.
	(visit_new): Likewise.
	(handle_invocation): Likewise.
	(visit_switch): Use reduce_stack.  Handle no-branch case
	correctly.
	(emit_cast): Correctly manipulate stack.
	(arith_shift): Likewise.

2004-07-04  Tom Tromey  <tromey@redhat.com>

	* model/try.cc (compute_normal_completion): Added comment.
	Renamed inner variable.  Set and clear `flag' as needed.

	* model/class.cc (add_captured_constructor_arguments): Compute
	normal completion on new body.
	* model/init.cc (resolve): Moved some error checking to
	compute_normal_completion.
	(compute_normal_completion): New method.
	* model/init.hh (class model_initializer_block): Updated.
	* model/try.cc (compute_normal_completion): Renamed, updated.
	(compute_normal_completion): Call propagate_exceptions here.
	* model/try.hh (model_try::compute_normal_completion): Declare.
	(model_try::can_complete_normally): Removed.
	(model_try::finally_can_complete_normally): New method.
	* model/while.cc (compute_normal_completion): Updated.
	* model/while.hh (class model_while): Updated.
	* model/varstmt.hh (class model_variable_stmt): Updated.
	* model/throw.hh (class model_throw): Updated.
	* model/synchronized.cc (compute_normal_completion): New method.
	* model/synchronized.hh (class model_synchronized): Updated.
	* model/switch.cc (compute_normal_completion): New method.
	* model/switch.hh (class model_switch_block): Updated.
	(class model_switch): Updated.
	* model/return.hh (class model_return): Updated.
	* model/method.cc (resolve): Updated.
	* model/label.cc (compute_normal_completion): New method.
	* model/label.hh (class model_label): Updated.
	* model/if.cc (compute_normal_completion): New method.
	(resolve): Moved some error checking to
	compute_normal_completion.
	* model/if.hh (class model_if): Updated.
	* model/for.cc (compute_normal_completion): New method.
	* model/for.hh (class model_for): Updated.
	* model/forenhanced.hh (class model_for_enhanced): Updated.
	* model/forenhanced.cc (compute_normal_completion): New method.
	* model/exprstmt.hh (class model_expression_stmt): Updated.
	* model/empty.hh (class model_empty): Updated.
	* model/do.cc (compute_normal_completion): Updated.
	* model/do.hh (class model_do): Updated.
	* model/declstmt.hh (class model_class_decl_stmt): Updated.
	* model/continue.hh (class model_continue): Updated.
	* model/continue.cc (compute_normal_completion): New method.
	* model/catch.cc (compute_normal_completion): New method.
	* model/catch.hh (class model_catch): Updated.
	* model/bytecode.hh (class model_bytecode_block): Updated.
	* model/break.cc (compute_normal_completion): New method.
	* model/break.hh (class model_break): Updated.
	* model/block.cc (compute_normal_completion): New method.
	* model/block.hh (class model_block): Updated.
	* model/assert.hh (class model_assert): Updated.
	* model/stmt.cc (can_goto_p): New method.
	(compute_normal_completion): Renamed.  Added argument.
	* model/stmt.hh (model_stmt::normal_completion): New field.
	(model_stmt::can_complete_normally): Rewrote.  No longer virtual.
	(model_stmt::compute_normal_completion): Declare.
	(class normal_completion_state): New class.
	(class normal_completion_pusher): Likewise.
	(compute_normal_completion): Renamed.

	* model/switch.hh (class model_switch_block): Updated.
	* model/switch.cc (resolve): Changed type of `seen' argument.

	* model/value.hh (convert_from_float): Correct result in ordinary
	case.
	* bytecode/generate.cc (visit_simple_literal): Use emit_ldc2.

	* model/assign.hh (class model_clinit_assignment): Updated
	comment.
	* model/class.cc (add): Don't clear field's initializer.  Always
	use a model_clinit_assignment.
	* model/fieldref.cc (resolve): Set synthetic_expr.
	(string_value): Use synthetic_expr.
	(value): Likewise.
	* model/fieldref.hh (model_field_ref::synthetic_expr): New field.
	(model_field_ref): Initialize new field.
	(model_field_ref::compute_constant_p): Use synthetic_expr.

	* parse.cc (new_something): Handle force_class case more
	correctly.

	* bytecode/generate.cc (visit_simple_literal): Correctly handle
	IGNORE case.
	(visit_conditional): Handle CONDITIONAL and IGNORE cases
	correctly.

	* model/unit.cc (resolve): No import is in an import's scope.

	* lex.cc (numeric_literal): Added some overflow checking.
	* name.cc (classify_ambiguous_name): Throw exception if field
	qualifier is not reference type.
	* model/binary.cc (resolve): Error if argument not numeric.
	(resolve): Better error reporting.

	* lex.cc (numeric_literal): Updated.  Throw error on underflow or
	overflow.
	* model/value.cc (string_to_double): Updated.
	(string_to_float): Updated.
	* model/value.hh (string_to_double): Changed arguments.
	(string_to_float): Likewise.

	* chartables.h: Rebuilt.
	* lex.cc (get_token_internal): Use UNICODE_SUBSTITUTE.
	* gen-table.pl (%want): Use SUBSTITUTE, not UNIT SEPARATOR.

	* parse.cc (primary): Pass `true' to new_something.

	* model/assign.cc (resolve): Use casting conversion, not
	assignment conversion.

	* model/assign.cc (resolve): Ensure result of operator is
	assignment compatible with left hand side.

2004-07-03  Tom Tromey  <tromey@redhat.com>

	* model/unit.cc (find_class_from_signature): Handle case where
	name has a single element.

	* lex.cc (numeric_literal): Use new functions.  Don't give error
	if octal digit is out of range.
	* model/value.cc (string_to_double): New function.
	(string_to_float): Likewise.
	* model/value.hh (string_to_double): Declare.
	(string_to_float): Likewise.

	* main.cc (main): Updated.
	* compiler.hh (compiler::warn_array_index): New field.
	* model/newarray.cc (resolve): Added error checking.

	* model/invoke.cc (find_method): Use model_throws_clause.
	* typedefs.hh: Include throwsclause.hh.
	* model/throwsclause.cc: New file.
	* model/throwsclause.hh: New file.
	* model/method.cc (get_throws_as_set): Removed.
	(resolve_classes): Updated.
	(note_throw_type): Likewise.
	(apply_type_map): Likewise.
	(propagate_throws): Removed.
	(hides_or_overrides_p): Check for compatible throws clauses.
	* model/method.hh (model_method::get_throws): Rewrote.
	(model_method::get_throws_as_set): Rewrote; now in .hh file.
	(model_method::propagate_exceptions): Likewise.
	(model_method::throw_decls): Changed type.

	* model/method.hh (class model_method): Added comment.
	* model/method.cc (hides_or_overrides_p): Error if non-static
	overrides static.  Check access flags.

	* parse.hh (parse::set_containing_class): Declare.
	* parse.cc (set_containing_class): New method.
	(interface_declaration): Use it.
	(class_declaration): Likewise.
	(new_something): Added comment.

	* model/class.cc (add): More errors for interface methods.
	Rearranged.  Report other errors against the method.
	(add): Error checking for interface fields.
	* model/unary.cc (ensure_variable): Error if variable is final.
	* model/variable.hh (model_variable_decl::final_p): New method.
	* model/fieldref.hh (model_field_ref::get_field): New method.
	* model/field.hh (model_field::final_p): New method.

	* model/binary.cc (resolve): Rewrote.

	* model/arrayref.cc (resolve): Array index can't be `long'.

	* parse.cc (member_decl): Changed parsing of constructors.

	* model/class.cc (resolve_classes): Error if interface appears
	twice.

2004-07-02  Tom Tromey  <tromey@redhat.com>

	* model/try.cc (propagate_exceptions): Propagate from
	catch_block_exceptions.
	* model/try.hh (model_try::catch_block_exceptions): New field.
	(model_try::flag): Likewise.
	(model_try): Initialize it.
	(model_try::note_throw_type): Use it.

	* parse.cc (switch_block_statement_groups): Set default on result
	switch immediately.

	* tstream.cc (get_token): Updated.  Discard javadoc token if next
	token is also javadoc.
	* lex.hh (class lexer): Updated.
	* token.hh (enum token_value) [TOKEN_COMMENT]: Removed.
	* lex.cc (single_line_comment): Return void.
	(end_comment): Likewise.
	(multi_line_comment): Return TOKEN_REPEAT for ordinary comment.
	(get_token_internal): Updated.
	* chartables.h: Rebuilt.
	* gen-table.pl (process_one): Consider more characters as white
	space.

	* model/try.cc (can_complete_normally): Don't let unusual
	`finally' clause bypass other logic.

	* model/switch.hh (model_switch::set_default): Emit error.

	* model/class.cc (add): Error if class already defined.

	* model/label.cc (get_continue_target): Moved from .hh file.
	Rewrote.
	* model/label.hh (model_label::get_continue_target): Moved to .cc
	file.

	* model/import.cc (check_referenced): Conditionalize warning.
	* model/class.cc (resolve_classes): Conditionalize warning.
	* model/instanceof.cc (resolve): Conditionalize warning.
	* model/label.cc (resolve): New method.  Use new warning flag.
	* main.cc (main): Disable warnings for jacks.  Ignore -g.
	* model/label.hh (model_label::resolve): Moved to .cc file.
	* compiler.hh (compiler::warn_unused_label): New field.
	(compiler::warn_unneeded_extends): Likewise.

	* lex.cc (escape_sequence): Update octal_escape_index.  Always
	put back final character.

	* model/binary.cc (resolve): Error if `+' argument has void type.

	* bytecode/generate.cc (visit_array_ref): Handle IGNORE case.

	* model/value.cc (primitive_format): Correctly print jlong.

	* model/value.hh (double_to_words): Use maybe_swap.
	(words_to_double): Likewise.
	(words_to_long): Likewise.
	(long_to_words): Likewise.
	* util.cc (maybe_swap): New function.
	* util.hh (maybe_swap): Declare.

	* typedefs.hh (jlong): Now long long.

	* model/varref.cc (string_value): New method.
	* model/varref.hh (model_simple_variable_ref::string_value):
	Declare.

	* main.cc: Even more jacks hacks.

	* parse.cc (synchronized_statement): Require a block, not a
	statement.
	* model/synchronized.hh (model_synchronized::resolve): Error if
	type is null.

	* main.cc (main): More hacks for jacks.

	* conversions.cc (casting_conversion): Correctly handle cast from
	interface to array or final class.

	* model/binary.cc (resolve): Thinko fix.
	* model/cast.hh (model_cast::get_name): New method.
	* model/class.cc (assignable_from_p): Don't resolve classes on
	other class.

	* model/binary.cc (resolve): Arguments to bitwise operators must
	have integral type.

	* model/binary.cc (resolve): Throw error.

	* model/binary.cc: Removed old comment.
	(resolve): Operands of shift must be integral.

	* model/binary.cc (resolve): Check results of unary numeric
	promotion of lhs.

	* model/unary.hh (model_prefix_simple::resolve): Moved to .cc file.
	(model_unary::get_name): Declare.
	(model_prefix_simple::get_name): Likewise.
	(model_prefix_side_effect::get_name): Likewise.
	(model_postfix::get_name): Likewise.
	(model_unary::ensure_variable): Updated.
	* model/unary.cc (resolve): Fixed error message.
	(resolve): Moved from .hh file.
	Rearranged a little.
	(ensure_variable): Removed `name' argument.
	(resolve): Throw error when needed.
	(get_name): New methods.
	(resolve): Use it.

	* model/method.cc (set_other_this): New method.
	* model/invoke.cc (resolve): Removed old error.  Call
	set_other_this.
	* model/method.hh (model_method::other_this): New field.
	(model_method): Initialize it.

	* name.cc (classify_type_name): Updated.
	* model/unit.hh (model_unit::find_local_class): Added class
	argument.
	* model/unit.cc (resolve): Check for accessibility.

2004-07-01  Tom Tromey  <tromey@redhat.com>

	* model/assign.cc (resolve): Check lhs after resolution.

	* model/assign.cc (check_lhs): Put implicit `=' in error message.
	(handle_resolve): Updated.
	(resolve): Updated.
	* model/binary.cc (get_operator_name): New function.
	Updated all functions.
	* model/binary.hh (operator_name): New enum.
	(get_operator_name): Declare.
	(class model_arith_binary): Added NAME argument.
	(model_arith_binary::get_name): New method.
	(model_plus::get_name): Likewise.
	(class model_bitwise_binary): Added NAME argument.
	(model_bitwise_binary::get_name): New method.
	(class model_arith_shift): Added NAME argument.
	(model_arith_shift::get_name): New method.
	(class model_equality_comparison): Added NAME argument.
	(model_equality_comparison::get_name): New method.
	(class model_numeric_comparison): Added NAME argument.
	(model_numeric_comparison::get_name): New method.

	* compiler.hh (compiler_flag::operator=): New method.
	(compiler_warning::operator=): Likewise.

	* model/assign.cc (check_lhs): New method.
	(handle_resolve): Call it.
	(resolve): Likewise.
	* model/assign.hh (model_assignment::check_lhs): Declare.

	* bytecode/generate.cc (visit_simple_literal): Handle IGNORE
	case.
	(visit_string_literal): Likewise.

	* lex.cc (unget): Allow push back of EOF.

	* model/fieldref.cc (resolve): Error if qualifier is not
	reference.

	* conversions.cc (unary_numeric_promotion): Return NULL if
	argument is not numeric.
	(unary_numeric_promotion): Only wrap if result is not null.

	* conversions.cc (binary_numeric_promotion): Return NULL if one
	argument is not numeric.
	(binary_numeric_promotion): Only wrap if result is not null.

	* model/modifier.cc (add): Added duplicate error.  Fixed other
	error.  Update `modifiers'.

	* model/assert.cc (resolve): Added another special case.

	* bytecode/generate.cc (visit_switch): Handle case where there
	are no labels.

	* model/cond.cc (string_value): New method.
	* model/cond.hh (model_conditional::string_value): Declare.

	* model/primitive.hh (model_primitive_boolean::band): New method.
	(model_primitive_boolean::bor): Likewise.
	(model_primitive_boolean::bxor): Likewise.

	* model/binary.cc (resolve): Fixed error message.

	* model/cast.cc (string_value): New method.
	* model/cast.hh (model_cast::string_value): Declare.

	* model/binary.cc (value): Use promoted type to do comparison.

	* parse.cc (type_name): Added comment.
	(unary_expression_not_plus_minus) [TOKEN_OPEN_PAREN]: Correctly
	handle primitive casts.

	* model/varref.cc (value): New method.
	* model/varref.hh (model_simple_variable_ref::value): Declare.
	* model/cond.cc (value): New method.
	* model/cond.hh (model_conditional::value): Declare.
	* model/variable.cc (constant_p): Rewrote.

	* model/do.cc (can_complete_normally): Moved from .cc file.
	* model/do.hh (model_do::can_complete_normally): Moved to .cc
	file.
	* model/while.cc (can_complete_normally): Moved from .hh file.
	Mark body as unreachable when appropriate.
	* model/while.hh (model_while::can_complete_normally): Moved to
	.cc file.

	* model/switch.hh (model_switch_block::resolve): Updated.
	* model/switch.cc (resolve): Changed signature.  Check for
	duplicate values.
	(resolve): Updated.

	* model/binary.cc (value): Handle case of String comparison.

	* model/binary.cc (value): Use promoted_type.
	(resolve): Compute promoted_type.

	* bytecode/generate.cc (visit_switch): In optimization case, put
	literal value on stack.

	* parse.cc (array_initializer): Handle case of single "," in
	initializer.

	* conversions.cc (widening_conversion): Return NULL if one
	argument is `void'.
	(widening_reference_conversion): Updated assertion.
	(casting_conversion): Can't cast to/from void.

	* name.cc (classify_type_name): Check to see if search class is
	the one we're looking for.

	* model/unit.cc (resolve): Error if more than one public class in
	compilation unit.

2004-06-30  Tom Tromey  <tromey@redhat.com>

	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::warn_unreachable_catch): Removed.
	(compiler::java_lang_Exception): New field.
	* model/try.cc (resolve): Remove redundant check for shadowing.
	(propagate_exceptions): Removed old comment.
	(can_complete_normally): Ensure checked exceptions are actually
	thrown.  Error if catch clause is unreachable.

	* model/new.cc (determine_search_class): Added error.
	* model/invoke.cc (determine_search_class): Added error.
	* model/fieldref.cc (resolve): Added error.

	* format/format.hh (format_type): Updated definitions.
	* typedefs.hh (warning_state): New enum.
	* format/format.cc (operator<<): Formatting fix.
	* model/imodifiable.cc (implicitly_public): Updated.
	(implicit_modifier): Updated.
	* model/modifier.cc (add): Updated.  Uncomment warning.
	* model/try.cc (can_complete_normally): Updated.
	(resolve): Updated.
	* model/method.cc (resolve): Updated.
	(resolve_classes): Updated.
	(check_deprecated): Updated.
	(check_referenced): Updated.
	* model/invoke.cc (handle_resolve): Updated.
	* model/instanceof.cc (resolve): Updated.
	* model/import.cc (resolve): Updated.
	(resolve): Updated.
	* model/if.cc (resolve): Updated.
	* model/fieldref.cc (resolve): Updated.
	* model/field.cc (resolve): Updated.
	(check_deprecated): Updated.
	(check_referenced): Updated.
	* model/class.cc (check_deprecated): Updated.
	(check_referenced): Updated.
	* model/binary.cc (resolve): Updated.
	* model/assign.cc (handle_resolve): Updated.
	* model/element.hh (model_element::warn): New overload.
	* parse.hh (parse::warn): Removed.
	* parse.cc (warn): Removed.
	(any_method_declarator): Updated.
	(type_declaration): Updated.
	* lex.cc (extract_identifier): Pass warning flags to constructor.
	(read_handling_escapes): Likewise.
	(handle_keyword): Likewise.
	* compiler.hh (class compiler_warning): New class.
	(class compiler): Changed many fields to be `compiler_warning's.

	* model/method.cc (massage_modifiers): Static methods and
	constructors are not `final'.
	* model/class.cc (create_clinit_method): Static method not
	`final'.

	* access.cc (check_access): Allow access to protected member from
	body of declarer.
	* model/class.cc (add_captured_constructor_arguments): Resolve in
	constructor's context.
	(find_members): Check for accessibility of method.
	* model/method.cc (resolve): Removed old comment.

	* bytecode/classwriter.cc (write): Write to temporary file, then
	rename.

	* model/assign.cc (handle_resolve): New method.
	(resolve): Use it.
	(resolve): New method.
	* model/assign.hh (class model_clinit_assignment): New class.
	(model_assignment::handle_resolve): Declare.
	* model/class.cc (add): New method.
	(resolve): Add to list of static initializers.
	(add): Add special case for static initializer.

2004-06-29  Tom Tromey  <tromey@redhat.com>

	* model/memberref.hh (model_memberref_forward::get_real): New
	method.
	* model/exprstmt.cc (resolve): From .hh file.  Check for valid
	expression statements.
	* model/exprstmt.hh (model_expression_stmt::resolve): Moved to
	.cc file.
	* model/unary.cc (resolve): Call ensure_variable.
	(ensure_variable): New method.
	* model/unary.hh (model_unary::ensure_variable): Declare.

	* model/method.cc (apply_type_map): Parameterize `throws'.

	* model/typevar.cc (resolve_classes): Only the first bound can be
	a class.

	* compiler.cc (generate_code): Reverted to generating class
	files.

	* compiler.cc: Include cni.hh.
	* bytecode/bytegen.cc (bytecode_code_generator): Pass suffix
	argument to directory cache.
	* bytecode/directory.cc (add): Use `suffix'.
	* bytecode/directory.hh (directory_cache): Added argument.
	(directory_cache::suffix): New field.
	* header/cni.cc: New file.
	* header/cni.hh (cni_code_generator): Moved constructor to .cc
	file.  Added fields and methods.

	* header/cni.hh: New file.

	* model/binary.hh (model_logical_binary::get_name): Declare.
	(model_lor::get_name): Define.
	(model_land::get_name): Define.
	* model/binary.cc (get_name): New functions.
	(resolve): Throw an error.  Include operator name in error.

2004-06-26  Tom Tromey  <tromey@redhat.com>

	* model/typevar.cc (resolve): Removed old comment.
	* model/class.cc (resolve_classes): Removed old comment.  Call
	resolve_classes on type parameters.

	* bytecode/classwriter.cc (write): Use 0644 permissions.

	* model/typevar.cc (apply_type_map): New method.
	* model/typemap.cc (find): New method.
	* model/typemap.hh (model_type_map::find): Declare.
	* model/typevar.hh (model_type_variable::apply_type_map):
	Declare.
	* typedefs.hh: Include typemap.hh earlier.
	* model/variable.cc (apply_type_map): New method.
	* model/variable.hh (model_variable_decl::apply_type_map):
	Declare.
	* model/method.cc (wrap): New function.
	(apply_type_map): Wrote.

	* model/class.cc (get_pretty_name): Handle names not in a
	package.

	* name.cc (classify_type_name): Look for type variables.
	* model/class.cc (find_type_variable): New method.
	* model/class.hh (model_class::find_type_variable): Declare.

	* model/class.cc (apply_type_map): Return `this' for non-generic
	classes.  Mark new class as `from class'.
	* parse.cc (type_name): Use counted_depth.  Look ahead in
	keep-going case.

	* parse.cc (type_parameter): Set compilation unit.

	* owner.cc: New instantiation.

2004-06-25  Tom Tromey  <tromey@redhat.com>

	* name.cc (classify_type_name): Added `context' argument.
	(classify_package_or_type_name): Likewise.
	* name.hh (classify_type_name): Updated.
	(classify_package_or_type_name): Likewise.
	* typedefs.hh (ref_forwarding_parameterized): Define.
	* parse.cc (type_name): Rewrote.  Added argument.
	(counted_type): New method.
	(type): Rewrote.
	(type_bound_opt): Use counted_type.  Added argument.
	(type_parameter): Added argument.
	(type_parameters): Updated.
	* parse.hh (parse::counted_type): Declare.
	(parse::type_name): Updated.
	(parse::type_bound_opt): Likewise.
	(parse::type_parameter): Likewise.
	* model/fwdtype.cc (resolve): Updated.
	* model/fwdtype.hh (model_forwarding_parameterized::parent): New
	field.
	(model_forwarding_parameterized): Initialize it.  Added new
	argument.

2004-06-24  Tom Tromey  <tromey@redhat.com>

	* model/fwdtype.cc (operator%): New function.
	* model/fwdtype.hh (operator%): Declare.

	* owner.cc: Added new instantiation.

	* model/class.hh (model_class::generic_p): New method.
	* model/type.hh (model_type::generic_p): New method.

	* model/method.cc (apply_type_map): New method.
	* model/method.hh (model_method::apply_type_map): Declare.

2004-06-23  Tom Tromey  <tromey@redhat.com>

	* model/field.hh (model_field::apply_type_map): Declare.

	* model/variable.hh (model_variable_decl::index): Removed.

	* typedefs.hh: Include classinst.hh.
	(ref_class_instance): Declare.
	* model/class.hh (model_class::create_type_map): Updated.
	(model_class::check_interface_instances): Declare.
	(model_class::apply_type_map): Likewise.
	(model_class::create_instance): Likewise.

2004-06-22  Tom Tromey  <tromey@redhat.com>

	* parse.cc (type_bound_opt): Updated for changes to
	model_type_variable.

	* typedefs.hh: Include typevars.hh later, but define
	ref_type_variable at the same place.

	* model/classinst.cc: New file.
	* model/classinst.hh: New file.

	* model/typevar.cc (resolve_classes): Renamed.
	* model/typevar.hh (model_type_variable::resolve_classes): Renamed
	from resolve.
	* model/class.hh (model_class::resolve_classes): Now virtual.

	* tree/builtins.cc (map_type): Use reference_p.
	* model/new.cc (determine_search_class): Use reference_p.
	* model/instanceof.cc (resolve): Use reference_p.
	* bytecode/outpool.cc (add): Use reference_p.
	* bytecode/generate.cc (visit_cast): Use reference_p.

	* model/typevar.cc (resolve): Rewrote.
	(erasure): Updated.
	(validate): Likewise.
	(assignable_from_p): Likewise.
	* model/typevar.hh (class model_type_variable): Now derived from
	model_class.

	* model/class.hh (model_class::type_variable_p): New method.

2004-06-21  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::override): New field.
	(model_method): Initialize it.
	(model_method::overrides_p): New method.
	* model/method.cc (hides_or_overrides_p): Updated error messages.
	(hides_or_overrides_p): Set `override'.
	* model/class.hh (model_class::parameterized_p): New method.

	* model/class.cc (check_interface_instances): New method.
	(apply_type_map): Call it.

	* model/class.hh (model_class::reference_p): New method.
	* model/type.hh (model_type::reference_p): New method.

	* model/class.cc (create_type_map): Changed interface.
	(apply_type_map): Uncommented.
	(create_instance): New method.
	* model/fwdtype.hh (class model_forwarding_parameterized): New
	class.
	* model/fwdtype.cc (resolve): New method.

2004-06-20  Tom Tromey  <tromey@redhat.com>

	* model/typevar.cc (resolve): Rewrote.
	(erasure): Likewise.
	(validate): Likewise.  Don't special case type variables.
	(assignable_from_p): New method.
	* model/typevar.hh: Radically changed implementation.
	* model/typemap.cc: New file.
	* model/typemap.hh (class model_type_map): Documented.
	(model_type_map::compose): Declare.
	(model_type_map::map_type): New typedef.

	* model/imodifiable.cc (implicitly_public): Use assert_cast, not
	dynamic_cast.
	(implicit_modifier): Likewise.

2004-06-22  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve_classes): Don't add constructor to
	array type.

2004-06-21  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve_classes): Indentation fix.

	* header/jni.cc (generate): Use correct output directory.

2004-06-19  Tom Tromey  <tromey@redhat.com>

	* defassign.hh (check_definite_assignment): New file.
	* defassign.cc: New file.

2004-06-18  Tom Tromey  <tromey@redhat.com>

	* model/assign.hh, model/block.hh, model/break.hh,
	model/continue.hh, model/empty.hh, model/exprstmt.hh, model/if.hh,
	model/label.hh, model/return.hh, model/stmt.hh, model/switch.hh:
	Removed dead definite assignment code.

	* model/class.cc (resolve_classes): Don't warn about explicit
	extends if class came from .class.

	* model/field.hh (model_field::set_modifiers): Updated.
	(model_field::massage_modifiers): New method.
	* model/class.hh (model_class::massage_modifiers): Renamed from
	set_modifiers.
	* model/method.hh (model_method::massage_modifiers): Renamed from
	set_modifiers.

	* header/jnistub.cc: Don't include jniutil.hh.
	* header/jni.cc: Don't include jniutil.hh.
	* header/jniutil.cc: Removed.
	* header/jniutil.hh: Removed.
	* fold.cc (fold_visitor::visit_bytecode_block): Updated.

	* definer.cc (defining_class_reader): Mark class as from .class
	file.
	(handle_method): Mark method as from .class file.
	(handle_field): Mark field as from .class file.
	* model/field.cc (model_field): Don't initialize modifiers, do
	initialize IModifiable.
	* model/field.hh (class model_field): Extend IModifiable.
	(model_field::modifiers): Removed.
	(model_field::set_modifiers): Updated.
	(model_field::implicitly_public): Removed.
	(model_field::implicit_modifier): Updated.
	(model_field::get_modifiers): Removed.
	(model_field::static_p): Removed.
	(model_field::set_synthetic): Call set_from_class.
	* model/imodifiable.cc: New file.
	* model/method.hh (class model_method): Extend IModifiable.
	(model_method::modifiers): Removed.
	(class model_method): Don't initialize modifiers, do initialize
	IModifiable.
	(model_method::abstract_p): Removed.
	(model_method::static_p): Likewise.
	(model_method::native_p): Likewise.
	(model_method::final_p): Likewise.
	(model_method::set_modifiers): Likewise.
	(model_method::implicitly_public): Likewise.
	(model_method::implicit_modifier): Likewise.
	(model_method::get_modifiers): Likewise.
	(model_method::set_synthetic): Call set_from_class.
	* model/class.hh (class model_class): Extend IModifiable.
	(model_class::modifiers): Removed.
	(class model_class): Don't initialize modifiers, do initialize
	IModifiable.
	(model_class::static_p): Removed.
	(model_class::set_modifiers): Likewise.
	(model_class::final_p): Removed.
	(model_class::abstract_p): Likewise.
	(model_class::get_modifiers): Likewise.
	(model_class::implicitly_public): Likewise.
	(model_class::implicit_modifier): Likewise.
	* typedefs.hh: Include imodifiable.hh.
	* model/modifier.cc (implicitly_public): Removed.
	(implicit_modifier): Likewise.
	* model/modifier.hh (model_modifier_list::implicitly_public):
	Removed.
	(model_modifier_list::implicit_modifier): Likewise.
	* model/imodifiable.hh: New file.

2004-06-17  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_switch_block): Removed unused variable.

	* tree/lower.cc (get2u): Fixed typo.
	(VERIFY_SEEN): Temporary define.
	(VERIFY_TARGET): Likewise.
	(visit_bytecode_block): Declare `flags' temporarily.  Use
	single-arg push.
	(full_condition): Use single-arg push.
	(binop): Likewise.
	(compare): Likewise.
	(cast): Likewise.
	* tree/builtins.hh (tree_builtins): Updated.
	(tree_builtins::type_nativecode_ptr_ptr): New field.
	(tree_builtins::type_nativecode_ptr): Likewise.
	(tree_builtins::value_zero): Declare.
	(tree_builtins::value_one): Likewise.
	(tree_builtins::value_minusone): Likewise.
	* tree/builtins.cc (find_atable_slot): New stub.
	(find_otable_slot): Likewise.
	(value_null): New method.
	(value_zero): Likewise.
	(value_one): Likewise.
	(value_minusone): Likewise.
	(tree_builtins): Initialize new fields.
	* tree/lower.cc (visit_bytecode_block): Updated.
	* tree/tree.hh (tree_generator): Updated.
	* tree/tree.cc (check_reference): Removed.
	(visit_array_ref): Updated.
	(handle_invocation): Likewise.

	* tree/builtins.hh (tree_builtins::old_abi_p): Declare.
	(tree_builtins::check_reference): Likewise.
	* tree/builtins.cc (old_abi_p): New method.
	(check_reference): Moved from tree.cc.

	* tree/tree.cc (wrap_synchronized): Fixed typo in variable name.
	(visit_catch): Likewise.
	(visit_assert): Use map_field.
	(visit_for): Fixed call to tsi_link_after.

	* tree/lower.cc (visit_bytecode_block): Added missing ";".

	* typedefs.hh (int8): New temporary typedef.
	* tree/tree.hh (tree_generator::emit_type_assertion): Declare.
	* tree/tree.cc (emit_type_assertion): New method.

	* tree/lower.cc (visit_bytecode_block): Updated for new
	int_condition and full_condition.

	* tree/tree.hh (class tree_generator): Updated.
	* tree/lower.cc (get1s): New function.
	(get1u): Likewise.
	(get2s): Likewise.
	(get2u): Likewise.
	(get4): Likewise.
	(visit_bytecode_block): Use new functions.
	(int_condition): Added arguments.
	(full_condition): Likewise.
	(full_condition): Likewise.

	* definer.cc (handle_code): Set length of bytecode.
	* tree/tree.hh (tree_generator::visit_bytecode_block): Updated.
	* tree/lower.cc (visit_bytecode_block): Updated.
	* bytecode/generate.cc (visit_bytecode_block): Updated.
	* bytecode/generate.hh (bytecode_generator::visit_bytecode_block):
	Updated.
	* visitor.hh (visitor::visit_bytecode_block): Updated.
	* model/bytecode.cc (visit): Pass more arguments to visitor.
	* model/bytecode.hh (model_bytecode_block::length): New field.
	(model_bytecode_block): Initialize fields.
	(model_bytecode_block::set_bytecode): Added argument.

2004-06-16  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (tree_builtins): Initialize builtin_fmod.

	* bytecode/generate.cc (visit_for_enhanced): Put scope around
	temporary local variables.  Put loop condition at end.
	* model/forenhanced.cc (resolve): Only load Iterable if needed.
	* parse.cc (for_statement): Restructured.

	* bytecode/classwriter.cc (write): Use global defines.
	Include cpool.hh.
	* cpool.hh (MAGIC, MAJOR_VERSION, MINOR_VERSION): Define.
	* classreader.cc (MAGIC, MAJOR_VERSION, MINOR_VERSION): Don't
	define.

	* tree/lower.cc (visit_bytecode_block): Create a statement
	iterator.
	(compare): Changed type of argument.
	Put all methods into tree_generator.
	* model/method.hh (model_method::final_p): New method.
	* tree/builtins.cc (tree_builtins): Reference null_type.
	Added temporary declarations.
	(map_param_or_var): Typo fix.  Changed type of `type'.
	* tree/builtins.hh (tree_builtins::value_null): Renamed from
	null_pointer_node.
	(tree_builtins::map_param_or_var): Updated.
	(tree_builtins::map_method_call): Declare.
	* tree/glue.hh: Include real.h and tm.h.
	* tree/tree.hh (tree_generator::build_jni_stub): Declare.
	Declare bytecode-lowering methods.
	* tree/tree.cc (build_jni_stub): New method.
	(visit_field_ref): Use const_cast.
	(visit_simple_variable_ref): Likewise.
	(handle_invocation): Likewise.

	* tree/builtins.hh (tree_builtins::lay_out_class): Declare.
	* tree/tree.hh (tree_generator::handle_invocation): Updated.
	* tree/tree.cc (visit_new): Fixed simple typos.
	(visit_new_array): Fixed check of elt_type.
	(handle_invocation): Made argument const.
	(visit_new_array): Use build_class_ref.
	(visit_switch_block): Don't return a value.

	* tree/lower.cc: Updated for new type names.
	* tree/tree.cc: Updated for new type names.
	* tree/builtins.cc (tree_builtins): Updated.
	* tree/builtins.hh (type_jint, type_jlong, type_jfloat,
	type_jdouble, type_jboolean, type_void, type_ptr, type_jbyte,
	type_jchar, type_jshort): Renamed.

	* tree/lower.cc (binop): Changed type of `op'.
	(full_condition): Likewise.
	(int_condition): Likewise.
	* tree/tree.hh (tree_generator::arith_shift): Updated.
	(tree_generator::handle_inc_dec): Likewise.
	(tree_generator::handle_op_assignment): Declare.
	* tree/tree.cc (visit_switch_block): Fixed calls to map_type.
	(add_var): Fixed call to map_variable.
	(visit_new): Fixed call to map_type.
	(visit_prefix_simple): Use boolean type node.
	(visit_assert): Likewise.
	(visit_for): Likewise.
	(visit_array_ref): Likewise.
	(arith_shift): Changed type of `kind'.
	(handle_inc_dec): Likewise.
	(handle_op_assignment): Likewise.
	(emit_class_ref): Removed.

	* tree/tree.cc (tree_generator): Initialize new field.
	(visit_switch_block): Fixed definition.
	* tree/tree.hh (tree_generator::gcc_builtins): New field.

	* location.hh (location::get_file): New method.
	(location::get_line): Likewise.

	* tree/glue.hh: Include tree-gimple.h.
	* tree/treegen.cc: Added includes.
	(generate): Use correct constructor call.
	* tree/tree.hh: Added missing declarations.
	(~tree_generator): Now virtual.
	(tree_generator::method): New field.
	* tree/tree.cc: Various argument and syntax fixes.
	(tree_generator): Initialize new field.
	(visit_method): Set new field.
	* tree/builtins.cc: Updated.
	* tree/builtins.hh (class runtime_function): Renamed from
	builtin_function.

2004-06-15  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.hh (E_VOLATILE): Renamed from VOLATILE.
	(class tree_builtins): Use model_variable_decl.
	* Makefile: Added code to compile tree/ files.
	* lex.cc (numeric_literal): Use long long.
	(HOST_WIDE_INT, HOST_BITS_PER_WIDE_INT, HOST_BITS_PER_CHAR,
	TYPE_PRECISION): Define locally for now.
	* typedefs.hh (HOST_WIDE_INT, HOST_BITS_PER_WIDE_INT,
	HOST_BITS_PER_CHAR, TYPE_PRECISION): Don't define.
	* tree/glue.hh: New file.
	* tree/lower.cc: Added includes.
	* tree/builtins.cc: Added includes.
	Use model_variable_decl.
	* tree/tree.cc: Added includes.
	* tree/treegen.cc: Added includes.

2004-06-14  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (map_method_call): New method.
	(lay_out_class): Likewise.

	* model/value.hh (words_to_double): New function.
	(long_to_words): Now returns void.

	* lex.cc (handle_keyword): Warn if enum or assert is used as
	identifier.
	* compiler.hh (compiler::warn_enum): New field.
	(compiler::warn_assert): Likewise.

2004-06-13  Tom Tromey  <tromey@redhat.com>

	* tree/lower.cc (visit_bytecode_block): Use map_field_ref.
	* tree/tree.cc (visit_field_ref): Use map_field_ref.
	* tree/builtins.hh (tree_builtins::map_field_ref): Declare.
	* tree/builtins.cc (map_field_ref): New method.

2004-06-11  Tom Tromey  <tromey@redhat.com>

	* tree/lower.cc: More work.

2004-06-09  Tom Tromey  <tromey@redhat.com>

	* tree/lower.cc (visit_bytecode_block): Wrote wide operations.

	* model/value.hh (float_to_word): New function.
	(double_to_words): Likewise.
	(long_to_words): Likewise.
	* bytecode/outpool.cc (finish): Reverted previous change.
	(add(jlong)): Increment capacity by 2.
	(add): Likewise.
	(add(jlong)): Write actual data.
	(add(jfloat)): Likewise.
	(add(jdouble)): Likewise.

	* bytecode/outpool.cc (finish): Add one to final capacity.

	* definer.cc (handle_method): Use get_utf8.
	(handle_field): Likewise.
	* classreader.hh (class_reader::get_utf8): Declare.
	* classreader.cc (get_utf8): Renamed from get_string.
	(get_class): Use it.
	(get_string): New method.

	* tree/lower.cc: More work.

	* definer.cc (handle_field): Correctly decode field signature.

	* bytecode/generate.cc (visit_new_array): Visit the initializer.

	* tree/tree.cc (visit_array_ref): Use INDIRECT_REF.
	(visit_field_ref): Likewise.
	* tree/lower.cc (visit_bytecode_block): More work.
	* tree/builtins.hh (tree_builtins::builtin_fmod): New field.

	* compiler.hh (compiler::target_divide_subroutine): New flag.
	* tree/lower.cc (visit_bytecode_block): More work.

2004-06-08  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_array_ref): Use check_reference.
	* tree/lower.cc: More work.

2004-06-07  Tom Tromey  <tromey@redhat.com>

	* tree/tree.hh (tree_generator::handle_instanceof): Declare.
	* tree/lower.cc (visit_bytecode_block): Renamed from `lower'.
	More updates.
	(handle_convert): New method.
	* tree/tree.cc (visit_bytecode_block): Removed.
	(handle_instanceof): New method.
	(visit_instanceof): Use it.

	* compiler.cc: Include jnistub.hh.
	* Makefile (header_sources): Updated.
	* header/jnistub.cc: New file.
	* header/jni.cc (jni_code_generator): Initialize `comp'.
	(file_name): New method.
	(write_header): Changed interface.
	(write_trailer): Likewise.
	* header/jnistub.hh: New file.
	* header/jni.hh (class jni_code_generator): Made fields and
	methods protected.
	(jni_code_generator::file_name): Declare.
	(jni_code_generator::write_header): Now virtual.
	(jni_code_generator::write_trailer): Likewise.
	(jni_code_generator::write_method): Likewise.

	* reader/source.hh (class source_file_creator): Construction
	reordering.
	* reader/readbuffer.cc (read_byte_buffer): Signed comparison fix.
	* reader/classbytes.hh (class class_byte_creator): Construction
	reordering.
	* model/variable.hh (class model_variable_decl): Construction
	reordering.
	* model/method.hh (class model_method): Construction reordering.
	* model/forenhanced.hh (class model_for_enhanced): Construction
	reordering.
	* model/class.hh (class model_class): Construction reordering.
	* model/arrayinit.hh (class model_array_initializer): Construction
	reordering.
	* header/jni.cc (generate): Signed comparison fix.
	(translate): Likewise.
	* format/format.cc (format_repr): Construction reordering.
	* bytecode/outpool.cc (output_constant_pool): Construction
	reordering.
	* bytecode/locals.hh (class temporary_local): Construction
	reordering.
	* bytecode/generate.cc (visit_switch): Signed comparison fix.
	(bytecode_generator): Construction reordering.
	* bytecode/classwriter.cc (write): Signed comparison fix.
	* bytecode/block.hh (class bytecode_block): Construction
	reordering.
	* tstream.hh (class token_stream): Construction reordering.
	* definer.hh (class defining_class_reader): Updated.
	* definer.cc (one_type): Argument now unsigned.
	(parse_method_signature): Signed comparison fix.
	* Makefile (CXXFLAGS): Added -Wall.
	* scope.cc (pop): Removed unused variables.
	* bytecode/generate.hh (~bytecode_generator): Now virtual.
	(bytecode_generator::push_expr_target): Construction reordering.
	* model/binary.cc (resolve): Removed unused variables.
	* parse.cc (get_primitive_type): Added default case.
	(statement): Likewise.  Added missing `break'.
	* name.cc (classify_expression_name): Removed unused variable.
	* location.cc (operator<<): Removed unused variable.
	* lex.cc (read_handling_escapes): Removed unused variable.
	(string_literal): Likewise.
	(parse_javadoc): Signed comparison fix.
	(numeric_literal): Likewise.
	* classreader.cc (get_attribute): Removed unused variable.
	(class_reader): Construction reordering.
	(match_p): name_len now unsigned.
	(ensure): Argument now unsigned.
	* classreader.hh: Updated.

	* typedefs.hh: Include <cmath>.
	* model/primitive.hh (model_fp_primitive::mod): Implement.

	* visitor.hh (visitor::visit_bytecode_block): Now pure virtual.

	* model/primitive.hh (model_int_primitive::representable_p): Now
	out-of-line.  Specialize for jlong and jint.

2004-06-06  Tom Tromey  <tromey@redhat.com>

	* tree/lower.cc: New file.

	* buffer.hh (class byte_buffer): Removed unneeded `inline's.
	* model/class.hh (class model_class): Removed unneeded `inline's.
	* ucs2.hh (class ucs2_reader): Removed unneeded `inline's.
	(class fallback_ucs2_reader): Likewise.
	* parse.hh (class parse): Removed unneeded `inline's.
	* compiler.hh (class compiler_flag): Removed unneeded `inline's.
	* bytecode/relocation.hh (class relocation): Removed unneeded
	`inline's.
	* cpool.hh (class constant_pool): Removed unneeded `inline's.

	* tree/tree.cc (add_var): Set DECL_CONTEXT on variable.

2004-06-05  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.hh (tree_builtins::null_pointer_node): New
	method.
	* tree/tree.hh (tree_generator::save_tree): New class.
	(tree_generator::current_block): New field.
	* tree/tree.cc (visit_while): Use statement iterators.
	(visit_label): Likewise.
	(visit_throw): Use build_tree_list.
	(visit_instanceof): Generate explicit null check.
	(visit_method): Create a block and bind_expr.
	(visit_new): Don't use transform_list.
	(visit_catch): Use build_exception_object_ref.
	(visit_try): Generate code for catch clauses.
	(tree_generator): Initialize new field.
	(visit_for): Create a block and a bind_expr.
	(add_var): New method.
	(visit_catch): Use add_var.  Create a block and a bind_expr.
	(visit_block): Make a new block and a bind_expr.
	(visit_variable_stmt): Use add_var.
	(visit_switch_block): Use statement iterators.
	(visit_switch): Likewise.

	* fold.hh (fold): Added documentation.

	* fold.cc (fold_visitor::visit_bytecode_block): New method.
	* tree/tree.cc (visit_bytecode_block): New method.
	* tree/tree.hh (tree_generator::visit_bytecode_block): Declare.
	* bytecode/generate.cc (visit_bytecode_block): New method.
	* bytecode/generate.hh (bytecode_generator::visit_bytecode_block):
	Declare.
	* model/bytecode.cc (visit): Call visitor.
	* visitor.hh (visitor::visit_bytecode_block): Declare.

2004-06-04  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (visit_method): Handle JNI methods.
	* compiler.hh (compiler::target_jni): New field.

	* tree/tree.hh (tree_generator::wrap_synchronized): Declare.
	(tree_generator::build_class_ref): Likewise.
	* tree/tree.cc (visit_synchronized): Visit sub-trees; don't add
	monitor exit to main body.
	(wrap_synchronized): New method.
	(visit_method): Use it.
	(build_class_ref): New method.
	(emit_class_ref): Wrote.
	(visit_method): Handle synthetic method.

	* tree/builtins.cc (map_param_or_var): New method.
	* tree/builtins.hh (tree_builtins::varmap): New field.
	(tree_builtins::map_param_or_var): Declare.

	* tree/tree.hh (tree_generator::annotate): Declare.
	(tree_generator::check_reference): Likewise.

	* tree/builtins.cc (add): New methods.

	* tree/tree.cc (visit_method): Set DECL_RESULT on the method.

	* tree/builtins.cc (map_method): New method.
	(map_field): Likewise.
	* tree/builtins.hh (tree_builtins::map_parameter): Declare.
	(tree_builtins::map_variable): Likewise.
	(tree_builtins::map_field): Likewise.
	(tree_builtins::map_method): Likewise.
	(tree_builtins::methodmap): New field.
	(tree_builtins::fieldmap): New field.

	* tree/tree.cc (visit_variable_stmt): Added some code.

	* tree/builtins.hh (tree_builtins::map_identifier): Declare.
	* tree/builtins.cc (map_type): More work.
	(map_identifier): New method.

	* tree/tree.cc (visit_op_assignment): More implementations.
	Updated all methods to call map_type in gcc_builtins.

2004-06-03  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (map_type): New method.
	(tree_builtins): Initialize typemap.
	* tree/builtins.hh (tree_builtins::map_type): Declare.
	(tree_builtins::typemap): New field.

	* tree/builtins.cc (builtin_type): New constructor.
	(tree_builtins): Updated.
	* tree/builtins.hh (class builtin_type): Declare constructor.
	(builtin_type::operator()): Define.

	* tree/tree.cc (visit_string_literal): Use map_type, not
	string_ptr_type_node.
	* tree/builtins.hh (tree_builtins::string_ptr_type_node):
	Removed.
	* tree/builtins.cc (string_ptr_type_node): Don't initialize.

	* model/instanceof.cc (resolve): Warn if argument is null.

	* classcache.hh (class class_cache): Removed unneeded `inline'.

2004-05-31  Tom Tromey  <tromey@redhat.com>

	* tree/builtins.cc (tree_builtins): Initialize new fields.
	* tree/builtins.hh (tree_builtins) [jint_type_node,
	jlong_type_node, jfloat_type_node, jdouble_type_node,
	string_ptr_type_node, jboolean_type_node, void_type_node,
	ptr_type_node, jbyte_type_node, jchar_type_node,
	jshort_type_node]: New fields.
	(class builtin_type): New class.

	* tree/tree.cc (visit_method): Compute arguments.
	(visit_for): Updated statement linking.

	* tree/builtins.cc (tree_builtins): _Jv_MonitorEnter and
	_Jv_MonitorExit return void.

	* tree/tree.cc (handle_invocation): Use check_reference.
	(visit_method_invocation): Pass correct arguments to
	handle_invocation.

	* model/newarray.hh (class model_new_array): Updated comment.

	* tree/tree.cc (visit_catch): Assign to catch variable.
	(visit_class_ref): Wrote.
	(emit_class_ref): New method stub.
	(visit_new_array): Wrote.

	* tree/tree.cc (visit_try): Wrote.

2004-05-30  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (transform_list): Use tree statement list
	iterator.
	(visit_do): Likewise.
	(visit_empty): Use build_empty_stmt.
	(visit_for): Set body of loop.
	(visit_cast): Call emit_type_assertion.
	(handle_op_assignment): Likewise.
	(visit_field_ref): Likewise.
	(handle_invocation): Don't use transform_list.
	(visit_catch): Started.

2004-05-29  Tom Tromey  <tromey@redhat.com>

	* typedefs.hh: Include assert.h.

2004-05-28  Tom Tromey  <tromey@redhat.com>

	* definer.cc (handle_constant_value): Wrote.
	* model/value.hh (words_to_double): New function.
	(word_to_float): Likewise.
	(words_to_long): Likewise.

	* bytecode/classwriter.cc (write): Don't set ACC_INTERFACE
	explicitly.  Add related inner classes to pool.
	* model/class.cc (set_modifiers): Interface is implicitly
	abstract.  Set ACC_INTERFACE.

	* bytecode/classwriter.cc, bytecode/classwriter.hh,
	bytecode/outpool.hh, bytecode/outpool.cc: Restored accidentally
	deleted patch.

	* bytecode/generate.cc (visit_try): Handle case where `finally' is
	NULL.

	* bytecode/generate.cc (emit_cast): Handle intermediate and final
	casts correctly.

	* bytecode/generate.cc (generate): Skip leading empty blocks.
	(visit_try): Only emit `goto' after ordinary cleanup if `finally'
	clause can complete normally.

2004-05-27  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (generate): Fixed liveness test for
	exception handlers.

	* bytecode/generate.cc (handle_invocation): Handle CONDITIONAL
	case.

	* bytecode/block.cc (optimize): Rewrite the bytecode after
	optimizing a branch.
	* bytecode/byteutil.hh (invert_if_opcode): Handle ifnull
	properly.
	* bytecode/generate.cc (handle_comparison): Removed unneeded
	assignment.
	(visit_conditional): Push correct branch targets.

	* bytecode/generate.cc (visit_conditional): Ensure branch target
	object lives to end of scope.

	* bytecode/generate.cc (handle_comparison): Restored deleted
	patch.
	(visit_assert): Likewise.

	* bytecode/generate.hh (bytecode_generator::handlers): New field.
	* bytecode/generate.cc (add_exception_handler): Wrote.
	(generate): Mark blocks.  Update exception handlers.
	(write): Emit exception handler info.
	(visit_method): Call non_normal_completion.
	* bytecode/block.cc (mark): New method.
	(update): Renamed; changed API.
	(relocate): Updated.
	* bytecode/block.hh (bytecode_block::live): New field.
	(bytecode_block): Initialize it.
	(bytecode_block::live_p): New method.
	(bytecode_block::mark): Declare.
	(bytecode_block::reset): New method.
	(bytecode_block::update): Renamed from update_next.

	* bytecode/generate.cc, bytecode/generate.hh, bytecode/block.cc,
	bytecode/block.hh, bytecode/relocation.cc,
	bytecode/relocation.hh, owner.cc: Reverted patch of 2004-05-25;
	bytecode blocks are once again not reference counted.

	* bytecode/generate.cc (visit_try): `define' the handler block.

2004-05-25  Tom Tromey  <tromey@redhat.com>

	* bytecode/block.cc (update_next): Updated comment.
	* bytecode/generate.cc (~bytecode_generator): Call `finish' on
	each block.
	* bytecode/block.hh (bytecode_block::finish): New method.

	* bytecode/generate.cc, bytecode/generate.hh, bytecode/block.cc,
	bytecode/block.hh, bytecode/relocation.cc,
	bytecode/relocation.hh, owner.cc: Reverted patch of 2004-05-22;
	bytecode blocks are now reference counted again.

2004-05-24  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (handle_comparison): Handle long types
	using lcmp.

	* bytecode/classwriter.hh (class_writer::write_method): Declare.
	(class_writer::write_field): Likewise.
	(class_writer::add_field_value): Likewise.
	* bytecode/outpool.cc (add): Use add_utf.
	(write_inner_classes): Likewise.
	* bytecode/classwriter.cc (write): Put `Deprecated' into the
	constant pool.  Handle synthetic or deprecated methods.  Call
	write_method.  Handle constant fields.  Call write_field.  Handle
	`throws' clause of methods.
	(write_class_attributes): Write Deprecated attribute for class if
	needed.
	(write_method): New method.
	(write_field): Likewise.
	(add_field_value): Likewise.
	(write_class_attributes): Added file name argument.

	* bytecode/outpool.cc (output_constant_pool): Initialize new
	field.
	(finish): Set `finished'.
	(check): Abort if finished.
	(write_inner_classes): Updated comment.
	* bytecode/outpool.hh (output_constant_pool::finished): New
	field.

	* bytecode/outpool.cc (add): Update nested_classes and add more
	information to the constant pool.
	(inner_classes_p): New method.
	(write_inner_classes): Likewise.
	* bytecode/outpool.hh (output_constant_pool::inner_classes_p):
	Declare.
	(output_constant_pool::write_inner_classes): Declare.
	(output_constant_pool::nested_classes): New field.
	* bytecode/classwriter.hh (class_writer::write_class_attributes):
	Declare.
	* bytecode/classwriter.cc (write_class_attributes): New method.
	(write): Use it.

	* definer.hh (defining_class_reader::handle_synthetic): Declare.
	* definer.cc (start_class): Set modifiers on class.
	(handle_synthetic): New method.
	* model/class.hh (model_class::set_modifiers): New method.

	* model/fwdtype.cc (resolve): Throw exception if we didn't find
	an array type.

	* bytecode/block.hh (class bytecode_block): Updated comment.

	* bytecode/generate.cc (visit_assert): Removed old comment.
	* model/assert.cc (resolve): Error if assert expression has void
	type.  Use unary numeric promotion if needed.

	* bytecode/classwriter.cc (write): Include ACC_INTERFACE if
	needed.

	* model/class.cc (resolve_classes): Handle private fields
	specially.

2004-05-23  Tom Tromey  <tromey@redhat.com>

	* typedefs.hh (assert_cast): New template function.
	* owner.hh (owner): Use assert_cast.
	(owner::operator=): Likewise.
	* conversions.cc (widening_reference_conversion): Use
	assert_cast.
	(representable_p): Likewise.
	* tree/tree.cc (visit_switch_block): Use assert_cast.
	* bytecode/outpool.cc (add): Use assert_cast.
	* bytecode/generate.cc (visit_switch): Use assert_cast.
	(handle_comparison): Likewise.
	* model/new.cc (determine_search_class): Use assert_cast.
	* model/invoke.cc (determine_search_class): Use assert_cast.
	* model/import.cc (find_class): Use assert_cast.
	* model/fwdtype.cc (resolve_classes): Use assert_cast.
	* model/fieldref.cc (resolve): Use assert_cast.
	* model/class.cc (assignable_from_p): Use assert_cast.
	(class_cast): Removed.
	(resolve_classes): Use assert_cast.
	(find_members): Likewise.
	* model/cast.cc (value): Use assert_cast.
	* model/binary.cc (value): Use assert_cast.
	(resolve): Likewise.
	* model/unary.hh (model_prefix_simple::resolve): Use assert_cast.
	(model_prefix_simple::value): Likewise.
	* model/continue.hh (model_continue::resolve): Use assert_cast.
	* model/class.hh (model_class::get_superclass): Use assert_cast.
	* model/break.hh (model_break::get_target): Use assert_cast.
	* name.cc (classify_type_name): Use assert_cast.
	(classify_ambiguous_name): Likewise.
	* compiler.cc (find_class): Use assert_cast.
	* access.cc (accessible_p): Use assert_cast.

	* model/method.cc (note_throw_type): Handle anonymous constructors
	and instance initializers properly.
	* parse.hh (parse::block): Updated.
	* parse.cc (block): Added block argument.
	(try_statement): Updated.
	(statement): Likewise.
	(method_body): Likewise.
	(class_body_block): Create a model_initializer_block.
	* Makefile (model_sources): Updated.
	* model/init.cc: New file.
	* model/init.hh: New file.
	* typedefs.hh: Include model/init.hh.

	* model/return.cc (resolve): Error if return appears in static
	or instance initializer.
	* model/method.hh (model_method::static_initializer_p): New
	method.
	(model_method::constructor_p): Documented.
	(model_method::instance_initializer_p): New method.
	* scope.hh (class push_block): Documented.

	* model/icatcher.hh (class ICatcher): Document.
	* scope.hh (class save_class): Document.
	(class push_catcher): Likewise.
	(class push_method): Likewise.

	* header/jni.hh: Updated.
	* header/jni.cc (add_char): New method.
	(translate): Likewise.
	(write_method): Finished.
	(generate): Compute file name and class name.
	(write): Print type name, not type.

2004-05-22  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc: Updated all methods.
	(bytecode_generator): Updated to change initialization ordering.
	(~bytecode_generator): Delete all blocks.
	(new_bytecode_block): New method.
	* bytecode/generate.hh: Updated not to use owner<> for
	bytecode_block.  bytecode_block now a `friend'.
	(bytecode_generator::allocated_blocks): New field.
	(bytecode_generator::new_bytecode_block): Declare.
	* bytecode/block.cc (emit_relocation): Updated.
	(clone): Likewise.
	(optimize): Updated.
	(update_next): Removed special case.
	Include bytecode/generate.hh.
	* bytecode/relocation.cc (relocation): Updated.
	* bytecode/relocation.hh (relocation::destination): No longer an
	owner.
	(relocation::relocation): Updated argument.
	(relocation::get_target): Updated.
	* owner.cc: Don't instantiate owner<bytecode_block>.
	* bytecode/block.hh (bytecode_block::refc): Removed.
	(class bytecode_block): `owner' no longer friend.
	(bytecode_block::next_block): No longer an owner.
	(bytecode_block::next): Updated.
	(bytecode_block::set_next): Likewise.
	(bytecode_block::emit_relocation): Likewise.
	(bytecode_block::clone): Likewise.  Added bytecode_generator as an
	argument.
	(ref_bytecode_block): Removed typedef.
	(bytecode_block): Don't initialize refc.

	* bytecode/block.cc (optimize): Fixed check in `if' optimization.

	* model/class.cc (get_fully_qualified_name): Handle case where
	package name is empty.

	* definer.cc (one_type): Added `abort'.
	(parse_method_signature): Likewise.
	(handle_method): Set parameters for method.

	* model/method.cc (clean_up): Temporarily disable.

	* parse.cc (class_or_interface_declaration): Pass modifier list
	to declaration methods.
	(class_declaration): Added `mods' parameter.
	(interface_declaration): Likewise.
	(enum_declaration): Likewise.
	(member_decl): Updated.

	* model/class.cc (add): Updated error messages.

	* model/class.cc (resolve_classes): Don't inherit private
	methods.

	* model/method.cc (clean_up): New method.
	* model/method.hh (model_method::clean_up): Declare.
	(model_method::get_body): Added assert.
	* model/class.cc (clean_up): New method.
	* model/class.hh (model_class::clean_up): Declare.
	* compiler.cc (generate_code): Call clean_up.

	* model/class.hh: Updated.
	(model_class::inner_p): New method.
	* model/class.cc (add_static_initializer): Moved from .hh file.
	Added error cases.
	(add_instance_initializer): Likewise.
	(add(const ref_method&)): Likewise.
	(add(const ref_class&)): Likewise.

2004-05-21  Tom Tromey  <tromey@redhat.com>

	* parse.cc (class_body_block): Indentation and comment fix.

	* model/binary.cc (resolve): Warn about strange shift count.

2004-05-18  Tom Tromey  <tromey@redhat.com>

	* bytecode/outpool.cc (add): Correctly compute class name.

	* model/class.cc (add_captured_constructor_arguments): Resolve
	new statements.

	* bytecode/locals.cc (remove): Don't delete elements while
	iterating.

	* scope.hh (resolution_scope): Initialize current_method.
	* scope.cc (set_current_method): Conditionally set is_static.

2004-05-17  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class): Initialize static_context.

	* model/class.cc (add_anonymous_constructor): Set modifiers on
	new constructor.
	(add_implicit_constructor): Set modifiers earlier.

2004-05-16  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (add_captured_variable): Resolve new field.

	* model/field.cc (resolve): Added extra parens.

	* model/fieldref.cc (resolve): Always compute `this' expression
	for instance fields; let model_this handle finding this$0.

	* header/jni.hh: New file.
	* header/jni.cc: New file.
	* header/jniutil.hh: New file.
	* header/jniutil.cc: New file.

	* model/primitive.hh (model_primitive_boolean::convert): New
	method.

	* model/class.cc (add): Moved from .hh file.  Create explicit
	initializer for field assignments.
	(create_finit_method): New method.
	(create_clinit_method): Likewise.
	* model/variable.hh (model_variable_decl::has_initializer_p): New
	method.
	* model/class.hh (model_class::add): Moved body to .cc file.
	(model_class::finit_): New field.
	(model_class::create_finit_method): Declare.
	(model_class::create_clinit_method): Likewise.
	(model_class::instance_inits): Now a list of statements, not
	blocks.
	(model_class::static_inits): Likewise.

	* model/method.cc (add_parameter): Use constructor_p.
	(note_throw_type): Likewise.

	* model/class.hh (model_class::need_this_0_p): Removed.
	* model/new.cc (determine_search_class): Don't add `this$0'
	argument.
	* model/class.cc (add_captured_constructor_arguments): Don't add
	`this$0' argument.
	(need_this_0_p): Removed.

	* model/invoke.cc (find_method): Break out of search if method is
	a constructor.

	* model/new.cc (determine_search_class): Pass scope to
	add_anonymous_constructor.
	* model/class.hh (model_class::add_anonymous_constructor): Updated
	for new argument.
	* model/class.cc (add_anonymous_constructor): Added scope
	argument.  Add captured variable arguments to constructor.

	* model/declstmt.cc (resolve): Save class in scope while
	resolving.

2004-05-15  Tom Tromey  <tromey@redhat.com>

	* lex.cc (get_token_internal): Use correct location for start of
	identifier.

	* model/method.cc (note_throw_type): Temporary special case for
	anonymous constructors.

	* model/new.cc (determine_search_class): Resolve classes of
	anonymous classes early.
	(determine_enclosing_instance): Resolve new expressions.
	* model/class.cc (resolve_classes): Added special case for
	anonymous class constructors.
	(add_anonymous_constructor): Set actual arguments on super
	invocation.

2004-05-10  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::set_static_context): Added assert.
	* model/new.cc (determine_search_class): Set static_context on
	anonymous class if required.
	* model/declstmt.cc (resolve): Moved from .hh file.  Set
	static_context on class if required.
	* model/declstmt.hh (model_class_decl_stmt::resolve): Moved body
	to .cc file.

2004-05-09  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::abstract_p): New method.
	(model_class::static_context): New field.
	(model_class::static_context_p): New method.
	(model_class::set_static_context): Likewise.
	* model/invoke.cc (resolve): Updated error message.
	(determine_search_class): Handle case of non-null expression.
	* model/class.cc (add_capturing_arguments): Don't add `this$0'
	argument.
	(add_anonymous_constructor): Use a ref_simple_variable_ref.  Added
	`qualifier' argument.
	* model/new.cc (determine_enclosing_instance): New method.
	(determine_search_class): Use it.
	(visit): Handle case where there is an expression.

	* model/class.cc (add_anonymous_constructor): Mark constructor as
	synthetic.
	(add_implicit_constructor): Likewise.

2004-05-08  Tom Tromey  <tromey@redhat.com>

	* model/new.cc (determine_search_class): Error if class is
	abstract or interface.

2004-05-05  Tom Tromey  <tromey@redhat.com>

	* model/fieldref.cc (resolve): Use has_as_member_of_p.
	* model/class.cc (has_as_member_of_p): New method.
	* model/class.hh (model_class::has_as_member_of_p): Declare.

	* model/fwdtype.hh (model_forwarding_resolved): Added asserts.

	* model/instanceof.cc (resolve): Reword warning.

	* model/new.cc (determine_search_class): Add arguments if class is
	a member class.
	* model/class.hh (model_class::member_p): Removed old comment.

2004-05-04  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (need_this_0_p): New method.
	(add_captured_constructor_arguments): Use it.
	(get_this_0): Likewise.
	(add_capturing_arguments): Likewise.
	* model/class.hh (model_class::need_this_0_p): Declare.

	* model/class.hh: Updated.
	* model/class.cc (add_captured_variable): Changed type of `var'
	parameter.

	* name.cc (create_variable_reference): Use declaring class, not
	super class.

2004-05-03  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (add_captured_constructor_arguments): Don't add
	captured `this$0' in a static context.
	(add_capturing_arguments): Likewise.

	* model/fieldref.cc (resolve): Look at declaring class, not super
	class, in loop.

	* model/class.cc (add_capturing_arguments): Push `this$0'
	argument.
	(resolve_classes): Don't call add_captured_constructor_arguments.
	(resolve): Call add_captured_constructor_arguments after resolving
	body.

	* model/invoke.cc (find_method): Include signature in error
	message.

	* model/fieldref.cc (resolve): Call get_this_0 on the class.  Only
	use this$0 when referenced field is in enclosing class.
	* model/class.cc (add_assert_members): Call set_synthetic on
	field.
	(get_this_0): Add new field to field_map and local_field_map.

2004-05-01  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::get_this_0): Declare.
	(model_class::this_0): New field.
	(model_class::static_p): New method.
	* model/class.cc (add_captured_constructor_arguments): Add
	`this$0' argument.
	(get_this_0): New method.

2004-05-13  Tom Tromey  <tromey@redhat.com>

	* model/try.cc (can_complete_normally): Updated wording in
	warning.

2004-05-11  Tom Tromey  <tromey@redhat.com>

	* model/binary.cc (resolve): Warn if boolean bitwise operator
	used.
	* compiler.hh (compiler::warn_boolean_bitwise): New field.

2004-05-05  Tom Tromey  <tromey@redhat.com>

	* model/if.cc (resolve): Warn about unneeded `else'.
	* compiler.hh (compiler::warn_unneeded_else): New field.

2004-04-28  Tom Tromey  <tromey@redhat.com>

	* model/field.cc (check_referenced): Handle
	serialPersistentFields.
	(resolve): Add checking for serialPersistentFields.
	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::java_io_ObjectStreamField): New field.
	(compiler::warn_bad_serialization_field): Likewise.

	* model/class.cc (resolve_classes): Call
	add_captured_constructor_arguments as needed.

	* scope.cc (set_current_method): New method.
	* scope.hh (resolution_scope::set_current_method): Moved body to
	.cc file.

2004-04-27  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (handle_resolve): Use operator% on `method'.
	* model/fieldref.cc (resolve): Use new operator.
	* model/field.hh (operator%): New operator.

	* bytecode/directory.cc (add): Use FILE_SEPARATOR.

	* compiler.cc (set_class_factory): Removed dead code.

	* model/method.cc (add_parameter): New method.
	* model/method.hh (model_method::get_body): New method.
	(model_method::add_parameter): Declare.
	* model/class.hh
	(model_class::add_captured_constructor_arguments): Declare.
	* owner.cc: Added instantiation.
	* typedefs.hh (ref_simple_variable_ref): New typedef.
	* model/class.cc (resolve_classes): Added assert.
	(add_captured_constructor_arguments): New method.

	* model/class.cc (add_anonymous_constructor): Use new operator.
	* util.hh (operator+): New function.

	* name.hh (create_variable_reference): Declare.
	* name.cc (create_variable_reference): No longer static.
	* model/class.hh (model_class::captured_variables): New field.
	(model_class::add_capturing_arguments): Declare.
	* model/class.cc (add_captured_variable): Push variable onto
	`captured_variables'.
	(add_capturing_arguments): New method.
	(add_anonymous_constructor): Added assert.
	(add_captured_variable): Likewise.
	* name.cc (create_variable_reference): Removed `name' parameter.
	Re-ordered arguments.

	* scope.hh (resolution_scope::set_current_method): Set `is_static'.
	* model/this.cc (resolve): Moved from .hh file.  Error if static
	context.
	* model/this.hh (model_this::resolve): Moved body to .cc file.

	* model/fieldref.cc (resolve): Correctly compute `search' when
	there is no expression.

	* model/method.hh (model_method::synthetic): New field.
	(model_method): Initialize it.
	(model_method::set_synthetic): New method.
	(model_method::synthetic_p): Likewise.

2004-04-26  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (find_method): Mark method as used.
	* model/fieldref.cc (resolve): Mark field as used.
	* model/class.cc (check_referenced): New method.
	* model/class.hh (model_class::used): New field.
	(model_class): Initialize new field.
	(model_class::check_referenced): Declare.
	(model_class::set_used): New method.
	* model/field.cc (model_field): Initialize new field.
	(check_referenced): New method.
	* model/field.hh (model_field::used): New field.
	(model_field::check_referenced): Declare.
	(model_field::set_used): New method.
	* compiler.hh (compiler::warn_unused_private_members): New field.
	* model/method.cc (check_referenced): New method.
	* model/method.hh (model_method::used): New field.
	(model_method): Updated.
	(model_method::check_referenced): Declare.
	(model_method::set_used): New method.

	* model/class.cc (add_captured_variable): Set field as synthetic.
	* model/field.cc (model_field): Initialize new field.
	* model/field.hh (model_field::synthetic): New field.
	(model_field::set_synthetic): New method.
	(model_field::synthetic_p): Likewise.

	* model/fieldref.cc (resolve): Generate outer field references via
	`this$0'.
	* name.cc (create_variable_reference): Create a reference to an
	outer field if required.

2004-04-24  Tom Tromey  <tromey@redhat.com>

	* name.cc (create_variable_reference): New function.
	(classify_ambiguous_name): Use it.

	* model/instanceof.cc (resolve): Warn for unneeded `instanceof'.
	* compiler.hh (compiler::warn_unneeded_instanceof): New field.

	* model/try.cc (can_complete_normally): Warn if `finally' does not
	complete normally.
	* model/try.hh (model_try::can_complete_normally): Moved to .cc
	file.
	* compiler.hh (compiler::warn_finally_abnormal_completion): New
	field.

	* model/binary.cc (resolve): Warn if char[] used in string
	concatenation.
	* compiler.hh (compiler::warn_string_plus_char_array): New field.

	* model/assign.cc (resolve): Warn if assignment has no effect.
	* compiler.hh (compiler::warn_assignment_no_effect): New field.
	* model/varref.hh (model_simple_variable_ref::get_variable): New
	method.

	* model/method.cc (resolve_classes): Warn if user overrides
	`finalise'.
	* compiler.hh (compiler::warn_finalize_spelling): New field.

	* compiler.hh (compiler::warn_unreachable_catch): New field.
	* model/try.cc (resolve): Warn if catch is unreachable.

	* model/method.cc (resolve): Warn if method has constructor's
	name.
	* compiler.hh (compiler::warn_method_with_constructor_name): New
	field.

	* model/fwdtype.cc (resolve): Call check_deprecated on the class.
	* model/class.cc (check_deprecated): Updated warning message.

	* compiler.hh (compiler::warn_ascii_escape): New field.
	* lex.cc (read_handling_escapes): Warn if ASCII character is
	represented by \u escape.

	* compiler.hh (compiler::warn_dollar_identifier): New field.
	* lex.cc (extract_identifier): Warn if `$' in identifier.
	* chartables.h: Rebuilt.
	* gen-table.pl (%want): Added dollar sign.

2004-04-21  Tom Tromey  <tromey@redhat.com>

	* model/field.cc (model_field): Constified.
	* model/while.hh (class model_while): Constified.
	* model/varstmt.hh (class model_variable_stmt): Constified.
	* model/varref.hh (class model_simple_variable_ref): Constified.
	* model/variable.hh (class model_variable_decl): Constified.
	* model/unit.hh (class model_unit): Constified.
	(class model_unit_source): Constified.
	* model/unary.hh (class model_unary): Constified.
	(class model_prefix_simple): Constified.
	(class model_logical_not): Constified.
	(class model_prefix_side_effect): Constified.
	(class model_postfix): Constified.
	* model/typevar.hh (class model_type_variable): Constified.
	* model/type.hh (class model_type): Constified.
	* model/try.hh (class model_try): Constified.
	* model/throw.hh (class model_throw): Constified.
	* model/this.hh (class model_this): Constified.
	* model/synchronized.hh (class model_synchronized): Constified.
	* model/switch.hh (class model_switch_block): Constified.
	* model/stmt.hh (class model_stmt): Constified.
	* model/return.hh (class model_return): Constified.
	* model/package.hh (class model_package): Constified.
	* model/null.hh (class model_null_literal): Constified.
	* model/new.hh (class model_new): Constified.
	* model/newarray.hh (class model_new_array): Constified.
	* model/method.hh (class model_method): Constified.
	* model/memberref.hh (class model_memberref_base): Constified.
	(class model_memberref_forward): Constified.
	* model/loop.hh (class model_loop): Constified.
	* model/literal.hh (class model_literal_base): Constified.
	(class model_simple_lit): Constified.
	(class model_string_literal): Constified.
	* model/label.hh (class model_label): Constified.
	* model/javadoc.hh (class model_javadoc): Constified.
	* model/invoke.hh (class model_invocation_base): Constified.
	(class model_method_invocation): Constified.
	(class model_type_qualified_invocation): Constified.
	(class model_super_invocation): Constified.
	(class model_this_invocation): Constified.
	* model/instanceof.hh (class model_instanceof): Constified.
	* model/import.hh (class model_import): Constified.
	(class model_import_single): Constified.
	(class model_import_on_demand): Constified.
	(class model_static_import_single): Constified.
	(class model_static_import_on_demand): Constified.
	* model/if.hh (class model_if): Constified.
	* model/identifier.hh (class model_identifier): Constified.
	* model/fwdtype.hh (class model_forwarding_type): Constified.
	(class model_forwarding_resolved): Constified.
	(class model_forwarding_simple): Constified.
	* model/for.hh (class model_for_base): Constified.
	(class model_for): Constified.
	* model/forenhanced.hh (class model_for_enhanced): Constified.
	* model/fieldref.hh (class model_field_ref): Constified.
	* model/field.hh (class model_field): Constified.
	* model/exprstmt.hh (class model_expression_stmt): Constified.
	* model/expr.hh (class model_expression): Constified.
	* model/enum.cc (model_enum): Constified.
	* model/enum.hh (class model_enum): Constified.
	* model/enumconst.hh (class model_enum_constant): Constified.
	* model/empty.hh (class model_empty): Constified.
	* model/element.hh (class model_element): Constified.
	* model/do.hh (class model_do): Constified.
	* model/declstmt.hh (class model_class_decl_stmt): Constified.
	* model/continue.hh (class model_continue): Constified.
	* model/cond.hh (class model_conditional): Constified.
	* model/classref.hh (class model_class_ref): Constified.
	* model/class.hh (class model_class): Constified.
	* model/catch.hh (class model_catch): Constified.
	* model/bytecode.hh (class model_bytecode_block): Constified.
	* model/break.hh (class model_break): Constified.
	* model/block.hh (class model_block): Constified.
	* model/binary.hh (class model_binary_base): Constified.
	* model/assign.hh (class model_assignment): Constified.
	* model/assert.hh (class model_assert): Constified.
	* model/arrayinit.hh (class model_array_initializer): Constified.
	* model/annotation.hh (class model_annotation): Constified.
	* model/cast.hh (class model_cast): Constified.
	* model/arrayref.hh (class model_array_ref): Constified.

2004-04-20  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::synthetic_fields): New field.
	(model_class::add_captured_variable): Declare.
	* model/class.cc (add_anonymous_constructor): Updated.
	(add_captured_variable): New method.
	* parse.cc (variable_declarator_id): Updated.
	(field_declarator): Likewise.
	* model/field.cc (model_field): Updated.
	* model/field.hh (model_field::declaring_class): Removed.
	(model_field::get_declaring_class): Likewise.
	(model_field): Removed argument.
	* model/variable.hh (model_variable_decl::declaring_class): New
	field.
	(model_variable_decl::get_declaring_class): New method.
	(class model_variable_decl): Added model_class argument.

2004-04-19  Tom Tromey  <tromey@redhat.com>

	* tree/treegen.cc: New file.
	* tree/tree.cc (generate): Rewrote.
	* tree/tree.hh (tree_generator::generate): Declare.
	* tree/treegen.hh: New file.

	* tree/tree.cc (visit_array_ref): Rewrote.
	* compiler.hh (compiler::target_bounds_check): New field.
	* tree/tree.hh (class tree_generator): Added missing
	declarations.

	* compiler.cc: Include bytegen.hh.
	(generate_code): Use a bytecode_code_generator.
	* bytecode/bytegen.cc: New file.
	* bytecode/bytegen.hh: New file.
	* compiler.hh (compiler::get_output_directory): New method.
	* codegen.hh: New file.

	* definer.hh (defining_class_reader::handle_code): Declare.

2004-04-18  Tom Tromey  <tromey@redhat.com>

	* definer.cc (handle_code): New method.
	* model/bytecode.hh (model_bytecode_block::max_stack): New field.
	(model_bytecode_block::max_locals): Likewise.
	(model_bytecode_block::bytes): Likewise.
	(set_max_stack, set_max_locals, set_bytecode): New methods.

	* compiler.hh (compiler::target_check_references): New field.
	* tree/builtins.cc: New file.
	* tree/builtins.hh: New file.
	* tree/tree.hh (tree_generator::method_tree): New field.
	* tree/tree.cc (tree_generator): Updated.
	(visit_switch): Wrote.
	(visit_switch_block): Likewise.
	(annotate): New method.
	(visit_assert): Use it.
	(visit_break): Likewise.
	(visit_do): Likewise.
	(visit_if): Likewise.
	(visit_return): Updated.
	(visit_switch): Use `annotate'.
	(visit_throw): Likewise.
	(visit_while): Likewise.
	(check_reference): New method.
	(visit_field_ref): Use it.
	(visit_for): Wrote.
	(visit_break): Rewrote.
	(visit_continue): Likewise.
	(visit_do): Register branch targets.
	(visit_for): Likewise.
	(visit_label): Likewise.
	(visit_while): Likewise.
	(arith_shift): Wrote.
	(visit_arith_shift): Likewise.

	* tree/tree.cc (visit_method): New method.
	(visit_simple_literal): Wrote.
	(handle_op_assignment): Likewise.
	(visit_while): Likewise.
	(visit_throw): Likewise.
	(handle_block_statements): Removed.
	(transform_list): New method.
	(visit_do): Wrote.
	(visit_empty): Likewise.
	(visit_return): Rewrote.
	(visit_synchronized): Wrote.
	(visit_op_assignment): Wrote.
	(handle_comparison): Removed.
	(visit_instanceof): Wrote.
	(visit_method_invocation): Wrote.
	(visit_new): Wrote.
	(visit_this): Wrote.
	(visit_simple_variable_ref): Wrote.
	(visit_prefix_simple): Wrote.
	(handle_inc_dec): New method.
	(visit_postfix_side_effect): New method.
	(visit_cast): Wrote.
	(emit_cast): Removed.
	(visit_conditional): Rewrote.
	(visit_field_ref): Wrote.
	(visit_prefix_side_effect): New method.
	(handle_invocation): New method.
	(visit_super_invocation): Likewise.
	(visit_this_invocation): Likewise.
	(visit_type_qualified_invocation): Likewise.
	(visit_string_literal): Wrote.
	* tree/tree.hh (tree_generator::this_tree): New field.

2004-04-16  Tom Tromey  <tromey@redhat.com>

	* tree/tree.cc (handle_block_statements): Wrote.
	(visit_assert): Likewise.

2004-04-08  Tom Tromey  <tromey@redhat.com>

	* lex.cc (here): Updated.
	* location.cc (LOCATION_UNKNOWN): Redefined.
	(decode_location): Removed.
	(encode_location): Likewise.
	(operator<<): Updated.
	* location.hh (encode_location): Removed.
	(class location): Now a class.  Added constructor.  Changed
	fields.

2004-04-06  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (add_anonymous_constructor): Set enclosing class
	on new super invocation.
	(resolve_classes): Error if class extends interface.  Handle case
	where anonymous class' superclass is an interface.
	* model/new.cc (resolve): Tell current class about anonymous
	class.
	* parse.cc (new_something): Set anonymous class on `new'
	expression.  Don't tell enclosing class about anonymous class.
	* model/new.hh (model_new::anonymous): New field.
	(model_new::set_anonymous): New method.

2004-04-05  Tom Tromey  <tromey@redhat.com>

	* scope.hh (class save_class): New class.
	* model/new.cc (determine_search_class): Resolve anonymous class.

	* model/package.cc (operator%): Updated.
	* model/package.hh (model_package::get_fully_qualified_name):
	Renamed from get_signature.
	* model/class.cc (generate_name): New method.
	(get_fully_qualified_name): Use it.
	(get_pretty_name): Updated.
	* model/class.hh (model_class::generate_name): Declare.
	(model_class::set_anonymous): Use it.
	(model_class::counter): New field.
	(model_class): Initialize it.

	* model/memberref.cc (resolve): Added assert.

	* model/class.hh (model_class::add_classes_to_list): New method.
	* bytecode/classwriter.cc (write): Print message when writing.
	* compiler.cc (generate_code): Don't print `writing' message.
	Write member classes.

	* bytecode/generate.cc (visit_label): Handle labels whose break
	target is NULL.
	* model/break.cc (resolve): New method.
	* model/break.hh (model_break::resolve): Moved body to .cc file.
	(model_break::get_target): New method.

2004-04-04  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_this): Handle IGNORE case.

	* bytecode/generate.cc (visit_for): Generate `goto' for infinite
	loop case.

	* bytecode/generate.cc (visit_array_ref): Handle CONDITIONAL
	case.

2004-04-03  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_prefix_simple): Handle ON_STACK and
	STRING cases.

	* classreader.cc (MAJOR_VERSION): New define.
	(MINOR_VERSION): Likewise.
	(MAGIC): Likewise.
	(parse_preamble): Check magic number and version numbers.

	* bytecode/generate.cc (visit_method_invocation): Use
	invokespecial for private methods.

	* bytecode/generate.cc (handle_op_assignment): Emit casts as
	required.
	* model/assign.cc (resolve): Only save cast from right hand side.

	* bytecode/generate.cc (handle_comparison): Increase stack.

	* bytecode/generate.cc (handle_op_assignment): Handle CONDITIONAL
	case.

	* model/method.cc (check_deprecated): Use different message for
	constructor.

	* bytecode/generate.hh (bytecode_generator::create_stringbuffer):
	Declare.
	(bytecode_generator::close_stringbuffer): Likewise.
	* bytecode/generate.cc (create_stringbuffer): New method.
	(close_stringbuffer): New method.
	(visit_arith_binary): Use them.
	(handle_op_assignment): Handle String `+='.
	(visit_op_assignment): Removed special case.

	* bytecode/generate.cc (visit_field_ref): Removed assert.  Handle
	IGNORE case.
	(visit_array_ref): Added assert.
	(handle_op_assignment): Likewise.
	(visit_cast): Handle IGNORE and CONDITIONAL cases.
	(visit_class_ref): Handle IGNORE case.
	(handle_logical_binary): Minor rearrangement.
	(visit_new): Handle IGNORE case.
	(visit_this): Added assert.

	* bytecode/outpool.cc (add): Fixed assertion.

	* bytecode/generate.cc (visit_class_ref): Increase stack.

	* model/invoke.cc (handle_resolve): Use constructor_p().
	* model/method.hh (model_method::set_modifiers): Private method is
	implicitly final.  Treat constructors differently.
	(model_method::constructor_p): New method.
	* model/class.hh (model_class::add(ref_method)): Methods in a
	final class are implicitly final.
	* model/field.hh (model_field::check_modifiers): Disallow final
	volatile fields.

	* bytecode/classwriter.hh (class_writer::write): Updated
	declaration.
	* bytecode/classwriter.cc (write): Take directory cache argument.
	* compiler.cc (generate_code): Create a directory cache.
	* compiler.hh (compiler::output_dir): New field.
	(compiler::set_output_directory): New method.
	* bytecode/directory.hh: New file.
	* bytecode/directory.cc: New file.

	* bytecode/generate.cc (binary_arith_operator): Handle CONDITIONAL
	case.

2004-04-02  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh
	(bytecode_generator::dereference_left_hand_side): Declare.
	(bytecode_generator::duplicate_lhs_value): Likewise.
	(bytecode_generator::emit_lhs_store): Likewise.
	(bytecode_generator::handle_op_assignment): Now private.
	(bytecode_generator::left_hand_side_info): New structure.
	(left_hand_side_kind, left_hand_side_index, left_hand_expr_type,
	left_hand_field): Removed.
	(bytecode_generator::lhs_info): New field.
	* bytecode/generate.cc (finish_op_assignment): New method.
	(handle_op_assignment): Use it.
	(bytecode_generator): Updated.
	(visit_array_ref): Likewise.
	(visit_field_ref): Likewise.
	(visit_simple_variable_ref): Likewise.
	(dereference_left_hand_side): New method.
	(duplicate_lhs_value): Likewise.
	(emit_lhs_store): Likewise.
	(handle_op_assignment): Use them.
	(handle_inc_dec): Wrote.

	* model/primitive.hh (model_primitive::convert): Allow boolean to
	int conversion.
	* bytecode/generate.cc (bytecode_generator): Initialize new
	field.
	(visit_arith_binary): Set and use string_plus_type.
	(handle_logical_binary): Increase stack.
	* bytecode/generate.hh (bytecode_generator::string_plus_type):
	New field.

	* model/class.cc (resolve_classes): Don't warn if anonymous class
	extends Object.

	* bytecode/generate.cc (visit_field_ref): Handle CONDITIONAL
	and STRING cases.
	(visit_simple_variable_ref): Likewise.

2004-04-01  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (handle_op_assignment): Pop correct type
	when handling ARRAY.  Push correct type when handling VARIABLE.

	* conversions.cc (widening_primitive_conversion): Can't convert
	from char to short.

	* model/field.cc (constant_p): Moved logic from variable.cc.
	* model/variable.cc (constant_p): Always return false.

	* lex.cc (string_literal): Use correct location.
	(numeric_literal): Pass value to constructors.
	* model/primitive.cc (divide): Moved from .hh file.
	Added instantiations.
	* model/primitive.hh (model_int_primitive::divide): Moved to .cc
	file.

	* name.cc (classify_expression_name): Updated.
	* model/fieldref.cc (resolve): Updated.
	* model/invoke.cc (determine_search_class): Rewrote.
	(determine_search_class): Updated.
	* model/class.cc (ensure_enclosing): New method.
	* model/class.hh (model_class::ensure_enclosing): Declare.
	* model/invoke.hh (model_type_qualified_invocation::klass):
	Changed type of field.
	(model_type_qualified_invocation::set_class): Updated.
	* model/fieldref.hh (model_field_ref::enclosing): Changed type of
	field.
	(model_field_ref): Updated.
	(model_field_ref::set_enclosing_class): Likewise.
	* parse.cc (super_access): Accept a type, not an identifier.

	* bytecode/generate.hh (bytecode_generator::left_hand_side_type):
	New enum.
	(bytecode_generator::left_hand_side_kind): New field.
	(bytecode_generator::left_hand_side_index): Likewise.
	(bytecode_generator::left_hand_expr_type): Likewise.
	(bytecode_generator::left_hand_field): Likewise.
	* bytecode/generate.cc (visit_array_ref): Set
	left_hand_side_kind.
	(visit_simple_variable_ref): Likewise.
	(visit_field_ref): Handle case of static context.  Set
	left_hand_side_kind.
	(handle_op_assignment): Wrote.
	(bytecode_generator): Initialize new fields.

2004-03-31  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::add(ref_method)): Methods of
	interfaces are not implicitly strictfp.
	* model/class.cc (resolve_classes): Error if class extends final
	class.
	(set_modifiers): Error if class if both final and abstract.
	Updated for interfaces.

	* model/binary.cc (value): Updated for binary_function change.
	* model/primitive.hh (binary_function): Added model_element
	argument.
	(model_primitive_base): Updated all binary functions.
	(model_int_primitive): Likewise.
	(model_fp_primitive): Likewise.
	(model_int_primitive::divide): New method.
	(model_int_primitive::mod): Throw exception on mod-by-0.

	* model/class.hh (model_class::add): Propagate `strictfp' to
	methods and member types.

	* model/catch.cc (resolve): Removed old comments.

2004-03-30  Tom Tromey  <tromey@redhat.com>

	* model/cond.cc (resolve): Check range when examining constant
	sub-expressions.
	* conversions.hh (representable_p): Declare.
	* conversions.cc (assignment_conversion): Check range when doing
	constant narrowing conversion.
	(representable_p): New function.
	* init.cc (initialize_primitive_types): Pass correct min/max
	values to model_int_primitive.
	* model/primitive.hh (model_primitive::convert): Added assert.
	(model_int_primitive): Added MIN and MAX template parameters.
	(model_int_primitive::convert): New method.
	(model_primitive_base::representable_p): New method.
	(model_int_primitive::representable_p): Likewise.
	* model/value.hh (convert_from_float): Changed `min' and `max' to
	be `long'.

2004-03-29  Tom Tromey  <tromey@redhat.com>

	* owner.cc: Don't instantiate owner<model_super_field>.
	* parse.cc (super_access): Create a model_field_ref, not a
	model_super_field.
	* typedefs.hh (ref_super_field): Removed.
	* model/fieldref.cc (model_super_field::visit): Removed.
	(resolve): Handle `super' access.
	* model/fieldref.hh (model_field_ref::super): New field.
	(model_field_ref::enclosing): Likewise.
	(model_field_ref::set_super): New method.
	(model_field_ref::set_enclosing_class): Likewise.
	(model_field_ref): Initialize new fields.
	(class model_super_field): Removed.

	* bytecode/generate.cc (handle_inc_dec): Put literal on stack.

	* model/fieldref.cc (resolve): Don't resolve multiple times.
	* model/varref.hh (model_simple_variable_ref::resolve): Don't
	resolve multiple times.

	* model/new.cc (resolve): Use handle_resolve.
	* model/invoke.cc (handle_resolve): New method.
	(resolve): Use it.
	* model/invoke.hh (model_invocation_base::handle_resolve):
	Declare.

2004-03-28  Tom Tromey  <tromey@redhat.com>

	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::gnu_gcj_runtime_StringBuffer): New
	field.

	* model/invoke.cc (resolve): New method.
	* model/invoke.hh (model_this_invocation::resolve): Declare.

	* model/memberref.cc (resolve): Don't resolve arguments.

	* model/varref.hh (model_simple_variable_ref::compute_constant_p):
	Renamed.  Now protected.
	* model/variable.cc (compute_constant_p): Renamed.
	* model/unary.hh (model_prefix_simple::compute_constant_p):
	Renamed.  Now protected.
	(model_prefix_side_effect): Likewise.
	(model_postfix): Likewise.
	* model/this.hh (model_this::compute_constant_p): Renamed.  Now
	protected.
	* model/null.hh (model_null_literal::compute_constant_p): Renamed.
	Now protected.
	* model/newarray.hh (model_new_array::compute_constant_p):
	Renamed.  Now protected.
	* model/memberref.hh
	(model_memberref_forward::compute_constant_p): Renamed.  Now
	protected.
	* model/literal.hh (model_literal_base::compute_constant_p):
	Renamed.  Now protected.
	* model/invoke.hh (model_invocation_base::compute_constant_p):
	Renamed.  Now protected.
	* model/instanceof.hh (model_instanceof::compute_constant_p):
	Renamed.  Now protected.
	* model/fieldref.hh (model_field_ref::compute_constant_p):
	Renamed.  Now protected.
	* model/cond.hh (model_conditional::compute_constant_p): Renamed.
	Now protected.
	* model/classref.hh (model_class_ref::compute_constant_p):
	Renamed.  Now protected.
	* model/cast.hh (model_cast::compute_constant_p): Renamed.  Now
	protected.
	* model/cast.cc (compute_constant_p): Renamed.  Now protected.
	* model/binary.hh (model_binary_base::compute_constant_p):
	Renamed.  Now protected.
	* model/assign.hh (model_assignment::compute_constant_p): Renamed.
	Now protected.
	* model/arrayref.hh (model_array_ref::compute_constant_p):
	Renamed.  Now protected.
	* model/arrayinit.hh
	(model_array_initializer::compute_constant_p): Renamed.  Now
	protected.
	* model/expr.hh (model_expression::constant_cache): New field.
	(model_expression::compute_constant_p): Declare.
	(model_expression::constant_p): No longer virtual or abstract.
	* model/expr.cc (set_type): Assert that type_cache is not set.
	* watch.hh (watch::set_p): New method.

	* bytecode/generate.hh (bytecode_generator::handle_inc_dec):
	Declare.
	* bytecode/generate.cc (handle_inc_dec): New method.
	(visit_prefix_side_effect): Use it.
	(visit_postfix_side_effect): Likewise.

	* model/method.hh (operator%): Declare.
	(model_method::get_pretty_name): Likewise.
	* model/method.cc (check_deprecated): Updated error message.
	(operator%): New.
	(get_pretty_name): New method.

	* model/newarray.cc (resolve): Resolve initializer.

	* compiler.cc (semantic_analysis): Don't emit `endl'.
	* reader/source.cc (apply): Don't emit `endl'.

	* compiler.cc (compiler): Initialize warnings_are_errors to
	false.

	* model/fieldref.cc (string_value): New method.
	* model/fieldref.hh (model_field_ref::string_value): Declare.

	* model/for.cc (resolve): Fold expression.
	* model/forenhanced.cc (resolve): Fold expression.

	* model/package.cc (operator%): New.
	* model/package.hh (operator%): Declare.

	* bytecode/generate.cc (visit_prefix_side_effect): New method.
	(visit_postfix_side_effect): Likewise.
	* bytecode/generate.hh
	(bytecode_generator::visit_prefix_side_effect): Declare.
	(bytecode_generator::visit_postfix_side_effect): Declare.
	* visitor.hh (visitor::visit_prefix_side_effect): Declare.
	(visit_prefix_side_effect::visit_postfix_side_effect): Declare.
	* model/unary.hh (model_prefix_side_effect::visit): Declare.
	(model_postfix::visit): Declare.
	* model/unary.cc (visit): New methods.

	* model/import.cc (find_class): Updated error message.

	* typedefs.hh: Include fold.hh.
	* model/variable.cc (resolve): Fold initializer.
	* model/throw.cc (resolve): Fold expression.
	* model/synchronized.hh (model_synchronized::resolve): Fold
	expression.
	* model/switch.cc (resolve): Fold each expression.
	* model/return.cc (resolve): Fold expression.
	* model/if.cc (resolve): Fold expression.
	* model/exprstmt.hh (model_expression_stmt::resolve): Fold
	expressions.
	* model/assert.cc (resolve): Fold expressions.
	* model/literal.cc (create_literal): New function.
	* model/literal.hh (create_literal): Declare.
	(model_string_literal): Constified argument.
	* model/newarray.hh (model_new_array::set_initializers):
	Constified argument.
	(model_new_array::set_element_type): Likewise.
	(model_new_array::set_size_expressions): New method.
	(model_new_array::add): Fixed argument type.
	* model/cond.hh (model_conditional::set_condition): New method.
	(model_conditional::set_true): Likewise.
	(model_conditional::set_false): Likewise.
	* model/arrayinit.hh (model_array_initializer::set_initializers):
	New method.
	* Makefile (dot_sources): Updated.
	* bytecode/generate.cc: Updated for changes to `visitor'.
	* bytecode/generate.hh (handle_block_statements,
	binary_arith_operator, arith_shift, emit_cast, handle_comparison):
	Now private.
	Updated for changes to `visitor'.
	* visitor.hh (visitor): Removed `const' from many method
	arguments.
	* fold.hh: New file.
	* fold.cc: New file.

2004-03-27  Tom Tromey  <tromey@redhat.com>

	* model/instanceof.cc (resolve): Handle primitive and void types.
	Removed unneeded checks.

	* model/binary.cc (visit): Removed.
	(resolve): Throw exception on error.  Updated boolean logic.
	Better error messages.
	* model/binary.hh (model_binary_base::visit): Removed.

	* model/cast.cc (value): Convert expression value to target
	value.

	* format/format.cc (operator%): New function.
	* format/format.hh (operator%): Declare.
	* model/unary.cc (visit): Removed.
	(resolve): Updated for template-izing.  Check that type is
	numeric.
	* model/unary.hh (model_unary::visit): Removed.
	(model_prefix_simple): Added `NAME' template parameter.
	(model_prefix_plus, model_prefix_minus, model_bitwise_not,
	model_logical_not): Updated.
	(model_prefix_simple::resolve): Better error message.
	(model_prefix_side_effect): Now a template class.
	(model_prefix_plusplus, model_prefix_minusminus): Now typedefs.
	(model_postfix): Now a template class.
	(model_postfix_plusplus, model_postfix_minusminus): Now typedefs.

	* model/field.hh (model_field::check_modifiers): Changed argument
	to const reference.  Added `request' argument.  Updated for
	changes to model_modifier_list.
	(model_field::set_modifiers): Constified argument.
	* parse.cc (any_method_declarator): Updated for
	model_method::set_modifiers change.
	(field_declarator): Check field modifiers.
	* model/class.cc (set_modifiers): New method.  Constified
	argument.
	* model/class.hh (model_class::set_modifiers): Moved body to .cc
	file.
	* model/modifier.cc (check): New method.  Added `request'
	argument.  Finished implementation.
	(access_check): Likewise.
	* model/modifier.hh (model_modifier_list::check): Moved body to
	.cc file.
	(model_modifier_list::access_check): Likewise.
	* model/method.hh (model_method::set_modifiers): Removed outdated
	comments.  Updated error message.  Enable extra checking for
	abstract methods.  Changed argument to const reference.

	* model/field.cc (check_deprecated): Updated error message.

	* model/class.cc (resolve_classes): Throw exception if duplicate
	field or method found.  Don't add constructor if class is
	anonymous.

	* parse.hh (parse::member_decl): Updated declaration.
	(parse::any_method_declarator): Likewise.
	(parse::field_declarator): Likewise.
	(parse::warn): Declare.
	(parse::switch_block_statement_groups): Updated declaration.
	(parse::method_header): Removed.
	(parse::type_bound_opt): Updated declaration.
	(parse::class_body_block): Likewise.
	(parse::class_body_declaration): Likewise.
	(parse::class_body): Likewise.
	* parse.cc (assignment_expression): Wrote error message.
	(for_init): Likewise.
	(find_lexically_enclosing_loop): Print error message.
	(labeled_statement): Search for clashing labels.
	(any_method_declarator): Emit warning; updated error messages.
	(class_body_declaration): Allow javadoc.
	(member_decl): Added `javadoc' argument.  Constified arguments.
	(any_method_declarator): Likewise.
	(field_declarator): Likewise.
	(member_decl): Updated.
	(class_body_block): Updated error message.
	(enum_body): Pass location to model_enum_constant constructor.
	(warn): New method.
	(type_declaration): Warn about empty declaration.
	(compilation_unit): Pass location of start of file to model_unit
	constructor.
	(switch_block_statement_groups): Constified argument.
	(type_bound_opt): Likewise.
	(class_body_block): Likewise.
	(class_body): Likewise.

	* format/format.cc (operator<<): Use `warnings_are_errors'.
	* compiler.hh (compiler::warnings_are_errors): New field.

	* model/invoke.cc (find_method): Merge `throws' clauses and create
	new method.
	* model/method.cc (get_throws_as_set): New method.
	* model/method.hh (model_method::get_throws): New method.
	(model_method::get_throws_as_set): Declare.
	* model/invoke.hh (model_invocation_base::phony): New field.

2004-03-26  Tom Tromey  <tromey@redhat.com>

	* typedefs.hh: Include typemap.hh.
	* model/typevar.cc (validate): New method.
	* model/typevar.hh (model_type_variable::validate): Declare.
	* model/class.cc (create_type_map): New method.
	* model/class.hh (model_class::create_type_map): Declare.
	* model/typemap.hh: New file.

2004-03-26  Tom Tromey  <tromey@redhat.com>

	* model/invoke.cc (resolve): Warn if method used in non-static
	context.
	* model/fieldref.cc (resolve): Warn if field used in non-static
	context.
	* compiler.hh (compiler::warn_non_static_context): New field.

	* compiler.cc (semantic_analysis): Check imports on compilation
	unit.
	* model/unit.cc (check_dups): Added `imp' argument; updated
	logic.
	(find_local_class): Updated.  Mark import as used.
	(check_imports): New method.
	* model/unit.hh (model_unit_source::name_map): Changed type.
	(model_unit_source::name_map_type): New typedef.
	(model_unit::check_imports): New method.
	(model_unit_source::check_imports): Declare.
	* model/import.cc (check_referenced): New method.
	* model/import.hh (model_import::used): New field.
	(model_import): Initialize it.
	(model_import::set_used): New method.
	(model_import::check_referenced): Declare.
	(model_import_on_demand): Implicit imports are always used.

	* model/import.cc (resolve): Use new flag.
	* compiler.hh (compiler::warn_java_lang_import): New field.
	(compiler::warn_unused_import): Likewise.

	* parse.cc (compilation_unit): Create an implicit import.
	* model/import.cc (java_lang_p): New function.
	(resolve): Warn on java.lang import.
	* model/import.hh (model_import::java_lang_p): Declare.
	(model_import_on_demand::implicit): New field.
	(model_import_on_demand): Initialize it.

2004-03-26  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (get_fully_qualified_name): New method.
	(compute_signature): Rewrote.
	* model/class.hh (model_class::fully_qualified_name): New field.
	(model_class::get_fully_qualified_name): Declare.

2004-03-25  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve_classes): Error if parameterized class
	is subclass of Throwable.

	* model/class.cc (resolve_classes): Don't warn if this class is
	an array.

2004-03-24  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve_classes): Warn if class explicitly
	extends Object.

	* access.cc (check_access): Use get_top_level_class.

2004-03-22  Tom Tromey  <tromey@redhat.com>

	* access.cc (accessible_p): Uncomment some checking code.
	(check_access): New function.

	* model/ideprecatable.hh (IDeprecatable): New constructor.

	* model/fieldref.cc (resolve): Check deprecation of field.

2004-03-21  Tom Tromey  <tromey@redhat.com>

	* bytecode/relocation.cc (update): Do nothing for switch_align.

	* compiler.hh (compiler::warn_deprecated): New field.
	* model/invoke.cc (resolve): Check deprecation of method.
	* model/field.cc (check_deprecated): New method.
	* model/field.hh (model_field::check_deprecated): Declare.
	* model/class.cc (check_deprecated): New method.
	* model/class.hh (model_class::check_deprecated): Declare.
	* model/method.cc (check_deprecated): New method.
	* model/method.hh (model_method::check_deprecated): Declare.

	* model/invoke.cc (find_method): Always throw on error.
	(resolve): Don't check `method'.

	* bytecode/generate.cc (visit_arith_binary): Promote short and
	byte to int.  Only call empty constructor.

	* bytecode/block.cc (emit_relocation): Fixed assertion.
	* bytecode/relocation.cc (relocation): Fixed assertion.

	* model/new.cc (visit): Added assert for now.
	(resolve): Don't re-resolve.

	* bytecode/generate.cc (handle_comparison): Handle boolean like an
	integral type.  Handle conversions correctly.
	(visit_switch): Handle conversions correctly.

	* bytecode/generate.cc (visit_arith_binary): Handle STRING case.
	(visit_array_ref): Likewise.
	(binary_arith_operator): Likewise.
	(arith_shift): Likewise.
	(visit_cast): Likewise.
	(visit_class_ref): Likewise.
	(handle_comparison): Likewise.
	(visit_instanceof): Likewise.
	(handle_logical_binary): Likewise.
	(visit_simple_literal): Likewise.
	(handle_invocation): Likewise.
	(visit_new_array): Likewise.
	(visit_null_literal): Likewise.
	(visit_prefix_simple): Likewise.
	* bytecode/generate.hh (expression_result): Added STRING.

	* model/method.cc (method_conversion): New method.
	* model/invoke.cc (resolve): Convert method arguments.
	* model/method.hh (model_method::method_conversion): Declare.
	* conversions.hh (method_invocation_conversion): Declare.
	* conversions.cc (method_invocation_conversion): New overload.

	* bytecode/generate.hh (bytecode_generator::adjust_for_type_full):
	Declare.
	* bytecode/generate.cc (handle_invocation): Emit extra bytes for
	`invokeinterface'.  Emit constant pool reference for method.
	(adjust_for_type_full): New method.
	(visit_array_ref): Use it.
	(visit_array_initializer): Likewise.
	(adjust_for_type): Rewrote.

	* bytecode/generate.cc (write): Use get_max.
	* bytecode/locals.cc (request): Update `max'.
	* bytecode/locals.hh (locals::max): New field.
	(locals): Initialize it.
	(locals::get_max): New method.

	* bytecode/relocation.cc (relocation): Correctly compute
	use_length.

2004-03-20  Tom Tromey  <tromey@redhat.com>

	* bytecode/block.cc (relocate): Update `pc' field.
	* bytecode/relocation.cc (perform): Fixed assertion.  Use pc of
	destination label.
	* bytecode/generate.cc (visit_switch): Emit a switch_align
	relocation.
	(handle_comparison): Adjust opcode for non-primitive comparisons.
	Generate false branch first.
	* bytecode/block.hh (bytecode_block::pc): New field.
	(bytecode_block::get_pc): New method.
	(bytecode_block): Initialize new field.

	* bytecode/block.hh (bytecode_block::copy): Declare.
	* bytecode/block.cc (copy): New method.
	(relocate): Use it.
	Include outstream.hh.
	* bytecode/generate.cc (write): Write more information.
	(bytecode_generator): Initialize first_block.
	* bytecode/outpool.hh (output_constant_pool::add_utf): Now
	public.
	* bytecode/classwriter.cc (write): Add names as Utf8, not String.
	* bytecode/outpool.cc (output_constant_pool): Initialize capacity
	to 1.

2004-03-19  Tom Tromey  <tromey@redhat.com>

	* bytecode/classwriter.cc (write): Hack to write data.
	* bytecode/outpool.cc (output_constant_pool): Initialize new
	field.
	(finish): Wrote.
	(add_utf): Wrote.
	* bytecode/outpool.hh (output_constant_pool::offset): New field.
	* bytecode/outstream.cc (put2_at): New method.
	(put): Likewise.
	* bytecode/outstream.hh (bytecode_stream::put2_at): Declare.
	(bytecode_stream::get_offset): New method.
	(bytecode_stream::get_bytes): Likewise.

	* bytecode/generate.cc (visit_field_ref): Handle `array.length'
	specially.
	* model/invoke.cc (resolve): Construct a `this' expression if
	required.
	(determine_search_class): Handle expression-less case.
	* name.cc (classify_expression_name): Don't set expression on new
	method invocation.
	(classify_ambiguous_name): Set expression on new field ref.

	* bytecode/generate.cc (emit_load): Added assert.
	(emit_store): Likewise.
	(visit_synchronized): Don't generate trailing code if body can't
	complete normally.

	* bytecode/generate.hh
	(bytecode_generator::handle_logical_binary): Declare.
	* bytecode/generate.cc (handle_logical_binary): New method.
	(visit_logical_binary): Use it.

	* bytecode/relocation.cc (update): Use empty_p.
	* bytecode/block.cc (update_next): Moved from .hh file.  Use
	empty_p, and consider special case involving refc==1.
	* bytecode/block.hh (bytecode_block::update_next): Moved body to
	.cc file.
	(bytecode_block::empty_p): New method.

	* model/primitive.hh (model_int_primitive::left_shift): New.
	(model_int_primitive::right_shift): Likewise.
	(model_int_primitive::unsigned_right_shift): Likewise.
	* model/binary.cc (value): New method.
	* model/binary.hh (model_arith_shift::jvalue): Declare.

	* bytecode/generate.cc (visit_type_qualified_invocation): Emit
	`this' reference for non-static methods.

	* bytecode/generate.cc (visit_for): Allow for case where `init',
	`cond', or `update' is null.

	* bytecode/generate.cc (visit_if): Only emit `goto' if true
	branch can complete normally.

	* bytecode/generate.cc (visit_field_ref): Increase stack.

2004-03-18  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::get_modifiers): New method.
	* model/field.hh (model_field::get_modifiers): New method.
	* bytecode/generate.cc (bytecode_generator): Initialize new
	field.
	(generate): Set bytecode_length.
	(write): Write all required information.
	* bytecode/generate.hh (bytecode_generator::bytecode_length): New
	field.
	* model/class.hh (model_class::get_fields): New method.
	* bytecode/classwriter.hh (class_writer::pool): Now a pointer.
	(class_writer::writer): New field.
	* bytecode/outpool.cc (output_constant_pool): Added
	bytecode_stream argument.
	(finish): New method.
	* bytecode/classwriter.cc (write): Write class information.
	Create constant pool.
	(class_writer): Initialize new fields.
	* bytecode/outpool.hh (output_constant_pool::bytes): Now a
	reference.
	(output_constant_pool): Updated.
	(output_constant_pool::finish): Declare.

	* bytecode/generate.hh: Declare new methods.
	* bytecode/generate.cc (handle_invocation): New method.
	(visit_method_invocation): Use it.
	(visit_type_qualified_invocation): New method.
	(visit_super_invocation): Likewise.
	* model/invoke.cc (visit): New implementations.
	* visitor.hh (visitor::visit_type_qualified_invocation): Declare.
	(visitor::visit_super_invocation): Likewise.
	(visitor::visit_this_invocation): Likewise.

2004-03-17  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh (bytecode_generator::full_comparison):
	Updated.  Now private.
	* bytecode/generate.cc (full_comparison): Added true- and false-
	branch target arguments.
	(handle_comparison): Handle ON_STACK case.

	* bytecode/generate.cc (visit_switch): Don't emit a `goto' at the
	end of a switch block.

	* bytecode/generate.cc (handle_comparison): Make sure
	sub-expressions are ON_STACK.

	* bytecode/block.cc (optimize): Set fall_through after
	optimization removes trailing `goto'.

	* bytecode/generate.cc (visit_break): Use correct element of
	target map.
	(visit_continue): Likewise.
	(visit_for_enhanced): Set target map correctly.
	(visit_switch): Set target map.

	* visitor.hh (visitor::visit_for): Updated.
	* bytecode/generate.hh (bytecode_generator::visit_for): Updated.
	* bytecode/generate.cc (visit_for): Re-ordered arguments.
	* model/for.cc (visit): Re-ordered arguments.

	* bytecode/generate.cc (visit_arith_binary): Use correct return
	type when finding method.

	* bytecode/generate.cc (visit_instanceof): Handle case where
	expression target is CONDITIONAL.
	* bytecode/generate.hh (bytecode_generator::branch_targets): Now
	derived from push_expr_target.
	(branch_targets): Updated constructor.

	* bytecode/generate.cc (visit_return): Expression results must be
	on stack.

	* bytecode/generate.cc (visit_catch): Don't create a temporary
	local.

	* model/new.cc (determine_search_class): Add anonymous
	constructor if required.
	* model/class.hh (model_class::add_anonymous_constructor):
	Declare.
	* model/class.cc (add_anonymous_constructor): New method.

2004-03-16  Tom Tromey  <tromey@redhat.com>

	* model/new.cc (resolve): Don't resolve `klass' here.
	(determine_search_class): Resolve `klass'.  Handle qualified
	`new'.
	* parse.cc (new_something): If `force_class', then look for
	simple name only.
	* model/new.hh (model_new::simple_name): New field.
	(model_new): New constructor.

	* parse.cc (new_something): Added `force_class' argument.
	(primary): Handle `primary . new'.
	* parse.hh (parse::new_something): Updated declaration.

2004-03-15  Tom Tromey  <tromey@redhat.com>

	* compiler.cc (semantic_analysis): Return `ok'.

	* parse.cc (new_something): Anonymous class is implicitly final.

	* model/invoke.cc (find_method): Don't crash when reporting
	error.
	* owner.cc: Added new instantiation.
	* parse.cc (new_something): Set arguments on `new' object.
	* typedefs.hh: Moved model/new.hh later.
	* model/new.cc (resolve): Rewrote.
	(determine_search_class): New method.
	(visit): Pass the method to the visitor.
	* model/new.hh (class model_new): Derive from
	model_invocation_base.
	(model_new): Call set_method.
	(model_new::arguments): Removed.
	(model_new::set_arguments): Likewise.
	(model_new::constant_p): Likewise.
	(model_new::determine_search_class): Declare.

	* bytecode/block.hh (bytecode_block::set_next): Removed assert.

	* tree/tree.cc: Documentation update.

	* model/fieldref.cc (resolve): Create `this' expression if
	required.
	* bytecode/generate.cc (visit_field_ref): We must have either an
	expression or a static field.

2004-03-14  Tom Tromey  <tromey@redhat.com>

	* bytecode/block.hh, bytecode/generate.cc, model/assert.hh,
	model/block.hh, model/break.hh, model/catch.hh, model/continue.hh,
	model/declstmt.hh, model/do.hh, model/empty.hh, model/exprstmt.hh,
	model/for.hh, model/forenhanced.hh, model/if.hh, model/label.hh,
	model/method.cc, model/return.hh, model/stmt.hh, model/switch.hh,
	model/synchronized.hh, model/throw.hh, model/try.cc, model/try.hh,
	model/varstmt.hh, model/while.hh, model/stmt.cc,
	model/bytecode.hh: Fixed typo, now `can_complete_normally'.

	* bytecode/generate.cc (visit_method): Emit a trailing return if
	required.

	* bytecode/classwriter.cc (write): Don't create generator for
	native or abstract methods.
	* model/method.hh (model_method::native_p): New method.

	* bytecode/generate.cc (visit_method): Removed assertion.

	* compiler.cc (generate_code): New method.
	Include classwriter.hh.
	* compiler.hh (compiler::generate_code): Declare.

	* model/field.hh (model_field::static_p): New method.
	* model/class.hh (model_class::get_methods): New method.
	* bytecode/classwriter.cc (write): Updated.
	* bytecode/generate.cc (~bytecode_generator): New destructor.
	(generate): Removed `out' argument.
	(write): New method.
	(visit_field_ref): New field.
	* bytecode/generate.hh: Update declarations.
	* bytecode/classwriter.hh (class_writer::write): Declare.
	(class_writer::class_writer): Move body to .cc file.
	(class_writer::~class_writer): Declare.
	(class_writer::pool): New field.
	
	* bytecode/generate.cc (visit_block): Push variable scope.
	(visit_catch): Likewise.
	(visit_for_enhanced): Likewise.
	(visit_for): Likewise.
	* bytecode/locals.hh (locals::scope): New field.
	(locals::push_scope): Declare.
	(locals::scope_map): New field.

	* bytecode/generate.hh: Updated.
	* bytecode/generate.cc: Added result_type argument.
	(bytecode_generator): Don't push parameters.

	* model/class.cc (add_assert_members): New method.
	* model/class.hh (model_class::add_assert_members): Declare.

	* bytecode/generate.cc (visit_class_ref): Emit ldc for 1.5
	target.
	* compiler.hh (compiler::target_15): New field.

	* model/new.cc (visit): Updated.
	* visitor.hh (visitor::visit_new): Added method argument.
	* bytecode/generate.hh
	(bytecode_generator::add_exception_handler): Declare.
	(bytecode_generator::emit_new_array): Likewise.
	(bytecode_generator::visit_new): Updated.
	* bytecode/generate.cc (add_exception_handler): New method.
	(emit_new_array): New method.
	(visit_array_initializer): Emit element type, not array type.
	(visit_new_array): Use emit_new_array.
	(visit_new): Added `init_meth' argument.
	(visit_logical_binary): Use branch_targets.

2004-03-13  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc: Include outpool.hh.
	(bytecode_generator): Added constant pool argument.
	(find_method): New method.
	(visit_assert): Use it.
	(visit_arith_binary): Likewise.
	(find_method): New method.
	* bytecode/generate.hh (bytecode_generator::cpool): New field.
	(bytecode_generator): Added constant pool argument.
	(bytecode_generator::find_method): Declare.
	* bytecode/outpool.cc: New file.
	* bytecode/outpool.hh: New file.

	* tree/tree.hh: New file.
	* tree/tree.cc: Removed some unnecessary code, reformatted.
	(visit_null_literal): Implemented.

	* bytecode/generate.cc (visit_switch): Assume there is at least
	one label.  Fixed handling of `default' case.

	* bytecode/generate.hh (bytecode_generator::emit_ldc): Declare.
	(bytecode_generator::emit_ldc2): Likewise.
	* bytecode/generate.cc (visit_switch): Use visit_simple_literal
	to push constant.
	(visit_arith_binary): Declare lhs_type and rhs_type.
	(emit_ldc): New method.
	(emit_ldc2): Likewise.

2004-03-11  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_switch): Emit switch_table
	relocation.

	* bytecode/generate.cc (visit_method): Set `method' field.
	(visit_assert): Use method's declaring class.
	(visit_class_ref): Likewise.

2004-03-10  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_new): Use const iterator.

	* bytecode/generate.cc (generate): Removed old fixme.
	(visit_method): Don't try to visit variable declarations.
	Generate variable for `this'.
	(visit_synchronized): Fixed try/finally code.

	* bytecode/generate.cc (visit_break): Don't use a const iterator.
	(visit_continue): Likewise.
	(visit_while): Define `done' before using it.
	(visit_switch): Emit switch_table relocations.
	(visit_synchronized): Added template arguments.
	(visit_try): Likewise.
	(arith_shift): Changed first argument to java_opcode.
	(handle_op_assignment): Likewise.
	(handle_comparison): Likewise.
	* bytecode/generate.hh (bytecode_generator::fstackt): Added
	another pair.
	(bytecode_generator::target_map_type): Changed.
	(bytecode_generator::finally_stack_element_type): New typedef.

	* bytecode/generate.hh: Updated.
	* bytecode/generate.cc (generate): Added `out' argument.
	(binary_arith_operator): First argument now a java_opcode.
	(any_cleanups_p): No longer `const'.

2004-03-09  Tom Tromey  <tromey@redhat.com>

	* bytecode/tree.cc: Moved...
	* tree/tree.cc: ... here.

	* visitor.hh (visitor::visit_method): Declare.
	* model/method.cc (visit): New method.
	* bytecode/relocation.hh (relocation): Declare.
	* bytecode/relocation.cc (relocation): New constructor.
	* bytecode/block.cc (emit_relocation): New method.
	* bytecode/block.hh (bytecode_block::emit): New method.
	* model/switch.hh (model_switch_block::get_labels): New method.
	(model_switch_block::get_statements): Likewise.
	(model_switch::get_default): Likewise.
	* bytecode/generate.hh (bytecode_generator::branch_targets): Now
	member class.
	Updated declarations.
	* model/method.hh (model_method::get_parameters): New method.
	(model_method::visit): Declare.
	* bytecode/generate.cc: Include locals.hh and block.hh.
	(visit_method): New method.
	(non_normal_completion): Likewise.
	(visit_assert): Use it.
	(visit_synchronized): Likewise.
	(visit_throw): Likewise.
	(visit_try): Likewise.
	(emit_relocation): Likewise.
	(visit_return): Likewise.

	* bytecode/generate.hh (bytecode_generator::target_map_type): New
	typedef.
	Added missing declarations.
	* bytecode/generate.cc (visit_assert): Use target_assert from
	compiler.
	(visit_break): Updated.
	(visit_continue): Updated.
	(visit_do): Just assign to target_map.
	(visit_for_enhanced): Likewise.
	(visit_for): Likewise.
	(visit_while): Likewise.
	(visit_for): Put test at end of loop.
	(visit_while): Likewise.
	(visit_throw): Use local variable if there is a cleanup.
	(any_cleanups_p): New method.
	(visit_array_initializer): Finished.
	(visit_new): Visit arguments in reverse order.

	* parse.cc (formal_parameter_list): Indentation fix.

	* compiler.hh (compiler::target_assert): New flag.

	* bytecode/generate.hh (bytecode_generator::expression_result):
	New enum.
	(bytecode_generator::expr_target): New field.
	(bytecode_generator::push_expr_target): New class.

	* bytecode/block.hh (class bytecode_block): Added friend.
	* bytecode/relocation.hh (class relocation): Added friend.
	* owner.cc: Added instantiations.

	* Makefile (bytecode_sources): Updated.
	* bytecode/outstream.cc: New file.
	* bytecode/outstream.hh (bytecode_stream::bytes): New field.
	(bytecode_stream::count): Likewise.
	(bytecode_stream::size): Likewise.
	(bytecode_stream): Declare.
	(~bytecode_stream): Likewise.

	* model/synchronized.hh (model_synchronized::resolve): Fixed error
	messages.

	* bytecode/outstream.hh: New file.

	* bytecode/generate.cc (generate): Added pass to write out
	bytecode.

	* bytecode/locals.cc: Include locals.hh.

	* bytecode/block.hh (bytecode_block::relocate): Updated prototype.
	* bytecode/generate.hh (bytecode_generator::zero_if_opcode): Moved
	to byteutil.hh.
	(bytecode_generator::invert_if_opcode): Likewise.
	* bytecode/byteutil.hh: New file.
	* bytecode/block.cc (optimize): Fixlets.
	* bytecode/relocation.cc (conditional_p): New method.
	* bytecode/relocation.hh (relocation::get_kind): New method.
	(relocation::conditional_p): Declare.
	(relocation::invert_condition): Likewise.
	(enum relocation_kind): Now top-level.

	* Makefile (dot_sources): Added owner.cc.
	* owner.hh (owner::ref): Moved to .cc file.
	(owner::deref): Likewise.
	(owner::operator=): Likewise.
	* owner.cc: New file.

	* bytecode/block.hh: Include relocation.hh.
	* bytecode/relocation.cc: Include relocation.hh.
	* bytecode/insns.hh: New file (from libgcj).
	* bytecode/relocation.hh (relocation::refc): New field.
	(relocation::kind): Updated values.
	Include insns.hh.

	* Makefile (bytecode_sources): Include block.cc.
	(sources): Added bytecode_sources.

	* bytecode/block.cc: Include bytecode/block.hh.

2004-03-08  Tom Tromey  <tromey@redhat.com>

	* model/instanceof.cc (resolve): Replace abort with throw.
	* model/binary.cc (resolve): Replace abort with throw.
	* model/cast.cc (resolve): Replace abort with throw.

	* conversions.cc (method_invocation_conversion): Disable boxing
	conversion.

	* model/unary.cc (resolve): New method.
	* model/unary.hh (model_prefix_side_effect::resolve): Declare.
	(model_postfix::resolve): Likewise.

	* conversions.cc (casting_conversion): Handle null type.

	* model/binary.cc (resolve): Use casting conversions, not
	assignment conversions.
	* model/instanceof.cc (resolve): Updated.
	* model/cast.cc (resolve): Updated.
	* conversions.cc (casting_conversion): Now returns bool.
	(narrowing_primitive_conversion): Added some missing conversions.
	* conversions.hh (casting_conversion): Now returns bool.

	* model/switch.cc (resolve): Check assignability of expression,
	not type.

	* model/switch.cc (resolve): Moved from .hh file.
	(model_switch::resolve): Moved from .hh file.  Added checks.
	* model/switch.hh (model_switch_block::resolve): Moved body to
	.cc file.
	(model_switch::resolve): Likewise.

	* model/element.hh (model_element::error): Return a
	semantic_error, not a format.

2004-03-07  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (add_implicit_constructor): Don't reference
	super() for Object.

	* model/class.cc (add_implicit_constructor): New method.
	(resolve_classes): Call it when needed.
	* model/class.hh (model_class::add_implicit_constructor):
	Declare.

	* model/invoke.cc (find_method): Added assert.

	* model/declstmt.hh (model_class_decl_stmt::resolve): Resolve
	classes of the class.
	* model/class.cc (push_fields): New method.
	(resolve): Use it.  Push fields before resolving fields or member
	types.
	* model/variable.hh (model_variable_decl::type): Now virtual.
	(model_variable_decl::constant_p): Likewise.
	(model_variable_decl::resolve): Likewise.
	(model_variable_decl::resolve_classes): Likewise.
	* model/expr.cc (set_type): Don't allow null value.
	* model/field.hh (model_field::resolve_classes): Declare.
	(model_field::type): Likewise.
	* model/field.cc (resolve_classes): New overload.
	(type): New method.
	(constant_p): Push fields.
	(type): Likewise.
	* parse.cc (class_or_interface_declaration_statement): Mark class
	as local.
	* model/class.hh (model_class::local): New field.
	(model_class): Initialize it.
	(model_class::set_local): New method.
	(model_class::local_p): Likewise.

2004-03-05  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (resolve): Updated.
	* model/forenhanced.cc (resolve): Updated.
	* model/for.cc (resolve): Updated.
	* model/catch.cc (resolve): Updated.
	* model/block.hh (model_block::resolve): Updated.
	* scope.hh (resolution_scope::variables): Changed type.
	(resolution_scope::find_variable): Changed return type.
	(resolution_scope::add): New overload.
	(push_block::block): Removed.
	(push_block): Removed block argument.
	(scope::pop): Likewise.
	(push_block::~push_block): Updated.
	* scope.cc (set_defining_block): Removed.
	(pop): Don't set defining block.
	(add(model_field_base*)): New method.
	Updated template instantiation.
	* model/variable.hh (model_variable_decl::set_defining_block):
	Removed.
	(model_variable_decl::get_defining_block): Likewise.
	(model_variable_decl::defining_block): Likewise.
	(model_variable_decl): Updated.
	* model/class.cc (resolve_classes): Compute field inheritance.
	Removed template instantiation.
	(resolve): Add fields to scope.
	* model/field.hh (model_field::get_declaring_class): New method.
	(class model_field_base): New class.
	(class model_field): Inherit from model_field_base.
	(model_field::ambiguous_p): New method.
	* model/class.hh (model_class::fields): New field.
	(model_class::add): Push new field on `fields'.
	(model_class::local_field_map): New field.
	* name.cc (classify_field_name): Throw exception if field is
	ambiguous.

	* definer.cc (handle_field): Updated for new model_field
	constructor.
	* model/enum.cc (model_enum): Updated for new model_field
	constructor.
	* model/arraytype.cc (model_array_type): Updated for new
	model_field constructor.
	* parse.cc (field_declarator): Updated for new model_field
	constructor.
	* model/variable.hh (model_variable_decl): Fields now protected.
	(model_variable_decl::type): Removed redundant method.
	(model_variable_decl): Constified arguments.
	(model_variable_decl::get_initializer): New method.
	(model_variable_decl::get_declared_type): Likewise.
	* model/field.cc (value): Removed.
	(model_field): New constructors.
	(constant_p): Updated.
	(resolve_classes): Likewise.
	(resolve): Likewise.
	* model/field.hh (class model_field): Inherit from
	model_variable_decl.
	(model_field::ambiguous_p): Removed.
	(model_field::set_variable): Likewise.
	(model_field::set_modifiers): Updated.
	(model_field::get_name): Removed.
	(model_field::type): Likewise.
	(model_field::value): Likewise.
	(model_field): Changed arguments; moved body to .cc file.
	(model_field): Added new constructor.
	(model_field::index): Removed.

2004-03-03  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve_classes): Resolve classes on Object
	when required.

	* model/invoke.cc (find_method): Throw exception if no method
	found.

	* parse.hh (class parse): Updated friend declaration.
	* machine.hh (token_matcher): Take token as argument.
	(recursion_machine::run): Pass token to matcher.
	(recursion_machine): Updated template parameter.
	* lex.cc (here): Pass filename to encode_location.
	* reader/source.cc (apply): Pass file name to token_stream
	constructor.
	* lex.hh (lexer::filename): New field.
	(lexer): Added `file' argument.
	* tstream.hh (class token_stream): Added `file' argument.
	* Makefile (dot_sources): Updated.
	* location.cc: New file.
	* format/format.cc (operator<<): Use operator<<(location).
	* location.hh (operator<<): Declare.
	(decode_location): Moved to .cc file.
	(encode_location): Moved body to .cc file.  Added `file'
	argument.
	(LOCATION_COLUMN_BITS): Moved to .cc file.
	(location): Declare as struct.
	(LOCATION_UNKNOWN): Redefine.

2004-03-02  Tom Tromey  <tromey@redhat.com>

	* model/class.cc (resolve_classes): Resolve classes of interfaces
	of current class.

2004-02-29  Tom Tromey  <tromey@redhat.com>

	* model/assign.cc (resolve): Update lhs and rhs.
	* model/binary.hh (model_binary_base::get_lhs): New method.
	(model_binary_base::get_rhs): Likewise.

	* bytecode/block.cc: Include typedefs.hh.
	* bytecode/block.hh: Use explicit owner<> wrapper.
	(ref_bytecode_block): New typedef.

	* bytecode/generate.hh: Updated.
	* bytecode/generate.cc (visit_array_initializer): New method.cb

	* parse.hh: Updated.
	* parse.cc (variable_declarator_id): Argument now a reference.

	* token.hh (token::set_location): New method.
	* lex.hh: Updated.
	* lex.cc (handle_keyword): Don't set location on new token.
	(get_token_internal): Added `where' argument.
	(get_token): Set location on returned token.

	* visitor.hh (visitor::visit_array_initializer): Declare.
	* parse.hh: Updated
	* model/fwdtype.cc (model_forwarding_element::resolve): New
	method.
	* model/fwdtype.hh (class model_forwarding_element): New class.
	* Makefile (model_sources): Updated.
	* parse.cc (array_initializer): Create an array initializer.
	Added `array_type' parameter.
	(new_something): Removed unused variable.  Updated for
	array_initializer change.
	(variable_initializer): Added `var_type' parameter.
	* typedefs.hh: Include arrayinit.hh.
	* model/arrayinit.hh: New file.
	* model/arrayinit.cc: New file.

	* model/switch.hh (model_switch::can_completely_normally): Coding
	standards fixlet.  Changed default handling.
	(model_switch::default_found): Removed.
	(model_switch): Updated.
	(model_switch::default_reached): Removed.

	* model/break.hh (model_break::can_completely_normally): Call
	break_reached on target as well.
	* model/ilabel.hh (Ilabel::break_reached): Declare.

	* model/modifier.cc (implicit_modifier): Print warning.  Fixed
	message.

	* model/label.hh (model_label::get_continue_target): Mark label as
	used.
	(model_label::get_break_target): Likewise.

	* model/cast.cc (constant_p): Expression must be constant as well.

	* model/class.cc (resolve_classes): Don't inherit constructors.

	* model/binary.cc (model_bitwise_binary::resolve): New method.
	(model_bitwise_binary::value): Likewise.
	(model_bitwise_binary::visit): Likewise.
	Updated instantiations.
	* model/binary.hh (class model_bitwise_binary): New class.
	(model_and, model_or, model_xor): Use it.

	* model/stmt.hh (model_stmt::get_continue_target): Declare as
	virtual.

2004-02-28  Tom Tromey  <tromey@redhat.com>

	* model/assign.hh (model_assignment::perform_assign_conv):
	Removed.
	(class model_op_assignment): Now a template.
	(model_op_assignment::visit): Declare.
	(model_plus_equal, model_minus_equal, model_mult_equal,
	model_div_equal, model_and_equal, model_or_equal, model_xor_equal,
	model_mod_equal, model_ls_equal, model_rs_equal, model_urs_equal):
	Now typedefs.
	* model/assign.cc (perform_assign_conv): Removed.
	(model_assignment::resolve): Perform assignment conversion here.
	(model_op_assignment::resolve): New method.
	(model_op_assignment::visit): New method.
	Removed old methods.  Added template instantiations.

	* model/primitive.hh (model_primitive_base): Initialize
	pretty_name.

	* conversions.cc (maybe_wrap): Call already_resolved on the new
	cast.
	* model/cast.cc (already_resolved): New method.
	* model/cast.hh (model_cast::already_resolved): Declare.

	* model/invoke.cc (find_method): Search lexically enclosing
	class.  Return immediately if single method found.

	* model/class.hh (model_class::add): Type member of an interface
	is implicitly static.
	(model_class::implicit_modifier): New method.

	* format/format.cc (operator<<): Print newline.

	* model/invoke.cc (determine_search_class): Fixed error checks.

	* name.cc (classify_ambiguous_name): Search in lexically
	containing classes.

	* model/assign.hh (resolve): Declare for binary op=.
	* model/assign.cc (resolve): New methods.
	* model/invoke.cc (find_method): Added hack when there is no
	maximally specific method.
	* model/cond.cc (resolve): Perform binary numeric promotion.
	* model/cast.cc (value): New method.
	* model/cast.hh (model_cast::value): Declare.
	* model/fieldref.cc (value): New method.
	* model/fieldref.hh (model_field_ref::value): Declare.
	(model_field_ref::constant_p): Field reference not constant if
	there is an expression.
	* model/field.cc (constant_p): New method.
	(value): New method.
	* model/class.hh (model_class::get_compilation_unit): New method.
	* model/field.hh (model_field::constant_p): Removed body.
	(model_field::state): New field.
	(model_field::value): Declare.

2004-02-26  Tom Tromey  <tromey@redhat.com>

	* format/format.cc (operator<<): Format output.

2004-02-24  Tom Tromey  <tromey@redhat.com>

	* reader/classbytes.cc (apply): Use iostreams.

	* typedefs.hh: Include model/bytecode.hh, iannotatable.hh.

2004-02-23  Tom Tromey  <tromey@redhat.com>

	* model/bytecode.cc: New file.
	* model/bytecode.hh: New file.

	* model/value.hh (convert_from_float): New function.

	* reader/source.cc (apply): Use iostreams; catch any exception.
	* model/unit.cc (find_local_class): Updated.
	* model/method.hh (model_method::set_modifiers): Updated.
	* model/field.hh (model_field::check_modifiers): Updated.
	* parse.cc (require): Updated.
	(class_body_block): Likewise.
	* name.cc (classify_package_name): Updated.
	(classify_type_name): Updated.
	(classify_expression_name): Updated.
	* lex.cc (escape_sequence): Updated.
	(get_token_internal): Updated.
	* classcache.cc (find_class): Updated.
	* exception.hh (exception_tmpl::name): Removed.
	(exception_base::formatter): New field.
	(exception_base, exception_tmpl): Updated.
	(exception_tmpl::get_text): Removed.
	(exception_base::operator<<): New.
	(exception_base::operator%): New.
	(exception_base::get_text): Removed.

2004-02-22  Tom Tromey  <tromey@redhat.com>

	* parse.cc (compilation_unit): Read annotations.
	* model/method.hh (class model_method): Extend IAnnotatable.
	(model_method::set_annotations): New method.
	* model/package.hh (class model_package): Extend IAnnotatable.
	(model_package::set_annotations): New method.
	* model/field.hh (class model_field): Extend IAnnotatable.
	(model_field::set_annotations): New method.
	* model/iannotatable.hh: New file.
	* model/class.hh (model_class::set_annotations): New method.
	(class model_class): Extend IAnnotatable.

2004-02-21  Tom Tromey  <tromey@redhat.com>

	* typedefs.hh: Include annotation.hh.
	(ref_annotation): New typedef.
	* compiler.hh (compiler::feature_annotations): New field.
	* model/annotation.hh: New file.
	* parse.hh (parse::annotation): Declare.
	(parse::annotations): Likewise.
	* parse.cc (annotation): New method.
	(annotations): Likewise.
	(class_body_declaration): Read annotations.
	(class_or_interface_declaration): Likewise.
	(class_body_block): Added `annos' argument.
	(member_decl): Likewise.
	(field_declarator): Likewise.

2004-02-17  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::varargs): New field.
	(model_method): Initialize it.
	(model_method::set_varargs): New method.
	(model_method::varargs_p): Likewise.
	* compiler.hh (compiler::feature_varargs): New field.
	* parse.hh (parse): Updated.
	* parse.cc (for_statement): Removed dynamic casts.  Enhanced `for'
	starts with a formal parameter.
	(formal_parameter): Added dots_ok and dots_result arguments.
	(formal_parameter_list): Updated.  Added dots_ok and dots_result
	arguments.
	(try_statement): Updated.
	(any_method_declarator): Updated.  Set varargs on method.

	* lex.cc (get_token_internal): Recognize `@' and `...'.
	(separator_p): Don't handle `.'.
	* token.hh (TOKEN_AT): New token.
	(TOKEN_DOTDOTDOT): Likewise.

2004-02-15  Tom Tromey  <tromey@redhat.com>

	* model/fieldref.cc (visit): Implement.
	* visitor.hh (visitor::visit_field_ref): New method.

	* model/fieldref.cc (resolve): Throw exception on error.

	* definer.cc (handle_field): Updated.
	* model/arraytype.cc (model_array_type): Updated.
	* model/enum.cc (model_enum): Updated.
	* parse.cc (field_declarator): Pass enclosing class to model_field
	constructor.
	* model/field.hh (model_field::declaring_class): New field.
	(model_field): Added new `decl' field.

	* typedefs.hh: Updated.
	* model/field.hh (model_field): Renamed from model_field_base.
	(model_field_base): Removed.
	(model_ambiguous_field): Removed.

2004-02-14  Tom Tromey  <tromey@redhat.com>

	* Makefile, compiler.cc, compiler.hh, exception.hh, factory.cc,
	factory.hh, format, init.cc, lex.cc, lextest, main.cc, name.hh,
	parse.hh, resolve.hh, scope.hh, tstream.hh, typedefs.hh, util.hh,
	model/arrayref.cc, model/arraytype.cc, model/arraytype.hh,
	model/assert.cc, model/assign.cc, model/assign.hh,
	model/binary.cc, model/block.hh, model/catch.cc, model/class.cc,
	model/class.hh, model/cond.cc, model/continue.hh, model/do.cc,
	model/element.hh, model/expr.cc, model/expr.hh, model/field.hh,
	model/for.cc, model/forenhanced.cc, model/fwdtype.hh,
	model/identifier.hh, model/if.cc, model/ilabel.hh,
	model/import.cc, model/import.hh, model/instanceof.cc,
	model/invoke.cc, model/invoke.hh, model/label.hh,
	model/literal.hh, model/memberref.hh, model/method.cc,
	model/method.hh, model/modifier.cc, model/modifier.hh,
	model/new.hh, model/null.hh, model/package.hh, model/primitive.hh,
	model/return.cc, model/stmt.hh, model/switch.hh,
	model/synchronized.hh, model/throw.cc, model/try.hh,
	model/type.cc, model/type.hh, model/typevar.cc, model/unary.cc,
	model/unary.hh, model/unit.cc, model/unit.hh, model/variable.cc,
	model/variable.hh, model/varref.hh, model/varstmt.hh,
	model/void.hh, model/while.cc: Changed error handling to use
	new formatter and throw exceptions where appropriate.
	* format/format.cc: New file.
	* format/format.hh: Likewise.

	* model/typevar.cc (erasure): Return appropriate interface.
	* model/arraytype.cc (erasure): New method.
	* model/arraytype.hh (model_array_type::erasure): Declare.

2004-02-09  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::implicit_modifier): New method.
	* model/class.hh (model_class::add): Interface methods are
	implicitly abstract.

	* model/element.hh (model_element::print_location): New method.
	(model_element::error): Use it.
	(model_element::warning): Likewise.
	* typedefs.hh: Include location.hh.
	(location, LOCATION_UNKNOWN): Moved to location.hh.
	* location.hh: New file.
	* lex.cc (here): Implement.

	* model/typevar.hh (model_type_variable::resolve): Moved to .cc
	file.
	(model_type_variable::erasure): Declare.
	* Makefile (model_sources): Updated.
	* model/typevar.cc: New file.
	(resolve): Only resolve `klass' it it is set.

	* Makefile (model_sources): Updated.
	* model/enum.cc: New file.
	* compiler.cc (compiler): Initialize new fields.
	* compiler.hh (compiler::java_lang_Enum): New field.
	(compiler::java_util_List): Likewise.
	* typedefs.hh: Include new headers.
	(ref_enum): New typedef.
	(ref_enum_constant): Likewise.
	* model/enumconst.hh: New file.
	* model/enum.hh: New file.
	* parse.cc (enum_body): Uncommented; updated.
	(enum_declaration): Likewise.
	(class_or_interface_declaration): Uncomment enum code.
	* parse.hh (parse::enum_body): Uncommented.
	(parse::enum_declaration): Likewise.

2004-02-08  Tom Tromey  <tromey@redhat.com>

	* model/class.hh (model_class::add): Set more modifiers on
	interface fields.
	* model/field.hh (model_field::implicit_modifier): New method.
	(model_field_base::implicit_modifier): Declare.

	* model/field.hh (model_field::set_modifiers): Call set_final on
	variable if required.
	(model_field::set_variable): Likewise.
	* model/variable.cc (constant_p): Use `final' field.
	* model/variable.hh (model_variable_decl::modifiers): Removed.

	* model/class.cc (resolve): Reset class after processing member
	classes.

	* model/class.hh (model_class::anonymous): New field.
	(model_class): Initialize it.
	(set_anonymous): New method.
	(model_class::anonymous_p): Likewise.
	(model_class::anon_classes): New field.
	(model_class::add): Updated.
	* parse.cc (new_something): Add anonymous class to enclosing
	class.  Mark class as anonymous.

	* model/fwdtype.cc (resolve): Updated comment.
	* model/fwdtype.hh (model_forwarding_simple): Removed unused
	construtors.
	* parse.cc (new_something): Use model_forwarding_resolved.

	* model/new.hh (model_new): Use model_forwarding_resolved.
	* model/classref.hh (model_class_ref): Use
	model_forwarding_resolved.
	* model/class.cc (resolve_classes): Use
	model_forwarding_resolved.

2004-02-07  Tom Tromey  <tromey@redhat.com>

	* conversions.cc (widening_reference_conversion): Move to
	superclass after checking this class' interfaces.

	* conversions.cc (widening_reference_conversion): Minor logic
	fix.

	* conversions.cc (widening_reference_conversion): Check for
	interfaces implemented by superclasses.

	* model/do.hh (model_do::can_completely_normally): Compute
	`constant_true' correctly.

	* model/try.hh (model_try::can_completely_normally): Fixed logic
	when computing return value.

	* parse.cc (super_access): Always set enclosing class on super
	reference.

	* model/return.cc (resolve): Only resolve expression if it
	exists.

	* model/class.cc (class_cast): New function.
	(resolve_classes): Search superinterfaces and Object if needed.

	* conversions.cc (widening_reference_conversion): Resolve classes
	before looking at superclass.

2004-02-06  Tom Tromey  <tromey@redhat.com>

	* conversions.hh (narrowing_primitive_conversion): Declare.
	* conversions.cc (narrowing_primitive_conversion): New method.
	(casting_conversion): Handle primitive types.

	* model/arraytype.cc (model_array_type): Use
	model_forwarding_resolved for interfaces.  Add `clone' method to
	type.  Set super class.

	* model/try.cc (resolve): Conditionally resolve `finally'.

	* model/newarray.cc (resolve): Set type to array's type.
	* model/newarray.hh (model_new_array::set_element_type): Renamed
	from set_array_type.
	* parse.cc (new_something): Use set_element_type.

	* parse.cc (new_something): Use set_array_type.
	* model/newarray.cc (resolve): New method.  Set type.
	* model/newarray.hh (model_new_array::resolve): Removed body.
	(model_new_array::set_array_type): Renamed from set_type.

	* model/while.hh (model_while::can_completely_normally): Fixed
	logic error.

	* scope.hh (scope::push): Call clear, not empty.

	* model/arraytype.cc (model_array_type): Add length field.
	* model/variable.hh (model_variable_decl): Initialize
	defining_block.
	* model/class.cc (resolve_classes): Conditionally resolve
	compilation unit.

	* name.cc (classify_ambiguous_name): Resolve intermediate
	expression and use its type.

	* name.cc (classify_ambiguous_name): Wrote more code.

	* model/class.cc (assignable_from_p): Ensure classes have been
	resolved.

	* model/throw.cc (resolve): Updated error text.

	* compiler.cc (semantic_analysis): Catch exception_base.
	* exception.hh (class exception_base): New class.
	(class exception_tmpl): Renamed from exception_base.

	* model/fieldref.cc (resolve): Look up field if not already
	known.
	* name.cc (classify_field_name): New function.
	(classify_ambiguous_name): Use it.
	* name.hh (classify_field_name): Declare.

2004-02-05  Tom Tromey  <tromey@redhat.com>

	* model/if.cc (resolve): Do nothing if false branch is not set.

	* model/new.cc (resolve): Set type.

	* name.cc (classify_type_name): Fixed assert.

	* model/class.hh (model_class::get_superclass): Return NULL if
	there's no superclass.

	* model/invoke.hh (model_this_invocation): Set method name to
	<init>.
	(model_super_invocation): Likewise.
	* model/field.hh (model_field_base::type): Declare.
	(model_field::type): New method.
	(model_ambiguous_field::type): Likewise.
	* model/fieldref.cc (resolve): New method.
	* model/fieldref.hh (model_field_ref::resolve): Removed body.
	(model_field_ref::constant_p): Implemented.

	* model/invoke.hh (model_this_invocation::enclosing): New field.
	(model_this_invocation): Initialize it.
	(model_this_invocation::set_enclosing_class): New method.
	* model/invoke.cc (determine_search_class): Implemented.
	* parse.cc (explicit_constructor_invocation): Set enclosing class
	on invocation objects.

	* access.cc (accessible_p): New function.
	* access.hh (accessible_p): Declare.
	* model/class.cc (find_members): Uncomment instantiation.
	* model/class.hh (model_class::find_members): Uncomment body.

	* compiler.cc (compiler): Initialize `generating_bytecode'.
	(add_unit): Only push on code generation list if
	generating_bytecode is true.
	* compiler.hh (compiler::generating_bytecode): New field.
	(compiler::set_object_output): New method.

	* bytecode/block.cc (optimize): Added new optimization.

	* model/unit.hh (model_unit::filename): New field.
	(model_unit::set_file_name): New method.
	(model_unit::get_file_name): Likewise.
	* reader/source.cc (apply): Set name on compilation unit.

	* model/unit.hh (model_unit::get_types): New method.
	* compiler.cc (load_source_file): New method.
	(semantic_analysis): Likewise.
	Include <iostream>.
	* compiler.hh (compiler::load_source_file): Declare.
	(compiler::semantic_analysis): Likewise.
	* factory.cc (find_source_file): New methods.
	(load_source_file): New method.
	* factory.hh (class_factory::find_source_file(string)): Declare.
	Updated all subclasses.
	(classpath_class_factory::load_source_file): Declare.

2004-02-04  Tom Tromey  <tromey@redhat.com>

	* model/method.cc (hides_or_overrides_p): New method.
	* name.cc (classify_ambiguous_name): Fixed bug when setting
	intermediate result.
	* model/class.cc (resolve): Push this class, not containing class,
	into scope.
	(find_members): New method.
	* access.cc (accessible_p): New method.
	* access.hh (accessible_p): New overload.
	* model/invoke.cc (find_method): Search class for method.
	(resolve): Set type.
	* model/method.hh (model_method::get_name): New method.
	(model_method::get_declaring_class): Likewise.
	(model_method::static_p): Likewise.
	(model_method::hides_or_overrides_p): Declare.
	* model/class.hh (model_class::find_members): Declare.
	(model_class::all_methods): New field.

2004-02-03  Tom Tromey  <tromey@redhat.com>

	* name.cc (classify_expression_name): Set name of method.

2004-02-02  Tom Tromey  <tromey@redhat.com>

	* name.cc (classify_expression_name): Set expression on
	unqualified method.

	* parse.cc (member_decl): Set result type to void for
	constructors.

	* model/binary.cc (model_numeric_comparison::resolve): New method.
	(model_equality_comparison::resolve): Likewise.
	(model_numeric_comparison::visit): New method.
	(model_equality_comparison::visit): Likewise.
	* model/binary.hh (class model_equality_comparison): New class.
	(model_equal, model_notequal): Now model_equality_comparison
	typedefs.
	(class model_numeric_comparison): New class.
	(class model_comparison): Removed.
	* parse.cc (class_name_dot_this): Updated for model_this
	constructor change.
	(primary): Create a new forwarding type for model_this.
	* model/this.hh (model_this): Changed type of second argument to
	construtor.  Removed one-arg constructor.
	(model_this::resolve): Set type.

	* bytecode/generate.cc (call_cleanups): Add cloned block to end of
	current list.
	(emit_saved_cleanup): New method.
	(call_cleanups): Use it.
	(visit_throw): Call cleanups.
	(visit_try): Reorganized.

	* bytecode/relocation.hh: Added doxygen.
	* bytecode/block.hh: Added doxygen.

	* parse.cc (super_access): Create a type qualified invocation, not
	a super invocation.
	* model/memberref.cc (resolve): Updated.
	* model/memberref.hh (model_memberref_forward::real): Now a
	ref_expression.
	* name.cc (classify_expression_name): Wrote.
	(classify_expression_name): Changed return type.
	(classify_ambiguous_name): Changed type of expr_result.  Now
	static.

	* bytecode/block.cc (clone): Added old_finish and new_finish
	arguments.
	* bytecode/block.hh: Updated.
	* bytecode/generate.cc (call_cleanups): Rewrote.

	* bytecode/relocation.hh (relocation::get_target): New method.
	(relocation::set_target): Likewise.
	* bytecode/block.cc (clone): New method.
	* bytecode/block.hh (bytecode_block::clone): Declare.
	* bytecode/generate.hh (bytecode_generator::wide_p): Declare.
	(bytecode_generator::adjust_for_type): Now const.
	(bytecode_generator::zero_if_opcode): New method.
	(bytecode_generator::increase_stack): Declare.
	(bytecode_generator::reduce_stack): Likewise.
	* bytecode/generate.cc (emit_cast): Wrote.
	(visit_assignment): Use handle_op_assignment.
	(handle_op_assignment): Rewrote.
	(adjust_for_type): Changed argument name.
	(wide_p): New method.
	(handle_comparison): More work.
	(emit_load): New method.
	(emit_store): Likewise.
	(visit_for_enhanced): Updated.
	(visit_synchronized): Likewise.
	(visit_variable_stmt): Likewise.
	(visit_simple_variable_ref): Likewise.
	(visit_this): Likewise.
	(full_comparison): Put arguments on stack.
	(increase_stack): New method.
	(reduce_stack): Likewise.
	(emit_cast): Model stack effects.
	(arith_shift): Likewise.
	(full_comparison): Likewise.
	(handle_comparison): Likewise.
	(visit_conditional): Likewise.
	(visit_instanceof): Likewise.
	(visit_simple_literal): Likewise.
	(visit_string_literal): Likewise.
	(visit_method_invocation): Likewise.
	(visit_new): Likewise.
	(visit_new_array): Likewise.
	(visit_prefix_simple): Likewise.
	(emit_load): Likewise.

2004-02-01  Tom Tromey  <tromey@redhat.com>

	* Makefile (model_sources): Updated.
	* model/stmt.hh (can_completely_normally): Move definition...
	* model/stmt.cc: ...here.  New file.

2004-01-31  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.hh (bytecode_generator::adjust_for_type):
	Declare.
	* bytecode/generate.cc (visit_if): Only visit false branch if not
	null.  Handle constant conditional expressions.
	(adjust_for_type): New method.
	(visit_array_ref): Use it.
	(visit_assignment): Handle left hand side specially.
	(visit_return): Use adjust_for_type.
	(arith_shift): Emit a cast for the right hand side.

	* bytecode/generate.cc (emit_relocation): Set
	can_completely_normally on block.
	(define): Always set next block.
	* bytecode/block.hh (bytecode_block::set_can_complete_normally):
	New method.
	(bytecode_block): New constructor.
	(~bytecode_block): New destructor.

	* model/stmt.hh (can_completely_normally): New function.
	* model/block.hh (model_block::can_completely_normally): Use new
	function.
	* model/switch.hh (model_switch_block::can_completely_normally):
	Use new function.

	* model/catch.cc (resolve): Use better language.

	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::java_lang_Class): New field.
	* model/classref.hh (model_class_ref::resolve): Moved
	implementation...
	* model/classref.cc (resolve): ...here.  Type of a class
	reference is Class.

	* model/arraytype.cc (model_array_type): Updated.
	* compiler.cc (compiler): Updated.
	* compiler.hh (compiler::java_io_Serializable): Renamed.

	* model/fwdtype.cc (resolve): Updated.
	* model/fwdtype.hh (model_forwarding_array::element): Now
	ref_forwarding_type.
	(model_forwarding_array): Updated.

2004-01-30  Tom Tromey  <tromey@redhat.com>

	* util.cc (checked_exception_p): New function.
	* model/invoke.cc (find_method): New method.
	(resolve): Call it.  Note types possibly thrown by method.
	* model/invoke.hh (model_invocation_base::find_method): Declare.
	* model/throw.cc (resolve): Note thrown type if it is a checked
	exception.
	* util.hh (checked_exception_p): Declare.
	* typedefs.hh: Include icatcher.hh.
	* model/method.cc (note_throw_type): New method.
	(resolve): Push self as the current catcher.
	(propagate_throws): New method.
	* model/method.hh (class model_method): Implement ICatcher.
	(model_method::note_throw_type): Declare.
	(model_method::propagate_throws): Likewise.
	* scope.hh (resolution_scope::current_catcher): New field.
	(resolution_scope): Initialize it.
	(push_catcher): New class.
	(resolution_scope::get_current_catcher): New method.
	(resolution_scope::set_current_catcher): Likewise.
	* model/try.hh (class model_try): Implement ICatcher.
	(model_try::enclosing_catcher): New field.
	(model_try::propagate_exceptions): Declare.
	(model_try::resolve): Moved implementation...
	* model/try.cc (resolve): ...here.  Push self as the current
	catcher before resolving enclosed block.
	(propagate_exceptions): New method.
	* model/icatcher.hh: New file.

	* name.cc (classify_type_name): Added assertion.
	(classify_type_name): Likewise.
	(classify_package_or_type_name): Likewise.
	(classify_package_name): Likewise.

2004-01-28  Tom Tromey  <tromey@redhat.com>

	* bytecode/tree.cc: New file.

	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::java_lang_NullPointerException): New
	field.
	* model/throw.cc (resolve): Handle `throw null'.

	* bytecode/classwriter.hh: New file.
	* bytecode/classwriter.cc: New file.
	* bytecode/relocation.hh: Updated.
	* bytecode/block.hh (bytecode_block::optimize): Declare.
	* bytecode/block.cc: New file.
	(relocate): New method.
	* bytecode/generate.cc (optimize_goto): Removed.
	(thread_jumps): Removed.
	(generate): New method.

2004-01-26  Tom Tromey  <tromey@redhat.com>

	* model/variable.cc (resolve_classes): New method.
	* model/variable.hh (model_variable_decl::resolve_classes):
	Declare.
	* model/field.cc (resolve_classes): New method.
	* model/field.hh (model_field_base::resolve_classes): Declare.
	(model_ambiguous_field::resolve_classes): Stub.
	(model_field::resolve_classes): Declare.
	* model/class.cc (resolve_classes): Resolve classes on methods
	and fields.
	* model/method.cc (resolve): Don't call resolve_classes.

	* model/class.cc (resolve): Set current class in scope.

	* model/method.cc (resolve): Fixed logic with final or abstract
	methods.  Correctly handle void methods.
	* parse.cc (any_method_declarator): Set modifiers on method.

	* factory.cc (load_class): Emit code if java source is used.
	* reader/source.cc (apply): Added another debugging print.

	* parse.hh (parse::get_primitive_type): Declare.
	* parse.cc (get_primitive_type): New method.
	(primary): Use it.
	(primitive_type): Likewise.
	(type_name): Likewise.
	* lex.cc (handle_keyword): Reverted previous patch.

	* lex.cc (handle_keyword): Put primitive type into tokens.

	* model/method.cc (resolve): Call resolve_classes.

2004-01-25  Tom Tromey  <tromey@redhat.com>

	* model/expr.cc (set_type): Removed assert.

	* classcache.cc (find_class): Throw exception if class not found.

	* parse.cc (class_name_dot_this): Do all processing after
	parsing.

	* model/field.hh (model_field_base::set_modifiers): New overload.
	(model_field::set_modifiers): Likewise.
	* definer.cc (handle_method): Set modifiers on method.
	(handle_field): Set modifiers on field.
	* model/method.hh (model_method::set_modifiers(modifier_t)): New
	overload.

	* tstream.cc (set_mark): Set mark_buffering.
	(unset_mark): Likewise.
	(get_unfiltered_token): Use mark_buffering and peek_buffering.
	Handle case when buffer has not been created.
	(class saver): New class.
	(peek_token): Don't set a mark.
	(peek_token1): Likewise.
	* tstream.hh (token_stream::mark_buffering): New field.
	(token_stream::peek_buffering): Likewise.
	(token_stream): Initialize new fields.

	* model/package.cc (find_class): Cache results.
	* model/package.hh (model_package::name_cache): New field.

2004-01-24  Tom Tromey  <tromey@redhat.com>

	* model/unit.cc (find_class_from_signature): Wrote simple
	temporary implementation.

	* definer.cc (parse): Create a model_unit_class.
	* parse.hh (parse::unit): Now a model_unit_source.
	* parse.cc (compilation_unit): Create a model_unit_source.
	* model/unit.cc (find_local_class): Updated.
	* model/unit.hh (model_unit::find_class(list)): Removed.
	(model_unit::find_class(string)): Renamed to find_local_class.
	(class model_unit): Simplified.
	(class model_unit_source): Renamed from model_unit.
	(class model_unit_class): New class.
	* model/fwdtype.cc (resolve): Updated.
	* name.cc (classify_type_signature): Added scope argument.
	Rewrote.
	(classify_primitive_type_signature): New function.
	(classify_type_name): Use find_local_class.
	* name.hh (classify_type_signature): Added scope argument.
	(classify_primitive_type_signature): Declare.

2004-01-23  Tom Tromey  <tromey@redhat.com>

	* definer.hh (defining_class_reader::handle_inner_class):
	Declare.
	* classreader.hh (class_reader::handle_inner_class): New method.
	(class_reader::handle_inner_classes): Removed.
	* classreader.cc (get_attribute): Changed handling of inner
	classes.

	* util.cc (drop_last_element): Don't try to drop element if there
	isn't one.

	* compiler.cc (find_name): Look in unnamed package for one
	element names.

	* definer.hh (defining_class_reader::self_name): New field.
	(one_type, parse_method_signature): Updated.
	* classreader.cc (match_p): Correctly interpret memcmp() result.
	(get_attribute): Ensure read pointer is correct at end of buffer,
	and ensure that all data is available.
	* definer.cc (start_class): Don't look for superclass of Object.
	Set name on result.
	(start_class): Set self_name.
	(parse): Set package on compilation unit.
	(one_type): New method.
	(parse_method_signature): Use it.  Fixed type of `name' argument.

	* main.cc (main): Changed interface.

	* reader/classbytes.cc (apply): Print information when reading.
	* reader/classbytes.hh (class_byte_creator::file): New field.
	(class_byte_creator): Updated.
	* factory.cc (find_source_file): Updated.
	(find_derived_file): Likewise.
	* reader/source.cc (apply): Print information when reading.
	* reader/source.hh (source_file_creator::file): New field.
	(source_file_creator): Updated.

2004-01-19  Tom Tromey  <tromey@redhat.com>

	* model/binary.cc (string_value): Rewrote.

	* model/return.cc (resolve): Use current method's return type.
	Added a missing error message.
	* model/method.hh (model_method::get_return_type): New method.

	* bytecode/generate.cc (visit_block): Remove local variables.
	(visit_catch): Likewise.
	(visit_for_enhanced): Likewise.
	(visit_for): Likewise.
	* bytecode/locals.cc (remove): Define.
	* bytecode/locals.hh (locals::remove): Declare.

	* scope.cc: Added template instantiations.
	* model/method.cc (resolve): Updated.
	* model/forenhanced.cc (resolve): Updated.
	* model/for.cc (resolve): Updated.
	* model/catch.cc (resolve): Updated.
	* model/block.hh (model_block::resolve): Updated.
	* scope.hh (push_block): Added block argument.

	* scope.cc (set_defining_block): New template function.
	(pop): Moved from .hh file.
	* scope.hh (push_block::block): New field.
	(push_block::~push_block): Updated.
	(scope::pop): Added `block' argument.  Moved implementation to
	.cc file.

	* model/variable.hh (model_variable_decl::defining_block): New
	field.
	(model_variable_decl::set_defining_block): New method.
	(model_variable_decl::get_defining_block): Likewise.

	* model/method.cc (resolve): Push method and new block, and add
	parameters to scope.
	* scope.hh (resolution_scope::current_method): New field.
	(resolution_scope::get_current_method): New method.
	(resolution_scope::set_current_method): Likewise.
	(class push_method): New class.

	* model/method.hh (model_method::resolve_classes): Declare.
	(model_method::resolve): Moved body...
	* model/method.cc (resolve): ...here.  Added more error checking.
	(resolve_classes): New method.

	* compiler.hh (compiler::unnamed_package): Now a
	ref_unnamed_package.
	(compiler::get_unnamed_package): Cleaned up.
	* typedefs.hh (ref_unnamed_package): New typedef.

	* parse.hh: Updated.
	* bytecode/generate.cc (visit_if): Updated.
	* model/if.cc: Updated.
	* bytecode/generate.hh (class bytecode_generator): Updated.
	* parse.cc (if_then_statement): Updated.
	* visitor.hh (class visitor): Updated.
	* typedefs.hh: Updated.
	* model/if.hh (class model_if): Renamed from model_if_stmt.

2004-01-18  Tom Tromey  <tromey@redhat.com>

	* model/ideprecatable.hh (IDeprecatable::set_javadoc): Handle
	case where javadoc is null.

	* compiler.cc (set_class_factory): Updated.
	(add_unit): New method.
	* compiler.hh (compiler::factory): Now a classpath_class_factory.
	(compiler::set_class_factory): Updated.
	(compiler::add_unit): Moved to .cc file; added emit_code
	argument.
	* definer.cc (defining_class_reader): Updated.
	(parse): Likewise.
	* definer.hh (defining_class_reader::parse): Return a ref_unit.
	(defining_class_reader::defining_class_reader): Updated.
	* Makefile (sources): Updated.
	* reader/source.cc: New file.
	* reader/source.hh: New file.
	* reader/classbytes.cc: New file.
	* reader/classbytes.hh: New file.
	* reader/classinst.hh: New file.
	* reader/fdreader.cc: New file.
	* reader/fdreader.hh: New file.
	* reader/reader.hh: New file.
	* loader.hh: Removed.
	* loader.cc: Removed.
	* ucs2.cc (ucs2_reader): Moved from .hh file.
	(~ucs2_reader): Likewise.
	* ucs2.hh (ucs2_reader::input): Now a byte_buffer.
	(ucs2_reader::curr): Likewise.
	(ucs2_reader::limit): Likewise.
	(ucs2_reader::get_uint8): Renamed from get_char.
	(ucs2_reader): Updated.
	(fallback_ucs2_reader): Likewise.
	* parse.cc (compilation_unit): Explicitly add java.lang.* import.
	* model/unit.hh (model_unit::model_unit): Don't add java.lang
	import.
	* reader/readbuffer.cc: New file.
	* reader/readbuffer.hh: New file.
	* reader/mmapbuffer.cc: New file.
	* reader/mmapbuffer.hh: New file.
	* classreader.cc (class_reader): Updated for byte_buffer.
	(~class_reader): Likewise.
	(ensure): Likewise.
	* classreader.hh (class_reader::ptr): Now const.
	(class_reader::buffer): Now a byte_buffer.
	(class_reader::buffer_length): Removed.
	(class_reader::class_reader): Changed interface.
	(class_reader::start): New field.
	* buffer.hh: New file.
	* factory.cc (classpath_class_factory::find_class): Rewrote.
	(find_source_file): New method.
	(find_derived_file): Likewise.
	(find_class): Removed.
	(load_class): Renamed from find_class.
	* factory.hh (class_factory::find_class): Removed.
	(class_factory::find_source_file): New method.
	(class_factory::find_derived_file): Likewise.
	(classpath_class_factory): Don't inherit from class_factory.

2004-01-17  Tom Tromey  <tromey@redhat.com>

	* name.cc (classify_type_signature): Fixed substr invocation.

	* classreader.hh (class_reader): Made more methods protected.
	* definer.hh (class defining_class_reader): Updated.
	* model/method.hh (model_method::javadoc): Removed.
	(model_method::deprecated_p): Likewise.
	(model_method::set_javadoc): Likewise.
	* definer.cc (handle_deprecated): Implemented.
	(handle_method): Wrote.
	(handle_exceptions): New method.
	(parse_method_signature): Likewise.
	* compiler.hh (compiler::code_generation_units): New field.

	* parse.cc (class_or_interface_declaration): Use set_deprecated.
	* typedefs.hh: Include ideprecatable.hh.
	* model/field.hh (model_field_base): Inherit from IDeprecatable.
	* model/method.hh (model_method): Inherit from IDeprecatable.
	* model/class.hh (model_class): Inherit from IDeprecatable.
	(model_class::javadoc): Removed.
	(model_class::deprecated_p): Likewise.
	(model_class::set_javadoc): Likewise.

	* model/ideprecatable.hh: New file.

	* model/class.cc (resolve_classes): Error if Object has
	interfaces.

	* model/class.cc (compute_signature): Define.
	* model/package.hh (model_package::get_signature): New method.
	* model/class.hh (model_class::compute_signature): New method.
	* model/type.hh (model_type::compute_signature): New method.
	(model_type::get_signature): Use it.

2004-01-16  Tom Tromey  <tromey@redhat.com>

	* model/fwdtype.cc (resolve): Use classify_type_signature.
	* name.cc (classify_type_signature): New function.
	* name.hh (classify_type_signature): Declare.

2004-01-13  Tom Tromey  <tromey@redhat.com>

	* cpool.hh (constant_pool::value): New method.
	(constant_pool::utf_position): Removed.
	* model/fwdtype.hh (model_forwarding_full::name): Now a string.
	* definer.cc (start_class): New method.
	(parse): Likewise.
	(handle_field): Likewise.
	(end_field): Likewise.
	(handle_method): Likewise.
	(end_method): Likewise.
	(handle_deprecated): Likewise.
	(handle_constant_value): Likewise.
	* definer.hh (defining_class_reader::interfaces): New field.
	(result): Likewise.
	(current_field): Likewise.
	(current_method): Likewise.
	Updated with new method declarations.
	* classreader.hh: Made all public methods protected.  Renamed
	`parse' to `run_parse'.  Updated with new method declarations.
	* classreader.cc (class_reader): Throw exception.
	(ensure): Likewise.
	(get_attribute): Likewise.
	(parse_constant_pool): Likewise.
	(run_parse): Renamed from `parse'.
	(get_string): New method.
	(get_class): Likewise.
	(get_attribute): Correctly compute name_len.
	* exception.hh (class_file_error): New type.
	* loader.cc (read_class_file): Wrote.

2004-01-12  Tom Tromey  <tromey@redhat.com>

	* model/fwdtype.cc (resolve): Define.
	* model/fwdtype.hh (class model_forwarding_full): New class.
	* classreader.hh (class_reader): Many fields now protected.
	* Makefile (sources): Updated.
	* definer.cc: New file.
	* definer.hh: New file.
	* factory.cc (find_class): Use read_java_file and
	read_class_file.
	Include loader.hh.
	* loader.cc: New file.
	* loader.hh: New file.

2004-01-11  Tom Tromey  <tromey@redhat.com>

	* Makefile (sources): Updated.
	* typedefs.hh (uint8, uint16, uint32): Temporary typedefs.
	* cpool.hh (constant_pool::valid_p): New method.
	(constant_pool::size): Likewise.
	(jword): New typedef.
	* classreader.cc (class_reader): Define.
	(~class_reader): Likewise.
	(parse): Set `ptr'. 
	(here): Fixed.
	(ensure): New method.
	(read_u1): Likewise.
	* classreader.hh (class_reader): Declare constructor.
	(~class_reader): Declare.
	Added missing declarations.

	* model/modifier.hh (model_modifier_list::get_value): Don't
	abort.

	* Makefile (sources): Updated.
	* model/modifier.cc: New file.
	* model/modifier.hh (model_modifier_list::implicitly_public):
	Updated.
	(model_modifier_list::implicit_modifier): Likewise.
	(model_modifier_list::add): Likewise.
	* conversions.cc (boxing_conversion): Updated.
	* parse.cc (for_statement): Updated.
	(member_decl): Likewise.
	(interface_declaration): Likewise.
	(class_declaration): Likewise.
	(import_declaration): Likewise.
	* model/unit.cc (check_dups): Updated.
	* lex.cc (single_line_comment): Updated.
	(handle_keyword): Likewise.
	* init.cc (pedantic, feature_assert, feature_enum,
	feature_static_import, feature_enhanced_for, feature_generics,
	feature_boxing_conversion, warn_canonical_modifier_order,
	warn_redundant_modifier): Don't define.
	* typedefs.hh (pedantic, feature_assert, feature_enum,
	feature_static_import, feature_enhanced_for, feature_generics,
	feature_boxing_conversion, warn_canonical_modifier_order,
	warn_redundant_modifier): Don't declare.
	* compiler.hh (class compiler_flag): New class.
	(compiler): Added compilation flag members.

	* parse.cc (member_decl): Use a model_forwarding_resolved.
	(primary): Likewise.
	(primitive_type): Likewise.
	(type_name): Likewise.
	* model/fwdtype.hh (class model_forwarding_resolved): New class.
	* model/cond.hh (model_conditional::resolve): Moved...
	* model/cond.cc (resolve): ...here.
	* model/cast.hh (model_cast::visit): Declare.
	(resolve, constant_p): Moved definitions...
	* model/cast.cc (constant_p): ...here.
	* model/unary.hh (resolve): Moved definitions...
	* model/unary.cc (resolve): ...here.
	* model/class.hh (model_class::assignable_from_p): Moved...
	* model/class.cc (assignable_from_p): ...here.
	* model/while.hh (model_while::resolve): Moved...
	* model/while.cc (resolve): ...here.
	* model/variable.hh (model_variable_decl::resolve): Moved...
	* model/variable.cc (resolve): ...here.  New file.
	* model/return.hh (model_return::resolve): Moved...
	* model/return.cc (resolve): ...here.
	* model/if.hh (model_if_stmt::resolve): Moved...
	* model/if.cc (resolve): ...here.
	* model/do.hh (model_do::resolve): Moved...
	* model/do.cc (resolve): ...here.
	* model/assert.hh (model_assert::resolve): Moved...
	* model/assert.cc (resolve): ...here.
	* Makefile (sources): Updated.
	* model/primitive.hh (model_primitive_base::assignable_from_p):
	Moved definition...
	* model/primitive.cc: ... here.  New file.
	* access.hh: Added forward declaration.
	* init.cc (warn_canonical_modifier_order): Define.
	(warn_redundant_modifier): Likewise.
	* typedefs.hh (warn_canonical_modifier_order): Declare.
	(warn_redundant_modifier): Likewise.
	Include conversions.hh near the end; move flag definitions near
	the beginning.
	* model/modifier.hh (model_modifier_list::get_value): Renamed from
	token_value.
	(model_modifier_list::add): More checking.
	(model_modifier_list::current_order): New field.
	(model_modifier_list): Initialize new field.
	(model_modifier_list::get_order): New function.
	(model_modifier_list::implicitly_public): Use
	warn_redundant_modifier.
	(model_modifier_list::implicit_modifier): New method.

	* bytecode/generate.cc (visit_return): Removed fixme comments,
	cleaned up.
	(handle_op_assignment): Removed fixme comments.
	* model/return.hh (model_return::resolve): Added more code.
	* model/variable.hh (model_variable_decl::resolve): Use new
	assignment_conversion.
	* model/assign.cc (resolve): Use new assignment_conversion.
	* model/unary.hh (model_unary::resolve): Use new
	unary_numeric_promotion.
	* model/binary.cc (resolve): Use new unary_numeric_promotion.
	(resolve): Use new binary_numeric_promotion.
	* conversions.hh (unary_numeric_promotion): Declare.
	(assignment_conversion): Likewise.
	* conversions.cc (unary_numeric_promotion): New function.
	(assignment_conversion): Likewise.
	(binary_numeric_promotion): Likewise.
	(maybe_wrap): Likewise.
	* model/cast.hh (model_cast): New constructor.

	* lex.cc (get_raw): Update column and line.
	* lex.hh (lexer::line): New field.
	(lexer::column): Likewise.
	(lexer): Initialize new fields.

2004-01-09  Tom Tromey  <tromey@redhat.com>

	* cpool.hh (constant_pool::tags): Now uint8*.
	(constant_pool::count): Removed.
	(constant_pool): New constructor.
	(~constructor): New destructor.
	* classreader.hh (class_reader::ptr): New field.
	(class_reader::buffer): Likewise.
	(class_reader::buffer_length): Likewise.
	(class_reader::parse_constant_pool): Declare.
	(class_reader::verify_constant_pool): Likewise.
	(class_reader::pool): New field.
	* classreader.cc (parse_constant_pool): New method.
	(verify_constant_pool): Likewise.

	* model/expr.hh: Added doxygen comments.
	* model/stmt.hh: Added more doxygen comments.

2004-01-08  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::get_signature): Removed body.
	* model/method.cc (get_signature): New method.

	* model/ilabel.hh: Doxygen updates.
	* model/stmt.hh: Added a little doxygen.

	* model/icontext.hh: Added some forward declarations.
	* typedefs.hh: Put name.hh near the end.
	* model/memberref.cc (resolve): Uncommented body.
	* name.cc (classify_expression_name): Dummy implementations.
	* name.hh (classify_expression_name): Declare.

	* model/continue.cc (visit): Updated.
	* model/break.cc (visit): Updated.
	* model/switch.hh (model_switch::get_continue_target): New
	method.
	(model_switch::get_break_target): Likewise.
	* model/break.hh (model_break::set_target): Updated.
	(model_break::target): Now an Ilabel*.
	(model_break::actual): New field.
	(model_break): Initialize all fields.
	* model/continue.hh (model_continue::target): Now an Ilabel*.
	(model_continue::set_target): Updated.
	(model_continue): Initialize all fields.
	(model_continue::resolve): Updated.
	(model_continue::can_completely_normally): Likewise.
	* model/stmt.hh (model_stmt::loop_p): Removed.
	(model_stmt::get_continue_target): New method.
	(model_stmt::get_break_target): Likewise.
	* model/label.hh (model_label::get_continue_target): New method.
	(model_label::get_break_target): Likewise.
	(model_label::loop_p): Removed.
	* parse.cc (find_lexically_enclosing_loop): Return NULL on error.
	(loop_statement): Updated.
	* model/ilabel.hh: Added doxygen comments.
	(Ilabel::get_continue_target): New method.
	(Ilabel::get_break_target): Likewise.
	* model/loop.hh (model_loop): Initialize all fields.
	(model_loop::loop_p): Removed.
	(model_loop::get_continue_target): New method.
	(model_loop::get_break_target): Likewise.
	* model/label.hh (model_label): Initialize all fields.

	* bytecode/generate.cc (handle_block_statements): Removed fixme.
	* model/switch.hh (model_switch_block::can_completely_normally):
	Erase unreachable statements.
	* model/block.hh (model_block::can_completely_normally): Erase
	unreachable statements.

2004-01-07  Tom Tromey  <tromey@redhat.com>

	* model/element.hh: Added doxygen comments.

	* model/switch.hh (model_switch_block::visit): Declare.
	* model/switch.cc (visit): New method.
	* visitor.hh (visitor::visit_switch_block): New method.
	* bytecode/generate.hh: Updated.
	* bytecode/generate.cc (handle_block_statements): New method.
	(visit_block): Use it.
	(visit_switch): Likewise.  More work on implementation.
	(visit_arith_binary): Don't hard-code "V".
	(visit_assert): Likewise.
	(visit_switch_block): New method.

	* All source files: Added GPL.

	* bytecode/generate.hh: Updated.
	* bytecode/generate.cc (full_comparison): New method.
	(handle_comparison): Likewise.
	(visit_comparison): Implemented.

2004-01-05  Tom Tromey  <tromey@redhat.com>

	* model/method.hh (model_method::throw_decls): Now a list of
	ref_forwarding_type.
	(model_method::resolv): Resolve throws clause.
	(model_method::set_throws): Updated.
	* parse.cc (any_method_declarator): `throws' clause precedes a
	type_list.

	* bytecode/generate.cc (visit_logical_binary): Wrote.
	(visit_simple_literal): Rewrote.

	* bytecode/generate.cc (visit_comparison): New methods.
	(visit_logical_binary): Likewise.
	* bytecode/generate.hh (bytecode_generator): Declare new visitor
	methods.
	* visitor.hh (visitor::visit_logical_binary): New methods.
	(visitor::visit_comparison): Likewise.
	* model/binary.hh (model_comparison::visit): Declare.
	(model_lor::visit): Likewise.
	(model_land::visit): Likewise.
	* model/binary.cc (visit): New methods.

2004-01-04  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc (visit_assert): Emit the class index.
	(visit_arith_binary): More work.

	* model/assign.cc (visit): Define.
	* model/assign.hh: Declare visit in each class.
	* visitor.hh (visitor::visit_op_assignment): Declare.
	* bytecode/generate.hh (bytecode_generator::visit_op_assignment):
	Declare.
	* bytecode/generate.cc (handle_op_assignment): Added base
	argument.
	(visit_op_assignment): New methods.

	* model/unary.cc (visit): Define.
	* model/unary.hh (model_logical_not::visit): Declare.

	* model/unary.cc: Added instantiations.
	* name.cc (classify_ambiguous_name): Typo fix.

	* model/binary.hh (model_plus::visit): Declare.
	* model/binary.cc (visit): New method.
	* bytecode/generate.hh (bytecode_generator::visit_arith_binary):
	New method.
	* visitor.hh (visitor::visit_arith_binary): New method.

2004-01-03  Tom Tromey  <tromey@redhat.com>

	* model/binary.hh (model_arith_shift::visit): Declare.
	* model/binary.cc (visit): New method.
	* bytecode/generate.cc (visit_prefix_simple): New methods.
	(visit_arith_shift): Likewise.
	(arith_shift): Likewise.
	* bytecode/generate.hh (bytecode_generator::visit_prefix_simple):
	Declare.
	(bytecode_generator::visit_arith_shift): Likewise.
	(bytecode_generator::arith_shift): Likewise.
	* visitor.hh (visitor::visit_prefix_simple): New methods.
	(visitor::visit_arith_shift): Likewise.
	* model/unary.cc (visit): New method.
	* model/unary.hh (model_prefix_simple::visit): Declare.

	* Makefile (sources): Added varref.cc.

	* name.cc (classify_ambiguous_name): Started implementation.
	* model/class.cc (find_members): Added new instantiation.
	* model/fieldref.hh (model_field_ref::name): New field.
	(model_field_ref::model_field_ref): Initialize `field'.
	(model_field_ref::set_field): Implement.
	(model_field_ref::set_field): New method.
	* model/varref.hh (model_simple_variable_ref::set_name): New
	method.
	(model_simple_variable_ref::set_variable): Likewise.
	(model_simple_variable_ref): Initialize decl.
	* model/class.hh (model_class::find_members): New method.
	(model_class::field_map): Changed declared type.

	* conversions.hh: Updated.
	* conversions.cc (widening_reference_conversion): Now returns
	bool.
	(widening_conversion): Updated.

	* model/binary.cc (model_arith_binary::visit): New method.
	* model/binary.hh (model_arith_binary::visit): Declare.
	* visitor.hh (visitor::visit_arith_binary): New methods.
	* bytecode/generate.hh (class bytecode_generator): Updated.
	* bytecode/generate.cc (binary_arith_operator): New method.
	(visit_arith_binary): New methods.
	(visit_method_invocation): Updated.

	* scope.hh (resolution_scope::set_static): New method.
	(resolution_scope::static_p): Likewise.
	(resolution_scope::is_static): New field.
	(resolution_scope::resolution_scope): Initialize field.

	* conversions.cc (widening_reference_conversion): Implemented.
	* model/class.hh (model_class::assignable_from_p): Implemented.
	(model_class::get_interfaces): New method.

	* compiler.cc (compiler): Initialize new fields.
	* compiler.hh (compiler::java_lang_RuntimeException): New field.
	(compiler::java_lang_StringBuffer): Likewise.

	* access.cc (accessible_p): Private member access is based on
	enclosing top-level class.
	* model/class.hh (model_class::get_top_level_class): New method.

	* model/unit.hh (model_unit::find_class): Moved body...
	* model_unit.cc: ... here.

	* factory.hh (jar_class_factory): Declare constructor.
	(solib_class_factory): Likewise.
	(jar_class_factory::file): New field.
	(solib_class_factory::file): Likewise.
	(classpath_class_factory): Declare destructor.
	(directory_class_factory): Moved constructor ...
	* factory.cc (directory_class_factory): ... here.
	(~classpath_class_factory): New.
	(jar_class_factory): New.
	(solib_class_factory): New.
	(find_class): New function.

	* classreader.cc (read_u2): New method.
	(read_u4): Likewise.
	(here): Likewise.

	* model/unit.hh (model_unit::find_class): Made better error
	message.  Fixed logic for detecting error.
	* model/import.hh (model_import::get_name): New method.

	* bytecode/relocation.cc (perform): Updated.
	* bytecode/relocation.hh (relocation::reloc_goto): Renamed from
	op_goto.
	* bytecode/block.hh (can_completely_normally): Rewrote.
	(update_next): New method.
	(set_next): Likewise.

	* model/class.cc (resolve_classes): Do nothing if class already
	resolved.

	* bytecode/generate.hh (bytecode_generator::this_index): New
	field.
	(bytecode_generator::first_block): Likewise.
	(bytecode_generator::current_block): Likewise.
	(bytecode_generator::finally_stack): Likewise.
	* compiler.cc (compiler): Initialize new field.
	* compiler.hh (compiler::java_lang_AssertionError): New field.
	* bytecode/generate.cc (visit_for_enhanced): Emit cast to
	iteration variable type.
	(emit_cast): New method.
	(visit_cast): Wrote.
	(visit_instanceof): Likewise.
	(visit_assert): Likewise.
	(visit_new): Likewise.
	(visit_this): Don't hard-code "0".
	(visit_simple_variable_ref): Wrote.
	(bytecode_generator): New constructor.
	(visit_new_array): Mostly implemented.
	(visit_simple_literal): Wrote.
	(define): New method.

2004-01-02  Tom Tromey  <tromey@redhat.com>

	* model/field.hh (model_field::implicitly_public): New method.
	* model/method.hh (model_method::implicitly_public): New method.
	* model/modifier.hh (model_modifier_list::implicitly_public): New
	function.
	* model/class.hh (model_class::add): Make member public if this is
	an interface.
	(model_class::implicitly_public): New method.

2004-01-01  Tom Tromey  <tromey@redhat.com>

	* typedefs.hh: Include icontext.hh.
	* name.cc (classify_type_name): If no current class, use current
	package for access control.~
	* model/class.cc (find_members): Updated.
	* model/class.hh (model_class): Derive from IContext.
	(model_class::find_members): `request' argument now an IContext.
	* model/package.hh (model_package::get_package): New method.
	(model_package::get_lexically_enclosing_class): Likewise.
	(model_package): Derive from IContext.
	* access.cc (accessible_p): Updated.
	* access.hh (accessible_p): Use IContext as type of second
	argument.
	* model/icontext.hh: New file.

	* model/import.cc (find_class): Try to load a class found via a
	package.
	* model/class.hh (model_class::fill_field_map): Removed.
	(model_class::find_members): Call resolve_classes.

	* parse.cc (primary): Cast NULL to parse_function.
	(assignment_expression): Likewise.
	(for_init): Likewise.
	(block_statements): Likewise.
	(constructor_body): Likewise.

	* machine.hh (state_machine::parse_function): Now public.

	* model/class.cc (resolve_classes): Added some error checking.

2003-12-31  Tom Tromey  <tromey@redhat.com>

	* access.cc (accessible_p): Don't abort for now.
	* model/class.hh (model_class::member_p): Implemented a bit.
	(model_class::get_declaring_class): Likewise.
	* model/modifier.hh (model_modifier_list::add): Update `mods'.

	* model/class.cc (resolve_classes): Updated for field changes.
	Ensure enclosing class is resolved first.  Put enclosing class
	into scope while resolving this class.
	* model/class.hh (model_class::resolution_state_value): New enum.
	(model_class::resolution_state): New field.
	(model_class::resolving_superclass): Removed.
	(model_class::model_class): Update.

	* model/class.cc (resolve_classes): Set class on
	resolution_scope.
	* scope.hh (resolution_scope::current_class): New field.
	(resolution_scope::resolution_scope): Initialize field.
	(resolution_scope::get_current_class): Implemented.
	(resolution_scope::set_current_class): New method.

2003-12-30  Tom Tromey  <tromey@redhat.com>

	* resolve.hh (resolve_classes): Removed scope argument.
	* model/class.cc (resolve_classes): Updated.
	* model/fwdtype.cc (resolve_classes): Updated.
	* model/class.hh (model_class::resolve_classes): Don't take a
	scope as an argument.

	* model/unit.hh (model_unit::find_class): Don't check with
	imports if not resolved.
	* compiler.hh (compiler::units): New field.
	(compiler::add_unit): New method.
	* factory.cc (find_class): Print message when parsing.
	(find_class): Register new compilation unit with compiler.
	* init.cc: Default all flags to `true' for now.

	* model/variable.hh (model_variable_decl::parent_scope): Removed.
	* Makefile (sources): Updated.
	* model/field.cc: New file.
	* model/field.hh (model_field::ambiguous_p): Return false.
	(model_field::resolve): Moved body to .cc file.
	(model_field::initializer): Removed.
	(model_field::parent_scope): Likewise.
	(model_field::type): Likewise.
	(model_field::constant_p): Delegate to the variable.

	* model/class.cc (resolve_classes): Set superclass to Object if
	required.

	* util.cc (split): Compute correct substring.

	* model/binary.hh (model_binary_base::visit): Declare.
	* model/unary.cc: New file.
	* model/unary.hh (model_unary::visit): Declare.
	* model/fieldref.cc: New file.
	* model/fieldref.hh (model_field_ref::visit): Declare.
	(model_super_field::visit): Likewise.
	* model/invoke.cc (visit): Define as stub.
	* model/invoke.hh (model_type_qualified_invocation::visit):
	Declare.
	(model_super_invocation::visit): Likewise.
	(model_this_invocation::visit): Likewise.
	* model/literal.hh (model_simple_lit::visit): Declare.
	* model/literal.cc (model_simple_lit::visit): Uncommented.
	* visitor.hh (visitor::visit_simple_literal): Added many
	overloads.
	* Makefile (sources): Updated.
	* model/newarray.hh (model_new_array::visit): Declare.

	* conversions.cc (unboxing_conversion): Use
	feature_boxing_conversion.
	(boxing_conversion): Likewise.

	* parse.cc: Updated comment.

	* model/literal.hh (model_simple_lit::visit): Commented out.
	* model/literal.cc (visit): Commented out for now.
	* model/assign.hh (model_plus_equal::resolve): Declare.
	* model/assign.cc (resolve): Fixed typo.
	* visitor.hh (visitor::visit_simple_literal): Removed for now.
	* compiler.cc (compiler): Initialize class cache objects here...
	* compiler.hh (class compiler): ... not here.
	* Makefile (sources): Updated.
	* classcache.cc: New file.
	* classcache.hh (class_cache::operator()): Typo fix.
	(class_cache::find_class): Declare.
	* typedefs.hh: Include classcache.hh.

	* model/arraytype.cc, model/assign.cc, model/binary.cc,
	model/catch.cc, model/forenhanced.cc, model/literal.cc,
	model/throw.cc, conversions.cc: Updated.
	* compiler.hh (compiler): Added new cache fields.
	* classcache.hh: New file.

	* visitor.hh (visit): New template function.

	* model/assign.cc (model_plus_assignment::resolve): Wrote.

	* model/variable.hh (model_variable_decl::visit): New method.
	* bytecode/generate.cc (visit_catch): Handle variable allocation.
	(visit_for_enhanced): Likewise.
	(visit_synchronized): Likewise.
	(visit_variable_stmt): Likewise.
	* bytecode/generate.hh (bytecode_generator::vars): New field.
	* bytecode/locals.hh: New file.
	* bytecode/locals.cc: New file.

	* util.hh (stack_temporary): Added new constructor, `pushed'
	field, `push' method.

2003-12-29  Tom Tromey  <tromey@redhat.com>

	* bytecode/generate.cc: Added new expression-visiting methods.
	* bytecode/generate.hh (bytecode_generator): Added new
	expression-visiting methods.

	* bytecode/block.hh (bytecode_block): Added some new methods.

	* model/memberref.hh (model_memberref_forward::resolve): Moved to
	.cc file.
	* model/memberref.cc: New file.

	* model/arrayref.cc, model/arrayref.hh, model/assign.cc,
	model/assign.hh, model/classref.hh, model/cond.hh, model/expr.hh,
	model/instanceof.cc, model/instanceof.hh, model/invoke.cc,
	model/invoke.hh, model/literal.cc, model/literal.hh,
	model/memberref.hh, model/new.cc, model/new.hh, model/null.hh,
	model/this.hh, model/varref.hh: Updated.
	* model/cast.cc, model/classref.cc, model/cond.cc,
	model/newarray.cc, model/null.cc, model/this.cc, model/varref.cc:
	New files.
	* visitor.hh (visitor): Added methods for visiting expressions.
	* model/assign.cc (model_plus_equal::resolve): New method.
	* model/expr.hh (model_expression::visit): New method.

	* bytecode/generate.cc: Wrote many methods.
	* bytecode/generate.hh: Added all visit_* declarations.
	Rearranged fields.

	* bytecode/generate.cc: New file.
	* bytecode/relocation.cc: New file.
	* bytecode.cc: Removed.

	* bytecode/generate.hh: New file.
	* bytecode/block.hh: New file.
	* bytecode/relocation.hh: New file.
	* bytecode.hh: Removed.

	* model/catch.cc, model/for.cc, model/forenhanced.cc,
	model/throw.cc: Updated.
	* model/assert.cc, model/block.cc, model/break.cc,
	model/continue.cc, model/declstmt.cc, model/do.cc, model/empty.cc,
	model/exprstmt.cc, model/if.cc, model/label.cc, model/return.cc,
	model/switch.cc, model/synchronized.cc, model/try.cc,
	model/varstmt.cc, model/while.cc: New files.
	* model/assert.hh, model/block.hh, model/break.hh, model/catch.hh,
	model/continue.hh, model/declstmt.hh, model/do.hh, model/empty.hh,
	model/exprstmt.hh, model/for.hh, model/forenhanced.hh,
	model/if.hh, model/label.hh, model/loop.hh, model/return.hh,
	model/stmt.hh, model/switch.hh, model/synchronized.hh,
	model/throw.hh, model/try.hh, model/varstmt.hh, model/while.hh:
	Updated.
	* model/stmt.hh (model_stmt::visit): New method.
	* typedefs.hh: Include visitor.hh.
	* visitor.hh: New file.
	* codegen.hh: Removed.

2003-12-28  Tom Tromey  <tromey@redhat.com>

	* parse.cc (new_something): Set compilation unit on new class.
	(interface_declaration): Likewise.
	(class_declaration): Likewise.
	(compilation_unit): Set `unit' field.
	* parse.hh (parse::unit): New field.
	(parse::parse): Initialize unit and pkg.
	* model/class.cc (resolve_classes): Resolve the compilation unit.
	(resolve): Likewise.
	(get_package): Moved from .hh file.
	* model/class.hh (model_class::compilation_unit): New field.
	(model_class::set_compilation_unit): New method.
	(model_class::get_package): Wrote.
	* model/unit.cc (resolve): Set compilation unit on the scope.
	* scope.hh (resolution_scope::set_compilation_unit): New method.
	(resolution_scope::resolution_scope): Don't set compilation unit.
	* model/unit.hh (model_unit::resolved): New field.
	(model_unit::find_class): Throw exception on error.
	(model_unit::get_package): New method.

	* name.cc (classify_package_or_type_name): Catch exceptions.
	(classify_package_name): Throw exception on error.
	(classify_type_name): Likewise.
	* exception.hh (ambiguous_type_error, type_not_found_error,
	other_type_error, duplicate_declaration_error): New types.

	* model/unit.cc: Updated.
	* model/unit.hh (model_unit::resolve): Added scope argument.
	* model/import.cc: Updated.
	* model/import.hh (model_import::resolve): Added scope argument.
	* name.cc (classify_package_or_type_name): Wrote.
	(classify_type_name): Assume there will always be a scope.

	* util.cc (drop_last_element): Wrote.

	* name.cc (classify_package_name): Changed logic for computing
	intermediate name.

2003-12-27  Tom Tromey  <tromey@redhat.com>

	* compiler.hh (compiler::set_class_factory): Moved body.
	* compiler.cc (compiler): Don't create the `java' package.
	(set_class_factory): Moved from class.hh.

	* model/class.cc: Explicitly instantiate template method.
	* model/import.cc (find_class): New methods.
	* model/invoke.cc (determine_search_class): New method.
	* model/arraytype.cc: Updated comment.
	* name.cc (classify_type_name): Search upward through all
	lexically enclosing types.
	* access.hh (accessible_p): Fixed prototype.

	* model/method.hh (model_method::declaring_class): New field.
	(model_method::signature): Likewise.
	(model_method::get_signature): New method.
	(model_method::model_method): Take class argument.
	(model_method::abstract_p): New method.
	* model/invoke.hh (class model_type_qualified_invocation): New
	class.
	* model/method.cc: New file.
	* conversions.cc (method_invocation_conversion): New function.
	* model/invoke.cc: New file.
	* model/unit.cc: New file.
	* resolve.hh: New file.
	* scope.cc: New file.
	* typedefs.hh: Include scope.hh, name.hh, access.hh.
	* model/class.cc (find_members): New method.
	* model/class.hh (model_class::member_classes): Now a map<>.
	(model_class::get_modifiers): New method.
	(model_class::get_superclass): Likewise.
	(model_class::get_package): Likewise.
	(model_class::member_p): Likewise.
	(model_class::get_declaring_class): Likewise.
	(model_class::get_lexically_enclosing_class): Likewise.
	* compiler.cc (find_package): Removed.
	* parse.cc (compilation_unit): Use classify_package_name.
	(any_method_declarator): Set declaring class on new method.
	* compiler.hh (compiler::get_primordial_package): New method.
	(compiler::find_package): Removed.
	* Makefile (sources): Updated.
	* model/packagedecl.hh: Removed.
	* model/stmt.hh (model_stmt::resolve): Added resolution scope
	argument.  Updated all callers and implementors.
	* model/expr.hh (model_expression::resolve): Added resolution
	scope argument.  Updated all callers and implementors.
	* util.hh (resolve): Take resolution scope argument.
	(simple_name_p): New function.
	* model/for.hh (model_for::resolve): Moved body to for.cc.
	* model/for.cc: New file.
	* model/name.hh: Removed.
	* scope.hh: New file.
	* access.cc: New file.
	* access.hh: New file.
	* model/package.cc (find_class): New method.
	(find_package): New method.
	* model/package.hh (model_package::name): Re-added.
	Updated for new methods.
	* model/fwdtype.cc (resolve): Use classify_type_name.
	* model/import.cc (find_class): New methods.
	* model/import.hh (model_import::find_class): New method.
	(model_import::single_import_p): New method.
	* model/unit.hh (model_unit::unit_type_p): Removed.
	(model_unit::find_class(std::string)): New method.
	* name.cc: New file.
	* name.hh: New file.

2003-12-24  Tom Tromey  <tromey@redhat.com>

	* Makefile (sources): Updated.
	* model/import.cc: New file.
	* model/import.hh (model_import_single::resolve): Find the
	class.  Uncommented body, moved to .cc file.

	* model/element.hh (model_element::error): Print a newline after
	the message.
	(model_element::warning): Likewise.

	* model/fwdtype.cc (resolve_classes): New method.
	* model/fwdtype.hh (model_forwarding_type::resolve_classes): New
	method.
	* util.hh (resolve_classes): New function.
	* model/class.hh (model_class::resolve_classes): New method.
	(model_class::resolving_superclass): New field.

	* compiler.hh (compiler::set_class_factory): New method.
	(compiler::~compiler): Removed body.
	* model/unit.hh (model_unit::find_class): New method.
	* factory.cc (directory_class_factory::find_class): New method.
	* typedefs.hh (FILE_SEPARATOR): New define.
	* factory.hh (directory_class_factory::directory): New field.
	* compiler.cc (find_package): Fixed computation of name for error
	message.
	(~compiler): Delete the factory.
	(find_class): Use `split'.
	* util.cc (join): Define.
	(split): Define.
	* util.hh (get_simple_name): Implemented.
	(join, split): Declare.

	* compiler.cc (compiler): Create the java package.

2003-12-23  Tom Tromey  <tromey@redhat.com>

	* model/package.cc (resolve): Removed.
	* parse.hh (parse::pkg): Now of type model_package*.
	(parse::package): Removed.
	* model/unit.hh (model_unit::package): Now of type
	model_package*.
	(model_unit::set_package): Updated.
	(model_unit::resolve): Don't resolve the package.
	(model_unit::add): Add the type to the package.
	* parse.cc (package): Removed.
	(compilation_unit): Parse the package and have the compiler
	object create it.
	(class_or_interface_declaration): Don't add the type to the
	package.
	* model/package.hh (model_package::name): Removed.
	(model_package::model_package): Removed name argument.
	(model_package::add): Added name argument.  Removed error
	checking.
	(model_package::resolve): Removed.
	(class model_primordial_package): New.
	* compiler.cc (find_package): New method.
	(compiler): Initialize the primordial package.
	* compiler.hh (compiler::find_package): Declare.
	* model/class.hh (model_class::set_superclass): Removed unused
	variant.

	* model/cond.hh (model_conditional::constant_p): Updated comment.
	(model_conditional::resolve): Updated.

	* model/break.hh (model_break::resolve): Updated comment.

	* model/continue.hh (model_continue::resolve): Don't crash if no
	target found.

	* model/stmt.hh (model_stmt::loop_p): New virtual method.
	* parse.hh (parse::current_label_scope): Removed.
	(parse::label_stack): New field.
	(parse::find_lexically_enclosing_loop): Declare.
	(parse::parse): Don't construct current_label_scope.
	* parse.cc: Don't include lscope.hh.
	(for_statement): Use a stack_temporary to push the scope.
	(while_statement): Likewise.
	(do_statement): Likewise.
	(switch_statement): Likewise.
	(find_lexically_enclosing_loop): New method.
	(loop_statement): Use it.
	* model/lscope.hh: Removed.
	* model/switch.hh (class model_switch): Implement Ilabel.
	(model_switch::match_label_p): New method.
	* model/loop.hh (class model_loop): Implement Ilabel.
	(model_loop::match_label_p): New method.
	(model_loop::loop_p): New method.
	* model/label.hh (class model_label): Implement Ilabel.
	(model_label::match_label_p): New method.
	(model_label::loop_p): New method.
	* typedefs.hh: Include ilabel.hh.
	* model/ilabel.hh: New file.

2003-12-22  Tom Tromey  <tromey@redhat.com>

	* parse.cc (type_declaration): Consume the semicolon.

	* Makefile (sources): Updated.
	* model/arraytype.hh (model_array_type::model_array_type):
	Removed body.
	* model/arraytype.cc: New file.
	* compiler.cc (~compiler): Removed.
	(find_name): Updated.
	* compiler.hh (primordial_package, unnamed_package): Now
	ref_package type.
	(compiler::~compiler): Define.
	(compiler::get_unnamed_package): Updated.
	* typedefs.hh: Include compiler.hh later.
	* global.hh (compiler): Added forward declaration.

	* parse.cc (for_init): Return a result.

	* main.cc (main): Handle multiple arguments.

	* parse.cc (array_initializer): Handle empty initializer.

	* parse.cc (for_statement): Removed argument.
	(while_statement): Likewise.
	(labeled_statement): Likewise.
	(if_then_statement): Likewise.
	(statement): Likewise.
	(statement()): Removed helper method.

	* model/fieldref.hh (model_field_ref::expression): New field.
	(model_field_ref::set_expression): New method.
	* parse.cc (explicit_constructor_invocation): Use set_expression,
	not set_primary.
	(primary): Set expression on field and method references.
	(if_then_statement): True branch of an if statement must be
	parsed as no-short-if.
	(block_statements): Rename inner "result".
	* model/invoke.hh (model_invocation_base::expression): New field.
	(model_super_invocation::primary): Removed.
	(model_super_invocation::set_primary): Removed.

	* parse.cc (field_declarator): Require a trailing semicolon.

	* parse.cc (new_something): Don't require array initializer.

	* parse.cc (switch_statement): Install a scope handler.

	* parse.cc (for_statement): Handle empty initializer.
	* model/for.hh (model_for::resolve): Handle cases where an
	expression is NULL.

	* parse.cc (switch_block_statement_groups): Don't re-assign to
	`t' in the loop body.  Peek ahead in update expression of outer
	loop.

	* parse.cc (switch_statement): Actually create the model_switch.

	* parse.cc (try_statement): Consume `catch' token.

	* parse.cc (unary_expression_not_plus_minus): Consume tokens.

	* parse.cc (synchronized_statement): Actually create the
	model_synchronized.

	* owner.hh (owner::operator!=): Use !=, not ==.

	* parse.cc (import_declaration): Use TOKEN_MULTIPLY.
	* token.hh (TOKEN_STAR): Removed.

	* parse.cc (relational_expression): Fixed calls to assume.

	* parse.cc (assignment_expression): Re-order arguments to
	machine.
	* parse.hh (basic_type_p, assignment_op_p): Now static.

2003-12-21  Tom Tromey  <tromey@redhat.com>

	* model/fieldref.hh (model_super_field::enclosing): Now a
	`model_class *'.
	(model_super_field::set_enclosing_class): Updated.
	* model/invoke.hh (model_super_invocation::enclosing): Now a
	`model_class *'.
	(model_super_invocation::set_enclosing_class): Updated.
	(model_super_invocation::primary): New field.
	(model_super_invocation::set_primary): New method.
	* util.hh (class stack_temporary): Use a deque, not a stack.
	* parse.hh (parse::find_lexically_enclosing_class): Declare.
	(parse::class_stack): Now a deque.
	(parse::enclosing_class): Updated.
	* parse.cc (find_lexically_enclosing_class): New method.
	(explicit_constructor_invocation): Call set_primary on invoke
	object.

	* parse.cc (explicit_constructor_invocation): Completed.
	* typedefs.hh (ref_invocation_base): New typedef.

	* parse.cc (new_something): Don't read `new' token here.

	* tstream.cc (get_unfiltered_token): Increment read_position when
	buffering a new token.

	* main.cc (main): Use proper exit status.

	* parse.cc (arguments): Handle empty argument list.

	* machine.hh (state_machine::run): Backtrack in the exception
	handler, not at the loop start.  Removed unused variable.

	* parse.hh (parse::explicit_constructor_invocation): Declare.
	* parse.cc (explicit_constructor_invocation): New method.
	(constructor_body): Use it.

2003-12-20  Tom Tromey  <tromey@redhat.com>

	* parse.cc (formal_parameter_list): Handle empty argument list.
	(any_method_declarator): Eat the `throws' token before parsing
	throws specification.

	* owner.hh (owner::operator=): New operator.

	* owner.hh (owner::owner): New constructor.

	* lex.cc (multi_line_comment): Correctly see javadoc comments.

	* token.hh (token::token): Simplified.
	(token::operator=): Use ordinary assignment.
	(token::operator owner<T>): Simplified.
	* owner.hh (owner::owner): Use dynamic cast.
	(owner::operator=): Use dynamic cast.
	(operator==, operator!=): Removed unused forms.

	* lex.cc (ensure): Ensure initial buffer is large enough.

	* model/class.hh (model_class::fields): Removed.
	(model_class::add): Rewrote.
	* model/variable.hh (model_variable_decl::get_name): New method.
	* model/field.hh (model_field::name): Removed field.
	(model_field::get_name): New method.
	(model_field_base::get_name): New abstract method.

	* model/class.hh (class model_class): Make fields protected.
	* model/arraytype.hh (model_array_type::model_array_type): Add
	the interfaces.

	* compiler.cc (compiler): Moved from compiler.hh.
	(~compiler): Likewise.
	* model/memberref.hh (model_memberref_forward::is_call): New
	field.
	(model_memberref_forward::arguments): Likewise.

	* model/fwdtype.cc (resolve): New method.
	* model/fwdtype.hh (model_forwarding_simple::resolve): Removed
	body.

	* parse.cc (compilation_unit): Use the unnamed package if needed.
	* compiler.hh (compiler::unnamed_package): New field.
	(compiler::~compiler): New destructor.
	(compiler::get_unnamed_package): New method.

2003-12-19  Tom Tromey  <tromey@redhat.com>

	* factory.hh (class class_factory): Added destructor.

	* lex.cc (ensure): Make default size reasonable.

	* parse.cc (compilation_unit): Set pkg.
	(class_or_interface_declaration): If there's no enclosing class,
	tell the package about the class.
	* parse.hh (parse::pkg): New field.

	* parse.cc (class_declaration): Set containing class.

	* Makefile (sources): Updated.
	* model/class.cc: New file.
	* model/package.cc: New file.

	* model/iname.hh (Iname::find_name): New abstract method.
	* parse.hh (parse::type_declaration): Updated.
	* parse.cc (any_method_declarator): Check whether
	enclosing_class() is an interface.
	(type_declaration): Now returns ref_class.
	(compilation_unit): Pass ref_class to model_unit::add.
	* model/throw.cc (resolve): Typo fix.
	* model/instanceof.cc (resolve): Typo fixes.
	* model/field.hh (model_field_base::resolve): New abstract
	method.
	(model_ambiguous_field::resolve): New method.
	* model/type.hh (model_type::interface_p): New method.
	(model_type::final_p): Likewise.
	* model/class.hh (model_class): Publicly inherit Iname.
	(model_class::final_p): New method.
	(model_class::find_name): Declare.
	* model/variable.hh (model_variable_decl::resolve): Pass
	model_expr to assignment_conversion.
	* compiler.cc (compiler::find_name): Typo fix.
	* compiler.hh (compiler::find_name): Declare.
	(compiler::primordial_package): New field.
	* model/unit.hh (model_unit::resolve): Typo fix.
	* model/unary.hh (model_logical_not::model_logical_not): Typo
	fix.
	(model_prefix_simple::value): Get the value before casting.
	* model/package.hh (model_package::add(ref_class)): Typo fix.
	(model_package): Publicly inherit Iname.
	(model_package::find_name): Declare.
	* model/arraytype.hh (model_array_type::element_type): Typo fix.
	* watch.hh (watch::operator=): Typo fix.

	* classreader.hh: Added more event methods.
	* classreader.cc (get_attribute): Fleshed out.

2003-12-18  Tom Tromey  <tromey@redhat.com>

	* cpool.hh: New file.
	* classreader.cc: New file.
	* classreader.hh: New file.

	* model/assign.cc (resolve): Updated for new
	assignment_conversion.
	* model/variable.hh (model_variable_decl::constant_p): Also check
	type of variable.
	(model_variable_decl::resolve): Perform assignment conversion.
	* conversions.cc (constant_p): New function.
	(assignment_conversion): Only accept type for left hand side.
	* conversions.hh (constant_type_p): Declare.
	(assignment_conversion): Updated.
	* model/unit.hh (model_unit::resolve): Resolve types.
	* model/class.hh (model_class::resolve): Wrote.
	* model/varstmt.hh (model_variable_stmt::resolve): Use new
	resolve template function.
	* model/try.hh (model_try::resolve): Use new resolve template
	function.
	* model/block.hh (model_block::resolve): Use new resolve template
	function.
	* util.hh (resolve): New template function.
	* model/method.hh (model_method::resolve): Resolve various
	parts of the method.
	* model/typevar.hh (model_type_variable::resolve): New method.
	* model/declstmt.hh (model_class_decl_stmt::resolve): Wrote.
	* model/cast.hh (model_cast::resolve): Don't invoke
	model_unary::resolve.  Call casting_conversion.
	(constant_p): Use constant_type_p.

	* Makefile (sources): Updated.
	* model/assign.cc: New file.
	* model/assign.hh (model_assignment::resolve): Removed body.
	(class model_op_assignment): New class.
	(model_plus_equal, model_minus_equal, model_mult_equal,
	model_div_equal, model_and_equal, model_or_equal,
	model_xor_equal, model_mod_equal, model_ls_equal, model_rs_equal,
	model_urs_equal): Derive from model_op_assignment.

	* model/import.hh (model_static_import_single::member_name):
	Renamed from method_name.

	* model/unit.hh (model_unit::resolve): Uncommented
	duplicate-checking code.

	* typedefs.hh: Include watch.hh.

	* model/unary.hh (model_logical_not): Now separate class;
	overrode resolve().

	* model/expr.hh (model_expression::type_cache): Use watch<>.
	* watch.hh: New file.

	* Makefile (sources): Updated.
	* model/new.hh (model_new::resolve): Removed body.
	* model/new.cc: New file.

	* model/arraytype.hh (model_array_type::element_type): New
	method.
	* model/type.hh (model_type::element_type): New method.

	* Makefile (sources): Updated.
	* model/arrayref.hh (model_array_ref::resolve): Removed body.
	* model/arrayref.cc: New file.
	(resolve): Added more checking.

	* Makefile (sources): Updated.
	* model/instanceof.hh (model_instanceof::resolve): Removed body.
	* model/instanceof.cc: New file.
	(resolve): Added more checking.
	* conversions.cc (casting_conversion): New function.
	* conversions.hh (casting_conversion): Declare.

	* model/for.hh (model_for::resolve): Typo fix.
	* typedefs.hh: Include iname.hh.
	* model/package.hh: Don't use ref_package.

	* model/throw.hh (model_throw::resolve): Removed body.
	* model/catch.hh (model_catch::resolve): Removed body.
	* Makefile (sources): Updated.
	* model/catch.cc: New file.
	* model/throw.cc: New file.

2003-12-17  Tom Tromey  <tromey@redhat.com>

	* model/while.hh (model_while::resolve): Use boolean_conversion.
	* model/throw.hh (model_throw::resolve): Check type of
	expression.
	* model/if.hh (model_if_stmt::resolve): Use boolean_conversion.
	* model/for.hh (model_for::resolve): Use boolean_conversion.
	* model/catch.hh (model_catch::resolve): Check type of formal
	parameter.
	* model/do.hh (model_do::resolve): Use boolean_conversion.
	* model/assert.hh (model_assert::resolve): Use
	boolean_conversion.
	* conversions.hh (boolean_conversion): Declare.
	* conversions.cc (boolean_conversion): New function.

	* compiler.cc (find_class): New method.
	(find_name): Likewise.
	* model/class.hh (model_class): Inherit from Iname.
	* model/package.hh (model_package): Inherit from Iname.
	* model/iname.hh: New file.

	* model/package.hh (model_package::add(ref_package)): New method.
	(model_package::add(ref_class)): Likewise.

	* parse.cc (any_method_declarator): Don't parse body of a method
	in an interface.

	* model/primitive.hh: Declare primitive types earlier.

	* parse.hh (parse): Updated for method deletions.
	* parse.cc (interface_body_declaration): Removed.
	(interface_body): Likewise.
	(interface_declaration): Ensure class is an interface.  Use
	class_body.
	* model/class.hh (model_class::set_interface): New method.
	(model_class::interface_p): Likewise.

	* parse.cc (class_declaration): Set type parameters.

	* parse.cc (interface_declaration): Parse type parameters.
	* model/class.hh (model_class::type_parameters): New field.
	(model_class::set_type_parameters): New method.

2003-12-16  Tom Tromey  <tromey@redhat.com>

	* parse.cc (statement_expression): Implement.

	* parse.cc (super_access): Call set_enclosing_class on field and
	method accesses.
	* model/invoke.hh (model_super_invocation::encloser): New field.
	(model_super_invocation::set_enclosing_class): New method.
	* model/fieldref.hh (model_super_field::encloser): New field.
	(model_super_field::set_enclosing_class): New method

	* parse.cc (class_declaration): Fix logic for `implements'.
	(member_decl): Micro-optimization.
	(variable_declarator): Use TOKEN_ASSIGN, not TOKEN_EQUALS.
	(conditional_or_expression): Sub-rule is
	conditional_and_expression.
	(unary_expression): Use the token we looked ahead for.
	(primary): Include TOKEN_LONG_LIT and TOKEN_DOUBLE_LIT.
	(assignment_expression): Return a result.

	* tstream.cc (get_token): Fix javadoc logic.

2003-12-01  Tom Tromey  <tromey@redhat.com>

	* lex.cc (operator_p): Create model objects for assignment
	operators.

	* tstream.cc (peek_token1): New method.
	* tstream.hh (token_stream::peek_token1): Declare.

	* lex.cc (handle_keyword): Handle TOKEN_ENUM.
	* keyword.gperf: Added "enum".
	* token.hh (enum token_value): Added TOKEN_ENUM.

