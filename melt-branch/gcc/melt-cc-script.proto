#! /bin/sh
#:! line starting with #:! are removed from this melt-cc-script.proto 
#:! -*- bash -*-
#    Copyright (C) 2008, 2009 Free Software Foundation, Inc.
#    Contributed by Basile Starynkevitch <basile@starynkevitch.net>
# 
# This file :MELT_SCRIPT: is part of GCC.
# 
# GCC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GCC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.   If not see
# <http://www.gnu.org/licenses/>. 

#:! :GCCMELT_CC: & :GCCMELT_CFLAGS: &:GCCMELT_HEADERDIR:  are substituted in the first 30 lines

gccmelt_cc=":GCCMELT_CC:"
gccmelt_cflags=":GCCMELT_CFLAGS:"
gccmelt_headerdir=":GCCMELT_HEADERDIR:"

if [ -n "$GCCMELT_CC" ]; then
    gccmelt_cc=$GCCMELT_CC
fi

if [ -n "$GCCMELT_EXTRACFLAGS" ]; then
    gccmelt_cflags="$gccmelt_cflags $GCCMELT_EXTRACFLAGS"
fi

#set -x
## script invoked by cc1 with at least two arguments : the generated C
## source to compile and the dynamically-loadable stuff to generate

## for commodity, we pass -D -U -I -O* -g to gcc, and -F to set the cflags,
## -C to set the compiler, and -x & -v for debugging and -n to omit
## line info, -d for dynamic object structures
## -k to keep the temporary files
xtra_cflags=""
keep_temporary_files=""
while getopts "D:I:U:F:C:O:gxvnd" flag ; do
    : the $flag 
    case "$flag" in
	D) xtra_cflags="$xtra_cflags -D$OPTARG";;
	U) xtra_cflags="$xtra_cflags -U$OPTARG";;
	I) xtra_cflags="$xtra_cflags -I$OPTARG";;
	O) xtra_cflags="$xtra_cflags -O$OPTARG";;
	F) xtra_cflags="$xtra_cflags $OPTARG";;
	g) xtra_cflags="$xtra_cflags -g";;
	C) gccmelt_cc="$OPTARG";;
	n) xtra_cflags="$xtra_cflags -DMELTGCC_NOLINENUMBERING";;
	d) xtra_cflags="$xtra_cflags -DMELTGCC_DYNAMIC_OBJSTRUCT";;
	x) set -x;;
	v) set -v;;
	k) keep_temporary_files=true;;
	*) echo unrecognized flag $flag;;
    esac
done
shift `expr $OPTIND - 1`

csource=$1
dynstuff=$2


## if not given, try to guess the dynstuff from the csource
if [ -z "$dynstuff" ]; then
    dynstuff=`basename $csource .c`.so
fi

## if the dynstuff has no *.so suffix, append it
case $dynstuff in
    *.so) ;;
    *) dynstuff=$dynstuff.so;;
esac

# set TMPDIR if it was not set
: ${TMPDIR=/tmp}

## sadly, even in 2009, there seems no standard way to make temporary files!

if which tempfile > /dev/null 2>&1; then
    datf=`tempfile  -p bdat -s .c`
    dobf=`tempfile  -p dobj -s .o`
elif which mktemp > /dev/null 2>&1; then
    datf=`mktemp -t bdat.XXXXXXXX`.c
    dobf=`mktemp -t dobj.XXXXXXXX`.o
else
    datf=$TMPDIR/bdat$$-$RANDOM.c
    dobf=$TMPDIR/dobj$$-$RANDOM.o
fi

rm -f $datf $dobf 

#pwd

# generate the temporary timestamp & md5s file
md5src=`md5sum $csource`     

if [ -z "$keep_temporary_files" ]; then
    trap "rm -f $datf $dobf" EXIT
else
    echo $0 keeping temporary files $datf $dobf >&2
fi

date "+const char melt_compiled_timestamp[]=\"%c $csource\";" > $datf
echo "const char melt_md5[]=\"$md5src\";" >> $datf
echo "const char melt_csource[]=\"$csource\";" >> $datf

## add the extra cflags in front of the default ones!
gccmelt_cflags="$xtra_cflags $gccmelt_cflags"

### we do not compile everything in a single step to help ccache, in
### the event $gccmelt_cc happens to run ccache.

# compile the generated C source into a temporary object; this
# compilation may run for a while.
$gccmelt_cc -Wall -fPIC $gccmelt_cflags -I "$gccmelt_headerdir" $csource -c -o $dobf
# compile & link the short date file & the temporary object
$gccmelt_cc -Wall -fPIC -shared $gccmelt_cflags -I "$gccmelt_headerdir"  $datf $dobf  -o $dynstuff

