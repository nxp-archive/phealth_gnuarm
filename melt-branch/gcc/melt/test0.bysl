;; -*- lisp -*-

(defun testforeverif (p f x)
  (forever looplab
	   (if (p x) 
	       (exit looplab (f x)))))



(defprimitive puts (:cstring s) :void "puts(" s ")")

(defun f1 
  (g x)
  (g x x))

(defun f2 
  (h k y) 
  (h 
   (f1 k y) 
   y))

(defclass my_class_root 
 :predef CLASS_ROOT
 :fields (root_f1 
		  ))

(defun testifapp (f x y) 
  (if x
      (f x y)))

(defun testlambdatwo (f g x y)
  (f 
   (lambda (u) 
    (g x u))
   y))

(defun testlambda  (f_cl)
  (lambda (y_arg) 
    (f_cl y_arg)))

(defun testandsetq (v w :long i j)
  (if 
      (and i j)
      (setq v w)))

(defun testor (v w :long i j)
  (if 
      (or i j) 
      v
    w))

(defun testtwicesamelet (f u v)
  (let ( (aa u) )
    aa )
  (let ( (aa v) )
    aa 
    f)
)

(defun testletforever (x y f g)
  (let ( (uu x) )
    (forever loop
	     (if (f uu) 
		 (setq uu (g uu))
	       (exit loop y)))))

(defprimitive boxint (:long i) :value 
  "basilysgc_new_int( BASILYSGOB(DISCR_INTEGER), (" i "))"
)

(defprimitive is_integerbox (ib) :long
  "(basilys_magic_discr((" ib ")) == OBMAG_INT)")


(defun testconstbox1 (xx) (if (is_integerbox xx) (boxint 2) ()))



(defclass my_class_named
  :super my_class_root
  :fields (my_name)
)

(defclass my_class_selector
  :super my_class_named
  :predef CLASS_SELECTOR
  :fields (
))

(defselector the_sel my_class_selector
)



(defun testunsafegetputnameprogn (o n) 
  (let ( (oldn (unsafe_get_field :my_name o)) )
    (progn 
      (unsafe_put_fields o :my_name n) 
      oldn)))

(defun testsendsel (f x) 
  (the_sel (f x) 
	   (boxint 789)
	   x
	   246))

(definstance ii my_class_root 
  :obj_num 12751
  :root_f1 (boxint 1001002))

(defun testmultisend (g h x y)
  (puts "begin testmultisend")
  (multicall 
   (u v)
   (the_sel 
    (g y y) 
    ii 
    1357)
   (puts "middle testmultisend")
   (h u 
      (g v x))
   ))


(defprimitive gti (:long a b) :long 
  "((" a ")>(" b "))")

(defun foo (x :long n) 
  (if
      (gti n 0) 
      x 
    (boxint n)))

(defun bar (y)
  (if y
      (foo y 123)
    (boxint 456)))

(defun testforever (z)
  (forever loop
	   (exit loop (bar z))))
 
(defun testmulticall (f g x)
  (multicall 
   (r1 r2) 
   (g x)
   (f r1 r2)))



(defun testtwolets (f g x y)
  (let ( (u 
	  (f x)) )
    (let ( (v 
	    (f y)) )
      (g u v))
    (let ( (v 
	    (f u)) )
      (g v u))))

(if foo 
    (puts "has foo"))

(if boxint 
    (puts "has boxint"))

(puts "end test0")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#| ; SKIPPING
; SKIPPED  |#
