@c Copyright (c) 2008 Free Software Foundation, Inc.
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@c ---------------------------------------------------------------------
@c  MELT
@c ---------------------------------------------------------------------

@node MELT
@chapter MELT: Middle End Lisp Translator
@cindex MELT
@cindex Middle End Lisp Translator


The MELT branch introduces a Lisp dialect to express middle-end analysers. 
This chapter describes the dialect and how to use it.
A working knowledge of Scheme or Lisp is presupposed.

MELT was formerly known as Basilys, hence many functions or variables
have basilys in their name, and the conventional file extensions for
MELT source files is @code{.bysl}

See the @uref{http://gcc.gnu.org/wiki/MiddleEndLispTranslator,,MELT wiki page}

@menu
* MELT Prerequisites and Deficiencies::       Prerequisites and topics not yet covered in this MELT chapter.
* MELT overview::                             An overview of MELT.
* Building the MELT branch::                  configuration and building requirements and instructions for MELT.
* Invoking MELT::                             Invoking MELT.
* Tutorial about MELT::                       Tutorial describing MELT.
* Reference on MELT::                         MELT language reference.
@end menu

@c ----------------------------------------------------------------
@c MELT Prerequisites and Deficiencies
@c ----------------------------------------------------------------

@node MELT Prerequisites and Deficiencies
@section MELT Prerequisites and Deficiencies

A working knowledge of Scheme or Lisp is presupposed.

This chapter is incomplete.

@c ----------------------------------------------------------------
@c MELT Overview
@c ----------------------------------------------------------------

@node MELT overview
@section MELT overview
@cindex MELT overview

Any MELT enabling compilation is really a long lasting compilation. It
is supposed that you use a powerful workstation (or laptop) with
enough memory (at least 4Gigabytes of RAM is receommended on a 64 bits
machine like x86-64), and that the MELT-enabled compilation will run a
lot slower than a simple @code{gcc -O1} compilation (hopefully doing
some useful stuff). Notice that a MELT compilation actually generates
C code, compile it (using another GCC compilation process) to a
dynamically loadable library, and load its into the MELT compilation
process.

@c some sentences copied from the Wiki page. I (Basile) wrote all of them.

The MELT branch contains several (related) stuff. Everything can be
enabled or disabled at GCC configure time or at GCC run time:

@enumerate

@item a compiler probe, which enable an advanced user to display some of
the compilers internals data (but not to change them or change the
GCC compiler's behavior.

@item a Lisp dialect compiled into C code, with which one can code
sophisticated or prototypical middle end passes.

@item a runtime which extends the GCC infrastructure to support the
previous items, in particular a generational copying garbage
collector well suited for the lisp dialect above, which is build
above the existing GGC (which deals with old values).

@end enumerate

MELT is bootstrapped, in the sense that the translation from the MELT
dialect to C is coded in MELT (hence the MELT generated C code is
available from the source code).

The generated C code is including only one file @code{run-basilys.h}
which includes many GCC include files internal to the compiler. It is
compiled into a dynamic library by a shell script
@code{*melt-cc-script*} which invokes the host GCC with appropriate
flags.

MELT obviously need that the binary (dynamic libraries @code{warm*.so})
for the MELT translator are already available. More generally, it uses
several kind of files:

@enumerate

@item the script used to compile generated C files info dynamically loadable stuff.
This script may be invoked by MELT GCC. In common cases, the first
argument to the script is the MELT generated input @code{*.c} file and
the second argument is the MELT loaded output @code{*.so} dynamic
library.

@item an include directory (passed by @code{-I} to the compiler) 
containing all the useful GCC headers. This directory is only written by
the installation procedure.

@item a permanent generated C code directory which contains some essential files, in particular the C form of the MELT translated.
 
@end enumerate


@c =======================================================================
@node Building the MELT branch
@section Building the MELT branch
@cindex Building the MELT branch

The MELT branch has to be configured appropriately to enable MELT. If
MELT is disabled at configure time, the MELT branch is essentially the
GCC trunk. Enabling MELT means passing the @code{-with-ppl --with-ltdl
--enable-compiler-probe --enable-basilysmelt} flags to the toplevel
@code{configure}.

Actually, there are two different features enabled: the compiler probe
and MELT. In practice, you'll need both.

To compile the MELT branch, you need the libtool dynamic loader and
the Parma Polyhedra Library. The libtool dynamic loader wraps the
dynamic library loading functions like @code{dlopen} or @code{dlsym};
it is part of @uref{http://www.gnu.org/software/libtool,,libtool}
(version 2.x). The Parma Polyhedra Library (PPL) is a free library
available @uref{http://www.cs.unipr.it/ppl/,,here}, it is a C++
library (GPLv3 licensed) handling lattices like intervals etc. Also,
the host compiler (the compiler which compiles the source code of
GCC), also used to compile MELT generated C code during MELT enabled
@code{gcc} execution, should be some version of @code{gcc} (preferably
a 4.x version at least).

Note that currently MELT is only compiled on Linux machines.

@c =======================================================================
@node Invoking MELT
@section Invoking MELT
@cindex Invoking MELT

Without any MELT specific program flags, the MELT variant of gcc
behave as the trunk. So to get or use MELT features, you need to pass
some special flags. Most of these flags are starting with
@code{-fbasilys}. They for the middle-end of GCC so are common for
every source language (ie @code{gcc}, @code{g++} ... commands) and
target.

MELT is usually invoked while compiling a (C, C++, ...) source file
but may occasionnally be invoked without compiling any source input to
perform tasks which are not related to a particular GCC input source
file. In particular, the translation of a MELT file @code{foo.bysl}
into C code @code{foo.c} is done with a special invocation like
@code{gcc -fbasilys -fbasilys-command=compilefile
-fbasilys-arg=foo.bysl -fbasilys-secondarg=foo.c} (possibly with other
options like some appropriate @code{-fbasilys-init=}). In other words,
the MELT translator to C is not a gcc front-end.

The table below lists all MELT specific options, in alphabetical order.

@table @gcctabopt
@item -fbasilys
@gccoptlist{-fbasilys}
@opindex fbasilys
This flag (without argument) is required for every MELT enabled
compilation. If it is not given, no MELT specific processing is done.

@item -fbasilys-arg=
@gccoptlist{-fbasilys-arg=}
@opindex fbasilys-arg=
This gives the first argument string to MELT. It is incompatible with
the @code{-fbasilys-arglist=} option.

@item -fbasilys-arglist=
@gccoptlist{-fbasilys-arglist=}
@opindex fbasilys-arglist=
This gives the first argument list of strings to MELT. It is
incompatible with the @code{-fbasilys-arg=} option. The string program
argument is split into a list of strings using the comma
separator. For example, @code{-fbasilys-arglist=1,BB,3} makes a
three-element list argument with first string @code{1}, second string
@code{BB} and third string @code{3}. There is no way to give a
string subargument containing a comma.

@item -fbasilys-command=
@gccoptlist{-fbasilys-command=}
@opindex fbasilys-command=
This gives the command to be executed before any MELT passes. It uses
the @code{:sysdata_cmd_fundict} field of @code{INITIAL_SYSTEM_DATA}
internal object of MELT to determine the MELT function used to execute
the command.

@item -fbasilys-compile-script=
@gccoptlist{-fbasilys-compile-script=}
@opindex fbasilys-compile-script=
This sets the compile script (default is @code{melt-compile-script}
somewhere inside GCC files) used to compile MELT generated C code into
dynamically loaded stuff. The script is usually invoked by GCC with
two arguments: the C file generated by MELT and the dynamic library
(e.g. a @code{*.so} or @code{*.la}) to be generated by the
script. Notice that MELT generates huge C files (containing, in
addition of a routine for each MELT function, a very big
initialization routine), so it is recommended to avoid compiling these
generated files with @code{-O3}.

@item -fbasilys-debug
@gccoptlist{-fbasilys-debug}
@opindex fbasilys-debug
This flag has no argument and asks for lot of debugging output. It is
only useful to debug MELT and is unrelated to the @code{-g} flag
asking GCC to output debug information.

@item -fbasilys-debugskip=
@gccoptlist{-fbasilys-debugskip=}
@opindex fbasilys-debugskip=
This flag (only useful with @code{-fbasilys-debug}) has an integer
argument. When @code{-fbasilys-debug} is given with
@code{-fbasilys-debugskip=1000} the first thousand debug messages are
skipped, so are not printed.

@item -fbasilys-gensrcdir=
@gccoptlist{-fbasilys-gensrcdir=}
@opindex fbasilys-gensrcdir=
This flag sets the directory containing MELT generated C files.

@item -fbasilys-init=
@gccoptlist{-fbasilys-init=}
@opindex fbasilys-init=
This flag sets the initial MELT modules. They are separated by
semi-colons or (on Unix only) colons. So @code{-fbasilys-init=foo:bar}
or @code{'-fbasilys-init=foo;bar'} (quotes are useful for the shell
running GCC) load first the @code{foo} module and then the @code{bar}
module. A module starting with an at sign @code{@@} is handled as a
module list file. The @code{.modlis} extension is added, and then a
file is seeked by that name. This file is read line by line (with
empty or blank lines skipped, and comment lines starting with an hash
@code{#} skipped). Each line is the name of a module do be load in
sequence. For example, @code{-fbasilys-init=@@mylist:bar} with a file
@file{mylist.modlis} containing
@example
# file mylist.modlis ; just a comment
alpha
beta
@end example
would have the same effect as @code{-fbasilys-init=alpha:beta:bar}. 
Notice that modules are seeked in several directories.

@item -fbasilys-tempdir=
@gccoptlist{-fbasilys-tempdir=}
@opindex fbasilys-tempdir=
@end table
This flags sets the temporary MELT directory. If specified it is not cleaned.




@c =======================================================================
@node Tutorial about MELT
@section Tutorial about MELT
@cindex Tutorial about MELT

This section has to be written.

@c =======================================================================

@node Reference on MELT
@section Reference on MELT
@cindex Reference on MELT

This section has to be written.

@c =======================================================================
