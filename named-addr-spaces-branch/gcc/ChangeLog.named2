[gcc changes]
2009-08-17  Ben Elliston  <bje@au.ibm.com>
	    Michael Meissner  <meissner@linux.vnet.ibm.com>
	    Ulrich Weigand  <uweigand@de.ibm.com>

	* doc/extend.texi (Named Address Spaces): Add new section
	documenting named address space support.

	* doc/tm.texi (Named Address Spaces): Add new section to document
	named address space support.
	(TARGET_ADDR_SPACE_KEYWORDS): Document how to add named address
	space keywords.
	(TARGET_ADDR_SPACE_POINTER_MODE): Document new named address space
	target hook.
	(TARGET_ADDR_SPACE_ADDRESS_MODE): Ditto.
	(TARGET_ADDR_SPACE_VALID_POINTER_MODE): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Ditto.
	(TARGET_ADDR_SPACE_SUBSET_P): Ditto.
	(TARGET_ADDR_SPACE_CONVERT): Ditto.

	* doc/invoke.texi (-mea32): Document new SPU switch.
	(-mea64): Ditto.
	(-maddress-space-conversion): Ditto.
	(-mno-address-space-conversion): Ditto.
	(-mcache-size=...): Ditto.
	(-matomic-updates): Ditto.
	(-mno-atomic-updates): Ditto.

	* doc/rtl.texi (MEM_ADDR_SPACE): Document named address space
	accessor macro.

	* targhooks.c (default_valid_pointer_mode): New default hook added
	for named address space support.
	(default_addr_space_pointer_mode): Ditto.
	(default_addr_space_address_mode): Ditto.
	(default_addr_space_valid_pointer_mode): Ditto.
	(default_addr_space_legitimate_address_p): Ditto.
	(default_addr_space_legitimize_address): Ditto.
	(default_addr_space_subset_p): Ditto.
	(default_addr_space_convert): Ditto.

	* targhooks.c (default_valid_pointer_mode): Add prototype.
	(default_addr_space_pointer_mode): Ditto.
	(default_addr_space_address_mode): Ditto.
	(default_addr_space_valid_pointer_mode): Ditto.
	(default_addr_space_legitimate_address_p): Ditto.
	(default_addr_space_legitimize_address): Ditto.
	(default_addr_space_subset_p): Ditto.
	(default_addr_space_convert): Ditto.

	* tree-pretty-print.c (dump_generic_node): If the tree is in a
	different named address space, print it out.

	* tree.c (integer_pow2p): Add support for having different pointer
	sizes for named address support.
	(tree_log2): Ditto.
	(tree_floor_log2): Ditto.
	(set_type_quals): Set the named address space field from the
	type qualifier.
	(build_pointer_type): Add named address space support.
	(build_reference_type): Ditto.
	(build_array_node): Ditto.
	(signed_or_unsigned_type_for): Ditto.
	(int_or_pointer_precision): New function to return the precision
	of int or pointer types.  Handle pointers to named address
	spaces.
	(tree_nop_conversions): Preserve conversion between pointers to
	different address spaces.

	* tree.h (TYPE_ADDR_SPACE): New accessor macro for named address
	space support.
	(ENCODE_QUAL_ADDR_SPACE): Macro to encode named address space into
	the type qualifiers.
	(DECODE_QUAL_ADDR_SPACE): Macro to get named address space from
	type qualifiers.
	(CLEAR_QUAL_ADDR_SPACE): Macro to clear the named address space
	field in the type qualifiers.
	(KEEP_QUAL_ADDR_SPACE): Macro to clear all type qualifiers except
	for the named address space.
	(TYPE_QUALS): Add encoding of the named address space to the type
	qualifiers.
	(TYPE_QUALS_NO_ADDR_SPACE): New macro, like TYPE_QUALS, except
	don't include the named address space in the qualifiers.
	(struct tree_type): Add address_space field, move alias_set up
	higher.
	(int_or_pointer_precision): Add declaration.

	* target.h (struct addr_space): New structure that holds all of
	the named address space hooks.
	(struct gcc_target): Add struct addr_space.

	* fold-const.c (fit_double_type): Add named address space support.
	(fold_convert_const): Ditto.
	(fold_unary_loc): Ditto.

	* builtins.c (get_memory_rtx): Preserve conversions between pointers
	to different address spaces.

	* auto-inc-dec.c: Include target.h.
	(try_merge): Deal with pointers that can be different sizes due to
	named address space support.
	(find_inc): Ditto.

	* c-tree.h (struct c_declspecs): Add address space field.
	(declspecs_add_addrspace): Add declaration.

	* dwarf2out.c (modified_type_die): Add named address space
	support.

	* expr.c (emit_move_insn): Add named address space support.
	(move_by_pieces): Ditto.
	(emit_block_move_hints): Ditto.
	(emit_block_move_via_loop): Ditto.
	(store_by_pieces): Ditto.
	(store_by_pieces_1): Ditto.
	(clear_storage_hints): Ditto.
	(expand_assignment): Ditto.
	(store_expr): Ditto.
	(store_constructor): Ditto.
	(expand_expr_real_1): Ditto.
	(expand_expr_addr_expr): Ditto.
	(expand_expr_addr_expr_1): Add address space argument.
	Handle named address spaces.  Update recursive calls.

	* expr.h (memory_address): Change to a macro passing 0 as the
	named address space.
	(memory_address_addr_space): New declaration.
	(change_address_addr_space): Ditto.

	* recog.c (verify_changes): Handle named address spaces.
	(general_operand): Likewise.
	(memory_address_p): Rename to ...
	(memory_address_addr_space_p): ... this function.  Add addres space
	argument.  Handle named address spaces.
	(offsettable_memref_p): Handle named address spaces.
	(offsettable_nonstrict_memref_p): Likewise.
	(offsettable_address_p): Rename to ...
	(offsettable_address_addr_space_p): ... this.  Add address space
	argument.  Handle named address spaces.
	(constrain_operands): Handle named address spaces.

	* recog.h (memory_address_p): Implement as macro.
	(memory_address_addr_space_p): Add prototype.
	(strict_memory_address_p): Likewise.
	(strict_memory_address_addr_space_p): Add prototype.
	(offsettable_address_p): Likewise.
	(offsettable_address_addr_space_p): Add prototype.

	* c-decl.c (diagnose_mismatched_decls): Add named address space support.
	(shadow_tag_warned): Ditto.
	(quals_from_declspecs): Ditto.
	(grokdeclarator): Ditto.
	(build_null_declspecs): Ditto.
	(declspecs_add_addrspace): New function to change the address
	space in the declspecs.

	* c-pretty-print.c (pp_c_type_qualifier_list): Add named address
	space support.

	* print-rtl.c (print_rtx): Add named address space support.

	* stor-layout.c (internal_reference_types): Add named address
	space support.
	(reference_types_internal): Update comment.
	layout_type): Set precision for pointers.

	* c-typeck.c (addr_space_superset): New function.
	(qualify_type): Add named address space support.
	(composite_type): Ditto.
	(common_pointer_type): Ditto.
	(comp_target_types): Ditto.
	(pointer_diff): Ditto.
	(build_conditional_expr): Ditto.
	(handle_warn_cast_qual): Ditto.
	(build_c_cast): Ditto.
	(convert_for_assignment): Ditto.
	(build_binary_op): Ditto.

	* coretypes.h (addr_space_t): New type for named address spaces.

	* emit-rtl.c: Include target.h.
	(mem_attrs_htab_hash): Add named address space support.
	(mem_attrs_htab_eq): Ditto.
	(operand_subword): Ditto.
	(get_mem_attrs): Ditto.
	(set_mem_attributes_minus_bitpos): Ditto.
	(set_mem_alias_set): Ditto.
	(set_mem_align): Ditto.
	(set_mem_expr): Ditto.
	(set_mem_offset): Ditto.
	(set_mem_size): Ditto.
	(change_address_1): Ditto.
	(adjust_address_1): Ditto.
	(adjust_automodify_address_1): Ditto.
	(offset_address): Ditto.
	(replace_equiv_address): Ditto.
	(widen_memoy_address): Ditto.
	(get_spill_slot_decl): Ditto.
	(set_mem_attrs_for_spill): Ditto.
	(set_mem_addr_space): New function to set the address space.
	(change_address_addr_space): New function modified from
	change_address to add address space argument.
	(change_address): Call change_address_addr_space with the current
	address space.

	* emit-rtl.h (set_mem_addr_space): Add declaration.

	* explow.c (break_out_memory_refs): Deal with pointers that can be
	different sizes due to named address space support.
	(convert_memory_address): Rename to ...
	(convert_memory_address_addr_space): ... this.  Add address space
	argument.  Handle named address spaces.  Update recursive calls.
	(memory_address): Rename to ...
	(memory_address_addr_space): ... this.  Add address space
	argument.  Handle named address spaces.
	(validize_mem): Add support for addresses in a different named
	address space.
	(promote_mode): Ditto.

	* print-tree (print_node_brief): Print out named address space
	information if it isn't the default address space.
	(print_node): Ditto.

	* varasm.c (get_variable_section): Add named address space
	support.
	(make_decl_rtl): Likewise.
	(narrowing_initializer_constant_valid_p): Preserve conversions
	between pointers to different address spaces.
	(initializer_constant_valid_p): Likewise.  Do not refer to
	POINTER_SIZE.
	(output_constant): Handle named address spaces.
	(default_valid_pointer_mode): Move to targhooks.c.
	* output.h (default_valid_pointer_mode): Move to targhooks.h.

	* tree-ssa.c (useless_type_conversion_p): Add named address
	space support.

	* tree-flow.h (multiplier_allowed_in_address_p): Add address space
	argument.
	(addr_for_mem_ref): Likewise.
	* tree-ssa-address.h: Include "target.h".
	(templates): Replace by ...
	(mem_addr_template_list): ... this new vector.
	(TEMPL_IDX): Handle address space numbers.
	(gen_addr_rtx): Add address mode argument.
	(addr_for_mem_ref): Add address space argument.  Handle named
	address spaces.
	(valid_mem_ref_p): Likewise.
	(create_mem_ref_raw): Handle named address spaces.
	(most_expensive_mult_to_index): Update call to
	multiplier_allowed_in_address_p.
	* tree-ssa-loop-ivopts.c (produce_memory_decl_rtl): Handle named
	address spaces.
	(computation_cost): Likewise.
	(get_computation_cost_at): Likewise.
	(multiplier_allowed_in_address_p): Add address space argument.
	Handle named address spaces.
	(get_address_cost): Likewise.

	* target-def.h (TARGET_ADDR_SPACE_POINTER_MODE): Add new hook for
	named address space support.
	(TARGET_ADDR_SPACE_ADDRESS_MODE): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Ditto.
	(TARGET_ADDR_SPACE_SUBSET_P): Ditto.
	(TARGET_ADDR_SPACE_CONVERT): Ditto.
	(TARGET_ADDR_SPACE_HOOKS): Group all named address space hooks
	together.
	(TARGET_INITIALIZER): Add named address space hooks.

	* rtl.h (struct mem_attrs): Add named address space field.
	(MEM_ADDR_SPACE): New accessor macro for named address space.
	(address_cost): Add address space argument.
	(convert_memory_address): Implement as macro.
	(convert_memory_address_addr_space): Add prototype.

	* rtlanal.c (address_cost): Add address space argument.  Handle named
	address spaces.
	(nonzero_bits1): Guard pointer size optimizations.
	(num_sign_bit_copies1): Likewise.
	* alias.c: Include "targhooks.h".
	(find_base_value): Guard pointer size optimizations.
	(find_base_term): Likewise.
	* simplify-rtx.c (simplify_unary_operation_1): Guard
	pointer size optimizations.
	* loop-invariant.c (create_new_invariant): Update call to
	address_cost.

	* rtl.c (rtx_equal_p_cb): MEMs refering to different address
	spaces are not equivalent.
	(rtx_equal_p): Likewise.
	* reload.c (operands_match_p): Likewise.
	* cse.c (exp_equiv_p): Likewise.
	* jump.c (rtx_renumbered_equal_p): Likewise.
	* alias.c (nonoverlapping_memrefs_p): MEMs refering to different
	address spaces may alias.
	(true_dependence): Likewise.
	(canon_true_dependence): Likewise.
	(write_dependence_p): Likewise.

	* reload.h (form_sum): Add MODE argument.
	* reload.c (maybe_memory_address_p): Rename to ...
	(maybe_memory_address_addr_space_p): ... this.  Handle named
	address spaces.
	(strict_memory_address_p): Rename to ...
	(strict_memory_address_addr_space_p): ... this.  Handle named
	address spaces.
	(get_secondary_mem): Handle named address spaces.
	(find_reloads): Likewise.
	(find_reloads_toplev): Likewise.
	(find_reloads_address): Likewise.
	(find_reloads_subreg_address): Likewise.
	(find_reloads_address_1): Do not refer to Pmode.
	(form_sum): Add MODE argument.  Use it instead of referring to Pmode.
	Update recursive calls.
	(subst_indexed_address): Update calls to form_sum.
	* reload1.c (reload): Handle named address spaces.
	(eliminate_regs_1): Update call to form_sum.

	* rtlhooks.c (gen_lowpart_if_possible): Handle named address spaces.

	* fwprop.c (should_replace_address): Add address space argument.
	Handle named address spaces.
	(propagate_rtx_1): Update call.

	* ifcvt.c (noce_try_cmove_arith): Handle named address spaces.

	* sched-deps.c: Include "target.h".
	(sched_analyze_1): Handle named address spaces.
	(sched_analyze_2): Likewise.
	* sel-sched-dump.c: Include "target.h".
	(debug_mem_addr_value): Handle named address spaces.

	* dse.c (replace_inc_dec): Do not refer to Pmode.
	(canon_address): Handle named address spaces.

	* regmove.c (try_auto_increment): Do not refer to Pmode.

	* regcprop.c (kill_autoinc_value): Do not refer to Pmode.

	* tree-vect-data-refs.c (vect_create_data_ref_ptr): Do not
	refer to ptr_mode.

	* expmed.c (make_tree): Handle named address spaces.

	* cselib.c (cselib_record_sets): Handle named address spaces.

	* combine.c (find_split_point): Handle named address spaces.

	* c-common.c (c_common_reswords): If TARGET_ADDR_SPACE_KEYWORDS is
	defined, add the named address space keywords.
	(c_addr_space_name): New function.
	(complete_array_type): Add named address space support.
	(handle_mode_attribute): Likewise.

	* c-common.h (enum rid): Add support for 16 named address space
	keywords.
	(ADDR_SPACE_KEYWORD): Macro for TARGET_ADDR_SPACE_KEYWORDS to use
	to define each keyword.
	(c_addr_space_name): Add prototype.

	* config.gcc (spu-*-elf*): Add spu_cache.h to extra_headers.

	* Makefile.in (convert.o): Add $(TARGET_H) dependency.
	(emit-rtl.o): Ditto.
	(auto-inc-dec.o): Ditto.
	(tree-ssa-address.o): Ditto.
	(sched-deps.o): Ditto.
	(alias.o): Add targhooks.h dependency.

	* c-parser.c (c_parse_init): Add assertion to make sure RID
	keywords fit in a byte.
	(enum c_id_kind): Add C_ID_ADDRSPACE.
	(c_lex_one_token): Add named address space support.
	(c_token_starts_typename): Ditto.
	(c_token_starts_declspecs): Ditto.
	(c_parser_asm_definition): Ditto.
	(c_parser_declspecs): Ditto.
	(c_parser_postfix_expression_after_paren_type): Ditto.

	* config/spu/spu_cache.h: New __ea support file.
	* config/spu/cachemgr.c: Ditto.
	* config/spu/cache.S: Ditto.

	* config/spu/spu-protos.h (spu_legimitize_address): Add named
	address field to calling signature.

	* config/spu/spu.c (EAmode): Mode to use for __ea pointers, based
	on -mea32/-mea64.
	(TARGET_ADDR_SPACE_POINTER_MODE): Define named address hook.
	(TARGET_ADDR_SPACE_ADDRESS_MODE): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Ditto.
	(TARGET_ADDR_SPACE_SUBSET_P): Ditto.
	(TARGET_ADDR_SPACE_CONVERT): Ditto.
	(TARGET_ASM_SELECT_SECTION): Ditto.
	(TARGET_ASM_UNIQUE_SECTION): Ditto.
	(TARGET_ASM_UNALGINED_DI_OP): Define to be .quad/.long to work
	around assembler limitations on @ppu declarations.
	(TARGET_ASM_UNALIGNED_SI_OP): Ditto.
	(ea_symbol_ref): New function to return true if a SYMBOL_REF is in
	the __ea named address space.
	(spu_legitimate_constant_p): Reject __ea symbols.
	(spu_legitimate_address_p): Take address space field, and restrict
	__ea addresses.
	(spu_addr_space_legitimate_address_p): New function.
	(spu_legitimize_address): Take address space field, and don't do
	anything for __ea addresses.
	(spu_addr_space_legitimize_address): New function.
	(cache_fetch): New static to hold SYMBOL_REF of __cache_fetch
	function.
	(cache_fetch_dirty): New static to hold SYMBOL_REF of
	__cache_fetch_dirty function.
	(ea_alias_set): New static to hold __ea alias set.
	(ea_load_store): New function to call __ea cache functions as out
	of line calls.
	(ea_load_store_inline): New function to call __ea cache function
	as inline code.
	(expand_ea_mem): Expand references to __ea memory.
	(spu_expand_mov): Add support for __ea address space.
	(spu_addr_space_pointer_mode): New target hook, return the
	appropriate mode for generic and __ea named address spaces.
	(spu_addr_space_address_mode): New target hook, return the
	appropriate mode for generic and __ea named address spaces.
	(spu_addr_space_subset_p): New target hook to determine if one
	named address space pointer is a subset of a pointer to a
	different named address space.
	(spu_addr_space_convert): New target hook to convert one named
	address pointer to another pointer in a different named address
	space.
	(spu_section_type_flags): Handle "._ea" section.
	(spu_select_section): New function.
	(spu_unique_section): Likewise.

	* config/spu/spu.h (ASM_OUTPUT_SYMBOL_REF): If the symbol ref
	is in the __ea address space, add @ppu suffix.
	(ADDR_SPACE_GENERIC): New macro for generic address space.
	(ADDR_SPACE_EA): New macro for __ea address space.
	(TARGET_ADDR_SPACE_KEYWORDS): New macro to define the __ea
	keyword.

	* config/spu/spu-elf.h (LIB_SPEC): Handle -mcache-size= and
	-matomic-updates switches.

	* config/spu/spu.md (to_ea): New expanders for __ea named address
	space support.
	(from_ea): Ditto.

	* config/spu/spu-c.c (spu_cpu_cpp_builtins): Define __EA32__ or
	__EA64__.

	* config/spu/spu.opt (-mea32): New switch.
	(-mea64): Ditto.
	(-mno-address-space-conversion): Ditto.
	(-maddress-space-conversion): Ditto.
	(-mcache-size=): Ditto.
	(-matomic-updates): Ditto.

	* config/spu/t-spu-elf (MULTILIB_OPTIONS): Add -mea64 multilib.
	(EXTRA_MULTILIB_PARTS): Add libgcc_cachemgr.a,
	libgcc_cachemgr_nonatomic.a, libgcc_cache8k.a, libgcc_cache16k.a,
	libgcc_cache32k.a, libgcc_cache64k.a, libgcc_cache128k.a.
	(cachemgr.o, %/cachemgr.o): New targets.
	(cachemgr_nonatomic.o, %/cachemgr_nonatomic.o): Likewise.
	(libgcc_%.a, %/libgcc_%.a): Likewise.
	(cache8k.o, cache16k.o, cache32k.o, cache64k.o, cache128k.o,
	%/cache8k.o, %/cache16k.o, %/cache32k.o, %/cache64k.o,
	%/cache128k.o): Likewise.

	* convert.c: Include target.h
	(convert_to_pointer): Add named address space support.
	(convert_to_integer): Ditto.

[gcc/testsuite changes]
2009-08-17  Ben Elliston  <bje@au.ibm.com>
	    Michael Meissner  <meissner@linux.vnet.ibm.com>
	    Ulrich Weigand  <uweigand@de.ibm.com>

	* testsuite/gcc.target/spu/ea/ea.exp: New file for named
	address space support.
	* testsuite/gcc.target/spu/ea/cache1.c: Ditto.
	* testsuite/gcc.target/spu/ea/cast1.c: Ditto.
	* testsuite/gcc.target/spu/ea/cast2.c: Ditto.
	* testsuite/gcc.target/spu/ea/compile1.c: Ditto.
	* testsuite/gcc.target/spu/ea/compile2.c: Ditto.
	* testsuite/gcc.target/spu/ea/cppdefine.c: Ditto.
	* testsuite/gcc.target/spu/ea/errors1.c: Ditto.
	* testsuite/gcc.target/spu/ea/errors2.c: Ditto.
	* testsuite/gcc.target/spu/ea/execute1.c: Ditto.
	* testsuite/gcc.target/spu/ea/execute2.c: Ditto.
	* testsuite/gcc.target/spu/ea/execute3.c: Ditto.
	* testsuite/gcc.target/spu/ea/ops1.c: Ditto.
	* testsuite/gcc.target/spu/ea/ops2.c: Ditto.
	* testsuite/gcc.target/spu/ea/options1.c: Ditto.
	* testsuite/gcc.target/spu/ea/test-sizes.c: Ditto.
