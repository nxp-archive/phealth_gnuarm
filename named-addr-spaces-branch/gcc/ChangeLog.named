2008-08-19  Ulrich Weigand  <uweigand@de.ibm.com>

	* doc/tm.texi (Named Address Spaces): Update documentation.
	* doc/invoke.texi (-mea64/-mea32): Reword.
	(-mcache-size=): Reword.
	(-matomic-updates/-mno-atomic-updates): Reword.

	* targhooks.c (default_addr_space_convert): Fix whitespace.
	* auto-inc-dec.c (try_merge): Likewise.
	* dse.c (replace_inc_dec): Likewise.
	* c-decl.c (grokdeclarator): Likewise.
	* explow.c (convert_memory_address_addr_space): Likewise.
	* tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p): Likewise.
	(get_address_cost): Fix merge issue.
	* tree-ssa-address.c (addr_for_mem_ref): Revert local change.
	* c-typeck.c (build_binary_op): Fix warning.
	* ifcvt.c (noce_try_cmove_arith): Handle named address spaces.

	* tree.h (MIXED_ADDR_SPACE_POINTER_TYPES_P): New macro.
	* tree.c (tree_nop_conversion): Use MIXED_ADDR_SPACE_POINTER_TYPES_P.
	* fold-const.c (fold_convert_const): Likewise.
	(operand_equal_p): Likewise).
	(fold_unary_loc): Likewise.
	* dojump.c (do_jump): Likewise.
	* tree-ssa-ifcombine (get_name_for_bit_test): Likewise.
	(recognize_single_bit_test): Likewise.
	* varasm.c (narrowing_initializer_constant_valid_p): Likewise.
	* tree-ssa.c (useless_type_conversion_p): Likewise.
	* tree-ssa-ccp.c (ccp_fold): Handle named address spaces.
	(fold_gimple_assign): Likewise.
	* gimplify.c (gimplify_conversion): Likewise.

	* expr.h (change_address_addr_space): Remove prototype.
	* emit-rtl.c (change_address_1): Remove address space argument.
	(change_address_addr_space): Remove.
	(adjust_address_1): Remove local change.
	(adjust_automodify_address_1): Likewise.
	(offset_address): Likewise.
	(replace_equiv_address): Likewise.

	* rtlanal.c: Include "targhooks.h".
	* simplify-rtx.c: Likewise.
	* Makefile.in (rtlanal.o, simplify-rtx.o): Update dependencies.

	* config/spu/spu-cache.h: Update to GPLv3.  Fix namespace violation.
	* config/spu/cachemgr.c: Update to GPLv3.  Fix formatting.
	(GET_TAG): Do not define variable in macro.
	(addr): Use typedef instead of macro.
	(si_from_eavoid): Remove.
	(GET_ENTRY): Avoid warning due to si_to_ptr use.
	(__cache_evict_entry): Update.
	(__cache_evict): Update.
	(__cache_miss): Update.
	(__cache_fetch_dirty): Update.  Avoid warning due to si_to_ptr use.
	(__cache_flush_stub): Remove.
	(__cache_flush): Mark as destructor.
	* config/spu/cache.S: Update to GPLv3.  Fix formatting.
	* config/spu/spu.opt: Add -mno-atomic-updates.
	* config/spu/spu.c (expand_ea_mem): Create new MEM RTX instead
	of calling change_address_addr_space.  Set alignment.

2008-08-17  Ulrich Weigand  <uweigand@de.ibm.com>

	* doc/tm.texi (TARGET_ADDR_SPACE_VALID_POINTER_MODE): Document
	new target hook.
	* target.h (struct gcc_target): Add addr_space.valid_pointer_mode.
	* target-def.h (TARGET_ADDR_SPACE_VALID_POINTER_MODE): Define.
	(TARGET_ADDR_SPACE_HOOKS): Update.
	* targhooks.c (default_addr_space_valid_pointer_mode): New function.
	* targhooks.h (default_addr_space_valid_pointer_mode): Add prototype.
	* config/spu/spu.c (spu_valid_pointer_mode): Remove.
	(TARGET_VALID_POINTER_MODE): Do not define.

	* tree-flow.h (multiplier_allowed_in_address_p): Add address space
	argument.
	(addr_for_mem_ref): Likewise.
	* tree-ssa-address.h: Include "target.h".
	(templates): Replace by ...
	(mem_addr_template_list): ... this new vector.
	(TEMPL_IDX): Handle address space numbers.
	(gen_addr_rtx): Add address mode argument.
	(addr_for_mem_ref): Add address space argument.  Handle named
	address spaces.
	(valid_mem_ref_p): Likewise.
	(create_mem_ref_raw): Handle named address spaces.
	(most_expensive_mult_to_index): Update call to
	multiplier_allowed_in_address_p.
	* tree-ssa-loop-ivopts.c (produce_memory_decl_rtl): Handle named
	address spaces.
	(computation_cost): Likewise.
	(get_computation_cost_at): Likewise.
	(multiplier_allowed_in_address_p): Add address space argument.
	Handle named address spaces.
	(get_address_cost): Likewise.

	* reload.h (form_sum): Add MODE argument.
	* reload.c (maybe_memory_address_p): Rename to ...
	(maybe_memory_address_addr_space_p): ... this.  Handle named
	address spaces.
	(strict_memory_address_p): Rename to ...
	(strict_memory_address_addr_space_p): ... this.  Handle named
	address spaces.
	(get_secondary_mem): Handle named address spaces.
	(find_reloads): Likewise.
	(find_reloads_toplev): Likewise.
	(find_reloads_address): Likewise.
	(find_reloads_subreg_address): Likewise.
	(find_reloads_address_1): Do not refer to Pmode.
	(form_sum): Add MODE argument.  Use it instead of referring to Pmode.
	Update recursive calls.
	(subst_indexed_address): Update calls to form_sum.
	* reload1.c (reload): Handle named address spaces.
	(eliminate_regs_1): Update call to form_sum.

	* rtl.h (address_cost): Add address space argument.
	(convert_memory_address): Implement as macro.
	(convert_memory_address_addr_space): Add prototype.

	* rtlanal.c (address_cost): Add address space argument.  Handle named
	address spaces.
	(nonzero_bits1): Guard pointer size optimizations.
	(num_sign_bit_copies1): Likewise.
	* alias.c: Include "targhooks.h".
	(find_base_value): Guard pointer size optimizations.
	(find_base_term): Likewise.
	* simplify-rtx.c (simplify_unary_operation_1): Guard
	pointer size optimizations.
	* loop-invariant.c (create_new_invariant): Update call to
	address_cost.

	* explow.c (convert_memory_address): Rename to ...
	(convert_memory_address_addr_space): ... this.  Add address space
	argument.  Handle named address spaces.  Update recursive calls.
	(memory_address_addr_space): Use convert_memory_address_addr_space.

	* expr.c (move_by_pieces): Handle named address spaces.
	(emit_block_move_hints): Likewise.
	(emit_block_move_via_loop): Likewise.
	(store_by_pieces): Likewise.
	(store_by_pieces_1): Likewise.
	(clear_storage_hints): Likewise.
	(expand_assignment): Likewise.
	(store_expr): Likewise.
	(store_constructor): Likewise.
	(expand_expr_addr_expr_1): Add address space argument.
	Handle named address spaces.  Update recursive calls.
	(expand_expr_addr_expr): Update call.
	(expand_expr_real_1): Handle TARGET_MEM_REF in named
	address spaces.

	* recog.c (verify_changes): Handle named address spaces.
	(general_operand): Likewise.
	(memory_address_p): Inline into ...
	(memory_address_addr_space_p): ... this function.
	(offsettable_memref_p): Handle named address spaces.
	(offsettable_nonstrict_memref_p): Likewise.
	(offsettable_address_p): Rename to ...
	(offsettable_address_addr_space_p): ... this.  Add address space
	argument.  Handle named address spaces.
	(constrain_operands): Handle named address spaces.
	* recog.h (memory_address_p): Implement as macro.
	(strict_memory_address_p): Likewise.
	(offsettable_address_p): Likewise.
	(offsettable_address_addr_space_p): Add prototype.

	* auto-inc-dec.c (find_inc): Revert local change.

	* rtlhooks.c (gen_lowpart_if_possible): Handle named address spaces.

	* fwprop.c (should_replace_address): Add address space argument.
	Handle named address spaces.
	(propagate_rtx_1): Update call.

	* ifcvt.c (noce_try_cmove_arith): Handle named address spaces.

	* sched-deps.c: Include "target.h".
	(sched_analyze_1): Handle named address spaces.
	(sched_analyze_2): Likewise.

	* sel-sched-dump.c: Include "target.h".
	(debug_mem_addr_value): Handle named address spaces.

	* dse.c (replace_inc_dec): Do not refer to Pmode.
	(canon_address): Handle named address spaces.

	* regmove.c (try_auto_increment): Do not refer to Pmode.

	* regcprop.c (kill_autoinc_value): Do not refer to Pmode.

	* tree-vect-data-refs.c (vect_create_data_ref_ptr): Do not
	refer to ptr_mode.

	* expmed.c (make_tree): Handle named address spaces.

	* emit-rtl.c (operand_subword): Handle named address spaces.

	* cselib.c (cselib_record_sets): Handle named address spaces.

	* combine.c (find_split_point): Handle named address spaces.

	* c-common.c (handle_mode_attribute): Handle named address spaces.

	* varasm.c (initializer_constant_valid_p): Do not refer to
	POINTER_SIZE.
	(output_constant): Handle named address spaces.

	* Makefile.in (tree-ssa-address.o): Add dependency on $(TARGET_H).
	(sched-deps.o): Likewise.
	(alias.o): Add dependency on targhooks.h.

2008-08-14  Ulrich Weigand  <uweigand@de.ibm.com>

	* doc/tm.texi (Named Address Spaces): Refer to N1275 instead of N1169.
	(TARGET_ADDR_SPACE_MINUS_TYPE): Remove documentation.
	(TARGET_ADDR_SPACE_NAME): Likewise.
	(TARGET_ADDR_SPACE_CAN_CONVERT_P): Likewise.
	(TARGET_ADDR_SPACE_SECTION_NAME): Likewise.
	(TARGET_ADDR_SPACE_STATIC_INIT_OK_P): Likewise.
	(TARGET_ADDR_SPACE_SUBSET_P): Update documentation.
	(TARGET_ADDR_SPACE_CONVERT): Likewise.
	(TARGET_ADDR_SPACE_ADDRESS_MODE): Add documentation.
	* doc/invoke.texi (-mea-to-generic-conversion): Remove.
	(-mno-ea-to-generic-conversion): Likewise.
	Minor formatting / wording changes.

	* target.h (struct gcc_target): Remove addr_space.minus_type,
	addr_space.name, addr_space.can_convert_p, addr_space.section_name,
	and addr_space.static_init_ok_p.  Add addr_space.address_mode.
	* target-def.h (TARGET_ADDR_SPACE_MINUS_TYPE): Remove.
	(TARGET_ADDR_SPACE_NAME): Likewise.
	(TARGET_ADDR_SPACE_CAN_CONVERT_P): Likewise.
	(TARGET_ADDR_SPACE_SECTION_NAME): Likewise.
	(TARGET_ADDR_SPACE_STATIC_INIT_OK_P): Likewise.
	(TARGET_ADDR_SPACE_ADDRESS_MODE): New macro.
	(TARGET_ADDR_SPACE_HOOKS): Update.
	* targhooks.c (default_addr_space_minus_type): Remove.
	(default_addr_space_name): Likewise.
	(default_addr_space_can_convert_p): Likewise.
	(default_addr_space_section_name): Likewise.
	(default_addr_space_static_init_ok_p): Likewise.
	(default_addr_space_address_mode): New function.
	(default_addr_space_legitimize_address): Call non-address-space
	variant of target hook when appropriate.
	* targhooks.h (default_addr_space_minus_type): Remove.
	(default_addr_space_name): Remove.
	(default_addr_space_can_convert_p): Remove.
	(default_addr_space_section_name): Remove.
	(default_addr_space_static_init_ok_p): Remove.
	(default_addr_space_address_mode): Add prototype.
	* output.h (default_valid_pointer_mode): Remove duplicate prototype.
	(default_addr_space_pointer_mode): Likewise.

	* tree-pretty-print.c: Do not include "target.h" or "target-def.h".
	(dump_generic_node): Do not call targetm.addr_space.name.
	* tree.c (check_qualified_type): Revert local change.
	(build_pointer_type): Simplify.
	(build_reference_type): Likewise.
	(int_or_pointer_precision): Likewise.
	(tree_nop_conversion): Preserve conversions between pointers
	to different address spaces
	* builtins.c (get_memory_rtx): Preserve conversions between pointers
	to different address spaces.
	* fold-const.c: Do not include "target.h".
	(fold_convert_const): Preserve conversions between pointers
	to different address spaces.
	(fold_unary_loc): Likewise.
	* convert.c (convert_to_pointer): Do not issue error messages; do not
	call targetm.addr_space.can_convert_p.  Fix merge errors.
	(convert_to_integer): Simplify.  Fix merge errors.
	* tree-ssa.c (useless_type_conversion_p_1): Fix merge error.
	* cp/typeck.c (cp_type_quals): Revert local change.
	* langhooks.c (lhd_tree_dump_dump_tree): Likewise.

	* rtl.c (rtx_equal_p_cb): MEMs refering to different address
	spaces are not equivalent.
	(rtx_equal_p): Likewise.
	* reload.c (operands_match_p): Likewise.
	* cse.c (exp_equiv_p): Likewise.
	* jump.c (rtx_renumbered_equal_p): Likewise.
	* alias.c (nonoverlapping_memrefs_p): MEMs refering to different
	address spaces may alias.
	(true_dependence): Likewise.
	(canon_true_dependence): Likewise.
	(write_dependence_p): Likewise.

	* emit-rtl.c (set_mem_attributes_minus_bitpos): Fix formatting.
	(set_mem_alias_set): Likewise.
	(set_mem_addr_space): Likewise.
	(set_mem_align): Likewise.
	(set_mem_expr): Likewise.
	(set_mem_offset): Likewise.
	(set_mem_size): Likewise.
	(widen_memory_access): Likewise.
	(adjust_address_1): Use targetm.addr_space.address_mode.
	(offset_address): Likewise.
	* stor-layout.c (internal_reference_types): Use
	targetm.addr_space.address_mode.
	(reference_types_internal): Update comment.
	* expr.c (expand_assignment): Handle MISALIGNED_INDIRECT_REF to
	non-generic address spaces.  Do not use memmove libcall with
	non-generic address spaces.
	(expand_expr_addr_expr): Use targetm.addr_space.address_mode.
	(expand_expr_real_1): Likewise.
	* explow.c (memory_address_addr_space): Revert local change.
	Use targetm.addr_space.address_mode.
	(validize_mem): Simplify.
	(promote_mode): Use targetm.addr_space.address_mode.
	* varasm.c (get_variable_section): Variables in non-generic
	address spaces cannot be common.
	(make_decl_rtl): Use targetm.addr_space.address_mode.
	(narrowing_initializer_constant_valid_p): Preserve conversions
	between pointers to different address spaces.
	(initializer_constant_valid_p): Likewise.

	* c-common.c (c_addr_space_name): New function.
	* c-common.h (c_addr_space_name): Add prototype.
	* c-decl.c: Do not include "targhooks.h".
	(diagnose_mismatched_decls): Call c_addr_space_name instead of
	targetm.addr_space.name.
	(grokdeclarator): Likewise.
	(declspecs_add_addrspace): Likewise.
	(start_decl): Do not call targetm.addr_space.section_name.
	* c-pretty-print.c: Do not include "targhooks.h".
	(pp_c_type_qualifier_list): Call c_addr_space_name instead of
	targetm.addr_space.name.
	* c-typeck.c (addr_space_superset): Remove prototype.  Simplify.
	(digest_init_addr_space_ok_p): Remove function.
	(digest_init): Revert local changes.
	(store_init_value): Likewise.
	(output_init_element): Likewise.
	(null_pointer_constant_p): Likewise.
	(comptypes_internal): Likewise.
	(common_pointer_type): Simplify.
	(comp_target_types): Likewise.
	(pointer_diff): Do not use targetm.addr_space.minus_type.  Convert
	pointers to common address space before converting to integer type.
	Use intermediate integer type that is large enough.
	(build_conditional_expr): Simplify.  Clarify null pointer handling.
	(build_binary_op): Likewise.
	(build_c_cast): Do not use targetm.addr_space.can_convert_p.  Emit
	warnings instead of errors.
	(convert_for_assignment): Correctly handle asymmetry.  Update
	error messages.

	* Makefile.in (c-decl.o): Update dependencies.
	(c-pretty-print.o): Likewise.
	(convert.o): Likewise.
	(tree-pretty-print.o): Likewise.
	(fold-const.o): Likewise.

	* config/spu/spu.opt (mea-to-generic-conversion): Remove.
	(mno-ea-to-generic-conversion): Likewise.
	Some documentation updates.
	* config/spu/t-spu-elf: Remove commented-out macros.
	* config/spu/spu.c (spu_no_relocation): Remove.
	(spu_addr_space_minus_type): Likewise.
	(spu_addr_space_name): Likewise.
	(spu_addr_space_can_convert_p): Likewise.
	(spu_addr_space_section_name): Likewise.
	(spu_addr_space_static_init_ok_p): Likewise.
	(spu_addr_space_address_mode): New function.
	(spu_select_section): Likewise.
	(spu_unique_section): Likewise.
	(TARGET_ADDR_SPACE_MINUS_TYPE): Do not override.
	(TARGET_ADDR_SPACE_NAME): Likewise.
	(TARGET_ADDR_SPACE_CAN_CONVERT_P): Likewise.
	(TARGET_ADDR_SPACE_SECTION_NAME): Likewise.
	(TARGET_ADDR_SPACE_STATIC_INIT_OK_P): Likewise.
	(TARGET_ADDR_SPACE_ADDRESS_MODE): Override.
	(TARGET_ASM_SELECT_SECTION): Likewise.
	(TARGET_ASM_UNIQUE_SECTION): Likewise.
	(spu_addr_space_subset_p): Update comment.
	(spu_addr_space_convert): Inline conversion routines from spu.md.
	Correctly handle null pointer conversions.
	Handle TARGET_NO_ADDRESS_SPACE_CONVERSION.
	* config/spu/spu.h (PTRDIFF_TYPE): Revert local change.
	(SIZE_TYPE): Likewise.
	(TEXT_SECTION_ASM_OP): Likewise.
	(DATA_SECTION_ASM_OP): Likewise.
	(ASM_OUTPUT_SYMBOL_REF): Do not call strip_array_types.
	* config/spu/spu.md ("to_ea"): Remove.
	("from_ea"): Likewise.

2009-07-28  Ulrich Weigand  <uweigand@de.ibm.com>

	Merge up to mainline revision 150048.

2009-05-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* doc/tm.texi (Named Address Spaces): Update named address space
	documentation.

2009-05-20  Michael Meissner  <meissner@linux.vnet.ibm.com>
	    Ulrich Weigand  <uweigand@de.ibm.com>

	Merge up to mainline, branch id 147741.

	* targhooks.c (default_addr_space_nop_convert_p): Delete, no
	longer used.
	(default_addr_space_subset_p): Update for change to calling
	signuatures.
	(default_addr_space_can_convert_p): Ditto.
	(default_addr_space_convert): Ditto.

	* targhooks.h (default_addr_space_nop_convert_p): Delete, no
	longer used.
	(default_addr_space_subset_p): Update for change to calling
	signuatures.
	(default_addr_space_can_convert_p): Ditto.
	(default_addr_space_convert): Ditto.

	* target.h (struct addr_space): Delete the nop_convert_p hook.
	Change the subset_p hook to remove the third argument, and make
	the hook a pure subset test.  Change the convert and can_convert_p
	hooks to take tree types instead of named address spaces for more
	flexibility.  Reorder elements so the convert and can_convert_p
	hooks are next to each other.

	* c-typeck.c (addr_space_superset): New static function to
	determine if one named address space is a subset of another, and
	if so, which named address space is the superset.
	(qualify_type): Change to use addr_space_superset.
	(common_pointer_type): Ditto.
	(comp_target_types): Ditto.
	(build_conditional_expr): Ditto.
	(build_binary_op): Ditto.
	(build_c_cast): Change to pass tree types to determine if we can
	convert between two pointers to different named addresses.

	* target-def.h (TARGET_ADDR_SPACE_NOP_CONVERT_P): Delete, no
	longer used.
	(TARGET_ADDR_SPACE_HOOKS): Delete nop_convert_p field.  Reorder
	initializers to match changes in target.h.

	* config/spu/spu.c (toplevel): Move declarations of named address
	space target hook functions where the other functions are
	declared.
	(spu_addr_space_nop_convert_p): Delete, no longer used.
	(TARGET_ADDR_SPACE_NOP_CONVERT_P): Ditto.
	(spu_addr_space_subset_p): Change to make the target hook return
	only if the first named address space is a subset of the second.
	(spu_addr_space_can_convert_p): Change to take tree types instead
	of named address spaces for more flexibility.
	(spu_addr_space_convert): Ditto.

	* config/spu/spu.h (ADDR_SPACE_BAD): Delete.

	* convert.c (convert_to_pointer): Delete the support for named
	address space conversion being a NOP.  Change convert target hook
	calling signature.

2009-05-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge to mainline, subversion revision 147681.

	* c-decl.c (grokdeclarator): Merge to mainline, fixup named
	address space errors.

	* config/spu/spu.h (PTRDIFF_TYPE): Define.
	(SIZE_TYPE): Ditto.

	* config/spu/spu.c (spu_legitimate_address_space_p): Make static,
	remove named address space support from the generic version.
	(spu_legitimize_address_space): Ditto.
	(spu_addr_space_legitimate_address_p): Named address space version
	of spu_addr_space_legitimate_address_p.
	(spu_addr_space_legitimize_address): Named address space version
	of spu_addr_space_legitimze_address.
	(TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P): Define hook.
	(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Ditto.
	(spu_addr_space_memory_address_p): Delete, no longer used.
	(spu_addr_space_strict_memory_address_p): Ditto.
	(TARGET_ADDR_SPACE_MEMORY_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_STRICT_MEMORY_ADDRESS_P): Ditto.

	* config/spu/spu-protos.h (spu_legitimate_address): Delete
	declaration.
	(spu_legitimize_address): Ditto.

	* c-typeck.c (digest_init): Merge to mainline.
	(build_c_cast): Ditto.
	(store_init_value): Ditto.

	* explow.c (memory_address_addr_space): Rewrite address space
	legitimate_address_p hook similar to the non address space
	version.

	* expr.c (expand_expr_real_1): Merge to mainline.

	* Makefile.in (tree-pretty-print.o): Merge to mainline.
	(auto-inc-dec.o): Ditto.

	* recog.c (memory_address_addr_space_p): Rename hook.

	* target-def.h (TARGET_ADDR_SPACE_MEMORY_ADDRESS_P): Delete.
	(TARGET_ADDR_SPACE_STRICT_MEMORY_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P): Combine strict,
	non-strict named address space versions into one hook.
	(TARGET_ADDR_SPACE_HOOKS): Ditto.

	* target.h (addr_space structure): Combine strict, non-strict
	legitimate address hooks.

	* targethooks.c (default_addr_space_memory_address_p): Delete.
	(default_addr_space_strict_memory_address_p): Ditto.
	(default_addr_space_legitimate_address_p): Combine strict,
	non-strict legitimate address hooks.
	(default_addr_space_legitimize_address): Return the address, not
	NULL_RTX.

	* targethooks.h (default_addr_space_memory_address_p): Delete.
	(default_addr_space_strict_memory_address_p): Ditto.
	(default_addr_space_legitimate_address_p): Combine strict,
	non-strict legitimate address hooks.

	* tree.h (build_low_bits_mask): Merge to mainline.

	* tree-ssa.c (useless_type_conversion_p_1): Merge to mainline.

2009-04-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* c-decl.c (grokdeclarator): Undo clearing the named address space
	qualifiers when checking whether a function has type qualifiers.

2009-03-31  Ulrich Weigand  <uweigand@de.ibm.com>

	* config/spu/spu-elf.h (DRIVER_SELF_SPECS): Remove.
	(LIB_SPEC): Handle -mcache-size= and -matomic-updates flags here.
	* config/spu/spu.opt (-mcache-size=, -matomic-updates): Add flags.

2009-01-13  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* auto-inc-dec.c (toplevel): Include target.h.

	* Makefile.in (auto-inc-dec.o): Add $(TARGET_H) dependency.

2009-01-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* ChangeLog.named2: Update to complete changelog for patch
	submission on the mainline.

	* config/spu/spu.md (to_ea): Delete old commented out code.
	(from_ea): Ditto.

2008-12-30  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* targhooks.c (default_addr_space_section_name): Take 2nd tree
	argument of the value being initialized.

	* targhooks.h (default_addr_space_section_name): Update calling
	signature.

	* tree.h (KEEP_QUAL_ADDR_SPACE): New macro to keep only the
	address space qualifiers.

	* target.h (struct address_space): Update static_init_ok_p calling
	signature.

	* expr.c (expand_expr_addr_expr): Use the mode of the of the MEM
	instead of assuming Pmode is the valid pointer mode.

	* c-typeck.c (build_conditional_expr): Move the check for pointers
	to different named address spaces being used in a conditional
	statement earlier.
	(build_c_cast): Pass generic address space to digest_init.
	(store_init_value): Pass the address space of the value to
	digest_init.
	(output_init_element): Ditto.
	(digest_init_addr_space_ok_p): New subroutine of digest_init to
	check whether an initialization to a named address space is
	valid.
	(digest_init): Take an additional argument, which gives the
	address space to be initialized.  Add checks for the backend to
	say that an initialization is not allowed.

	* c-common.c (complete_array_type): Pass the address space the
	array is in when making the qualified type for the array.

	* config/spu/spu.c (spu_no_relocation): New function to determine
	if an expression has anything that would cause relocation.
	(TARGET_ASM_UNALIGNED_SI_OP): Use .long/.quad instead of
	.4byte/.8byte so that the assembler doesn't complain about __ea
	debug symbols.
	(TARGET_ASM_UNALIGNED_DI_OP): Ditto.
	(spu_addr_space_static_init_ok_p): Don't allow any initialization
	of anything that causes relocation in __ea variables or
	initialization of addresses in the __ea address space.

	* doc/tm.texi (TARGET_ADDR_SPACE_STATIC_INIT_OK_P): Update
	documentation.

2008-12-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* doc/tm.texi (TARGET_ADDR_SPACE_MINUS_TYPE): Document new hook.
	(TARGET_ADDR_SPACE_MEMORY_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_STRICT_MEMORY_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Ditto.
	(TARGET_ADDR_SPACE_STATIC_INIT_OK_P): Ditto.

	* targhooks.c (default_valid_pointer_mode): Move here from
	varasm.c.
	(default_addr_space_pointer_mode): Ditto.
	(default_addr_space_minus_type): New hook to return the type used
	for the difference of two pointers.
	(default_addr_space_memory_address_p): New hook for the named
	address space version of memory_address_p.
	(default_addr_space_strict_memory_address_p): New hook for the
	named address space version of strict_memory_address_p.
	(default_addr_space_legitimize_address): New hook for the named
	address space version of LEGITIMIZE_ADDRESS.
	(default_addr_space_static_init_ok_p): New hook to determine if an
	initialization can take place in another named address space.

	* targhooks.h (default_valid_pointer_mode): Add declaration.
	(default_addr_space_pointer_mode): Ditto.
	(default_addr_space_minus_type): Ditto.
	(default_addr_space_memory_address_p): Ditto.
	(default_addr_space_strict_memory_address_p): Ditto.
	(default_addr_space_legitimize_address): Ditto.
	(default_addr_space_static_init_ok_p): Ditto.

	* target.h (struct addr_space): Add minus_type, memory_address_p,
	strict_memory_address_p, legitimize_address, and static_init_ok_p
	hooks.

	* auto-inc-dec.c (try_merge): Use GET_MODE instead of Pmode for
	the mode of newly created RTL.
	(find_inc): Use named space hook to validate pointer mode instead
	of comparing to Pmode.

	* expr.c (emit_move_insn): Add named address support.
	(expand_expr_real_1): Ditto.

	* expr.h (memory_address_addr_space): Add declaration.
	(memory_address): Define in terms of memory_address_addr_space
	with the generic address space.

	* recog.c (memory_address_addr_space_p): New function, like
	memory_address_p, except it takes an named address space
	identifier.

	* recog.h (memory_address_addr_space_p): Add declaration.
	(strict_memory_address_addr_space_p): Ditto.

	* c-typeck.c (parser_build_binary_op): Use the address space
	minus_type hook to determine what type is used for subtraction of
	two pointers to named address spaces.
	(convert_for_assignment): Shorten a line to under 80 characters.

	* emit-rtl.c (toplevel): Include target.h.
	(change_address_1): Add named address space parameter.  Switch
	validation to be named address space aware.
	(change_address_addr_space): Like change_address, but take the
	address space to change the address to.
	(change_address): Call change_address_addr_space with generic
	address space argument.
	(adjust_address_1): Add support for named address spaces.
	(offset_address): Ditto.
	(replace_equiv_address): Add address space argument.
	(replace_equiv_address_nv): Ditto.

	* explow.c (break_out_memory_refs): Use GET_MODE of the address
	instead of assuming all pointers are Pmode.
	(memory_address_addr_space): Rename from memory_address, add named
	address space argument.  Use named address space legitimize hook
	instead of LEGITIMIZE_ADDRESS for memory addresse spaces other
	than the generic address space.
	(validize_mem): Add named address space support.

	* varasm.c (make_decl_rtl): Reformat code somewhat.
	(default_valid_pointer_mode): Move to targhooks.c.
	(default_addr_space_pointer): Ditto.

	* target-def.h (TARGET_ADDR_SPACE_MINUS_HOOK): New named address
	space hook.
	(TARGET_ADDR_SPACE_MEMORY_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_STRICT_MEMORY_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Ditto.
	(TARGET_ADDR_SPACE_STATIC_INIT_OK_P): Ditto.
	(TARGET_ADDR_SPACE_HOOKS): Add new hooks.

	* Makefile.in (emit-rtl.o): Add $(TARGET_H) dependencies.

	* config/spu/spu-protos.h (spu_legitimate_address): Add named
	address space argument.
	(spu_legitimize_address): New hook.

	* config/spu/spu.c (EAmode): Move earlier in the file.
	(spu_addr_space_pointer_mode): Rename from spu_ea_pointer_mode for
	consistancy.  Simplify code somewhat.
	(TARGET_ADDR_SPACE_POINTER_MODE): Use spu_addr_space_pointer_mode.
	(spu_addr_space_minus_type): New named address space hook.
	(spu_addr_space_memory_address_p): Ditto.
	(spu_addr_space_strict_memory_address_p): Ditto.
	(spu_addr_space_legitimize_address): Ditto.
	(spu_addr_space_static_init_ok_p): Ditto.
	(TARGET_ADDR_SPACE_MINUS_TYPE): Ditto.
	(TARGET_ADDR_SPACE_STRICT_MEMORY_ADDRESS_P): Ditto.
	(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Ditto.
	(TARGET_ADDR_SPACE_STATIC_INIT_OK_P): Ditto.
	(spu_legitimate_address): Add named address space argument.
	(spu_legitimize_address): Ditto.
	(expand_ea_mem): Use change_address_addr_space instead of
	change_address.
	(spu_valid_move): Add assert for being inside function context.

	* config/spu/spu.h (GO_IF_LEGITIMATE_ADDRESS): Add default named
	address space argument.
	(LEGITIMIZE_ADDRESS): Ditto.

2008-12-05  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* c-common.h (ADDR_SPACE_KEYWORD): Set the disable flags to
	D_CONLY|D_EXT so that the source ell_integral.tcc in libstdc++
	which has a __ea identifier builds.

	* targhooks.c (default_addr_space_number): Delete, target hook is
	no longer used.
	* targhooks.h (default_addr_space_number): Ditto.

	* doc/tm.texi (TARGET_ADDR_SPACE_KEYWORDS): Document new method of
	adding named address space keywords.
	(TARGET_ADDR_SPACE_NUMBER): Delete, target hook removed.
	(TARGET_ADDR_SPACE_VALID_P): Ditto.

	* target.h (struct addr_space): Delete number, valid_p target
	hooks.

	* c-tree.h (declspecs_add_addrspace): Change calling signature.

	* c-decl.c (declspecs_add_addrspace): Take addr_space_t as
	argument instead of tree.

	* target-def.h (TARGET_ADDR_SPACE_NUMBER): Delete, target hook no
	longer used.
	(TARGET_ADDR_SPACE_VALID_P): Ditto.
	(TARGET_ADDR_SPACE_HOOKS): Ditto.

	* c-common.c (c_common_reswords): If TARGET_ADDR_SPACE_KEYWORDS is
	defined, include it to define the target's named address space
	keywords.

	* c-common.h (RID_ADDR_SPACE_0): Add for named address keyword.
	(RID_ADDR_SPACE_1): Ditto.
	(RID_ADDR_SPACE_2): Ditto.
	(RID_ADDR_SPACE_3): Ditto.
	(RID_ADDR_SPACE_4): Ditto.
	(RID_ADDR_SPACE_5): Ditto.
	(RID_ADDR_SPACE_6): Ditto.
	(RID_ADDR_SPACE_7): Ditto.
	(RID_ADDR_SPACE_8): Ditto.
	(RID_ADDR_SPACE_9): Ditto.
	(RID_ADDR_SPACE_10): Ditto.
	(RID_ADDR_SPACE_11): Ditto.
	(RID_ADDR_SPACE_12): Ditto.
	(RID_ADDR_SPACE_13): Ditto.
	(RID_ADDR_SPACE_14): Ditto.
	(RID_ADDR_SPACE_15): Ditto.
	(RID_FIRST_ADDR_SPACE): Ditto.
	(RID_LAST_ADDR_SPACE): Ditto.
	(ADDR_SPACE_KEYWORD): New macro for backends to declare new named
	address space keywords.

	* c-parser.c (c_parse_init): Add gcc_assert to make sure RID_MAX
	doesn't overflow the 8 bit field it is stored in.
	(c_lex_one_token): Change to make named address space keywords
	real keywords, rather than being discovered via target hook called
	on each identifier.
	(c_parser_declspecs): Ditto.

	* config/spu/spu.c (TARGET_ADDR_SPACE_NUMBER): Delete, no longer
	used.
	(TARGET_ADDR_SPACE_VALID_P): Ditto.
	(spu_addr_space_number): Ditto.
	(spu_addr_space_valid_p): Ditto.
	(spu_ea_identifier): Ditto.
	(ADDR_SPACE_GENERIC): Move to spu.h.
	(ADDR_SPACE_EA): Ditto.
	(ADDR_SPACE_BAD): Ditto.

	* config/spu/spu.h (ADDR_SPACE_GENERIC): Move here from spu.c.
	(ADDR_SPACE_EA): Ditto.
	(ADDR_SPACE_BAD): Ditto.
	(TARGET_ADDR_SPACE_KEYWORDS): Define to add the __ea keyword.

2008-12-04  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* doc/tm.texi (TARGET_ADDR_SPACE_SUBSET_P): Document new hook to
	determine if one named address is a subset of another.

	* doc/invoke.texi (-mno-ea-to-generic-conversion): Rename from
	-mno-local-ea-conversion.
	(-mea-to-generic-conversion): Rename from
	-mealocal-ea-conversion.
	(-mno-address-space-conversion): New switch to
	prevent automatic conversions of pointers to different named
	addresses from happening automatically.
	(-maddress-space-conversion): New default switch.

	* targhooks.c (default_addr_space_common_pointer): Delete target
	hook, no longer used.
	(default_addr_space_subset_p): New default target hook to
	determine if one named address is a subset of another.

	* targhooks.h (default_addr_space_common_pointer): Delete.
	(default_addr_space_subset_p): New declaration.

	* target.h (struct addr_space): Add subset_p target hook, drop
	common_pointer target hook.

	* c-objc-common (c_types_compatible_p): Drop named address support
	that is no longer needed.

	* c-decl.c (diagnose_mismatched_decls): Add error for mismatched
	named address spaces.
	(start_decl): Don't give an error if the target doesn't have named
	addresses, just don't set the section name.
	(grokdeclarator): Improve named address space mismatch error
	message.
	(declspecs_add_addrspace): Cache address space, rather than call
	target hook twice.

	* c-typechk.c (qualify_type): Check for named addresses.
	(common_pointer_type): Use subset_p target hook instead of the old
	common_pointer hook.
	(c_common_type): Go back to using TYPE_QUALS instead of
	TYPE_QUALS_NO_ADDR_SPACE to get main type.
	(comp_target_types): Add support for checking whether two pointer
	types point to compatible address spaces.
	(build_conditional_expr): Ditto.
	(build_c_cast): Improve named address space type mismatch error.
	(convert_for_assignment): Add support for checking whether
	pointers are to compatible named addresses.

	* target-def.h (TARGET_ADDR_SPACE_COMMON_POINTER): Delete.
	(TARGET_ADDR_SPACE_SUBSET_P): New target hook.
	(TARGET_ADDR_SPACE_HOOKS): Update target hooks.

	* config/spu/spu.opt (-mno-ea-to-generic-conversion): Rename from
	-mno-local-ea-conversion.
	(-mea-to-generic-conversion): Rename from
	-mealocal-ea-conversion.
	(-mno-address-space-conversion): New switch to
	prevent automatic conversions of pointers to different named
	addresses from happening automatically.
	(-maddress-space-conversion): New default switch.

	* config/spu/spu.c (ADDR_SPACE_BAD): New address space to return
	in error conditions.
	(TARGET_ADDR_SPACE_COMMON_POINTER): Delete.
	(spu_addr_space_common_pointer): Ditto.
	(TARGET_ADDR_SPACE_SUBSET_P): New target hook.
	(spu_addr_space_subset_p): New function to determine if one named
	address is a subset of another.
	(spu_addr_space_can_convert_p): Change -mno-local-ea-conversion to
	-mno-ea-to-generic-conversion.
	(spu_addr_space_nop_convert_p): Whitespace changes.

	* convert.c (convert_to_pointer): Improve the named address space
	mismatch error message.

2008-12-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* tree.c (int_or_pointer_precision): Simplify if assertion
	checking is not enabled.

	* tree-ssa-loop-ivopts.c (generic_type_for): Undo named address
	space support change in favor of doing it in the
	signed_or_unsigned_type_for function.

	* stor-layout.c (layout_type): Initialize TYPE_PRECISION for
	OFFSET_TYPE.

	* tree.c (signed_or_unsigned_type_for): Add support for pointers
	to named address spaces.
	(int_or_pointer_precision): Add asserts to make sure
	TYPE_PRECISION is correct for POINTER_TYPE, OFFSET_TYPE, and
	REFERENCE_TYPE.

2008-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* emit-rtl.h (set_mem_addr_space): Correct prototype to use
	addr_space_t, not unsigned char.

	* tree.h (int_or_pointer_precision): Add declaration.

	* tree.c (int_or_pointer_precision): New function to return the
	precision in bits of integer and pointer types.
	(integer_pow2p): Use int_or_pointer_precision.
	(tree_log2): Ditto.
	(tree_floor_log2): Ditto.

	* fold-const.c (fit_double_type): Use int_or_pointer_precision.

2008-11-30  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* targhook.c (default_addr_space_common_pointer): New default hook
	for determining whether there is a common pointer format to use
	between two pointers.

	* targhook.h (default_addr_space_common_pointer): Add
	declaration.

	* tree.c (integer_pow2p): Rewrite to eliminate the macro
	OTHER_ADDR_SPACE_POINTER_TYPE_P.
	(tree_log2): Ditto.
	(tree_floor_log2): Ditto.
	(build_pointer_type_for_mode): Add support for being passed
	error_mark_node.
	(build_reference_type_for_mode): Add named address space support.

	* tree.h (OTHER_ADDR_SPACE_POINTER_TYPE_P): Delete.
	(GENERIC_ADDR_SPACE_POINTER_TYPE_P): Ditto.

	* target.h (struct addr_space): Add new hook to determine whether
	there is a common pointer pointer to use between two pointers.
	Change pointer_mode argument to addr_space_t from int.

	* fold-const.c (fit_double_type): Rewrite to eliminate the macro
	OTHER_ADDR_SPACE_POINTER_TYPE_P.  Get the named address space from
	the type the pointer points to instead of the pointer itself.
	(fold_convert_const): Ditto.

	* tree-ssa-loop-ivopts.c (strip_offset): Rewrite to eliminate the
	macros OTHER_ADDR_SPACE_POINTER_TYPE_P and
	GENERIC_ADDR_SPACE_POINTER_TYPE_P.

	* expr.c (expand_expr_addr_expr): Rewrite to eliminate the macro
	OTHER_ADDR_SPACE_POINTER_TYPE_P.
	
	* c-typechk.c (common_pointer_type): Determine what named address
	space should be used if pointers to two different named address spaces.
	(build_binary_op): Rewrite to eliminate the macro
	OTHER_ADDR_SPACE_POINTER_TYPE_P.

	* varasm.c (default_addr_space_pointer_mode): Change argument type.

	* tree-ssa.c (useless_type_conversion_p_1): Rewrite to eliminate
	the macro GENERIC_ADDR_SPACE_POINTER_TYPE_P.

	* target-def.h (TARGET_ADDR_SPACE_COMMON_POINTER): New target hook
	for determining what named address space should be used when two
	pointers are combined.
	(TARGET_ADDR_SPACE_HOOKS): Add TARGET_ADDR_SPACE_COMMON_POINTER.

	* output.h (default_addr_space_pointer_mode): Change argument
	type.

	* config/spu/spu.c (spu_addr_space_common_pointer): New target
	hook to return what address space to use between two pointers.
	(TARGET_ADDR_SPACE_COMMON_POINTER): Define target hook.
	(spu_ea_pointer_mode): Change argument from int to addr_space_t.
	(spu_addr_space_can_convert_p): Use TARGET_NO_LOCAL_EA_CONVERSION
	instead of TARGET_NO_EA_LOCAL_CONVERSION.
	
	* config/spu/spu.opt (-mno-local-ea-conversion): Make mask
	correspond with switch.
	(-mlocal-ea-conversion): Ditto.

2008-11-29  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* tree.h (TYPE_QUALS_NO_ADDR_SPACE): New macro, like TYPE_QUALS,
	without the address space qualifiers.

	* expr.c (expand_expr_real_1): Add check in converting one pointer
	to another whether you can convert between different named address
	spaces.

	* c-decl.c (null_pointer_constant_p): Use TYPE_QUALS_NO_ADDR_SPACE
	instead of TYPE_QUALS.
	(composite_type): Ditto.
	(c_common_type): Ditto.
	(build_c_cast): Ditto.
	(convert_for_assignment): Ditto.
	(build_c_cast): Add error message if it is not possible to convert
	from one pointer to another.

	* convert.c (convert_to_integer): When converting pointers to
	integer, use the address space the pointer points to and not the
	pointer itself.
	
	* config/spu/spu.opt (-mno-local-ea-conversion): New switch to
	disallow converting __ea pointers to local pointers.
	(-mlocal-ea-conversion): New switch for the default case.

	* config/spu/spu.md (to_ea): Revert previous code.
	(from_ea): Ditto.

	* doc/invoke.texi (-mlocal-ea-conversion): Document.
	(-mno-local-ea-conversion): Ditto.

2008-11-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* targhooks.h (default_addr_space_can_convert_p): New
	declaration.
	(default_addr_space_nop_convert_p): Ditto.

	* targhooks.c (default_addr_space_can_convert_p): New default
	target hook for named address spaces.
	(default_addr_space_nop_convert_p): Ditto.

	* tree.c (build_pointer_type): Remove strip_array_types call.
	(build_array_type): Set the address space in the ARRAY_TYPE node.

	* tree.h (TYPE_QUALS): Remote strip_array_types call.

	* target.h (struct addr_space): Add target hooks for determining
	if you can convert from a pointer in one named address to another
	named address, and if the conversion is a NOP.

	* c-objc-common (c_initialize_diagnostics): Delete
	strip_array_types call from TYPE_ADDR_SPACE macro.

	* dwarf2out.c (modified_type_die): Delete strip_array_types call
	from TYPE_ADDR_SPACE macro.

	* emit-rtl.c (set__mem_attributes_minus_bitpos): Delete
	strip_array_types call from TYPE_ADDR_SPACE macro.

	* c-decl.c (start_decl): Delete strip_array_types call from
	TYPE_ADDR_SPACE macro.
	(grokdeclarator): If an array is in a named address space, use a
	qualified type that marks the address space.

	* print-tree.c (print_node_brief): Print non-zero address spaces.
	(print_node): Ditto.

	* target-def.h (TARGET_ADDR_SPACE_CAN_CONVERT_P): New target hook.
	(TARGET_ADDR_SPACE_NOP_CONVERT_P): Ditto.
	(TARGET_ADDR_SPACE_HOOKS): Add new hooks.

	* c-parser.c (c_parser_postfix_expression_after_paren_): Delete
	strip_array_types call from TYPE_ADDR_SPACE macro.

	* config/spu/spu.c (spu_addr_space_can_convert_p): New target hook
	for named address space support.
	(spu_addr_space_nop_convert_p): Ditto.
	(ea_symbol_ref): Delete strip_array_types call from
	TYPE_ADDR_SPACE macro.

	* convert (convert_to_pointer): Check if the backend allows
	converting a pointer from one named address to another named
	address, and if it does allow the conversion, whether the
	conversion is a NOP or real conversion.  Rewrite conversion of
	integer to pointer for named address spaces.
	(convert_to_integer): Rewrite named address space conversion code
	to adhere to GNU coding standards.

	* doc/tm.texi (TARGET_ADDR_SPACE_CAN_CONVERT_P): Document new
	hook.
	(TARGET_ADDR_SPACE_NOP_CONVERT_P): Ditto.

2008-11-25  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* c-decl.c (diagnose_mismatched_decls): Report on mis-matched
	named address spaces.
	(grokdeclarator): Clear named address from qualifiers before
	checking on whether to warn about ISO C forbidding qualified
	function types.

	* config/spu/spu.c (spu_addr_space_name): Return "generic" for the
	generic address space.

2008-11-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/spu/spu.md (to_ea): Use convert_move to convert input
	operand to the appropriate type.  If the output is not a register,
	create a register, create the result in the register, and move to
	the output.

<sync up to revision 142093, November 21, 2008>

2008-11-20  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* tree.h (CLEAR_QUAL_ADDR_SPACE): New macro to clear out the
	address space portion of the qualifier encoding.

	* c-decl.c (grokdeclarator): Rewrite code dealing with named
	address spaces so that the correct named address is picked up for
	multiple pointer levels, like char *__ea *__ea foo.

	* config/spu/spu.c (expand_ea_mem): Add comment for having back to
	back set_mem_alias calls.  Explicitly clear the named address for
	the cached pointer.

2008-11-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* expr.c (expand_expr_real_1): Fix thinko in converting named
	address space pointers.

2008-11-15  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* expr.c (expand_expr_real_1): Fix thinko in 11/12 changes, use
	type node of the cast, not the operand.

2008-11-13  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/spu/spu.c (SPU_ADDR_SPACE_VALID_P): Rename from
	SPU_VALID_ADDR_SPACE.
	(spu_ea_identifier): New static tree to hold __ea identifier.
	(spu_addr_space_valid_p): Rename from spu_valid_addr_space.
	(spu_addr_space_valid_p): Don't use strcmp to identify __ea, cache
	the identifier and do a pointer comparison.
	(spu_addr_space_number): Ditto.

	* target-def.h (SPU_ADDR_SPACE_VALID_P): Rename from
	SPU_VALID_ADDR_SPACE.

	* doc/tm.texi (Named Address Spaces): Move named address space tm
	macros to a separate section.  Add documentation for named address
	support.  Update the target hooks to reflect the current changes.

2008-11-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* targhooks.c (default_addr_space_name): Use addr_space_t for the
	argument, not int.
	(default_addr_space_convert): New hook function to do the
	conversion between address spaces.
	(default_addr_space_conversion_rtl): Delete in favor of
	default_addr_space_convert.
	(default_addr_space_number): Change return type to addr_space_t
	from unsigned char.
	(default_addr_space_section_name): New default hook for returning
	the section name for a named address.

	* targhooks.h (default_addr_space_name): Update calling signature.
	(default_addr_space_number): Ditto.
	(default_addr_space_section_name): Ditto.
	(default_addr_space_convert): New declaration.
	(default_addr_space_conversion_rtl): Delete.

	* tree-pretty-print.c (dump_generic_node): Move target space hooks
	into a sub-structure.

	* tree.c (integer_pow2p): Move target space hooks into a
	sub-structure.
	(tree_log2): Ditto.
	(tree_floor_log2): Ditto.
	(build_pointer_type): Ditto.

	* fold-const.c (fit_double_type): Move target space hooks into a
	sub-structure.

	* expr.c (expand_expr_addr_expr): Move target space hooks into a
	sub-structure.
	(expand_expr_real_1): Change how the named addresses are
	converted.

	* tree.h (addr_space_t): Delete, move to coretypes.h.

	* target.h (struct gcc_target): Move address space hooks into a
	sub-structure.  Change the signature of the address space hooks to
	use addr_space_t instead of int or unsigned char.  Change the
	address space conversion hook.  Add a hook for returning the
	section name.

	* c-decl.c (start_decl): Use named address space section hook to
	make the section name, instead of hardwiring ._ea.
	(grokdeclarator): Move target space hooks into a sub-structure.
	(declspecs_add_addrspace): Ditto.

	* c-pretty-print.c (pp_c_type_qualifier_list): Move target space
	hooks into a sub-structure.

	* coretypes.h (addr_space_t): Move type here from tree.h.

	* varasm.c (make_decl_rtl): Move target space hooks into a
	sub-structure.

	* target-def.h (TARGET_ADDR_SPACE_CONVERT): New hook to replace
	TARGET_ADDR_SPACE_CONVERSION_RTL.
	(TARGET_ADDR_SPACE_CONVERSION_RTL): Delete.
	(TARGET_ADDR_SPACE_SECTION_NAME): New hook to return the section
	name.
	(TARGET_ADDR_SPACE_HOOKS): Group all of the address space hooks
	together.
	(TARGET_INITIALIZER): Use TARGET_ADDR_SPACE_HOOKS instead of the
	individual hooks.

	* c-parser.c (c_lex_one_token): Move target space hooks into a
	sub-structure.

	* config/spu/spu.c (ADDR_SPACE_GENERIC): New macro to define
	address space ids.
	(ADDR_SPACE_EA): Ditto.
	(struct spu_address_space): Delete, no longer used.
	(spu_addr_space_name): Use addr_space_t instead of int arg.
	Delete use of spu_address_space array.
	(spu_addr_space_convert): New function to convert between address
	spaces.  Replace spu_addr_space_conversion_rtl.
	(spu_addr_space_conversion_rtl): Delete.
	(spu_addr_space_section_name): New hook to return the section name
	for named addresses.
	(spu_valid_addr_space): Delete use of spu_address_space array.
	(spu_addr_space_number): Ditto.
	(spu_ea_name): New static to hold the ._ea section name.
	(gt-spu.h): Include.

	* convert.c (convert_to_pointer): Move target space hooks into a
	sub-structure.
	(convert_to_integer): Ditto.

2008-11-11  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* emit-rtl.c (get_mem_attrs): Consider address space when seeing
	if the memory has the default attributes.

2008-11-07  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* tree.c (integer_pow2p): Reduce columns to under 80.
	(tree_log2): Ditto.
	(tree_floor_log2): Ditto.

	* tree.h (ENCODE_QUAL_ADDR_SPACE): Add a comment.

	* print-tree.c (toplevel): Revert includes of target.h and
	target-def.h back to the mainline code since MD code has been
	removed.

	* fold-const.c (fit_double_type): Reduce columns to under 80.

	* expr.c (expand_expr_addr_expr): Reduce columns to under 80.
	(expand_expr_real_1): Start work to merge to/from conversions to
	one case.

2008-10-31  Ben Elliston  <bje@au.ibm.com>

	* tree.h (DECODE_QUAL_ADDR_SPACE): Fix logic bug.

2008-10-27  Ben Elliston  <bje@au.ibm.com>

	* targhooks.c (default_addr_space_number): Conform to the GNU
	coding standard.
	* tree.h (addr_space_t): Add a comment.
	* c-decl.c (grokdeclarator): Use != 0, not > 0 when testing
	for non-generic address spaces.
	
2008-10-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* emit-rtl.c (get_spill_slot_decl): Pass 0 as address space.
	(set_mem_attrs_for_spill): Ditto.
	(mem_attrs_htab_hash): Use the address space in the hash.
	(mem_attrs_htab_eq): Ditto.

2008-10-20  Ben Elliston  <bje@au.ibm.com>

	* doc/invoke.texi (SPU Options): Improve documentation for -mea32,
	-mea64, -mcache-size and -matomic-updates options.

2008-09-19  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (grokdeclarator): Always emit an error about
	incompatible address spaces--not conditional on !flag_iso.

2008-08-29  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in (c-decl.o, c-pretty-print.o, convert.o,
	tree-pretty-print.o, fold-const.o): Update make dependencies.

2008-08-29  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (grokdeclarator): Produce an error for incompatible
	address space qualifiers via typedef.
	(declspecs_add_addrspace): Likewise.

2008-08-28  Ben Elliston  <bje@au.ibm.com>

	* c-parser.c (c_parser_declspecs): Remove c_dialect_objc test.
	(c_parser_declspecs): Do not set seen_type.

	* varasm.c (make_decl_rtl): Formatting.
	* print-tree.c (print_node): Remove target-specific code.

2008-08-28  Ben Elliston  <bje@au.ibm.com>

	* config/spu/t-spu-elf: Use $(T) to avoid the use of multiple make
	targets for the -mea32 and -mea64 cache libraries.  Pass
	$(MULTILIB_CFLAGS) when compiling such objects.

2008-08-28  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c: Fix some merge botches.

2008-08-27  Ben Elliston  <bje@au.ibm.com>

	* target.h (struct gcc_target): Ensure that the addr_space_number
	member takes a const_tree.
	* config/spu/spu.c (spu_addr_space_number): Likewise.

2008-08-26  Alan Modra  <amodra@bigpond.net.au>
	    Ben Elliston  <bje@au.ibm.com>

	* tree.c (build_pointer_type): Arrays have their type qualifiers
	applied to the element type (see c_build_qualified_type and
	ISO/IEC 9899:1999 section 6.7.3), so TYPE_ADDR_SPACE needs to
	access the element type if operating on an array type.
	* tree.h (OTHER_ADDR_SPACE_POINTER_TYPE): Likewise.
	(GENERIC_ADDR_SPACE_POINTER_TYPE): Likewise.
	(COMPLETE_TYPE_P): Likewise.
	* c-objc-common.c (c_types_compatible_p): Likewise.
	* dwarf2out.c (modified_type_die): Likewise.
	* convert.c (convert_to_integer): Likewise.
	* emit-rtl.c (get_mem_attrs): Use an addr_space_t argument.
	(set_mem_attributes_mini_bitpos): Strip array types.
	(set_mem_addr_space): Use an addr_space_t argument.
	* tree-ssa.c (useless_type_conversion_p): Simplify void * test.
	* c-parser.c (c_parser_postfix_expression_after_paren_type): Strip
	array types.
	* c-decl.c (start_decl): Set DECL_SECTION_NAME to "._ea" for __ea
	variable definitions.
	(grokdeclarator): Allow static and global __ea variable
	definitions.
	* config/spu/spu.h (TEXT_SECTION_ASM_OP): Add a tab.
	(DATA_SECTION_ASM_OP): Likewise.
	(ASM_OUTPUT_SYMBOL_REF): Strip array types on arg.
	* config/spu/spu.c (TARGET_SECTION_TYPE_FLAGS): Define.
	(spu_section_type_flags): New function.
	(ea_symbol_ref): Convert to for_each_rtx predicate.
	(spu_legitimate_constant_p): Reject __ea symbol refs wrapped in
	const.
	(spu_legitimate_address): Likewise.

2008-08-25  Ulrich Weigand  <uweigand@de.ibm.com>

	* config/spu/cachemgr.c: Make interrupt safe and respect tag mask
	policy.

2008-08-22  Ben Elliston  <bje@au.ibm.com>

	* doc/extend.texi (Named Address Spaces): Use N1275, not N1169.

2008-08-22  Ben Elliston  <bje@au.ibm.com>

	* targhooks.c (default_addr_name_space): Add function comment.
	(default_addr_space_conversion_rtl): Likewise.
	(default_addr_space_number): Likewise.
	* c-decl.c (declspecs_add_addrspace): Likewise.
	* varasm.c (default_addr_space_pointer_mode): Likewise.
	* tree.h (addr_space_t): New typedef.
	(struct tree_type): Reorder fields for compactness. Use
	addr_space_t.
	* rtl.h (struct mem_attrs): Reorder fields for compactness.
	* c-tree.h (struct c_declspecs): Use addr_space_t.
	* doc/extend.texi (Named Address Spaces): Use @code, not @var when
	mentioning the __ea address space qualifier.
	* doc/tm.texi: Revert unwanted changes.

2008-08-20  Ben Elliston  <bje@au.ibm.com>

	* config/spu/spu_mfcio.h: Remove unconditional uint64_t typedef.

2008-08-20  Ben Elliston  <bje@au.ibm.com>

	* doc/tm.texi (Misc): Document target hooks for named addresss
	space support.

2008-08-20  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (grokdeclarator): Rename ea_p to addr_space_p.

2008-08-19  Ben Elliston  <bje@au.ibm.com>

	* print-tree.c (print_node): Don't use target hooks from this
	function (for now).

2008-08-19  Ben Elliston  <bje@au.ibm.com>

	* tree-ssa.c (useless_type_conversion_p_1): Do not lose casts
	between pointers in different address spaces.

2008-08-18  Ben Elliston  <bje@au.ibm.com>

	* config/spu/spu.c (spu_expand_mov): Adjust __ea mems before
	calling spu_valid_move.
	
2008-08-11  Ben Elliston  <bje@au.ibm.com>

	* print-rtl.c (print_rtx): Print address space number, if non-zero.
	* tree-pretty-print.c (dump_generic_node): Print address space
	name, if non-generic.

2008-08-08  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (grokdeclarator): Fix bug constructing type_quals mask.

2008-08-06  Ben Elliston  <bje@au.ibm.com>

	* varasm.c (make_decl_rtl): Improvements to previous change.

2008-08-04  Ben Elliston  <bje@au.ibm.com>

	* varasm.c (make_decl_rtl): Guard against the error_mark_node.

2008-07-30  Ben Elliston  <bje@au.ibm.com>

	* target.h (struct gcc_target): Fix valid_addr_space prototype.
	* c-decl.c (grokdeclarator): Remember to pass arg 1 to pedwarn.
	(declspecs_add_addrspace): Likewise.	

2008-07-29  Ben Elliston  <bje@au.ibm.com>

	* c-parser.c (c_parser_postfix_expression_after_paren_type): Guard
	against the error_mark_node.

2008-07-28  Ben Elliston  <bje@au.ibm.com>

	* tree.c (set_type_quals): Use DECODE_QUAL_ADDR_SPACE.
	* tree.h (ENCODE_QUAL_ADDR_SPACE): New.
	(DECODE_QUAL_ADDR_SPACE): Likewise.
	(TYPE_QUALS): Use ENCODE_QUAL_ADDR_SPACE.
	* tree-ssa-loop-ivopts.c (generic_type_for): Likewise.
	* c-decl.c (quals_from_declspecs): Likewise.
	(grokdeclarator): Likewise.
	* c-typeck.c (build_binary_op): Likewise.

2008-07-15  Ben Elliston  <bje@au.ibm.com>

	* doc/rtl.texi (Special Accessors): Document MEM_ADDR_SPACE.
	* rtl.h (MEM_ADDR_SPACE): Re-define to use mem_attrs.
	(struct rtx_def): Move addr_space field from here ..
	(struct mem_attrs): .. to here.
	* emit-rtl.c (set_mem_attributes_minus_bitpos,
	set_mem_attrs_from_reg, set_mem_alias_set, set_mem_align,
	set_mem_expr, set_mem_offset, set_mem_size, change_address,
	adjust_address_1, offset_address, widen_memory_access): Update
	all callers.
	(set_mem_addr_space): New.
	(get_mem_attrs): Add address space parameter, set attrs.
	* emit-rtl.h (set_mem_addr_space): New.

2008-07-11  Ben Elliston  <bje@au.ibm.com>

	* tree.c (set_type_quals): TYPE_QUAL_EA -> TYPE_QUAL_ADDRSPACE.
	* tree.h: Likewise.
	(TYPE_QUALS): Likewise.
	* tree-ssa-loop-ivopts.c (generic_type_for): Likewise.
	* c-decl.c (quals_from_declspecs): Likewise.
	(grokdeclarator): Likewise.
	* c-typeck.c (build_binary_op): Likewise.

2008-07-11  Ben Elliston  <bje@au.ibm.com>

	* rtl.h (struct rtx_def): Rename `ea' to `addr_space'.
	(MEM_EA_P): Rename from this ..
	(MEM_ADDR_SPACE): .. to this.
	* emit-rtl.c (set_mem_attributes_minus_bitops): Update callers.
	* config/spu/spu.c (spu_expand_mov): Likewise.

2008-06-13  Ben Elliston  <bje@au.ibm.com>

	* config/spu/spu.c (TARGET_ADDR_SPACE_NUMBER): Define.
	(spu_addr_space_number): Provide this hook function for SPU.

2008-05-09  Ben Elliston  <bje@au.ibm.com>

	* targhooks.c (default_addr_space_number): New.
	* targhooks.h (default_addr_space_number): New prototype.
	* target.h (struct gcc_target): New field addr_space_number.
	* target-def.h (TARGET_ADDR_SPACE_NUMBER): New.
	(TARGET_INITIALIZER): Add TARGET_ADDR_SPACE_NUMBER.
	* c-decl.c (declspecs_add_addrspace): Use this target hook to look
	up the address space number for a decl.
	* config/spu/spu.c (struct spu_address_space): Add new fields.
	(spu_address_spaces): Update struct instance.
	(spu_valid_pointer_mode): Remove fixme.
	(spu_addr_space_name): Likewise.
	(spu_addr_space_conversion_rtl): Simplify--use the table.
	(spu_valid_addr_space): Likewise.

2008-05-09  Ben Elliston  <bje@au.ibm.com>

	* doc/extend.texi: Document name address space extension.
	* doc/invoke.texi: Document new SPU options.

2008-05-09  Ben Elliston  <bje@au.ibm.com>

	* tree-dump.c (dequeue_and_dump): Remove TYPE_QUAL_EA case.
	* tree-pretty-print.c: Include target.h/target-def.h.
	(dump_generic_node): Use TYPE_ADDR_SPACE, not TYPE_QUAL_EA.
	(pp_c_type_qualifier_list): Likewise. Update comments.
	* c-pretty-print.c: Include target.h/target-def.h.
	(pp_c_type_qualifer_list): Likewise.

2008-05-08  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (declspecs_add_addrspace): Use addr_space_name hook
	when producing the diagnostic.

2008-05-08  Ben Elliston  <bje@au.ibm.com>

	* c-parser.c (c_parser_declspecs): Handle the possibility of a
	C_ID_ADDRSPACE appearing in the list of declaration specifiers.

2008-05-07  Ben Elliston  <bje@au.ibm.com>

	* target.h (struct gcc_target): Add valid_addr_space field.
	* target-def.h (TARGET_VALID_ADDR_SPACE): New.
	(TARGET_INITIALIZER): Add TARGET_VALID_ADDR_SPACE.
	* c-parser.c (legitimate_addr_space): Remove.
	(c_lex_one_token): Call target hook instead.
	* config/spu/spu.c: Define TARGET_VALID_ADDR_SPACE.
	(spu_valid_addr_space): New.

2008-05-07  Ben Elliston  <bje@au.ibm.com>

	* convert.c (convert_to_integer): Fix thinko (type -> intype).

2008-05-07  Ben Elliston  <bje@au.ibm.com>

	* c-common.h (RID_EA): Remove.
	* c-parser.c (reswords): Remove "__ea"/RID_EA entry.
	(enum c_id_kind): Add C_ID_ADDRSPACE.
	(legitimate_addr_space): New (for now).
	(c_lex_one_token): Handle C_ID_ADDRSPACE tokens in the lexer.
	(c_token_starts_typename): Add C_ID_ADDRPSACE case.
	Remove RID_EA keyword case.
	(c_token_starts_declspecs): Add C_ID_ADDRSPACE case.
	Likewise, remove RID_EA keyword case.
	(c_parser_declspecs): Handle C_ID_ADDRSPACE.
	Remove sundry handling of RID_EA keyword.
	(c_parser_objc_selector): Likewise.
	* c-tree.h (declspecs_add_addrspace): New.
	* c-decl.c (declspecs_add_addrspace): Likewise.
	(declspecs_add_qual): Remove RID_EA case.

2008-05-02  Ben Elliston  <bje@au.ibm.com>

	* expr.c (expand_expr_real_1): Remove unused local variable `reg'.

2008-05-02  Ben Elliston  <bje@au.ibm.com>

	* tree.c (integer_pow2p): Use the address space number, not a
	hard-coded 1 when getting the address space pointer mode.
	(tree_log2): Likewise.
	(tree_floor_log2): Likewise.
	(build_pointer_type): Likewise.
	* fold-const.c (fit_double_type): Likewise.
	* expr.c (expand_expr_addr_expr): Likewise.
	* varasm.c (make_decl_rtl): Likewise.
	(default_addr_space_pointer_mode): Assert generic address space.
	* convert.c (convert_to_pointer): Likewise.
	(convert_to_integer): Likewise.
	* config/spu/spu.c (spu_ea_pointer_mode): Handle the generic
	address space, returning ptr_mode.  Abort on invalid address
	spaces.
	(spu_addr_space_conversion_rtl): Return 0, not NULL_RTX.

2008-05-02  Ben Elliston  <bje@au.ibm.com>

	* targhooks.h (default_addr_space_conversion_rtl): New.
	* targhooks.c (default_addr_space_conversion_rtl): Likewise..
	* target.h (addr_space_conversion_rtl): New target hook.
	* target-def.h (TARGET_ADDR_SPACE_CONVERSION_RTL): New.
	(TARGET_INITIALIZER): Add TARGET_ADDR_SPACE_CONVERSION_RTL.
	* expr.c (expand_expr_real_1): Use addr_space_conversion_rtl
	target hook to emit the insn.
	* config/spu/spu.c (TARGET_ADDR_SPACE_CONVERSION_RTL): Define.
	(spu_addr_space_conversion_rtl): New.

2008-05-02  Ben Elliston  <bje@au.ibm.com>
	
	* c-parser.c (c_parser_declspecs): Adjust the top-of-function
	comment so that the address-space production is classified as a
	GNU extension.

2008-04-29  Ben Elliston  <bje@au.ibm.com>

	* targhooks.c (default_addr_space_name): Constify return
	type. Mark incoming argument as ATTRIBUTE_UNUSED.
	* targhooks.h (default_addr_space_name): Update prototype.
	* target.h (struct gcc_target): Constify addr_space_name return.
	(struct gcc_target): Remove have_ea.
	* c-decl.c: Include "targhooks.h".  Do not test targetm.have_ea,
	test targetm.addr_space_name against default_addr_space_name
	instead.
	* varasm.c (default_addr_space_pointer_mode): Mark incoming
	argument as ATTRIBUTE_UNUSED.
	* target-def.h (TARGET_HAVE_EA): Remove.
	(TARGET_INITIALIZER): Remove TARGET_HAVE_EA initialiser.
	* config/spu/spu.h (TARGET_HAVE_EA): Remove.
	* config/spu/spu.c (spu_address_space): Constify name field.
	(spu_ea_pointer_mode): Take an integer argument (may be unused).
	(spu_addr_space_name): Constify return type.
	(spu_valid_pointer_mode): Hack up for now.

2008-04-29  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (grokdeclarator): Use targetm.addr_space_name hook to
	translate address space numbers to identifiers.

2008-04-28  Ben Elliston  <bje@au.ibm.com>

	* targhooks.h (default_addr_space_name): New.
	* targhooks.c (default_addr_space_name): New.
	* target.h (addr_space_name): New target hook.
	* print-tree.c 
	* target-def.h (TARGET_ADDR_SPACE_NAME): New.
	* config/spu/spu.c (struct spu_address_space): New.
	(spu_address_spaces): New.
	(TARGET_EA_POINTER_MODE): Rename from this ..
	(TARGET_ADDR_SPACE_POINTER_MODE): .. to this.
	(TARGET_ADDR_SPACE_NAME): New.
	(spu_addr_space_name): New.

2008-04-28  Ben Elliston  <bje@au.ibm.com>

	* c-pretty-print.c (pp_c_type_qualifier_list): Update comments.
	* varasm.c (default_addr_space_pointer_mode): Rename argument.

2008-04-28  Ben Elliston  <bje@au.ibm.com>

	* expr.c (expand_expr_real_1): Make comments more generic.
	* c-typeck.c (build_binary_op): Likewise.
	* c-parser.c (c_parser_declspecs): Likewise.
	* tree.h (OTHER_ADDR_SPACE_POINTER_TYPE_P): Likewise.
	(GENERIC_ADDR_SPACE_POINTER_TYPE_P): Likewise.
	* target.h (addr_space_pointer_mode, have_ea): Likewise.

2008-04-28  Ben Elliston  <bje@au.ibm.com>

	* dwarf2out.c (modified_type_die): Encode address space number.

2008-04-24  Ben Elliston  <bje@au.ibm.com>

	* c-tree.h (struct c_declspecs): Make the type of address_space
	field an unsigned char.
	* tree.h (struct tree_type): Remove single bit ea_flag field,
	replace with integral address_space field.
	(EA_POINTER_TYPE_P): Rename from this ..
	(OTHER_ADDR_SPACE_POINTER_TYPE_P): .. to this.
	(NON_EA_POINTER_TYPE_P): Rename from this ..
	(GENERIC_ADDR_SPACE_POINTER_TYPE_P): .. to this.
	(TYPE_EA): Rename from this ..
	(TYPE_ADDR_SPACE): .. to this.
	* convert.c, fold-const.c, tree-ssa-loop-ivopts.c,
	c-objc-common.c, c-tree.h, dwarf2out.c, expr.c, c-decl.c,
	c-typeck.c, emit-rtl.c, print-tree.c, varasm.c, tree-ssa.c,
	c-parser.c, config/spu/spu.c, config/spu/spu.h: Update callers.

2008-04-24  Ben Elliston  <bje@au.ibm.com>

	* target.h (ea_pointer_mode): Rename to addr_space_pointer_mode.
	* c-tree.h (struct c_declspecs): Remove ea_p, add address_space.
	* c-decl.c: Access declspecs->address_space, not ->ea_p.
	* tree.c: Update callers to targetm.addr_space_pointer_mode.
	* fold-const.c: Likewise.
	* expr.c: Likewise.
	* convert.c: Likewise.
	* varasm.c: Likewise.
	(default_ea_pointer_mode): Rename from this ..
	(default_addr_space_pointer_mode): .. to this.
	* target-def.h (TARGET_EA_POINTER_MOE): Rename from this ..
	(TARGET_ADDR_SPACE_POINTER_MODE): .. to this.
	* output.h (default_ea_pointer_mode): Rename from this ..
	(default_addr_space_pointer_mode): .. to this.

2008-04-17  Ben Elliston  <bje@au.ibm.com>

	* config/spu/spu.c: Various bug fixes.

2008-03-15  Ben Elliston  <bje@au.ibm.com>

	* c-parser.c: Diagnose address space qualified compound
	literals in function bodies.

2007-11-09  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (grokdeclarator): Pointer variables may not be defined
	in the __ea address space.

2007-11-09  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c (grokdeclarator): Within a structure or union
	specifier, the type of a member shall not be qualified by an
	address space qualifier.

2007-11-01  Ben Elliston  <bje@au.ibm.com>

	* print-rtl.c (print_rtx): Remove __ea flag handling.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* fold-const.c (fit_double_type): Fix typo.
	(fold_convert_const): Fix comparisons between integer constants
	and __ea pointers.
	* c-typeck.c (build_binary_op): If either operand is an __ea
	pointer, make the result of a comparison an __ea pointer also.

2007-10-30  Alan Modra  <amodra@bigpond.net.au>

	* expr.c (expand_expr_addr_expr): Do not assume pointers are
	ptr_mode or Pmode.
	* varasm.c (make_decl_rtl): Likewise.
	* config/spu/spu.c (TARGET_ASM_ALIGNED_DI_OP,
	TARGET_ASM_ALIGNED_DI_OP): Use .quad and .8byte for DImode output,
	which are perfectly good if the 32-bit assembler is built with
	--enable-64-bit-bfd.
	(ea_load_store): Call __cache_fetch-dirty on online __ea writes
	that miss.  Properly set up library call sym refs.

2007-10-30  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	* config/spu/spu.c (ea_load_store_inline): Fix inline-generated
	__ea access code.  Fix -mea64 cache access problems.

2007-10-30  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	* tree-ssa-loop-ivopts.c (generic_type_for): When generating a
	type for an IV variable, ensure it is __ea-qualified, if
	necessary.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* convert.c: Include "target.h".
	(convert_to_pointer): Do not assume pointers are POINTER_SIZE.
	(convert_to_integer): Likewise.

2007-10-30  Alan Modra  <amodra@bigpond.net.au>

	* config/spu/spu.c (expand_ea_mem): Mark __ea mems with their own
	alias set.
	
2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* explow.c (memory_address): Only convert a memory address if it
	is not already a valid pointer mode.  If a value is already in a
	valid pointer mode, force the value into a register of that mode,
	not Pmode.
	* config/spu/spu.c (TARGET_VALID_POINTER_MODE): Override.
	(spu_valid_pointer_mode): New function.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* target.h (struct gcc_target): Add ea_pointer_mode.
	* tree.h (EA_POINTER_TYPE_P): New.
	(NON_EA_POINTER_TYPE_P): Likewise.
	* tree.c (integer_pow2p): Avoid POINTER_SIZE for __ea types.
	(tree_log2): Likewise.
	(tree_floor_log2): Likewise.
	(build_pointer_type_for_mode): Avoid ptr_mode for __ea types.
	* c-objc-common.c (c_types_compatible_p): Handle __ea types.
	* expr.c (expand_expr_real_1): Handle casts of pointers to/from
	__ea qualified pointers.
	* varasm.c (default_ea_pointer_mode): New function.
	* tree-ssa.c (useless_type_conversion_p): Casts to void * are only
	useless if both pointers are non-ea pointers.
	* target-def.h (TARGET_EA_POINTER_MODE): New.
	(TARGET_INITIALIZER): Add TARGET_EA_POINTER_MODE.
	* output.h (default_ea_pointer_mode): Provide extern declaration.
	* config/spu/spu.c (TARGET_EA_POINTER_MODE): Override.
	(spu_ea_pointer_mode): New function.
	* config/spu/spu.md (to_ea, from_ea): New expanders.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* config/spu/t-spu-elf (MULTILIB_OPTIONS): Add mea64.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* config/spu/spu.h (ASM_OUTPUT_SYMBOL_REF): Define.
	* config/spu/spu.c (ea_symbol_ref): New function.
	(spu_legitimate_constant_p): Reject any __ea qualified reference.
	(spu_legitimate_address): Keep __ea references until reload so
	that spu_expand_mov can see them in MEMs.
	(spu_expand_mov): Handle MEM_EA_P operands.
	(EAmode): Define.
	(ea_load_store): New function.
	(ea_load_store_inline): Likewise.
	(ea_alias_set): New global.
	(expand_ea_mem): New function.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* dwarf2out.c (modified_type_die): Add the DW_AT_address_class
	attribute for __ea pointer and reference types.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* config.gcc (spu-*-elf*) [extra_headers]: Add spu_cache.h.
	* config/spu/spu_cache.h: New file.
	* config/spu/cachemgr.c: Likewise.
	* config/spu/cache.S: Likewise.
	* config/spu/t-spu-elf (EXTRA_MULTILIB_PARTS): Add
	libgcc_cachemgr.a, libgcc_cachemgr_nonatomic.a, libgcc_cache8k.a,
	libgcc_cache16k.a, libgcc_cache32k.a, libgcc_cache64k.a,
	libgcc_cache128k.a.
	(cachemgr.o, %/cachemgr.o): New targets.
	(cachemgr_nonatomic.o, %/cachemgr_nonatomic.o): Likewise.
	(libgcc_%.a, %/libgcc_%.a): Likewise.
	(cache8k.o, cache16k.o, cache32k.o, cache64k.o, cache128k.o,
	%/cache8k.o, %/cache16k.o, %/cache32k.o, %/cache64k.o,
	%/cache128k.o): Likewise.
	
2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* tree.h (TYPE_EA): New.
	(TYPE_QUAL_EA): New.
	(TYPE_QUALS): Include TYPE_EA.
	(struct tree_type): Add ea_flag bit.
	* target.h (struct gcc_target): Add have_ea.
	* c-tree.h (struct c_declspecs): Add ea_p bitfield.
	* target-def.h (TARGET_HAVE_EA): Define to false by default.
	(TARGET_INITIALIZER): Add TARGET_HAVE_EA.
	* rtl.h (struct rtx_def): Add ea bit.
	* c-common.h (RID_EA): New.
	* tree-dump.c (dequeue_and_dump): Handle TYPE_QUAL_EA.
	* tree-pretty-print.c (dump_generic_node): Handle TYPE_QUAL_EA.
	* tree.c (set_type_quals): Set TYPE_EA.
	* c-decl.c (shadow_tag_warned): Handle declspecs->ea_p.
	(quals_from_declspecs): Likewise, handle specs->ea_p.
	(grokdeclarator): Warn about incorrect __ea usage.
	(build_null_declspecs): Initialise ret->ea_p.
	(declspecs_add_qual): Add RID_EA case.
	* c-pretty-print.c (pp_c_type_qualifier_list): Print __ea.
	* print-rtl.c (print_rtx): Print `/e' for __ea symbols.
	* emit-rtl.c (set_mem_attributes_minus_bitpos): Set MEM_EA_P.
	* print-tree.c (print_node): Handle trees with TYPE_EA.
	* c-parser.c (reswords): Add __ea.
	(c_token_starts_typename): Add RID_EA case.
	(c_token_starts_declspecs): Likewise.
	(c_parser_declspecs): Likewise.
	(c_parser_attributes): Likewise.
	(c_parser_asm_statement): Likewise.
	(c_parser_objc_selector): Likewise.
	* config/spu/spu.h (TARGET_HAVE_EA): Define to true.
	* config/spu/spu-elf.h (DRIVER_SELF_SPECS): Handle -mcache-size=X
	options; link the appropriate libgcc_cache library. Likewise for
	-matomic-updates and -mno-atomic-updates.
	(LIB_SPEC): Pass -lgcc_cache* options to the linker.
	* config/spu/spu.opt (mea32, mea64): New options.
	* config/spu/spu-c.c (spu_cpu_cpp_builtins): Define __EA32__ and
	__EA64__ depending on the extended address pointer size.

2007-10-30  Ben Elliston  <bje@au.ibm.com>

	* config/spu/spu_mfcio.h: Avoid <stdint.h>.
	(uint64_t): Typedef.

2007-10-29  Ben Elliston  <bje@au.ibm.com>

	* New.

