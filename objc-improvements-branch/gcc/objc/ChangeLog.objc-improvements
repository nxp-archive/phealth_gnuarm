2004-08-10  Ziemowit Laski  <zlaski@apple.com>

	* Make-lang.in (objc/objc-act.o): Depend on $(HASHTAB_H).
	* objc-act.c: Include hashtab.h.
	(string_descriptor): New type.
	(string_htab): New hash table, for constant strings.
	(string_hash, string_eq): New functions.
	(hash_init): Initialize string_htab hash table.
	(objc_build_string_object): Unique string objects using the
	string_htab hash table.

2004-07-30  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c (objc_start_function, objc_push_parm, objc_get_parm_info,
	gen_type_name, start_var_decl, finish_var_decl): New functions.
	(objc_expr_last, gen_declaration_1, gen_declarator, is_complex_decl,
	adorn_decl, define_decl, gen_declspecs, objc_is_type_qualifier): Remove
	functions.
	(objc_add_instance_variable): Simplify parameter list, along with
	call to add_instance_variable().
	(synth_module_prologue): Call build_class_template(),
	build_protocol_template() and build_category_template().
	(build_metadata_decl): Call start_var_decl() instead of define_decl().
	(generate_objc_symtab_decl): Do not call build_category_template(); 
	call start_var_decl() and finish_var_decl() instead of start_decl()
	and finish_decl().
	(build_module_descriptor): Call create_field_decl() instead of
	grokfield(); call start_var_decl() and finish_var_decl() instead of
	start_decl() and finish_decl().
	(build_module_initializer_routine): Call objc_start_function(),
	objc_push_parm() and objc_get_parm_info() instead of start_function()
	and store_parm_decls().
	(generate_static_references, generate_strings,
	build_selector_translation_table, generate_descriptor_table,
	generate_ivars_list, generate_dispatch_table, generate_category): Call
	start_var_decl() and finish_var_decl() instead of start_decl() and
	finish_decl().
	(build_selector_reference_decl, build_selector_table_decl,
	build_class_reference_decl, build_protocol_reference,
	generate_objc_image_info): Call start_var_decl() instead of
	build_decl().
	(build_selector_reference): For GNU runtime, do not call
	build_selector_reference_decl().
	(objc_get_class_ivars): Do not call grokfield().
	(get_class_ivars): Remove second parameter; create a fresh copy
	of the ivar list for each call; do not check for existence of
	super class.
	(objc_begin_catch_clause): Convert the incoming PARM_DECL into
	a VAR_DECL before placing it in the appropriate scope; do not
	call define_decl().
	(build_private_template): Adjust call to get_class_ivars(); build
	a type directly instead of via groktypename().
	(build_protocol_template, build_method_prototype_list_template,
	build_method_prototype_template, build_category_template,
	build_selector_template, build_class_template, build_super_template,
	build_ivar_template, build_ivar_list_template,
	build_method_list_template, build_method_template):
	Call create_field_decl() instead of grokfield().
	(objc_method_parm_type): Do not call groktypename().
	(objc_encoded_type_size): Use INTEGRALTYPE_P instead of INTEGER_TYPE,
	BOOLEAN_TYPE and ENUMERAL_TYPE.
	(generate_method_descriptors, build_protocol_initializer,
	generate_ivar_lists, generate_dispatch_tables,
	build_category_initializer, build_shared_structure_initializer): Build
	a type directly instead of via groktypename().
	(generate_protocols): Do not call build_protocol_template() or
	groktypename(); call start_var_decl() and finish_var_decl() instead of
	start_decl() and finish_decl().
	(synth_forward_declarations): Adjust call to build_metadata_decl().
	(error_with_ivar): Remove last parameter.
	(check_ivars): Do not iterate ovar CLASS_RAW_IVARS lists in addition
	to CLASS_IVARS lists; adjust calls to error_with_ivar().
	(generate_protocol_list, generate_shared_structures): Call
	start_var_decl() and finish_var_decl() instead of start_decl() and
	finish_decl(); build a type directly instead of via
	groktypename().
	(synth_id_with_class_suffix): Return a string.
	(adjust_type_for_id_default): Simplify; there is no longer a need to
	wade through declspecs.
	(get_arg_type_list): For instance methods, use the instance type for
	'self'; do not call groktypename().
	(objc_finish_message_expr): Call gen_type_name() instead of
	gen_declaration().
	(build_objc_method_call, warn_with_method): Do not call groktypename().
	(add_instance_variable): Simplify parameter list; do not call grokfield();
	do not populate CLASS_IVARS list.
	(start_class): Check for the existence of super class, if one was specified.
	(continue_class): Use CLASS_RAW_IVARS rather than CLASS_IVARS; do not
	call build_class_template(); adjust call to get_class_ivars(); call
	build_decl(), pushdecl() and finish_decl() instead of define_decl().
	(add_protocols): Use PROTOCOL_BINFO_ELTS for the tree vector size.
	(start_protocol): Do not call build_protocol_template(); use 
	PROTOCOL_BINFO_ELTS for the tree vector size.
	(encode_type_qualifiers): Do not handle the 'const' qualifier here.
	(encode_pointer): Encode 'const char *' as 'r*', for backwards
	compatibility.
	(encode_array): Use HOST_WIDE_INT_PRINT_DEC instead of "%ld".
	(encode_type): Handle the 'const' qualifier here.
	(objc_parmlist): New global variable, sued by objc_push_parm and 
	objc_get_parm_info().
	(synth_self_and_ucmd_args): For instance methods,  use the instance
	type for 'self'; call objc_push_parm() instead of push_parm_decl().
	(start_method_def): Do not call push_scope(), declare_parm_level(),
	pop_scope(), push_parm_decl(), store_parm_decls() or objc_expr_last();
	just use objc_push_parm() and objc_get_parm_info().
	(really_start_method); Call objc_start_function() instead of
	start_function() and objc_expr_last().
	(get_super_receiver): Call build_decl() and pushdecl() instead of
	start_decl().
	(tmpbuf, RAW_TYPESPEC): Remove.
	(gen_method_decl): Call gen_type_name() instead of gen_declaration_1().
	(generate_classref_translation_entry): Do not call start_decl(); call
	finish_var_decl() instead of finish_decl(); call convert() instead of
	build_c_cast().
	* objc-act.h (CLASS_OWN_IVARS): Remove accessor.
	(CLASS_BINFO_ELTS): Reduce from 6 to 5, now that CLASS_OWN_IVARS is
	gone.

2004-06-25  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c (build_module_initializer_routine): New function,
	broken off of build_module_descriptor().
	(init_objc_symtab): Cast initializer element to appropriate
	type.
	(build_module_descriptor): Always mark module descriptor as
	used; move GNU runtime-specific functionality to
	build_module_initializer_routine().
	(objc_static_init_needed_p, objc_generate_static_init_call): New
	functions, called from within C and C++ static initializer logic.
	(build_selector, build_typed_selector_reference): Always convert
	result to the selector type.
	(build_method_prototype_template, build_selector_template,
	build_method_template): Use actual selector type for fields
	pointing to selectors.
	(finish_objc): For GNU runtime, call
	build_module_initializer_routine() after build_module_descriptor().
	* objc-act.h (OCTI_GNU_INIT_DECL, GNU_INIT_decl): New.

2004-06-23  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c (TYPE_ID): Rename to OBJECT_TYPEDEF_NAME.
	(CLASS_TYPEDEF_NAME): New.
	(objc_init): Do not initialize objc_ellipsis_node.
	(objc_method_ellipsis): Remove.
	(objc_get_static_reference, objc_get_object_reference): Removed,
	replaced by...
	(objc_get_protocol_qualified_type): ... this function; the 'id' and
	'Class' types no longer need to be defined in a header.
	(synth_module_prologue): Predefine 'id' and 'Class' as typedefs; rename
	'temp_type' to 'type'.
	(id_type, objc_id_id): Rename to objc_object_type and objc_object_name,
	respectively.
	(objc_class_type, objc_class_name, objc_class_reference): New.
	(objc_build_constructor): Remove initializer element conversions;
	tweak Objective-C++ impedance matching.
	(add_objc_string): Cast return value to 'char *'.
	(objc_is_id): New function.
	(objc_is_object_ptr): Return the canonical type node.
	(generate_ivar_lists): Convert one of the initializer elements.
	(get_arg_type_list, start_method_def, gen_method_def): Account for
	new representation of variable arguments and '...' in Objective-C
	methods; add Objective-C++ impedance matching code.
	(objc_finish_message_expr): Call objc_is_id() instead of using
	IS_ID and IS_CLASS; Use objc_class_name instead of calling
	get_identifier("Class").
	(really_start_method): Initialize SELF_DECL here, and not in
	start_method_def.
	(objc_continue_method_definition): Remove.
	(is_complex_decl): Use objc_is_id() instead of IS_ID.
	* objc-act.h (OCTI_ELLIPSIS_NODE, objc_ellipsis_node): Remove.
	(OCTI_ID_ID, id_type, objc_id_id): Rename to OCTI_ID_NAME,
	objc_object_type and objc_object_name, respectively.
	(OCTI_CLS_REF, OCTI_CLASS_NAME, objc_class_reference,
	objc_class_name): New.

2004-06-09  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c (is_objc_type_qualifier): Rename to
	'objc_is_type_qualifier' and make extern.
	(adjust_type_for_id_default): Call objc_is_type_qualifier() instead
	of is_objc_type_qualifier().
	(objc_finish_message_expr): Handle CONVERT_EXPRs in receiver.
	(build_protocol_reference): Mark as DECL_THIS_STATIC in ObjC++ to
	squash redeclaration errors.

2004-06-07  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c (objc_finish_file): Instantiate templates before calling
	finish_objc().	

2004-06-02  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c. (generate_static_references): Mark the
	OBJC_STATIC_INSTANCES_n declarations as referenced, so that
	they do not disappear at higher optimization levels.

2004-04-01  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c (synth_module_prologue): Mark UOBJC_SYMBOLS_decl
	as referenced.
	(build_module_descriptor): Mark UOBJC_MODULES_decl as
	referenced.
	(build_selector_table_decl): Construct UOBJC_SELECTOR_TABLE_decl,
	the same way as L_OBJC_SELECTOR_REFRENCE_n.
	(objc_is_object_ptr): Rewrite using POINTER_TYPE_P() and
	IS_CLASS() macros.
	(receiver_is_class_object, finish_message_expr): Use new
	IS_CLASS() macro.
	* objc-act.h (IS_CLASS): New macro.
	(IS_ID, IS_SUPER): Robustify.

2004-03-16  Ziemowit Laski  <zlaski@apple.com>

	* objc-act.c (build_module_descriptor): Use '__objc_gnu_init'
	as static constructor name, so as not to collide with the
	global C/C++ module constructor, and mark it as
	DECL_STATIC_CONSTRUCTOR so that the back-end treats it
	properly; call objc_begin_compount_stmt() and
	objc_end_compound_stmt().
	(objc_begin_compound_stmt, objc_end_compound_stmt,
	objc_build_selector_decl): New functions.
	(objc_enter_block): Call objc_begin_compound_stmt().
	(objc_exit_block): Call objc_end_compound_stmt().
	(create_builtin_decl): Rename to 'create_field_decl' and get
	rid of the first parameter.
	(TAG_EXECCLASS): Change from a global variable to a #define.
	(TAG_RETURN_STRUCT): Delete.
	(TAG_GNUINIT): New, holds '__objc_gnu_init' name.
	(objc_init): Do not initialize TAG_EXECCLASS.
	(objc_finish_file): Move calls to cp_finish_file() or
	c_objc_common_finish_file() to the end.
	(synth_module_prologue): Tidy up; disable debug hooks
	for duration of function; fix GNU runtime messenger
	signatures to correspond to reality; forward-declare
	'__objc_exec_class' for the GNU runtime; call
	build_selector_table_decl().
	(objc_build_constructor): For ObjC++, zero out the constructor
	type.
	(generate_struct_by_value_array, build_objc_symtab_template):
	Call create_field_decl() instead of create_builtin_decl().
	(build_objc_exception_stuff): Call create_field_decl() instead
	of create_builtin_decl(); do not touch debug hooks.
	(build_super_template): Do not touch debug hooks.
	(finish_objc): Do not hand-generate the constructor after
	calling build_module_descriptor(); the C/C++ machinery will
	do it for us.
	* objc-act.h (OCTI_EXECCLASS_DECL, execclass_decl): New.

2004-03-04  Ziemowit Laski  <zlaski@apple.com>

	* Make-lang.in (objc/objc-parse.o): Depend on $(C_COMMON_H)
	instead of objc/objc-act.h.
	* objc-act.c (lookup_interface, start_class, continue_class,
	finish_class, start_method_def, start_protocol, build_method_decl,
	objc_add_method, add_instance_variable, build_ivar_reference,
	is_ivar, is_private, get_super_receiver,
	objc_build_finally_epilogue): Make into static functions.
	(objc_inherit_code, objc_public_flag): New variables.
	(objc_start_class_interface, objc_start_category_interface,
	objc_start_protocol, objc_continue_interface, objc_finish_interface,
	objc_start_class_implementation, objc_start_category_implementation,
	objc_continue_implementation, objc_finish_implementation,
	objc_set_visibility, objc_set_method_type, objc_method_ellipsis,
	objc_build_method_signature, objc_add_method_declaration,
	objc_start_method_definition, objc_add_instance_variable,
	objc_is_reserved_word): New functions.
	(objc_check_decl): Call objc_is_class_name() instead of
	is_class_name().
	(get_static_reference): Rename to objc_get_static_reference().
	(get_object_reference): Rename to objc_get_object_reference().
	(build_objc_string_object): Rename to objc_build_string_object();
	set DECL_THIS_STATIC in Objective-C++ mode.
	(forward_declare_categories, build_class_reference_decl):
	Set DECL_THIS_STATIC in Objective-C++ mode.
	(get_class_reference): Rename to objc_get_class_reference;
	call objc_is_class_name() instead of is_class_name();
	set DECL_THIS_STATIC in Objective-C++ mode.
	(objc_declare_alias): Call objc_is_class_name() instead of
	is_class_name().
	(is_class_name): Rename to objc_is_class_name().
	(get_class_ivars_from_name): Rename to objc_get_class_ivars.
	(objc_build_try_prologue): Call objc_get_current_scope()
	instead of get_current_scope().
	(objc_build_catch_stmt): Call objc_get_class_reference()
	instead of get_class_reference().
	(build_super_template): Name field 'super_class' instead
	of 'class' in Objective-C++ mode.
	(build_keyword_decl): Rename to objc_build_keyword_decl.
	(build_method_decl): Tweak ObjC++ additional argument handling.
	(build_message_expr): Rename to objc_build_message_expr;
	tweak ObjC++ message argument handling; call
	objc_finish_message_expr() instead of finish_message_expr().
	(finish_message_expr): Rename to objc_finish_message_expr.
	(build_protocol_expr): Rename to objc_build_protocol_expr.
	(build_selector_expr): Rename to objc_build_selector_expr.
	(build_encode_expr): Rename to objc_build_encode_expr.
	(is_public): Rename to objc_is_public.
	(start_class): Call objc_is_class_name() instead of
	is_class_name().
	(finish_protocol, objc_expand_function_end): Remove.
	(start_method_def): Tweak ObjC++ additional argument
	handling.
	(continue_method_def): Rename to objc_continue_method_definition();
	do not call poplevel() in ObjC++ mode.
	(get_super_receiver): Call objc_get_current_scope() instead of
	get_current_scope(); reference 'super_class' field (instead of
	'class') in ObjC++; call objc_get_class_reference() instead of
	get_class_reference().
	(finish_method_def): Rename to objc_finish_method_definition and
	add a function decl parameter; move method encoding call from
	objc_expand_function_end.
	(lookup_objc_ivar): Rename to objc_lookup_ivar.
	* objc-act.h (finish_file, start_class, continue_class, finish_class,
	start_method_def, continue_method_def, finish_method_def, 
	start_protocol, finish_protocol, objc_build_throw_stmt,
	objc_build_try_catch_finally_stmt, objc_build_synchronized_prologue,
	objc_build_synchronized_epilogue, objc_build_try_prologue,
	objc_build_try_epilogue, objc_build_catch_stmt, objc_build_catch_epilogue,
	objc_build_finally_prologue, objc_build_finally_epilogue,
	is_ivar, is_private, is_public, add_instance_variable, objc_add_method,
	get_super_receiver, objc_clear_super_receiver, get_class_ivars_from_name,
	get_class_reference, get_static_reference, get_object_reference,
	build_message_expr, finish_message_expr, build_selector_expr,
	build_ivar_reference, build_keyword_decl, build_method_decl,
	build_protocol_expr, build_objc_string_object, objc_declare_alias,
	objc_declare_class, objc_declare_protocols, objc_comptypes,
	objc_check_decl, build_encode_expr): Remove prototypes.
	(imp_count, cat_count): Make GGC-aware.
	(objc_inherit_code, objc_public_flag): New, moved from c-parse.in.
	
2004-01-30  Ziemowit Laski  <zlaski@apple.com>

	* Make-lang.in (objc-lang.o): Depend on $(C_PRETTY_PRINT_H),
	$(DIAGNOSTIC_H), c-objc-common.h and gtype-objc.h.
	(objc-act.o): Do not depend on gtype-objc.h.
	* config-lang.in (lang_requires): Add "C" as dependency.
	* lang_specs.h: Rename 'objc-cpp-output' to 'objective-c-cpp-output'.
	* objc-act.c: Do not include gtype-objc.h; in ObjC++ mode, include
	cp-tree.h, lex.h and objcp-decl.h instead of c-tree.h.
	(comp_method_with_proto): Remove.
	(objc_init): In ObjC++ mode, call cxx_init instead of c_objc_common_init.
	(finish_file): In ObjC++ mode, call cp_finish_file instead of
	c_objc_common_finish_file.
	(objc_check_decl, is_class_name): Use OBJC_TYPE_NAME instead of TYPE_NAME.
	(synth_module_prologue, build_module_descriptor, continue class):
	In ObjC++ mode, generate 'extern "C" { ... }' wrappers around synthesized
	declarations.
	(objc_exit_block): Adjust ObjC++ finish_compound_stmt() impedance
	mismatch.
	(get_arg_type_list): Call groktypename instead of
	groktypename_in_parm_context.
	(finish_message_expr): Use OBJC_TYPE_NAME and OBJC_SET_TYPE_NAME
	macros instead of TYPE_NAME.
	(objc_types_are_equivalent): Strip away indirections before comparing
	underlying types.
	(really_start_method): Call comp_proto_with_proto instead of
	comp_method_with_proto.
	* objc-act.h (OBJC_SET_TYPE_NAME): New macro.
	* objc-lang.c: Update copyright notice; include diagnostic.h,
	c-objc-common.h, c-pretty-print.h and gtype-objc.h; do not include
	toplev.h.
	(LANG_HOOKS_FINISH, LANG_HOOKS_INIT_OPTIONS,
	LANG_HOOKS_INITIALIZE_DIAGNOSTICS, LANG_HOOKS_HANDLE_OPTION,
	LANG_HOOKS_MISSING_ARGUMENT, LANG_HOOKS_POST_OPTIONS,
	LANG_HOOKS_GET_ALIAS_SET, LANG_HOOKS_SAFE_FROM_P, 
	LANG_HOOKS_EXPAND_EXPR, LANG_HOOKS_MARK_ADDRESSABLE, 
	LANG_HOOKS_PARSE_FILE, LANG_HOOKS_TRUTHVALUE_CONVERSION,
	LANG_HOOKS_FINISH_INCOMPLETE_DECL, LANG_HOOKS_UNSAFE_FOR_REEVAL,
	LANG_HOOKS_STATICP, LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, 
	LANG_HOOKS_NO_BODY_BLOCKS, LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL,
	LANG_HOOKS_PRINT_IDENTIFIER, LANG_HOOKS_FUNCTION_ENTER_NESTED,
	LANG_HOOKS_FUNCTION_LEAVE_NESTED, LANG_HOOKS_DUP_LANG_SPECIFIC_DECL,
	LANG_HOOKS_DECL_UNINIT, LANG_HOOKS_RTL_EXPAND_STMT,
	LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE,
	LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN,
	LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS,
	LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P,
	LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING,
	LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS,
	LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN,
	LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION, LANG_HOOKS_TYPE_FOR_MODE,
	LANG_HOOKS_TYPE_FOR_SIZE, LANG_HOOKS_SIGNED_TYPE,
	LANG_HOOKS_UNSIGNED_TYPE, LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE,
	LANG_HOOKS_INCOMPLETE_TYPE_ERROR, LANG_HOOKS_TYPE_PROMOTES_TO,
	LANG_HOOKS_REGISTER_BUILTIN_TYPE, LANG_HOOKS_WRITE_GLOBALS):
	Move to c-objc-common.h.
