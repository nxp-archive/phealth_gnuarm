2004-02-19  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-ssa-loop.c (do_while_loop_p): New function.
	(copy_loop_headers): Do not peel do-while loops.

2004-02-19  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* loop-invariant.c: New file.
	* Makefile.in (loop-invariant.o): New.
	* cfgloop.h (init_set_costs, global_cost_for_size,
	move_loop_invariants): Declare.
	* toplev.c (rest_of_handle_loop2): Call move_loop_invariants.
	(lang_dependent_init): Call init_set_costs.
	* tree-ssa-loop-ivopts.c (avail_regs, res_regs, small_cost, pres_cost,
	spill_cost): Made static.
	(global_cost_for_size): Export.
	(ivopts_global_cost_for_size, init_set_costs): New functions.
	(determine_set_costs): Do not initialize set cost constants.
	Use ivopts_global_cost_for_size.
	(try_candidate, find_optimal_iv_set_1, set_cost): Use
	ivopts_global_cost_for_size.

	* cfgloop.c (fill_sons_in_loop): Fix typo in comment.

2004-02-17  Devang Patel  <dpatel@apple.com>

	* tree-vectorize.c (vect_create_data_ref): Set TREE_ADDRESSABLE bit.
	(vectorize_loops): Reset loop->aux.

2004-02-16  Devang Patel  <dpatel@apple.com>

        * Makefile.in (TREE_FLOW_H): Add tree-dg.h
        (OBJS-common): Add tree-dg.o
        (gtype-desc.o): Depend on tree-dg.h
        (tree-dg.o): New rule.
        (GTFILES): Add tree-data-ref.h, tree-data-ref.h 
        * common.opt (ftree-ddg): Add new option.
        * flags.h (flag_ddg): New extern.
        * gengtype.c (open_base_files): Add tree-dg.h and tree-data-ref.h in 
        the list.
        * opts.c (decode_option): Set flag_ddg to zero.
        (common_handle_option): Handle OPT_ftree_ddg.
        * timevar.def (TV_DEP_GRAPH): New.
        * toplev.c (flag_ddg): New flag.
        (lang_independent_options): Add entry for -ftree-ddg.
        * tree-data-ref.c (compute_all_dependences): Make externally visible.
        * tree-data-ref.h (data_reference, subscript, data_dependence_relation)
        Add GTY markers.
        (compute_all_dependences): Make externally visible.
        * tree-dg.c: New file.
        * tree-dg.h: New file.
        * tree-flow-inline.h (dg_node_for_stmt): New function.
        * tree-flow.h (tree-dg.h): Include.
        (stmt_ann_d): New member, dg_node.
        * tree-optimize.c (init_tree_optimization_passes): Add pass_ddg.
        * tree-pass.h (PROP_scev): Define.
        (tree_opt_pass pass_ddg): Extern decl.
        * tree-scalar-evolution.c (pass_scev_anal): Provide PROP_scev property.
        * varray.c (element[NUM_VARRAY_DATA]): Add new member for dependence
        graph.
        * varray.h (varray_data_enum): New member VARRAY_DATA_DG.
        (varray_data_tag): New member dg.
        (VARRAY_DG_INIT): New #define.
        (VARRAY_DG): New #define.
        (VARRAY_PUSH_DG): New #define.

2004-02-12  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-optimize.c (init_tree_optimization_passes): Move ch after
	the first dominator optimization pass.
	* tree-ssa-loop.c (should_duplicate_loop_header_p,
	copy_loop_headers): Work over ssa.
	(pass_ch): Require and update ssa form.
	(mark_defs_for_rewrite, duplicate_blocks): New.

2004-02-10  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-ssa-loop-ivopts.c (for_each_index, prepare_decl_rtl,
	peel_address): Handle RESULT_DECL.

2004-02-10  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* loop-doloop.c (doloop_optimize): Use get_simple_loop_desc.
	* loop-init.c (loop_optimizer_finalize): Free the simple loop
	descriptions.
	* loop-unroll.c (unroll_and_peel_loops): Do not free the simple loop
	descriptions.
	(decide_peel_once_rolling, decide_peel_completely,
	decide_unroll_stupid): Test assumptions.
	decide_unroll_constant_iterations, decide_unroll_runtime_iterations,
	decide_peel_simple, peel_loop_simple, unroll_loop_stupid): Update
	number of iterations info.
	(unroll_loop_constant_iterations, unroll_loop_runtime_iterations,
	(loop_exit_at_end_p): Use get_simple_loop_desc.

2004-02-08  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* cfgloop.h (struct niter_desc): Add first_special, extend,
	extend_mode, delta and mult fields.
	(get_iv_value): Declare.
	* expr.c (force_operand): Handle subregs of expressions.
	* loop-doloop.c (doloop_valid_p): Test desc->infinite properly.
	* loop-iv.c (dump_iv_info): Dump new fields.
	(lowpart_byte, lowpart_subreg_p, lowpart_subreg,
	iv_constant, iv_subreg, iv_extend, iv_neg, iv_add, iv_mult,
	get_biv_step_1, get_biv_step, shorten_into_mode,
	canonicalize_iv_subregs): New functions.
	(simple_reg_p, simple_set_p, iv_get_reaching_def, iv_analyse_biv,
	iv_analyse_op, iv_analyse, iv_number_of_iterations): Handle subregs.
	* loop-unswitch.c (may_unswitch_on): Handle subregs.

2004-02-04  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* Makefile.in (tree-ssa-loop-ivopts.o): Add RECOG_H and insn-config.h
	dependency.
	* loop-iv.c (iv_analysis_loop_init): Ensure we only care about
	increments that are done just once each iteration.
	* timevar.def (TV_TREE_LOOP_IVOPTS, TV_TREE_CH): New.
	* tree-ssa-loop-ivopts.c: Include insn-config.h and recog.h.
	(INFTY): Increase.
	(struct iv_use): Add choices, n_choices, min_cost_cand and selected
	fields.  Rename field best_cost to min_cost.
	(CONSIDER_ALL_CANDIDATES_BOUND): Decrease.
	(dump_use): Dump new fields.
	(dump_uses, cst_and_fits_in_hwi, int_cst_value, build_int_cst,
	divide, strip_offset, add_cost, multiply_by_cost, get_address_cost,
	force_var_cost, peel_address, ptr_difference_const,
	split_address_cost, ptr_difference_cost, difference_cost,
	get_computation_cost): New functions.
	(find_induction_variables): Formating changes.
	(record_use): Initialize new fields.
	(add_old_ivs_candidates): Do not add invariants.
	(set_use_iv_cost): Set min_cost.
	(get_use_iv_cost): Fix.
	(get_computation): Use less memory.
	(determine_use_iv_cost_generic, determine_use_iv_cost_address,
	determine_use_iv_cost_condition, determine_iv_cost): Use
	new cost estimation functions.
	(compute_iv_set_cost): Removed.
	(struct undo_record): New.
	(use_with_min_choices, min_remaining_cost, undo_changes,
	execute_removal, add_forbidden_ivs, try_candidate, set_cost,
	get_initial_solution): New functions.
	(find_optimal_iv_set_1, find_optimal_iv_set): Made more effective.
	(create_new_ivs, rewrite_use_nonlinear_expr, rewrite_use_address):
	Unshare created expressions.
	(free_loop_data): Free new structures.
	(tree_ssa_iv_optimize_loop): Remove garbage collection.
	(tree_ssa_iv_optimize): Use TV_TREE_LOOP_IVOPTS timevar.
	* tree-ssa-loop.c (pass_ch): Use TV_TREE_CH timevar.

2004-02-02  Steven Bosscher  <stevenb@suse.de>

	* common.opt: Re-order some options in ASCII collating order.

2004-01-30  Devang Patel  <dpatel@apple.com>

	* cfgloopmanip.c (loopify): Always redirect switch_bb's BRANCH_EDGE,
	however redirect FALLTHRU_EDGE only if asked.
	* tree-ssa-loop-manip.c (tree_ssa_loop_version): Update FALLTHRU_EDGE
	pending stmts.

2004-01-29  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-ssa-loop-ivopts.c (find_optimal_iv_set_1, compute_iv_set_cost):
	Fix memory leak, speed up.
	(tree_ssa_iv_optimize_finalize): Move reseting of DECL_RTL...
	(free_loop_data): ... here.

2004-01-29  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* basic-block.h (FOR_BB_INSNS, FOR_BB_INSNS_REVERSE): New macros.
	* cfgloop.c (num_loop_branches): New function.
	* cfgloop.h (struct loop_desc): Add field strange.
	(struct loop): Remove fields simple, desc, has_desc.
	(num_loop_branches, get_simple_loop_desc, free_simple_loop_desc):
	Declare.
	(simple_loop_desc): New inline function.
	* cfgloopanal.c (count_loop_iterations): Set field strange.
	(simple_loop_exit_p): Initialize postincr properly.
	* loop-iv.c (assign_luids, mark_sets, simplify_using_initial_values):
	Use FOR_BB_INSNS/FOR_BB_INSNS_REVERSE.
	(iv_number_of_iterations): Restrict the number of iterations to the
	actual mode.
	(find_simple_exit): Check results with the old simple loop analyser.
	(get_simple_loop_desc, free_simple_loop_desc): New functions.
	* loop-unroll.c (loop_exit_at_end_p): New function.
	(unroll_and_peel_loops, peel_loops_completely,
	decide_unrolling_and_peeling, decide_peel_once_rolling,
	decide_peel_completely, peel_loop_completely,
	decide_unroll_constant_iterations, unroll_loop_constant_iterations,
	decide_unroll_runtime_iterations, unroll_loop_runtime_iterations,
	decide_peel_simple, decide_unroll_stupid): Use new iv analysis.
	* predict.c (predict_loops): Use new iv analysis.

	* tree-ssa-loop.c (copy_loop_headers): Predict entry edge from
	copied loop header to be taken.

	* tree-cfg.c (tree_find_edge_insert_loc,
	bsi_insert_on_edge_immediate): Return the newly created block.
	(bsi_commit_edge_inserts_1): Add parameter to
	tree_find_edge_insert_loc call.
	* tree-flow.h (bsi_insert_on_edge_immediate): Declaration changed.
	* tree-ssa-loop-ivopts.c (create_new_iv): Update loop for newly
	created block.

	* cfg.c (unlink_block): Clean prev_bb and next_bb fields.

2004-01-29  Devang Patel  <dpatel@apple.com>

	* cfglayout.h (loopify): Add new bool parameter.
	* cfgloopmanip.c (loopify): Support new bool argument.
	* loop-unswitch.c (unswitch_loop): Supply additional argument 'true'
	to loopify.
	* tree-cfg.c (tree_block_label): Make externally visible.
	* tree-flow.h (tree_block_label, test_loop_versioning, tree_ssa_loop_version): New
	extern decls.
	* tree-ssa-loop-manip.c (lv_adjust_loop_entry_edge, lv_udate_pending_stmts,
	lv_adjust_loop_header_phi, tree_ssa_loop_version): New functions.
	* tree-ssa-loop.c (tree_ssa_loop_opt): Test loop versioning.
	
2004-01-29  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-scalar-evolution.c (scev_analyze_inner_loop_phi): Add ;.

2004-01-29  Sebastian Pop  <sebastian.pop@ensmp.fr>

	* Makefile.in (tree-ssa-dom.o): Depends on cfgloop.h.
	* tree-flow-inline.h (loop_of_stmt): New function.                 
	* tree-ssa-dom.c: Include cfgloop.h.
	(tree_ssa_dominator_optimize): Detect and finalize the natural
	loops structure.
	(simplify_rhs_and_lookup_avail_expr): Verify that the folded     
	operations belong to the same loop.

	* cfgloop.h (loop): Rewrite comments for the nb_iterations field.
	* tree-data-ref.c (analyze_all_data_dependences): Increase the size
	of the dependence graph when computing all the dependences.              
	* tree-optimize.c (init_tree_optimization_passes): Move the
	pass_scev after the pass_pre.
	* tree-scalar-evolution.h: Update comments.
	* tree-scalar-evolution.c (symbolically_analyze,
	scev_follow_ssa_edge_same_loop, scev_follow_ssa_edge_inner_loop,
	loop_is_strictly_included_in, scev_analyze_inner_loop_phi,
	draw_tree_cfg): New functions.
	(compute_value_on_exit_of_loop): Removed.
	(analyze_evolution): Mark phi nodes instead of looking into
	the already_visited array.
	(analyze_evolution_in_loop): Use scev_follow_ssa_edge_same_loop,
	scev_follow_ssa_edge_inner_loop.
	(scev_analyze_modify_expr): Refine the wrap-around case.
	(scev_follow_ssa_edge): Handle edges to the current and inner loops
	separately calling scev_follow_ssa_edge_same_loop or
	scev_follow_ssa_edge_inner_loop.
	(merge_branches_of_condition_phi_node): Restructure.
	(set_nb_iterations_in_loop): Add one to the number of iterations.
	When the loop copy headers is on, we always exit the loop after
	having executed once its body.
	(record_dependences_for_opnd): Do not record dependences on variables
	that are not in the current loop.
	(pass_scev_depend): Rename the pass from alldd to ddall.
	* tree-ssa-loop.c (gate_ch): New function.
	(pass_ch): Use gate_ch.
	* doc/invoke.texi (-ftree-ch, -fdump-tree-ch): Document flags.
	(fdump-tree-scev, fdump-tree-ddall): Update names, and comments.

	* common.opt (ftree-ch): Document.
	* flags.h (flag_tree_ch): Declare.
	* opts.c (flag_tree_ch): Set it on by default.
	(flag_scalar_evolutions, flag_all_data_deps): Turn off by default.
	(OPT_ftree_ch): Handle this case.
	* toplev.c (lang_independent_options): Register flag_tree_ch.

2004-01-28  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* cfghooks.c (split_block): Update probabilities.

	* cfgloopmanip.c (loopify): Always redirect branch edge to the new
	loop.
	* loop-iv.c (canon_condition, simplify_using_condition): Export.
	(check_simple_exit): Do not allow cc mode registers.
	* loop-unroll.c (unroll_loop_runtime_iterations): Use
	compare_and_jump_seq.
	* loop-unswitch.c (may_unswitch_on_p): Renamed to may_unswitch_on,
	returns the condition, use iv_analyse.
	(compare_and_jump_seq): New function.
	(unswitch_loops): Call iv_analysis_done.
	(unswitch_single_loop, unswitch_loop): Handle nontrivial invariants.
	* rtl.h (compare_and_jump_seq, canon_condition,
	simplify_using_condition): Declare.

2004-01-28  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* loop-iv.c: New.
	* loop-doloop.c: New.
	* Makefile.in (loop-doloop.o, loop-iv.o): Add.
	* alias.c (init_alias_analysis): Test flag_unroll_loops instead of
	flag_old_unroll_loops.
	* cfgloop.h (struct rtx_iv, struct niter_desc): New.
	(get_loop_level, iv_analysis_loop_init, iv_get_reaching_def,
	iv_analyse, find_simple_exit, iv_number_of_iterations,
	iv_analysis_done, doloop_optimize_loops): Declare.
	* cfgloopanal.c (get_loop_level): New.
	* common.opt (floop-optimize2): New.
	(fold-unroll-loops, fold-unroll-all-loops): Remove.
	* doloop.c (doloop_condition_get): Export.
	* flags.h (flag_old_unroll_loops, flag_old_unroll_all_loops):
	Declaration removed.
	* loop-unswitch.c (reversed_condition): Export.
	* loop.c (loop_invariant_p): Use flag_unroll_loops instead
	of flag_old_unroll_loops.
	* opts.c (common_handle_option): Handle -floop-optimize2,
	do not handle -fold-unroll-loops and -fold-unroll-all-loops.
	* params.def (PARAM_MAX_DOLOOP_INSNS): New.
	* rtl.h (get_mode_bounds, doloop_condition_get,
	reversed_condition): Declare.
	* stor-layout.c (get_mode_bounds): New function.
	* toplev.c (flag_old_unroll_loops, flag_old_unroll_all_loops):
	Remove.
	(flag_loop_optimize2): New.
	(rest_of_handle_loop_optimize): Use flag_unroll_loops instead
	of flag_old_unroll_loops.
	(rest_of_handle_loop2): Call doloop_optimize_loops.
	(rest_of_compilation): Use flag_loop_optimize2.
	(process_options): Remove flag_old_unroll_loops handling, add
	flag_loop_optimize2 handling.
	* toplev.h (flag_loop_optimize2): Declare.
	* unroll.c (unroll_loop): Use flag_unroll_all_loops instead of
	flag_old_unroll_all_loops.

2004-01-26  Dorit Naishlos <dorit@il.ibm.com>

	* Makefile.in: (tree-vectorizer.o): Remove dependency on real.h.
	* tree-vectorizer.c: (real.h): Remove included file.
        (vect_get_vec_def_for_operand): No need to explicitly use build_int_2
        and build_real.

        (vect_transform_loop_bound): Create loop IV update at loop exit
        block, following changes in loop control.

        (vectorize_loops): Remove debug printout.

        * config/rs6000/altivec.md: (*movv4si_internal): More complex 
        condition.
        (*movv8hi_internal1): Likewise.
        (*movv16qi_internal1): Likewise.
        (*movv4sf_internal1): Likewise.

2004-01-25  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-ssa-loop-ivopts.c (determine_set_costs): Do not use
	GENERAL_REGNO_P.

2004-01-25  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-ssa-loop-ivopts.c: New file.
	* Makefile.in (tree-ssa-loop-ivopts.o): Add.
	* expr.c (expand_expr_1): Handle expand_expr_1.
	* fold-const.c (invert_tree_comparison, invert_tree_comparison):
	Export.
	* tree-cfg.c (stmt_bsi): New function.
	* tree-flow.h (stmt_bsi, tree_ssa_dce_no_cfg_changes,
	tree_ssa_iv_optimize): Declare.
	* tree-simple.c (get_base_symbol): Handle INDIRECT_REF.
	* tree-ssa-dce.c (tree_ssa_dce_no_cfg_changes): Split from ...
	(tree_ssa_dce): ... here.
	* tree-ssa-loop.c (tree_ssa_loop_opt): Call tree_ssa_iv_optimize.
	* tree-ssanames.c (make_ssa_name): Allow creating ssa name without
	statement.
	* tree.h (invert_tree_comparison, swap_tree_comparison): Declare.

2004-01-25  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* doloop.c (doloop_optimize): Test for loop->top instead of
	loop->scan_start.

2004-01-22  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-alias-common.c (HAVE_BANSHEE): Do not define it.
	(create_alias_vars): Do not test HAVE_BANSHEE value.

2004-01-22  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-ssa-loop-manip.c: New file.
	* Makefile.in (tree-ssa-loop-manip.o): Add.
	* basic-block.h (struct reorder_block_def): New field copy_number.
	* cfghooks.c (split_block, make_forwarder_block): Update irreducible
	loop information.
	* cfgloopmanip.c (duplicate_loop_to_header_edge): Set copy_number.
	* tree-cfg.c (tree_duplicate_bb): Duplicate also virtual operands.
	* tree-flow.h (enum tree_ann_type): Add MISC_ANN.
	(struct misc_ann_d): New.
	(union tree_ann_d): Add misc field.
	(test_unrolling_and_peeling, tree_duplicate_loop_to_header_edge):
	Declare.
	* tree-ssa-loop.c (tree_ssa_loop_opt): Call
	test_unrolling_and_peeling.
	* tree-ssa-operands.c (copy_virtual_operands): New.
	* tree-ssa-operands.h (copy_virtual_operands): Declare.

	* dominance.c: Fix comment.

	* cfgloopanal.c (mark_irreducible_loops): Rewriten.
	(struct edge, struct vertex, struct graph): New.
	(dump_graph, new_graph, add_edge, dfs, check_irred, for_each_edge,
	free_graph): New functions.

2004-01-21  Sebastian Pop  <s.pop@laposte.net>

	* tree-scalar-evolution.c (pass_scev): Don't use a name.
	(pass_scev_anal): Named this pass "scev".

2004-01-21  Dorit Naishlos <dorit@il.ibm.com>

	* Makefile.in: (tree-vectorizer.o): Add dependency on real.h.
        * tree-vectorizer.c: (vect_is_simple_use): Allow constants.
        (real.h): Included to support constants vectorization.
        (vect_get_vec_def_for_operand): New function.
        (vect_transform_binop): Use above new function.
        (vect_transform_store): Likewise.
        (vect_transform_load): Likewise.

        (vect_get_new_vect_var): Allow more flexibility in naming scheme.
        (vect_create_index_for_array_ref): Call vect_get_new_vect_var with a
        name prefix instead of a variable.
        (vect_create_data_ref): Likewise.
        (vect_create_destination_var): Likewise.

        (vect_analyze_data_refs): Temporarily restrict vectorizable data refs
	to ARRYA_RES which base is a VAR_DECL.
        (vect_create_data_ref): Support only VAR_DECL array base. Mark all 
        vops for renaming. 

        (vect_get_array_first_index): New function.
        (vect_create_index_for_array_ref): Consider array_first_index.
        (vect_analyze_data_ref_access): Likewise.

        (vect_get_loop_niters): Use number_of_iterations_in_loop.
        (vect_analyze_loop_form): Don't attempt to vectorize if 
        number_of_iterations == 0.

        (vect_analyze_operations): Fix vectype analysis.

        (vect_create_index_for_array_ref): Fix code insertion in loop prolog.
        (vect_transform_loop_bound): Likewise.

2004-01-21  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>,
	    Devang Patel <dpatel@apple.com>

	* basic-block.h (struct reorder_block_def): Moved from cfglayout.h.
	(alloc_rbi_pool, initialize_bb_rbi, free_rbi_pool): Declare.
	* bb-reorder.c (copy_bb, copy_bb_p): Use duplicate_block hooks.
	* loop-unswitch.c (unswitch_loop): Ditto.
	* tracer.c (tail_duplicate): Ditto.
	* tree-ssa-loop.c (copy_loop_headers): Ditto.
	* cfg.c (rbi_pool): New.
	(alloc_rbi_pool, free_rbi_pool, initialize_bb_rbi): New functions.
	* cfghooks.c (can_duplicate_block_p, duplicate_block): New functions.
	* cfghooks.h (struct cfg_hooks): Add can_duplicate_block_p and
	duplicate_block hooks.
	(can_duplicate_block_p, duplicate_block): Declare.
	* cfglayout.c (cfg_layout_pool): Removed.
	(cfg_layout_initialize_rbi): Removed.
	(fixup_reorder_chain): Use initialize_bb_rbi.
	(cfg_layout_can_duplicate_bb_p, cfg_layout_duplicate_bb):
	Ir-independent parts moved to cfghooks.c.
	(cfg_layout_initialize): Use alloc_rbi_pool and initialize_bb_rbi.
	(cfg_layout_finalize): Use free_rbi_pool.
	(can_copy_bbs_p): Use can_duplicate_block_p.
	(copy_bbs): Use duplicate_block.
	* cfglayout.h (struct reorder_block_def): Moved to basic-block.h
	(cfg_layout_can_duplicate_bb_p, cfg_layout_duplicate_bb,
	cfg_layout_initialize_rbi): Declaration removed.
	* cfgrtl.c (cfg_layout_create_basic_block): Use initialize_bb_rbi.
	(cfg_layout_rtl_cfg_hooks): Add cfg_layout_can_duplicate_bb_p and
	cfg_layout_duplicate_bb.
	* tree-cfg.c (build_tree_cfg): Call alloc_rbi_pool.
	(create_bb): Call initialize_bb_rbi.
	(delete_tree_cfg): Call free_rbi_pool.
	(tree_duplicate_bb): Ir independent parts moved to cfghooks.c.
	(tree_cfg_hooks): Add tree_can_duplicate_bb_p and tree_duplicate_bb.
	* tree-flow.h (tree_duplicate_bb): Declaration removed.

2004-01-21  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* tree-alias-common.c (create_alias_vars): Don't use
	andersen_alias_ops when we don't HAVE_BANSHEE.

	* tree-ssa-loop.c (pass_ch): Remove TODO_verify_ssa.

2004-01-20  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	Merge from tree-ssa branch (lno-merge-20040120).

2004-01-18  Dorit Naishlos <dorit@il.ibm.com>

        * tree-scalar-evolution.c: (get_loop_exit_condition): Exposed to
        external usage.
        * tree-scalar-evolution.h: (get_loop_exit_condition): Exposed to
        external usage.
        * tree-vectorizer.c: (vect_is_simple_iv_evolution): Additional argument
        to control how strict this function would be.
        (vect_create_index_for_array_ref): Invoke vect_is_simple_iv_evolution
        with "strict" set to true.
        (vect_transform_loop_bound): More general loop bound transformation
        scheme, independent of the loop exit condition form.
        (vect_analyze_scalar_cycles): Invoke vect_is_simple_iv_evolution with
        "strict" set to false.
        (vect_get_loop_niters): Use monev utilities/precomputed info -
        loop->nb_iterations and get_loop_exit_condition.

2004-01-17  Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vectorizer.c: (vect_get_name_for_new_var): Removed.
        (vect_get_new_vect_var): New function.  Replaces above function.
        (vect_create_index_for_array_ref): Call vect_get_new_vect_var
        instead of vect_get_name_for_new_var.
        (vect_create_data_ref): Likewise.
        (vect_create_destination_var): Likewise.
        * tree-vectorizer.h: (vect_var_kind): New enum type.

2004-01-15  Sebastian Pop  <s.pop@laposte.net>

	* tree-chrec.c (remove_initial_condition,
	add_expr_to_loop_evolution_1, add_expr_to_loop_evolution_2): New functions.
	(add_expr_to_loop_evolution): Use these functions.                        
	(build_polynomial_evolution_in_loop,              
	build_exponential_evolution_in_loop): Move from here...
	* tree-chrec.h (build_polynomial_evolution_in_loop,
	build_exponential_evolution_in_loop): Remove declarations.
	* tree-scalar-evolution.c (build_polynomial_evolution_in_loop,
	build_exponential_evolution_in_loop): ... to here.  Declare
	these functions static.
	(select_outer_and_current_evolutions): New function.
	(matched_an_increment, scev_analyze_modify_expr,    
	compute_overall_effect_of_inner_loop,           
	analyze_scalar_evolution): Use this function.
	(add_to_evolution, multiply_evolution): Construct canonical
	chains of recurrences.

2004-01-14  Dorit Naishlos <dorit@il.ibm.com>
            Sebastian Pop  <s.pop@laposte.net>

        * tree-vectorizer.c: (vect_is_simple_iv_evolution): Correctly use
        APIs of the new monev analyzer. Additional argument (loop_num).
        (vect_transform_loop_bound): Additional argument to
        vect_is_simple_iv_evolution.
        (vect_analyze_scalar_cycles): Likewise.
        (vect_analyze_data_ref_access): Likewise.
        (vect_get_loop_niters): Likewise.

2004-01-14  Dorit Naishlos <dorit@il.ibm.com>

        * tree-optimize.c: (optimize_function_tree): Cleanup.

        * tree-vectorizer.h: (DBG_VECT, DBG_VECT2): Removed.
        (vec_array_base_name_differ_p): Removed.
        (vec_analyze_array): Removed.
        (struct _stmt_vec_info): New field: loop.
        (STMT_VINFO_LOOP): New access function to above new field.
        (new_stmt_vec_info): Additional argument.

        * tree-vectorizer.c: (vect_is_simple_use): New function.
        (vect_is_supportable_binop): Added call to vect_is_simple_use().
        (vect_is_supportable_store): Added call to vect_is_simple_use().
        (vect_is_supportable_load): Added call to vect_is_simple_use().

        (vect_create_index_for_array_ref): Correct handling of accesses with
        an offset (e.g, a[i+OFF]).
        (vect_create_data_ref): Pass STMT as an argument to
        vect_create_index_for_array_ref, instead of an operand.
        (vect_transform_store): Handle accesses with an offset.
        (vect_transform_load): Handle accesses with an offset.

        (vect_create_data_ref): Set the mem_tag of the pointer used for the
        vector data-access to reflect correct may-alias info.

        (get_address_calculation_operands): Removed.
        (exist_non_indexing_operands_for_use_p): New function, in place of
        get_address_calculation_operands() to correctly handle induction (for
        now this means to detect and not attempt to vectorize computations
        like a[i]=i).
        (vect_analyze_scalar_cycles): call above new function instead of
        get_address_calculation_operands().
        (vect_mark_stmts_to_be_vectorized): Likewise.

        (get_vectype_for_scalar_type): Added test of VECTOR_MODE_SUPPORTED_P.

        (new_stmt_vec_info): Takes also LOOP as an argument and initializes
        new field STMT_VINFO_LOOP.
        (new_loop_vec_info): Pass additional argument to new_stmt_vec_info.

        (vect_stmt_relevant_p): Use flow_bb_inside_loop_p instead of comparing
        loop->depth's.
        (vect_analyze_operations): Likewise.

        (vect_align_data_ref): Removed stderr debug printouts, some of which
        replaced with code dumping dependending on TDF_DETAILS to dump_file.
        (vect_create_index_for_array_ref): Likewise.
        (vect_create_destination_var): Likewise.
        (vect_create_data_ref): Likewise.
        (vect_transform_binop): Likewise.
        (vect_transform_store): Likewise.
        (vect_transform_load): Likewise.
        (vect_transform_stmt): Likewise.
        (vect_transform_loop_bound): Likewise.
        (vect_transform_loop): Likewise.
        (vect_analyze_operations): Likewise.
        (vect_is_simple_iv_evolution): Likewise.
        (vect_analyze_scalar_cycles): Likewise.
        (vect_analyze_data_ref_dependences): Likewise.
        (vect_analyze_data_refs): Likewise.
        (vect_mark_relevant): Likewise.
        (vect_stmt_relevant_p): Likewise.
        (vect_mark_stmts_to_be_vectorized): Likewise.
        (vect_get_loop_niters): Likewise.
        (vectorize_loops): Likewise.

2004-01-13  Sebastian Pop  <s.pop@laposte.net>
            Daniel Berlin  <dberlin@dberlin.org>

	* tree-fold-const.h (tree_fold_int_plus, tree_fold_int_minus,
	tree_fold_int_multiply): Remove NON_LVALUE_EXPR from the
	answers of the folder.  Fixes bootstraps for powerpc.

2004-01-12  Sebastian Pop  <s.pop@laposte.net>

	* tree-chrec.c (chrec_fold_plus, chrec_fold_multiply): Verify
	that there is no chrecs nested in the operands before calling
	the folder.
	(evolution_function_in_loop_num): When there is no evolution
	in the loop, return the initial condition.
	(evolution_part_in_loop_num): When there is no evolution
	in the loop, return NULL_TREE.
	(chrec_eval_next_init_cond): Adapt the function for the
	multivariate case.
	(tree_contains_chrecs): Avoid the use of double negation.
	* tree-chrec.h (chrec_eval_next_init_cond): Add a parameter
	for the dimension in which to evaluate the variation.
	* tree-scalar-evolution.c (is_ssa_name_a_version_of_variable,
	expression_contains_variable_p, remove_variable_from_expression,
	analyze_non_gimple_initial_condition, matched_an_increment,
	matched_an_exponentiation, matched_a_wrap_around,
	matched_an_arithmetic_wrap_around,
	evolution_of_phi_already_analyzed_p): New static functions.
	(scev_analyze_modify_expr): Use these functions.  Refine the
	cases detected as wrap-around variables.
	(analyze_initial_condition): Don't erase the evolution in the
	previous dimensions when computing the initial condition for a
	new loop.
	(analyze_evolution_in_loop): Call the scev_analyze_modify_expr
	on the tree node, not on its evolution.
	(scev_follow_ssa_edge): In the case of an inner loop-phi-node,
	when the outer edge is a phi-node follow up the edge.
	(scev_follow_ssa_edge): Avoid the analysis of the inner loop
	when it has already been analyzed.
	(merge_evolutions): Refine the operation for zero, one, and
	more branches of evolutions.

2004-01-09  Sebastian Pop  <s.pop@laposte.net>

	* tree-scalar-evolution.c: New version of the analyzer.
	* tree-scalar-evolution.h: Same.                       
	* tree-chrec.c: Same.           
	* tree-data-ref.c: Same.
	* tree-chrec.h: Same.
	* tree-data-ref.h: Same.
	* tree-fold-const.h: Same.

	* tree-vectorizer.c (vect_transform_loop_bound,
	vect_analyze_scalar_cycles, vect_analyze_data_ref_access,
	vect_analyze_data_refs, vect_get_loop_niters): Use the new
	interface of the analyzer.
	* tree-optimize.c (optimize_function_tree): Same.

2004-01-08  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* cfgloop.h (loop_is_included_in): Declaration removed.
	* tree-scalar-evolution.c (stmt_is_in_loop, stmt_is_not_in_loop,
	loop_is_included_in): Use existing functions to implement
	them.

2004-01-06  Sebastian Pop  <s.pop@laposte.net>

	* cfgloop.h (loop_is_included_in, outer_loop, inner_loop,
	next_loop, loop_num, loop_depth, loop_header,
	loop_nb_iterations, loop_num_exits, loop_exit_edges,
	loop_exit_edge): New inline functions.
	(loop_is_included_in): Declare here.
	* tree-flow-inline.h (loop_of_stmt): New inline function.
	* tree-scalar-evolution.c (loop_is_included_in): Remove declaration.
	(stmt_is_in_loop, stmt_is_not_in_loop): New functions.
	(loop_is_included_in, loop_is_included_in_rec): Moved up in the same file.

2004-01-06  Dorit Naishlos  <dorit@il.ibm.com>

	* tree-vectorizer.c: Fix typos.

2004-01-05  Andreas Jaeger  <aj@suse.de>

	* tree-vectorizer.h: Follow coding standards, remove extra
	whitespace.
	* tree-vectorizer.c: Likewise.

	* tree-vectorizer.c (vectorize_loops): Output statistics to
	dump_file, fix printf string.
	(vect_transform_loop): Replace DBG_VECT code with code dumping
	dependend on TDF_DETAILS to dump_file.
	(vect_is_supportable_binop): Likewise.
	(vect_analyze_operations): Likewise.
	(get_address_calculation_operands): Likewise.
	(vect_analyze_scalar_cycles): Likewise.
	(vect_analyze_data_ref_dependence): Likewise.
	(vect_analyze_data_ref_access): Likewise.
	(vect_analyze_data_ref_accesses): Likewise.
	(vect_analyze_data_refs): Likewise.
	(vect_mark_relevant): Likewise.
	(vect_get_loop_niters): Likewise.
	(vect_mark_stmts_to_be_vectorized): Likewise.
	(vect_analyze_loop_form): Likewise.
	(vectorize_loops): Likewise.

	* tree-vectorizer.h (DBG_VEC): Remove.

2004-01-04  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* doloop.c (doloop_optimize): Update number of iterations for the
	loops entered at bottom.

2004-01-04  Andreas Jaeger  <aj@suse.de>

	* common.opt: Re-order some options in ASCII collating orders.

2004-01-03  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* cfghooks.h (struct cfg_hooks): New fields split_block_after_labels
	and move_block_after, type of cfgh_make_forwarder_block field changed.
	(HEADER_BLOCK, LATCH_EDGE): Moved to cfgloop.c.
	(split_block_after_labels, move_block_after): New macros.
	(make_forwarder_block): Changed.
	* cfgloop.c (HEADER_BLOCK, LATCH_EDGE): Moved from cfghooks.h.
	(update_latch_info, mfb_keep_just, mfb_keep_nonlatch,
	fill_sons_in_loop): New functions.
	(canonicalize_loop_headers): Changed due to changes in
	make_forwarder_block.
	* cfgloopmanip.c (split_loop_bb): Don't update dominators.
	(create_preheader): Use make_forwarder_block.
	(mfb_keep_just, mfb_update_loops): New.
	* cfgrtl.c (rtl_split_block_after_labels): New.
	(redirect_edge_with_latch_update): Removed.
	(rtl_make_forwarder_block): New sematics.
	(rtl_split_block): Update dominators.
	(rtl_cfg_hooks, cfg_layout_rtl_cfg_hooks):
	Add rtl_split_block_after_labels.
	* tree-cfg.c (tree_make_forwarder_block): Changed semantics.
	(create_blocks_annotations): Removed.
	(build_tree_cfg): Don't call create_blocks_annotations.
	(create_bb): Create annotations for a new block.
	(tree_split_edge): Don't call create_block_annotation.
	Update irreducible loop information.
	(tree_loop_optimizer_finalize): Add loop structure check.
	(tree_redirect_edge_and_branch_1): Return the original edge if
	no redirecting is neccessary.
	(tree_split_block): Make the semantics same as for rtl_split_block.
	(tree_split_block_after_labels, tree_move_block_after): New.
	(tree_cfg_hooks): Add tree_split_block_after_labels and
	tree_move_block_after.

	* cfgloopanal.c (mark_irreducible_loops): Fix.
	* loop-unswitch.c (unswitch_loop): Fix.

	* Makefile.in (tree-ssa-loop.o): Add cfgloop.h and tree-inline.h
	dependency.
	* jump.c (next_nonnote_insn_in_loop, duplicate_loop_exit_test,
	copy_loop_headers): Removed.
	* rtl.h (copy_loop_headers): Declaration removed.
	* toplev.c (rest_of_compilation): Do not call loop header copying.
	* tree-dump.c (dump_files): Add .ch dump.
	* tree-flow.h (tree_duplicate_bb, copy_loop_headers): Declare.
	* tree-optimize.c (optimize_function_tree): Add loop header copying
	pass.
	* tree-ssa-loop.c: Include cfgloop.h and tree-inline.h.
	(dump_file, dump_flags): Renamed to loop_dump_file and
	loop_dump_flags.
	(call_expr_p, should_duplicate_loop_header_p, copy_loop_headers):
	New.
	* tree.h (enum tree_dump_index): Add ch dump.
	* doc/invoke.texi (-fdump-tree-copy-headers): Document.
	* testsuite/gcc.dg/tree-ssa/20030711-1.c: Update test outcome.
	* testsuite/gcc.dg/tree-ssa/20030714-2.c: Ditto.
	* testsuite/gcc.dg/tree-ssa/copy-headers.c: New test.
	* tree-cfg.c (tree_duplicate_bb): New function.

	* tree-ssa-loop-im.c: New file.
	* Makefile.in (tree-ssa-loop-im.o): Add.
	* params.def (PARAM_LIM_EXPENSIVE): New parameter.
	* tree-dump.c (dump_files): Move .loop dump.
	* cfgloop.h (superloop_at_depth, get_loop_body_in_dom_order): Declare.
	(loop_dump_file, loop_dump_flags): Declare variables.
	* cfgloop.c (superloop_at_depth, get_loop_body_in_dom_order): New
	functions.
	* tree-flow.h (struct stmt_ann_d): Add aux field.
	(bsi_commit_edge_inserts): Declaration changed.
	(tree_ssa_lim): Declare.
	* tree-mudflap.c (mf_xform_derefs_1): Use in_array_bounds_p.
	* tree-optimize.c (optimize_function_tree): Move loop optimization
	pass.
	* tree-sra.c (scalarize_structures): Modified due to
	bsi_commit_edge_inserts change.
	* tree-ssa-loop.c (tree_ssa_loop_opt): Call tree_ssa_lim.
	* tree-ssa.c (rewrite_trees, rewrite_vars_out_of_ssa): Modified due to
	bsi_commit_edge_inserts change.
	* tree.c (in_array_bounds_p): New function.
	* tree.h (in_array_bounds_p): Declare.
	(enum tree_dump_index): Move loop dump.
	* tree-cfg.c (bsi_commit_edge_inserts): Don't take update_annotations
	argument.

	* tree-ssa.c (rewrite_into_ssa, rewrite_out_of_ssa): Ensure that the
	closed files are not used.

	* tree-tailcall.c (find_tail_calls, eliminate_tail_call): Update
	phi nodes for vdefs of the eliminated call.

2004-01-03  Sebastian Pop  <s.pop@laposte.net>

	* tree-optimize.c (optimize_function_tree): Move the closing brace of
	DCE2 to the right place.

2004-01-03  Sebastian Pop  <s.pop@laposte.net>

	* tree-vectorizer.c (vect_analyze_operations): Test vectorization_factor
	before computing modulo.

2004-01-02  Sebastian Pop  <s.pop@laposte.net>

	* tree-vectorizer.c (vect_is_supportable_binop): Returns false instead
	of NULL.

2004-01-02  Richard Henderson  <rth@redhat.com>

	* config/i386/i386.h (UNITS_PER_SIMD_WORD): New.

2004-01-02  Sebastian Pop  <s.pop@laposte.net>

	* tree-data-ref.c (vec_analyze_array, vec_array_base_name_differ_p, 
	array_base_name_differ_p): Removed for fixing the previous patch.

2004-01-02  Richard Henderson  <rth@redhat.com>

	* target.h (struct gcc_target): Remove vectype_for_scalar_type.
	* target-def.h (TARGET_VECTYPE_FOR_SCALAR_TYPE): Remove.
	* config/rs6000/rs6000.c (rs6000_vectype_for_scalar_type): Remove.
	(TARGET_VECTYPE_FOR_SCALAR_TYPE): Remove.

	* tree.c (build_vector_type_with_mode): Rename from make_vector,
	remove unsignedp argument, update callers.
	(build_vector_type): New.
	* tree.h (build_vector_type): Declare it.
	* tree-vectorizer.c (get_vectype_for_scalar_type): Use it.

2004-01-02  Richard Henderson  <rth@redhat.com>

	* tree-scalar-evolution.c (finalize_scalar_evolutions_analyzer):
	Clear dump_file.

2004-01-02  Sebastian Pop  <s.pop@laposte.net>

	* tree-data-ref.c (vec_analyze_array): Renamed to analyze_array.
	(analyze_array): Removed.
	(find_data_references): Adapted to use the new analyze_array  
	function.
	(array_base_name_differ_p): Moved to tree-data-ref.h.
	(vec_array_base_name_differ_p): Removed.
	* tree-data-ref.h (array_base_name_differ_p): Moved here.
	* tree-vectorizer.c (vect_analyze_data_ref_dependence): Use
	array_base_name_differ_p instead of vec_array_base_name_differ_p.
	(vect_analyze_data_refs): Use analyze_array instead of
	vec_analyze_array.
	(vectorize_loops): Remove the initializers and finalizers of the
	scalar evolution analyzer.

2004-01-01  Dorit Naishlos <dorit@il.ibm.com>

        * tree-vectorizer.c: New file. Implements loop vectorization 
        pass.
        * tree-vectorizer.h: New file.
        * Makefile.in: (tree-vectorizer.c,tree-vectorizer.h): New files.
        * tree-dump.c: (dump_files): New dump file for the new
        vectorization pass.
        * tree.h: (TDI_vect): New dump index for the new vectorization 
        pass.
        * timevar.def (TV_TREE_VECTORIZATION): Support new
        vectorization pass.
        * opts.c: (flag_tree_vetorize): New flag to enable/disable the
        new vectorization pass.
        * flags.h: Same.
        * toplev.c: Same.
        * common.opt: (ftree-vectorize): Same.
        * doc/invoke.texi: Document above new options.
        * tree-optimize.c: (optimize_function_tree): Invoke the new
        vetorization pass.
        * tree-flow.h: (struct stmt_ann_d): New field (aux) to allow
        recording information per stmt.
        * tree-data-ref.c (vec_analyze_array): New function, exposing
        API to the vectorizer.
        (vec_array_base_name_differ_p): New function, exposing API to
        the vectorizer.
        * tree-data-ref.h: Same.
        * defaults.h: (UNITS_PER_SIMD_WORD): Define.
        * config/rs6000/rs6000.h: (UNITS_PER_SIMD_WORD): Same.
        * target-def.h (TARGET_VECTYPE_FOR_SCALAR_TYPE): Declare a new
        target hook for vectorization.
        * target.h (vectype_for_scalar_type): Same.
        * config/rs6000/rs6000.c: (rs6000_vectype_for_scalar_type):
        Implement the above new target hook.
 	
2003-12-31  Sebastian Pop  <s.pop@laposte.net>

	* version.c (version_string): Change the identifier for the
	sub-branch.

2003-12-31  Sebastian Pop  <s.pop@laposte.net>
            Daniel Berlin  <dberlin@dberlin.org>

	* tree-phinodes.c (create_phi_node): Initialise PHI_MARKED to 0.
	* tree-scalar-evolution.c (already_visited,
	node_already_visited_by_ssa_path): Removed.
	(analyze_evolution): Remove initialisation of already_visited.
	(construct_schedule): idem.
	(monev_follow_ssa_edge): use PHI_MARKED for deciding whether
	to analyze the phi-node.
	(follow_ssa_edge_and_record_dependences_rec): idem.
	* tree.h (PHI_MARKED): New macro.
	(tree_phi_node): Add a field marked.

2003-12-27  Sebastian Pop  <s.pop@laposte.net>

	* Makefile.in (OBJS-common): Added tree-chrec.o
	tree-scalar-evolution.o, tree-data-ref.o, tree-fold-const.o.
	(tree-optimize.o): Add dependencies on tree-fold-const.h
	tree-chrec.h tree-scalar-evolution.h tree-data-ref.h
	(tree-chrec.o, tree-scalar-evolution.o, tree-data-ref.o,
	tree-fold-const.o): New rules.
	* cfgloop.h (loop): New field nb_iterations.
	(loop_from_num): New function.
	* common.opt (fscalar-evolutions, fall-data-deps): Added.
	* flags.h (flag_scalar_evolutions, flag_all_data_deps): Declared.
	* opts.c (decode_options, common_handle_option): Initialize
        flag_scalar_evolutions and flag_all_data_deps. 
	* timevar.def (TV_SCALAR_EVOLUTIONS, TV_ALL_DATA_DEPS): New.
	* toplev.c (flag_scalar_evolutions, flag_all_data_deps): Defined.
	(lang_independent_options): Add flag_scalar_evolutions and 
	flag_all_data_deps.
	* tree-dump.c (scev, alldd): New extensions.
	* tree.h (tree_dump_index): Added TDI_scev and TDI_alldd.
	* tree-optimize.c (tree-fold-const.h, tree-chrec.h, 
	tree-scalar-evolution.h, tree-data-ref.h): Included.
	(optimize_function_tree): Added the entry point for the analysis of 
	scalar evolutions and data dependences.
	* tree-pretty-print.c (tree-fold-const.h, tree-chrec.h): Included.
	(dump_generic_node): Added code for dumping POLYNOMIAL_CHREC, 
	EXPONENTIAL_CHREC, PERIODIC_CHREC, and INTERVAL_CHREC.
	* tree.def (INTERVAL_CHREC, POLYNOMIAL_CHREC, EXPONENTIAL_CHREC, 
	PERIODIC_CHREC): New tree nodes.
	* varray.h (index_in_varray_tree, tree_is_in_varray_tree_p, 
	index_in_varray_int, int_is_in_varray_int_p): New inlined functions.
	* tree-chrec.c, tree-chrec.h, tree-data-ref.c, tree-data-ref.h, 
	tree-fold-const.c, tree-fold-const.h, tree-scalar-evolution.c, 
	tree-scalar-evolution.h: New files.
	* doc/invoke.texi (-fdump-scalar-evolutions, -fdump-all-data-deps): 
	Documented.
	* testsuite/gcc.dg/tree-ssa-chrec/ssa-chrec-[01..50].c : New testcases.
	* testsuite/gcc.dg/tree-ssa-chrec/ssa-chrec-[01..50].c.scev: Expected 
	outputs for the scalar evolution analyzer.  
	* testsuite/gcc.dg/tree-ssa-chrec/ssa-chrec-{10, 30, 31, 32, 33, 34, 
	35, 36}.c.alldd: Expected outputs for the data dependence analyzer.
	* testsuite/gcc.dg/tree-ssa-chrec/tree-ssa-scev.exp: New file.
	* testsuite/lib/scantree.exp (diff-tree-dumps): New procedure.
	* ChangeLog.lno: New file.
