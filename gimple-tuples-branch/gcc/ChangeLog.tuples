2008-03-04  Oleg Ryjkov  <olegr@google.com>

	* tree-ssa-dse.c (execute_simple_dse): Tuplified.
	* gimplify.c (gimplify_return_expr): Copy the NO_WARNING flag
	to the newly created expr from the tree.
	* tree-cfg.c (gimplify_build1): Tuplified.
	* passes.c (init_optimization_passes): Enabled
	pass_warn_function_return, pass_update_address_taken,
	pass_simple_dse and pass_build_alias passes.

2008-03-04  Rafael Espindola  <espindola@google.com>

	* fold-const.c (tree_simple_nonnegative_warnv_p): New.
	(tree_unary_nonnegative_warnv_p): New.
	(tree_binary_nonnegative_warnv_p): New.
	(tree_single_nonnegative_warnv_p): New.
	(tree_invalid_nonnegative_warnv_p): New.
	(tree_expr_nonnegative_warnv_p): Redefine in term of the new functions.

2008-03-04  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.c (walk_gimple_seq): Do not set wi->gsi.
	(walk_gimple_stmt): Set wi->gsi.
	* tree-cfg.c (verify_stmt): Use walk_gimple_op instead of
	walk_gimple_stmt.
	(verify_stmts): Same.

2008-03-04  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-03/msg00219.html

	* expr.c (expand_expr_real): Call lookup_expr_eh_region.
	* tree-eh.c (lookup_stmt_eh_region_fn):
	(lookup_stmt_eh_region): Fix comment.
	(lookup_expr_eh_region): Handle missing cfun and missing
	EH table.
	(record_in_finally_tree): Fix comment.
	(collect_finally_tree_1): Remove handler for
	GIMPLE_SWITCH.
	(maybe_record_in_goto_queue): Remove local variable
	NEW_IS_LABEL.
	Record GIMPLE_GOTOs instead of their label.
	(verify_norecord_switch_expr): Retrieve the CASE_LABEL
	from the case label expression.
	(do_return_redirection): Change sign of assertion.
	(lower_try_finally_onedest): Assert that
	TF->GOTO_QUEUE[0] contains a GIMPLE statement.
	(lower_try_finally_copy): Assert that Q contains a GIMPLE
	statement.
	(lower_try_finally_switch): Build a new GIMPLE label for
	CONT_STMT.
	(mark_eh_edge): Tuplify.
	(verify_eh_edges): Tuplify.
	(tree_can_throw_external): Remove unused function.
	(optimize_double_finally): Remove #if 0.
	* gimple-pretty-print.c (GIMPLE_NIY): Tidy.
	(dump_gimple_resx): Fix format string for
	dump_gimple_fmt.
	* gimplify.c (gimplify_cleanup_point_expr): Initialize
	BODY_SEQUENCE.
	* calls.c (emit_call_1): Remove ATTRIBUTE_UNUSED markers.
	* cfgexpand.c (gimple_to_tree) <GIMPLE_NOP>: Assign new
	expression to T.
	<GIMPLE_RESX>: Handle.
	Always assign the value from lookup_stmt_eh_region to
	ANN->RN.
	* tree-cfg.c (start_recording_case_labels):
	(recording_case_labels_p): Re-enable.
	(get_cases_for_edge): Likewise.
	(gimple_verify_flow_info): Re-enable call to
	verify_eh_edges.
	(gimple_redirect_edge_and_branch): Re-enable handling of
	GIMPLE_SWITCH.
	(gimple_block_ends_with_call_p): Tuplify.
	(struct gimple_cfg_hooks): Enable block_ends_with_call_p
	callback.

2008-03-04  Rafael Espindola  <espindola@google.com>

	* fold-const.c (tree_unary_nonzero_warnv_p): New.
	(tree_binary_nonzero_warnv_p): New.
	(tree_single_nonzero_warnv_p): New.
	(tree_expr_nonzero_warnv_p): Redefine using the new functions.

2008-03-04  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.c (walk_gimple_op): Update comment.
	(walk_gimple_stmt): Same.

2008-03-03  Aldy Hernandez  <aldyh@redhat.com>

	* cgraphbuild.c (build_cgraph_edges): Use walk_gimple_op instead of
	walk_gimple_stmt.
	* tree-ssa-alias-warnings.c (find_references_in_function): Same.
	* tree-ssa-ccp.c (fold_stmt): Change walk_gimple_stmt call to
	walk_gimple_op.
	* tree-nrv.c (tree_nrv): Same.
	* tree-ssa-alias.c (count_uses_and_derefs): Same.
	* cfgexpand.c (discover_nonconstant_array_refs_r): Same.
	* tree-nested.c (convert_nonlocal_reference_stmt): Make first
	argument a GSI.
	(convert_local_reference_op): Same.
	(convert_nl_goto_reference): Same.
	(convert_tramp_reference_stmt): Same.
	(convert_gimple_call): Same.
	* tree-inline.c (inline_forbidden_p_stmt): Same.
	* tree-ssa.c (execute_early_warn_uninitialized): Change
	walk_gimple_stmt call to walk_gimple_op.
	* gimple.c (walk_gimple_seq): Pass GSI to walk_gimple_stmt.
	(walk_gimple_stmt): Move operand walking code to...
	(walk_gimple_op): ...here.
	(walk_gimple_stmt): First argument is now a GSI.
	* gimple.h: Change walk_stmt_fn argument to a GSI.
	(walk_gimple_stmt): Make first argument is a GSI.
	(walk_gimple_op): New prototype.
	* tree-cfg.c (verify_stmt): Change argument to a GSI.  Adjust
	accordingly.

2008-02-29  Zdenek Dvorak  <ook@ucw.cz>

	* tree-ssa-alias.c (is_escape_site): Detect pure/const functions
	correctly.

2008-02-28  Zdenek Dvorak  <ook@ucw.cz>

	* tree-ssa-loop-im.c: Tuplify.
	* tree-ssa-loop-manip.c (add_exit_phis_edge, find_uses_to_rename_stmt,
	find_uses_to_rename_bb, check_loop_closed_ssa_use,
	check_loop_closed_ssa_stmt, verify_loop_closed_ssa): Ditto.
	* gimple-dummy.c (rewrite_into_loop_closed_ssa, tree_ssa_lim,
	verify_loop_closed_ssa, replace_exp): Removed.
	* tree-ssa-loop.c (tree_ssa_loop_init, tree_ssa_loop_done): Comment
	out scev initialization and finalization.
	* gimple-iterator.c (gsi_remove): Rename remove_eh_info to
	remove_permanently.  Do not free operands if remove_permanently
	is false.
	(gimple_find_edge_insert_loc): Use gsi_last_bb.
	* tree-eh.c (operation_could_trap_p): Factored out of ...
	(tree_could_trap_p): ... here.
	* tree-ssa-copy.c (replace_exp): Enable.
	* tree-flow.h (movement_possibility): Declaration changed.
	(operation_could_trap_p): Declare.
	* Makefile.in (tree-ssa-loop-im.o): Add pointer-set.h dependency.
	(gimple.o): Add FLAGS_H dependency.
	* gimple.c: Include flags.h.
	(gimple_could_trap_p): New function.
	* gimple.h (gimple_could_trap_p): Declare.
	* tree-cfg.c (replace_uses_by): Check that op is not null.
	* passes.c (init_optimization_passes): Enable pass_lim.

2008-02-28  Rafael Espindola  <espindola@google.com>

	* tree-outof-ssa.c (insert_backedge_copies): Don't build
	uninitialized assignment.

2008-02-28  Rafael Espindola  <espindola@google.com>

	* tree-dfa.c (dump_dfa_stats): cast dfa_stats.max_num_phi_args to long.

2008-02-26  Diego Novillo  <dnovillo@google.com>

	* tree-ssa-copyrename.c (rename_ssa_copies): Do not mix
	declarations with code.
	* tree-ssa-coalesce.c (create_outofssa_var_map): Likewise.
	* tree-dfa.c (dump_dfa_stats): Use %ld for
	dfa_stats.max_num_phi_args.

2008-02-26  Bill Maddox  <maddox@google.com>
	
	* tree-ssa-ccp.c (maybe_fold_stmt_addition):
	Reinstated this function for tuples as-is.
	(valid_gimple_rhs_p): New function.  Mostly lifted from
	valid_gimple_epxression_p, which is likely obsolete.
	(fold_stmt_r): Reinstated commented-out cases for
	tuples. Replaced call to obsolete function set_rhs.
	(get_maxval_strlen): Convert to tuples.
	(ccp_fold_builtin): Partial conversion to tuples.
	(fold_gimple_assign): New function.
	(fold_gimple_cond): New function.
	(fold_gimple_call): New function.
	(fold_stmt): Convert to tuples.
	(fold_stmt_inplace): Convert to tuples.
	* tree-ssa-propagate.c (substitute_and_fold):
	Update call to fold_stmt for revised argument signature.
	* gimple-dummy.c (fold_stmt): Removed dummy definition.
	* gimplify.c (gimplify_call_expr): Removed obsolete
	manipulation of TREE_NOTHROW flag.
	* cfgexpand.c (gimple_to_tree): Set nothrow flag
	of call expression based on call statement flags.
	Handle GIMPLE_NOP statement.
	* tree-flow.h (notice_special_calls, fold_stmt):
	Update prototypes for tuples.
	* gimple.c (gimple_cond_set_condition_from_tree):
	New function.
	(gimple_seq_has_side_effects): New function.
	* gimple.h (gimple_cond_set_condition_from_tree,
	gimple_seq_has_side_effects): New prototypes.
	(gimple_call_nothrow_p): New function.
	(gsi_stmt_ptr): Add comment regarding usage of this
	function vs. gsi_replace.
	* tree-cfg.c (struct rus_data): Convert to tuples.
	(remove_useless_stmts_1, remove_useless_stmts_warn_notreached,
	remove_useless_stmts_cond, remove_useless_stmts_tf,
	remove_useless_stmts_tc, remove_useless_stmts_goto,
	remove_useless_stmts_label, notice_special_calls,
	remove_useless_stmts): Convert to tuples.
	(update_call_expr_flags): Removed.
	* passes.c (init_optimization_passes): Enable
	pass_remove_useless_stmts.
	
2008-02-25  Bill Maddox  <maddox@google.com>

	* tree-into-ssa.c (rewrite_initialize_block):
	Avoid declaration following statement in block.
	* tree-nrv.c (tree_nrv):
	Avoid declaration following statement in block.
	* tree-eh.c (collect_finally_tree): Fix typo in comment.
	Avoid cast to union type.
	(replace_goto_queue_cond_clause, replace_goto_queue_1,
	maybe_record_in_goto_queue, verify_norecord_switch_expr,
	lower_try_finally_fallthru_label): Avoid cast to union type.
	* fortran/Make-lang.in: Add -Wno-missing-format-attribute
	to fortran-warn options to avoid conflict with -Wno-format.
	* gimplify.c (gimplify_switch_expr):  Change assignment
	to initialiation.
	(gimplify_case_label_expr): Avoid declaration following
	statement in block.
	* tree-ssa-coalesce.c (create_outofssa_var_map): Avoid
	declaration following statement in block.
	* tree-ssa.c (ssa_redirect_edge, flush_pending_stmts):
	Avoid declaration following statements in block.
	* Makefile.in: Add -Wno-missing-format-attribute
	to builtins.o-warn and expr.o-warn options to avoid conflict
	with -Wno-format.  Removed fortran/*-warn options, -Wno-format
	and -Wno-uninitialized, which belong in fortran/Make-lang.in,
	and are applied to all fortran files there.

2008-02-25  Oleg Ryjkov  <olegr@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg01236.html

	* tree-ssa-copyrename.c: Include gimple.h
	Tuplify.
	* tree-ssa.c (warn_uninit): Pass &LOCUS to warning().
	* passes.c (init_optimization_passes): Enable
	pass_early_warn_uninitialized, pass_rebuild_cgraph_edges
	and pass_early_inline.

2008-02-25  Diego Novillo  <dnovillo@google.com>

	* Makefile.in (tree-ssa-copyrename.o): Add dependency on
	gimple.h.

2008-02-25  Diego Novillo  <dnovillo@google.com>

	* tree-cfgcleanup.c (tree_forwarder_block_p): Revert
	previous change.

2008-02-25  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg01217.html

	* tree-ssa-alias-warnings.c: Tuplify.
	* cgraphunit.c (cgraph_process_new_functions): Remove
	calls to gimple_unreachable.
	(cgraph_expand_function): Likewise.
	* omp-low.c (execute_expand_omp): Return 0 after call to
	gimple_unreachable.
	* tree-scalar-evolution.c (scev_const_prop): Likewise.
	(execute_lower_omp): Likewise.
	* tree-ssa-dse.c (execute_simple_dse): Likewise.
	* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.
	(eliminate_degenerate_phis): Likewise.
	* tree-ssa-propagate.c (get_rhs): Likewise.
	(valid_gimple_expression_p): Likewise.
	(set_rhs): Likewise.
	(fold_predicate_in): Likewise.
	* tree-nrv.c (execute_return_slot_opt): Likewise.
	* predict.c (tree_estimate_probability): Likewise.
	* tree-parloops.c (parallelize_loops): Likewise.
	* tree-if-conv.c (main_tree_if_conversion): Likewise.
	* tree-ssa-phiopt.c (tree_ssa_phiopt): Likewise.
	(tree_ssa_cs_elim): Likewise.
	* tree-sra.c (tree_sra): Likewise.
	(tree_sra_early): Likewise.
	* tree-predcom.c (tree_predictive_commoning): Likewise.
	* tree-ssa-copy.c (execute_copy_prop): Likewise.
	* lambda-code.c (gcc_loop_to_lambda_loop): Likewise.
	(perfect_nest_p): Likewise.
	(can_convert_to_perfect_nest): Likewise.
	(perfect_nestify): Likewise.
	* tree-optimize.c (execute_fixup_cfg): Likewise.
	* tree-object-size.c (compute_object_sizes): Likewise.
	* tree-cfg.c (remove_useless_stmts): Likewise.
	(gimple_duplicate_sese_tail): Likewise.
	(move_sese_region_to_fn): Likewise.
	(gimple_purge_dead_abnormal_call_edges): Likewise.
	(execute_warn_function_return): Likewise.
	* value-prof.c (gimple_histogram_value): Remove calls to
	gimple_unreachable.
	(gimple_stringop_fixed_value): Likewise.
	* tree-flow-inline.h (op_iter_next_use): Likewise.
	* tree-dfa.c (dump_variable): Likewise.
	* tree-ssa-copy.c (may_propagate_copy): Likewise.
	(may_propagate_copy_into_asm): Likewise.
	(merge_alias_info): Likewise.
	(replace_exp_1): Likewise.
	* tree-ssa.c (delete_tree_ssa): Likewise.
	* tree-cfg.c (make_edges): Likewise.
	(remove_useless_stmts): Likewise.
	(gimple_duplicate_sese_tail): Likewise.
	(move_sese_region_to_fn): Likewise.
	(gimple_purge_dead_abnormal_call_edges): Likewise.
	(execute_warn_function_return): Likewise.
	* passes.c (finish_optimization_passes): Likewise.
	(init_optimization_passes): Likewise.
	* tree-ssa-operands.c (add_call_clobber_ops): Likewise.
	* tree-eh.c (lookup_expr_eh_region): New.
	(tree_can_throw_external): Return false after call to
	gimple_unreachable.
	(maybe_clean_or_replace_eh_stmt): Re-enable.
	Call stmt_could_throw_p.
	* expr.c (expand_expr_real): Call lookup_expr_eh_region.
	* profile.c: Tuplify.
	* calls.c: Include tree-flow.h.
	(emit_call_1): Call lookup_expr_eh_region.
	(expand_call): Likewise.
	* cfgexpand.c (gimple_to_tree): Call SET_EXPR_LOCATION on
	generated expression tree T.
	Set EH region number on T's annotation.
	* common.opt (fgimple-conversion=): Add RejectNegative
	and Joined attributes.
	* tree-inline.c (unsave_r): Abort if *TP is a
	STATEMENT_LIST.
	(unsave_expr_now): Re-enable.
	* tree-flow.h (struct tree_ann_common_d): Add field RN.
	* Makefile.in (builtins.o-warn): Add -Wno-format.
	(expr.o-warn): Likewise.
	(fortran/check.o-warn): Likewise.
	(fortran/interface.o-warn): Likewise.
	(fortran/resolve.o-warn): Likewise.
	(fortran/simplify.o-warn): Likewise.
	(fortran/target-memory.o-warn): Likewise.
	(calls.o): Add dependency on tree-flow.h
	* gimple.c (gimple_build_asm_1): Call ggc_alloc_string to
	copy STRING.
	* gimple.h (gimple_filename): New.
	(gimple_lineno): New.
	* passes.c (init_optimization_passes): Disable
	pass_remove_useless_stmts pass_mudflap_1,
	pass_warn_function_return and pass_lower_omp.
	* config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Tuplify.
	(rs6000_alloc_sdmode_stack_slot): Likewise.
	* tree-cfgcleanup.c (tree_forwarder_block_p): Fix test
	for PHI_WANTED.

2008-02-25  Rafael Espindola  <espindola@google.com>

	* tree-cfgcleanup.c (tree_forwarder_block_p): fix thinko.

2008-02-24  Rafael Espindola  <espindola@google.com>

	* gimple-iterator.c (gsi_split_seq_before): Don't abort if at the
	beginning.

2008-02-23  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg01025.html

	* gimplify.c (gimplify_one_sizepos): Call gimplify_expr with
	STMT_P.

2008-02-22  Zdenek Dvorak  <ook@ucw.cz>

	* gimple.c (gimple_assign_copy_p): Do not consider unary operations
	to be copies.

2008-02-22  Diego Novillo  <dnovillo@google.com>

	* Makefile.in (fortran/parse.o-warn,
	fortran/simplify.o-warn): New.

2008-02-22  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00961.html

	Revert

	2008-02-20  Zdenek Dvorak  <ook@ucw.cz>

		* tree-tailcall.c: Tuplify.
		* gimplify.c (force_gimple_operand): Remove ATTRIBUTE_UNUSED.
		* gimple.c (gimple_assign_copy_p): Do not
		consider unary operations to be copies.
		(copy_or_nop_cast_stmt_rhs): New.
		* gimple.h (copy_or_nop_cast_stmt_rhs): Declare.

2008-02-21  Rafael Espindola  <espindola@google.com>

	* gimple.h (gimple_cond_true_p): Define.
	(gimple_cond_false_p): Define.
	(gimple_cond_single_var_p): Define.

2008-02-21  Rafael Espindola  <espindola@google.com>

	* tree-tailcall.c (adjust_accumulator_values): Check that a phi was
	found.

2008-02-21  Rafael Espindola  <espindola@google.com>

	* tree-tailcall.c (adjust_accumulator_values): Initialize phi.

2008-02-20  Zdenek Dvorak  <ook@ucw.cz>

	* tree-tailcall.c: Tuplify.
	* gimplify.c (force_gimple_operand): Remove ATTRIBUTE_UNUSED.
	* gimple.c (gimple_assign_copy_p): Do not consider unary operations
	to be copies.
	(copy_or_nop_cast_stmt_rhs): New.
	* gimple.h (copy_or_nop_cast_stmt_rhs): Declare.

2008-02-20  Oleg Ryjkov  <olegr@google.com>

	* gimplify.c (gimplify_expr): Save locus into the right
	sequence.

2008-02-20  Rafael Espindola  <espindola@google.com>

	* passes.c (init_optimization_passes): Enable pass_mark_used_blocks
	and pass_cleanup_cfg_post_optimizing.
	* tree-optimize.c (execute_cleanup_cfg_post_optimizing): call cleanup_tree_cfg.

2008-02-20  Rafael Espindola  <espindola@google.com>

	* passes.c (init_optimization_passes):  Enable pass_nrv.
	* tree-nrv.c (finalize_nrv_r): data is now a walk_stmt_info.
	(tree_nrv): port to gimple.

2008-02-19  Oleg Ryjkov  <olegr@google.com>

	* gimple-pretty-print.c: Introduce support for TDF_RAW
	flag.
	(dump_gimple_fmt): New function.
	(dump_gimple_assign, dump_gimple_return): Update to print
	RAW gimple.
	(dump_gimple_call_args): New function.
	(dump_gimple_call, dump_gimple_switch, dump_gimple_cond,
	dump_gimple_label, dump_gimple_bind, dump_gimple_try):
	Update to print RAW gimple.
	(dump_gimple_catch, dump_gimple_eh_filter,
	dump_gimple_resx): New functions.
	(dump_gimple_omp_for, dump_gimple_asm, dump_gimple_phi):
	Update to print RAW gimple.
	(dump_gimple_omp_parallel, dump_gimple_omp_atomic_load,
	dump_gimple_omp_atomic_store): New, code moved from 
	dump_gimple_stmt, then added support to print RAW gimple.
	(gimple_dump_stmt): Some code refactored into helper
	subroutines.
	* tree-cfg.c(dump_function_to_file): Print RAW gimple when
	TDF_RAW is set.

2008-02-19  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00793.html

	* tree-complex.c (expand_complex_div_wide): Call gsi_bb.
	* tree.h (std_gimplify_va_arg_expr): Change gimple_seq
	arguments to gimple_seq *.
	Update all users.
	(gimplify_parameters): Change return type to gimple_seq.
	Update all users.
	* target.h (struct gcc_target)<gimplify_va_arg_expr>:
	Change gimple_seq arguments to gimple_seq *.
	Update all users.
	* tree-phinodes.c (free_phinodes): Convert to VEC.
	Update all users.
	* omp-low.c (lower_rec_input_clauses): Change gimple_seq
	arguments to gimple_seq *.  Update all users.
	(lower_reduction_clauses): Convert sub_list to
	gimple_seq.
	(lower_regimplify): Convert PRE to gimple_seq.
	(lower_regimplify): Call gimple_seq_insert_before instead
	of tsi_link_before.
	* tree-gimple.h (get_initialized_tmp_var,
	get_formal_tmp_var, gimplify_expr, gimplify_type_sizes,
	gimplify_one_sizepos, gimplify_stmt, gimplify_and_add,
	gimplify_va_arg_expr): Change gimple_seq arguments to
	gimple_seq *.  Update all users.
	* gimple-iterator.c: Include value-prof.h.
	(gsi_link_seq_before): Remove.  Update all users.
	(gsi_link_seq_after): Remove.  Update all users.
	(gsi_link_after): Remove.  Update all users.
	(gsi_link_before): Remove.  Update all users.
	(update_bb_for_stmts): New.
	(gsi_insert_seq_nodes_before): New.
	(gsi_insert_seq_nodes_after): New.
	(gsi_insert_seq_before): Re-write.  Call
	gsi_insert_seq_nodes_before.
	(gsi_insert_seq_after): Re-write.  Call
	gsi_insert_seq_nodes_after.
	(gsi_replace): Re-enable EH updating.
	(update_modified_stmt): Move earlier in the file.
	(gsi_insert_after): Re-write.  Call
	gsi_insert_seq_nodes_after.
	(gsi_insert_before): Re-write.  Call
	gsi_insert_seq_nodes_before.
	(gsi_remove): Move from gimple.h.  Re-write.
	* langhooks.h (struct lang_hooks): Change gimple_seq
	arguments for gimplify_expr to gimple_seq *.
	Update all users.
	* coretypes.h (struct gimple_seq_d): Rename from struct
	gimple_sequence.  Update all users.
	(struct gimple_seq_node_d): New.
	(gimple_seq_node): New.
	(const_gimple_seq_node): New.
	* tree-flow.h (force_gimple_operand): Change gimple_seq
	argument to gimple_seq *.  Update all users.
	* c-common.h (c_gimplify_expr): Change gimple_seq
	argument to gimple_seq *.  Update all users.
	* Makefile.in (build):
	* gimple.c (gimple_seq_cache): New.
	(gimple_seq_alloc): Take sequences from gimple_seq_cache,
	if possible.
	(gimple_seq_free): New.
	(gimple_seq_add_stmt): Rename from gimple_seq_add.
	Change gimple_seq argument to gimple_seq *.  Update all users.
	(gimple_seq_add_seq): Rename from gimple_seq_append.
	Update all users.
	(gimple_remove): Remove.  Update all users.
	(gimple_seq_reverse): Remove unused function.
	(gimple_set_bb): Only update block-to-labels map if
	CFUN->CFG exists.
	* gimple.h (struct gimple_seq_node_d): New.
	(struct gimple_seq_d): Change fields 'first' and 'last'
	to type gimple_seq_node.  Update all users.
	Add field 'next_free'.
	(gimple_seq_first): Change return type to
	gimple_seq_node.  Update all users.
	(gimple_seq_first_stmt): New.
	(gimple_seq_last): Change return type to gimple_seq_node.
	Update all users.
	(gimple_seq_last_stmt): New.
	(gimple_seq_set_first): Change second argument to type
	gimple_seq_node.  Update all users.
	(gimple_seq_set_last): Change second argument to type
	gimple_seq_node.  Update all users.
	(gimple_seq_init): Remove.  Update all users.
	(struct gimple_statement_base): Remove field 'next' and
	'prev'.  Update all users.
	(struct gimple_statement_omp): Change fields of type
	struct gimple_sequence to type gimple_seq.  Update all
	users.
	(struct gimple_statement_bind): Likewise.
	(struct gimple_statement_catch): Likewise.
	(struct gimple_statement_eh_filter): Likewise.
	(struct gimple_statement_try): Likewise.
	(struct gimple_statement_wce): Likewise.
	(struct gimple_statement_omp_for): Likewise.
	(gimple_set_prev): Remove.  Update all users.
	(gimple_set_next): Remove.  Update all users.
	(gimple_next): Remove.  Update all users.
	(gimple_prev): Remove.  Update all users.
	(gimple_seq_bb): New.
	(gimple_catch_handler_ptr): New.
	(gimple_stmt_iterator): Remove field 'stmt'.
	Add field 'ptr'.  Update all users.
	(gsi_remove): Move to gimple-iterator.c
	* tree-cfg.c (pass_build_cfg): Re-enable PROP_gimple_leh.
	* Makefile.in (builtins.o-warn, expr.o-warn, dse.o-warn,
	ebitmap.o-warn, lower-subreg.o-warn, tree-chrec.o-warn):
	Change -Wno-error to -Wno-uninitialized.

2008-02-19  Rafael Espindola  <espindola@google.com>

	* tree-eh.c (collect_finally_tree): handle GIMPLE_SWITCH.

2008-02-19  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.h (gimple_cond_invert): Remove prototype.
	(update_stmt_if_modified): Fix typo in comment.
	* gimple.c (walk_gimple_asm): Fix typo in comment.

2008-02-13  Bill Maddox  <maddox@google.com>

	* tree-inline.c (estimate_operator_cost): 
	Removed operators superseded by tuplified statement forms.
	Small cosmetic reordering of a few switch cases.

2008-02-13  Oleg Ryjkov  <olegr@google.com>

	* tree.h: New function declaration.
	* gimple-dummy.c (tree_inlinable_function_p): Removed.
	* ipa-inline.c (compute_inline_parameters): Removed
	gcc_unreachable ().
	* calls.c (gimple_alloca_call_p): New function.
	* tree-inline.c (inline_forbidden_p_1): Split in two and removed.
	(inline_forbidden_p_op, inline_forbidden_p_stmt): New functions.
	(inline_forbidden_p): Tuplified.
	(estimate_operator_cost): Added missing cases.
	* passes.c (init_optimization_passes): Enabled pass_inline_parameters,
	pass_ipa_function_and_variable_visibility, pass_ipa_early_inline,
	pass_inline_parameters, pass_rebuild_cgraph_edges passes.

2008-02-13  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00459.html

	* gimple.def (GIMPLE_TRY): Tidy comment.
	* gimple-pretty-print.c (dump_gimple_stmt): Handle TDF_VOPS and
	TDF_MEMSYMS.

2008-02-13  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00455.html

	* tree-complex.c (update_complex_components): Handle
	GIMPLE_CALL and GIMPLE_ASSIGN.
	(expand_complex_libcall): Set SSA_NAME_DEF_STMT on LHS.
	* tree-ssa-operands.c (maybe_add_call_clobbered_vops):
	Rename from get_call_expr_operands.  Update all users.
	Convert to handle GIMPLE_CALL instead of CALL_EXPR.
	(get_modify_stmt_operands): Remove.  Update all users.
	(get_expr_operands): Do not handle CALL_EXPR, COND_EXPR,
	VEC_COND_EXPR, GIMPLE_MODIFY_STMT, BLOCK, EXC_PTR_EXPR
	and FILTER_EXPR.
	(parse_ssa_operands): Call maybe_add_call_clobbered_vops
	after parsing operands if STMT is a GIMPLE_CALL.

2008-02-12  Zdenek Dvorak  <ook@ucw.cz>
	    Bill Maddox  <maddox@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00429.html

	* tree-inline.h (estimate_num_insns_fn): Declare.
	* cgraphunit.c (cgraph_process_new_functions):
	Use estimate_num_insns_fn.
	* ipa-inline.c (compute_inline_parameters): Ditto.
	* gimple-dummy.c (estimate_move_cost, estimate_num_insns):
	Removed.
	* tree-inline.c (struct eni_data, estimate_num_insns_1):
	Removed.
	(estimate_num_insns): Rewritten.
	(operation_cost, estimate_num_insns_fn): New functions.
	* gimple.c (gimple_copy): Unshare operands.  Update
	operand caches.
	* gimple.h (gimple_set_no_warning): New.
	(gimple_cond_set_true_label, gimple_cond_set_false_label):
	Allow setting the label to NULL.
	* tree-ssa-operands.c (copy_virtual_operands): Handle statements
	without virtual operands.

2008-02-12  Zdenek Dvorak  <ook@ucw.cz>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00429.html

	* tree-into-ssa.c (update_ssa): Remove ATTRIBUTE_UNUSED.
	* tree-ssa-loop-ch.c: Tuplified.
	* gimple-iterator.c (gsi_commit_one_edge_insert): Ditto.
	* tree-cfg.c (gimple_redirect_edge_and_branch,
	gimple_try_redirect_by_replacing_jump, gimple_merge_blocks,
	gimple_block_label, gimple_redirect_edge_and_branch_force,
	gimple_duplicate_bb): Ditto.
	(make_cond_expr_edges): Remove the labels.
	(cleanup_dead_labels): Handle conditions without labels.
	(gimple_make_forwarder_block): Do not reverse the list
	of phi nodes.
	(gimple_duplicate_sese_region): Enable ssa updates.
	(gimple_cfg_hooks): Enable edge redirection and bb duplication.
	* gimple-pretty-print.c (dump_gimple_cond): Do not dump
	branches if labels are null.
	(dump_implicit_edges): Dump implicit GIMPLE_COND edges.

2008-02-12  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00429.html

	* tree-vrp.c (range_includes_zero_p): Partially re-enable.
	(ssa_name_nonnegative_p): Partially re-enable.
	(ssa_name_nonzero_p): Likewise.
	* gimple-dummy.c (ssa_name_nonzero_p): Remove.
	(ssa_name_nonnegative_p): Remove.
	* tree-cfg.c (gimple_split_block): Convert to tuples.

2008-02-12  Aldy Hernandez  <aldyh@redhat.com>

	Merge with mainline @132177

	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.

2008-02-08  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00273.html
	
	* gimplify.c (gimplify_call_expr): Remove code to set
	TREE_SIDE_EFFECTS.
	* gimple.c (gimple_has_side_effects): New.
	* gimple.h (gimple_has_side_effects): Declare.
	* tree-cfg.c (stmt_can_make_abnormal_goto): Call.

2008-02-07  Diego Novillo  <dnovillo@google.com>

	* gimple.h (gimple_call_num_args): Rename from
	gimple_call_nargs.  Update all users.

2008-02-07  Aldy Hernandez  <aldyh@redhat.com>

	* gimplify.c: Remove various FIXMEs that have been resolved.

2008-02-06  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.def: Add GIMPLE_OMP_ATOMIC_{LOAD,STORE} entires.
	* gsstruct.def: Add GSS_OMP_ATOMIC_{LOAD,STORE} entries.
	* gimple-pretty-print.c (dump_gimple_stmt): Add case for
	GIMPLE_OMP_ATOMIC_{LOAD,STORE}.
	* gimplify.c (gimplify_omp_atomic): Enable and convert to tuples.
	* tree.def: Add FIXME notes.
	* gimple.c (gss_for_code): Add cases for
	GIMPLE_OMP_ATOMIC_{LOAD,STORE}.
	(gimple_size): Same.
	(gimple_build_omp_atomic_load): New.
	(gimple_build_omp_atomic_store): New.
	* gimple.h (struct gimple_statement_omp_atomic_{load,store}): New.
	(union gimple_statement_d): Add gimple_omp_atomic_{load,store}.
	(gimple_omp_atomic_store_set_val): New.
	(gimple_omp_atomic_store_val): New.
	(gimple_omp_atomic_load_set_lhs): New.
	(gimple_omp_atomic_load_lhs): New.
	(gimple_omp_atomic_load_set_rhs): New.
	(gimple_omp_atomic_load_rhs): New.
	* tree-cfg.c (verify_types_in_gimple_seq_2): Add cases for
	GIMPLE_OMP_ATOMIC_{LOAD,STORE}.

2008-02-05  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00161.html

	* gimple-iterator.c (gsi_split_seq_after): Change
	argument type to gimple_stmt_iterator.  Update all users.
	(gsi_for_stmt): Return gimple_stmt_iterator.  Update all users.
	(gimple_find_edge_insert_loc): Change GSI argument to
	gimple_stmt_iterator.  Update all users.
	* gimple.c (gimple_seq_deep_copy): Change argument to gimple_seq.
	Update all users.
	* gimple.h (gsi_alloc): Remove.  Update all users.
	(gsi_start): Return gimple_stmt_iterator.  Update all users.
	(gsi_start_bb): Likewise.
	(gsi_last): Likewise.
	(gsi_last_bb): Likewise.
	(gsi_end_p): Change argument to gimple_stmt_iterator.
	Update all users.
	(gsi_one_before_end_p): Likewise.
	(gsi_stmt): Likewise.
	(gsi_bb): Likewise.
	(gsi_seq): Likewise.
	(gsi_split_seq_after): Likewise.
	(gsi_for_stmt): Likewise.
	(gsi_after_labels): Return gimple_stmt_iterator.  Update all users.

2008-02-05  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-pretty-print.c (dump_gimple_stmt): Print clauses for
	GIMPLE_OMP_PARALLEL.
	Handle GIMPLE_OMP_FOR.
	(dump_gimple_omp_for): New.
	* tree-pretty-print.c (dump_omp_clauses): Remove static.
	* diagnostic.h (dump_omp_clauses): Add prototype.
	* gimplify.c (gimplify_omp_for): Convert to tuples and enable.
	(gimplify_omp_workshare): Same.
	(gimplify_expr) [OMP_MASTER, OMP_ORDERED, OMP_CRITICAL]: Same.

2008-02-04  Oleg Ryjkov <olegr@google.com>

	* tree-gimple.c (get_gimple_rhs_class): Handle
	FILTER_EXPR.
	* tree-eh.c (union treemple): Declare.
	Convert to tuples.
	* except.c:
	* except.h (lang_protect_cleanup_actions): Change return
	type to 'gimple'.  Update all users.
	* tree-inline.c (count_insns_seq): New.
	* tree-inline.h (count_insns_seq): Declare.
	* gimple.c (gimple_seq_deep_copy): New.
	* gimple.h (gimple_seq_deep_copy): Declare.
	(gimple_singleton_p): New.
	* passes.c (init_optimization_passes): Enable
	pass_lower_eh.

2008-02-02  Aldy Hernandez  <aldyh@redhat.com>

	* tree.h (OMP_CLAUSE_REDUCTION_GIMPLE_INIT): New.
	(OMP_CLAUSE_REDUCTION_GIMPLE_MERGE): New.
	(struct tree_omp_clause): Add gimple_reduction_{init,merge} fields.
	* gimplify.c (gimplify_scan_omp_clauses): Gimplify reduction
	init/merge fields into separate sequences.
	(gimplify_and_add): Use gimplify_expr directly.
	* omp-low.c (lower_rec_input_clauses): Extract reduction info from
	gimple tuples in structure.
	(lower_reduction_clauses): Same.

2008-02-01  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00036.html

	* tree-complex.c (expand_complex_comparison): Set the RHS
	of the new comparison to boolean_true_node.
	* gimplify.c (gimplify_call_expr): Fix creation of new
	GIMPLE_CALL.  Create the vector of arguments in the same
	order as the original expression.

2008-02-01  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00032.html

	* tree-pas.h (struct tree_opt_pass): Remove field
	WORKS_WITH_TUPLES_P.  Adjust all users.
	* opts.c (decode_options): Force -O0.
	* cfgexpand.c (gimple_to_tree): Handle GIMPLE_RETURN,
	GIMPLE_ASM, GIMPLE_CALL and GIMPLE_SWITCH.
	Show unrecognized tuple when failing.
	(expand_gimple_basic_block): Do not use
	gimple_stmt_iterator to go through the statements in BB.
	Handle GIMPLE_CALL instead of CALL_EXPR.
	(gimple_expand_cfg): Rename from tree_expand_cfg.  Update
	all users.
	Remove PROP_gimple_leh.
	* gimple.c (walk_gimple_seq): Guard against WI == NULL.
	* tree-cfg.c (execute_warn_function_return): Move #if 0
	markers.
	* passes.c (init_optimization_passes): Adjust #if 0
	markers to execute pass_expand.
	Guard more passes under #if 0.

2008-02-01  Rafael Espindola  <espindola@google.com>

	* passes.c (init_optimization_passes): Enable pass_del_ssa.

	* tree-outof-ssa.c (insert_copy_on_edge): Port to tuples.
	(eliminate_build): Likewise.
	(eliminate_virtual_phis): Likewise.
	(rewrite_trees): Likewise. Remove stmt_ann_t ann.
	(stmt_list): Changed from tree to gimple_seq.
	(identical_copies_p): Port to tuples.
	(identical_stmt_lists_p): Likewise.
	(init_analyze_edges_for_bb): Likewise.
	(fini_analyze_edges_for_bb): Likewise.
	(process_single_block_loop_latch): Likewise.
	(analyze_edges_for_bb): LIkewise.
	(remove_ssa_form): Likewise.
	(insert_backedge_copies):
	(rewrite_out_of_ssa):Likewise.
	(pass_del_ssa): flip works_with_tuples_p. Don't require PROP_alias.

	* tree-ssa-coalesce.c (build_ssa_conflict_graph): Port to tuples.
	(abnormal_corrupt): Port to tuples.
	(fail_abnormal_edge_coalesce): Port to tuples.
	(create_outofssa_var_map):Port to tuples.
	(coalesce_partitions): Port to tuples.

2008-02-01  Rafael Espindola  <espindola@google.com>

	* tree-ssa-operands.c (free_stmt_operands): Only free
	with_ops.addresses_taken if stmt has ops.

2008-01-31  Rafael Espindola  <espindola@google.com>

	* tree-optimize.c (pass_free_cfg_annotations): Flip
	works_with_tuples_p.
	* passes.c (init_optimization_passes): Enable
	pass_free_cfg_annotations.

2008-01-30  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-01/msg01461.html

	* tree-into-ssa.c (compute_global_livein): Initialize
	PHI with call to gsi_stmt.
	(rewrite_update_init_block): Likewise.
	* tree-complex.c (expand_complex_comparison): Initialize
	TYPE.
	(expand_complex_operations_1): Initialize BR and BI.
	* ebitmap.h (ebitmap_iter_init): Initialize OURN.
	* Makefile.in (dse.o-warn, ebitmap.o-warn,
	lower-subreg.o-warn, tree-chrec.o-warn, varasm.o-warn):
	New.

2008-01-30  Rafael Espindola  <espindola@google.com>

	* gimplify.c (gimplify_scan_omp_clauses): Comment out
	pop_gimplify_context calls

2008-01-30  Rafael Espindola  <espindola@google.com>

	* gimple.h (gsi_after_labels): Add.

2008-01-30  Rafael Espindola  <espindola@google.com>

	* Makefile.in (tree-complex.o): Uncomment gt-tree-vect-generic.h.
	(GTFILES): Add tree-vect-generic.c.
	* passes.c (init_optimization_passes): Enable pass_lower_vector.
	* tree-vect-generic.c: uncomment all the file.
	(elem_op_func): Use gimple_stmt_iterator instead of
	block_stmt_iterator.
	(tree_vec_extract): Likewise. Rename bsi to gsi.
	(do_unop): Likewise.
	(do_binop): Likewise.
	(do_plus_minus): Likewise.
	(do_negate): Likewise.
	(expand_vector_piecewise): Likewise.
	(expand_vector_parallel): Likewise.
	(expand_vector_addition): Likewise.
	(expand_vector_operation): Likewise. Remove "tree rhs" param. Add
	"gimple assign" param. Use gimple_assign_rhs1|2 instead of
	TREE_OPERAND.
	(expand_vector_operations_1): Use gimple_stmt_iterator instead of
	block_stmt_iterator. Rename bsi to gsi. Use gsi_stmt instead of
	bsi_stmt. Use gimple_assign_* instead of GIMPLE_STMT_OPERAND. Use
	gimple_assign_set_rhs_from_tree instead of setting *p_rhs.
	(gate_expand_vector_operations): Use gimple_stmt_iterator instead
	of block_stmt_iterator. Use gsi_* instead of bsi_*
	(pass_lower_vector): flip works_with_tuples_p
	(pass_lower_vector_ssa) flip works_with_tuples_

2008-01-29  Rafael Espindola  <espindola@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-01/msg01434.html

	* gimple.c (gimple_assign_set_rhs_with_ops): Fix
	allocation of operand vector.

2008-01-29  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-01/msg01434.html

	* tree-into-ssa.c (prepare_block_for_update): Initialize
	PHI.
	* tree.c (build_gimple_modify_stmt): Fix documentation.

	* tree-complex.c: Convert to tuples.
	(pass_lower_complex_O0): Re-enable.

	* ipa-cp.c (constant_val_insert): Disable.
	* tree-gimple.c (get_gimple_rhs_class): Handle SSA_NAME.

	* tree-ssa-propagate.c: Fix documentation to refer to
	prop_simulate_again_p.
	(add_ssa_edge): Call prop_simulate_again_p.
	(simulate_stmt): Likewise.
	(simulate_block): Fix loop iterating over PHI nodes.
	* tree-ssa-propagate.h (prop_set_simulate_again): New.
	(prop_simulate_again_p): New.
	* gimple-iterator.c (gsi_insert_seq_after): Re-write to
	avoid use of gimple_stmt_iterator.
	(gimple_find_edge_insert_loc): Move from tree-cfg.c.
	Re-enable.
	(gsi_commit_edge_inserts): Likewise.
	(gsi_commit_one_edge_insert): Likewise.
	(gsi_insert_on_edge): Likewise.
	(gsi_insert_on_edge_immediate): Likewise.
	(gsi_insert_seq_on_edge): New.
	* gimplify.c (gimplify_cond_expr): Call
	gimple_cond_get_ops_from_tree.
	* tree-optimize.c (pass_all_optimizations): Enable.
	* gimple.c (gimple_cond_get_ops_from_tree): New.
	(gimple_build_cond_from_tree): New.
	* basic-block.h (struct edge_def): Replace field
	edge_def_insns.t with gimple_seq edge_def_insns.g.
	Update all users.
	* gimple.h (gimple_stmt_iterator):
	* tree-cfg.c (change_bb_for_stmt):
	* passes.c (init_optimization_passes): Move #if0 around
	to disable passes in groups instead of individually.
	(execute_function_todo): Re-enable call to update_ssa.

2008-01-25  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-pretty-print.c (dump_gimple_stmt): Handle
	GIMPLE_OMP_PARALLEL.
	* gimplify.c (pop_gimplify_context): Add comment.
	(gimplify_and_return_first): New.
	(gimplify_scan_omp_clauses): Remove unused 'gs'.
	Remove #if 0.
	(gimplify_omp_parallel): Convert to tuples.
	(gimplify_omp_workshare): Remove redundant retval.
	(gimplify_expr): Adapt to lack of retval for gimplify_omp_variable and
	gimplify_omp_workshare.
	Abort on OMP_ATOMIC_{LOAD,STORE} case.

2008-01-21  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @131695

	* configure.ac (ACX_PKGVERSION): Update revision merge
	string.
	* configure: Regenerate.

2008-01-15  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-01/msg00674.html

	* tree-into-ssa.c (mark_def_sites): Force operand scan.
	* gimple.def (GIMPLE_ASSIGN): Move into section of
	statements with memory operands.
	* gimple-dummy.c (remove_unused_locals): Remove.
	* tree-flow-inline.h (noreturn_call_p,
	mark_stmt_modified, update_stmt, update_stmt_if_modified,
	stmt_modified_p): Remove.
	* tree-ssa-live.c: Convert to tuples.
	* gimple.c (gimple_set_modified): Replace
	mark_stmt_modified.  Update all callers.
	(gimple_remove): Call free_stmt_operands.
	* gimple.h: Include tree-ssa-operands.h
	Move extern function declarations earlier in the file.
	(GIMPLE_CHECK2): Remove.
	(GIMPLE_RANGE_CHECK): Remove.
	(struct gimple_statement_with_ops): Fix GTY markers.
	(struct gimple_statement_with_memory_ops): Likewise.
	(gimple_modified_p): Replace stmt_modifed_p.  Update all
	users.
	(update_stmt): Move from tree-flow-inline.h.  Update all
	users.
	(update_stmt_if_modified): Likewise.
	(gimple_has_ops): Use range GIMPLE_COND ... GIMPLE_RETURN
	(gimple_has_mem_ops): Use range GIMPLE_ASSIGN ... GIMPLE_RETURN
	(gimple_num_ops): Call gimple_has_ops.
	(gimple_ops): Likewise.
	(gimple_op): Likewise.
	(gimple_op_ptr): Likewise.
	(gimple_set_op): Likewise.
	(gimple_set_addresses_taken): Remove.  Update all users.
	(gimple_add_to_addresses_taken): Likewise.
	(gimple_call_noreturn_p): Replace noreturn_call_p.
	Update all users.
	(gimple_phi_arg): Assert that INDEX is smaller than
	CAPACITY.
	* passes.c (init_optimization_passes): Enable
	pass_referenced_vars, pass_reset_cc_flags and pass_build_ssa.
	* tree-ssa-operands.c (gimple_set_stored_syms): Do not
	free the STORES field if SYMS is empty.
	(gimple_set_loaded_syms): Likewise.
	(finalize_ssa_stmt_operands): Only call
	finalize_ssa_vdefs and finalize_ssa_vuses if STMT has
	memory operands.
	(get_expr_operands): Handle CASE_LABEL_EXPR.
	(free_stmt_operands): Free bitmaps ADDRESSES_TAKEN,
	STORES and LOADS.
	(gimple_add_to_addresses_taken): Rename from
	add_to_addressable_set.

2008-01-14  Aldy Hernandez  <aldyh@redhat.com>

	* tree-dfa.c (dump_dfa_stats): Add %z modifier to size_t argument.

2008-01-11  Andrew MacLeod  <amacleod@redhat.com>
	    Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-01/msg00493.html

	* tree.h (struct ssa_use_operand_d): Replace field STMT
	with a union field LOC containing the fields STMT and
	SSA_NAME.
	Update all users.
	* tree-flow.h (struct immediate_use_iterator_d): Document
	how immediate use iteration works.

2008-01-10  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-01/msg00444.html

	* Makefile.in (tree-complex.o): Remove gt-tree-vect-generic.h

2008-01-10  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-01/msg00436.html

	* tree-ssa-operands.h (PHI_RESULT_PTR): Call
	gimple_phi_result_ptr.
	(PHI_ARG_DEF_PTR): Call gimple_phi_arg_imm_use_ptr.
	(free_ssa_operands): Remove.
	(copy_virtual_operands, create_ssa_artificial_load_stmt,
	add_to_addressable_set, discard_stmt_changes,
	FOR_EACH_PHI_OR_STMT_USE, FOR_EACH_PHI_OR_STMT_DEF): Convert
	to use 'gimple'.
	* tree-into-ssa.c: Convert to use 'gimple'.
	(rewrite_uses_p): New.  Use instead of REWRITE_THIS_STMT.
	(set_rewrite_uses): New.  Use instead of REWRITE_THIS_STMT.
	(register_defs_p): New.  Use instead of
	REGISTER_DEFS_IN_THIS_STMT.
	(set_register_defs): New.  Use instead of
	REGISTER_DEFS_IN_THIS_STMT.
	(REWRITE_THIS_STMT): Remove.
	(REGISTER_DEFS_IN_THIS_STMT): Remove.
	* tree-pretty-print.c (dump_vops): Remove.  Update all
	users.
	(dump_generic_node): Do not handle PHI_NODE.
	* tree.c (tree_node_kind): Remove "phi_nodes" entry.
	(tree_code_size): Do not handle PHI_NODE.
	(tree_size): Likewise.
	(make_node_stat): Likewise.
	(tree_node_structure): Likewise.
	(phi_node_elt_check_failed): Remove.
	* tree.h (PHI_NODE_ELT_CHECK): Remove.
	(PHI_RESULT_TREE): Remove.
	(PHI_ARG_DEF_TREE): Remove.
	(PHI_CHAIN): Remove.
	(PHI_NUM_ARGS): Remove.
	(PHI_ARG_CAPACITY): Remove.
	(PHI_ARG_ELT): Remove.
	(PHI_ARG_EDGE): Remove.
	(PHI_BB): Remove.
	(PHI_ARG_IMM_USE_NODE): Remove.
	(struct tree_phi_node): Remove.
	(union tree_node): Remove field 'phi'.
	(release_phi_node): Change argument to gimple.
	(duplicate_ssa_name): Change second argument to gimple.
	(swap_tree_operands): Remove.
	(enum tree_node_kind): Remove phi_kind entry.
	* tree-phinodes.c: Convert to use gimple.
	* tree-gimple.c (is_gimple_stmt): Do not handle PHI_NODE.
	* cgraphunit.c (cgraph_process_new_functions): Call
	gimple_unreachable to mark unconverted sections.
	(verify_cgraph_node): Do not ICE if THIS_CFUN is NULL.
	Convert statement verification to use gimple.
	(cgraph_expand_function): Call gimple_unreachable to mark
	unconverted sections.
	* tree-ssa-propagate.c: Convert to use gimple.
	(STMT_IN_SSA_EDGE_WORKLIST): Use flag GF_PLF_1 as marker.
	(DONT_SIMULATE_AGAIN): Remove.  Use gimple_visited.
	* gimple-dummy.c: Remove converted functions.
	* tree-ssa-alias.c (may_be_aliased): Re-enable.
	* tree-flow-inline.h (gimple_phi_arg_imm_use_ptr): Rename
	from get_phi_arg_def_ptr.
	(bsi_start, bsi_after_labels, bsi_last, bsi_end_p,
	bsi_next, bsi_prev, bsi_stmt, bsi_stmt_ptr): Remove.
	* tree.def (PHI_NODE): Remove.  Update most users.
	* tree-dfa.c: Convert to use gimple.
	* common.opt (fgimple-conversion): Default to 0.
	* tree-ssa.c: Convert to use gimple.
	* tree-optimize.c (pass_early_local_passes,
	pass_all_early_optimization, pass_init_datastructures):
	Enable.
	* tree-flow.h (tree_ann_type): Remove STMT_ANN.  Update
	all users.
	(struct stmt_ann_d): Remove.  Update all users.
	* Makefile.in (GIMPLE_H): Add tree-ssa-operands.h.
	(tree-ssa-copy.o, tree-phi-nodes.o, tree-complex.o):
	Re-enable.
	* gimple.h (enum plf_mask): Define.
	(GF_NO_WARNING): Remove
	(bb_seq): Return NULL if BB->il.gimple is NULL.
	(struct gimple_statement_base): Add bitfields no_warning,
	visited, unused_1, unused_2, unused_3, unused_4 and plf.
	(gimple_flags, gimple_set_flags, gimple_add_flag):
	Remove.  Update all users.
	(gimple_set_visited): New.
	(gimple_visited_p): New.
	(gimple_set_plf): New.
	(gimple_plf): New.
	(gimple_has_volatile_ops): New.
	(gimple_set_has_volatile_ops): New.
	(gimple_addresses_taken): New.
	(gimple_set_addresses_taken): New.
	(gimple_add_to_addresses_taken): New.
	(gimple_phi_result_ptr): New.
	(gsi_stmt_ptr): New.
	(gsi_bb): New.
	(gsi_seq): New.
	* tree-cfg.c (execute_build_cfg): Do not call
	gimple_set_body after building the CFG.
	(pass_build_cfg): Do not require PROP_gimple_leh.
	(gimplify_val): Convert to gimple.
	* passes.c (init_optimization_passes): Disable all of
	pass_all_early_optimizations.
	* tree-ssanames.c: Convert to gimple.
	* tree-ssa-operands.c: Convert to gimple.
	(gimple_set_stored_syms): New.
	(gimple_set_loaded_syms): New.

2008-01-03  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @131303

	* configure.ac (ACX_PKGVERSION): Update revision merge
	string.
	* configure: Regenerate.

2007-12-20  Diego Novillo  <dnovillo@google.com>

	* Makefile.in (builtins.o-warn, expr.o-warn): Add
	-Wno-error.

2007-12-05  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2007-12/msg00221.html

	* gimple.c (walk_gimple_asm): Guard against WI being
	NULL.
	(walk_gimple_stmt): Likewise.

2007-12-05  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2007-12/msg00216.html

	* tree.h (gimple_unreachable_1): Declare.
	(gimple_unreachable): Define.
	Replace calls to gcc_unreachable with gimple_unreachable
	in unconverted code.
	* gimple-dummy.c (gimple_unreachable_1): New function.
	* common.opt (fgimple-only): Remove.
	(fgimple-conversion): Define.
	* Makefile.in (STRICT_WARN): Add -Wno-return-type.

2007-11-30  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @130470

	* configure.ac (ACX_PKGVERSION): Update revision merge
	string.
	* configure: Regenerate.
	* tree-inline.c (copy_decl_no_change,
	copy_decl_for_dup_finish): Re-enable.

2007-11-26  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.h (gimple_bind_block): Update comment.
	
2007-11-19  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @130291.

	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.

2007-11-19  Diego Novillo  <dnovillo@google.com>

	* tree-flow-inline.h (get_lineno): Call IS_LOCATION_EMPTY
	and LOCATION_LINE instead of accessing location fields
	directly.
	* gimple-low.c (lower_function_body): Use
	UNKNOWN_LOCATION instead of unknown_location.

2007-11-16  Diego Novillo  <dnovillo@google.com>

	* cgraph.c (cgraph_create_edge): Call gimple_body
	instead of DECL_SAVED_TREE.
	(dump_cgraph_node): Likewise.
	* cgraphunit.c (verify_cgraph_node): Likewise.
	(cgraph_analyze_functions): Likewise.
	(cgraph_mark_functions_to_output): Likewise.
	(cgraph_optimize): Likewise.
	* tree-eh.c (lower_eh_constructs): Add notes for future
	changes to calls to DECL_SAVED_TREE.
	(refactor_eh_r): Likewise.
	* cfgexpand.c (gimple_to_tree): New function.
	(maybe_dump_rtl_for_gimple_stmt): Rename from
	maybe_dump_rtl_for_tree_stmt.  Convert to tuples.
	(label_rtx_for_bb): Convert to tuples.
	(expand_gimple_cond): Rename from
	expand_gimple_cond_expr.  Convert to tuples.
	(expand_gimple_tailcall): Convert to tuples.
	(expand_gimple_basic_block): Convert to tuples.
	(discover_nonconstant_array_refs_r): Convert to tuples.
	(discover_nonconstant_array_refs): Convert to tuples.
	* tree-mudflap.c (execute_mudflap_function_decls): Add
	deprecation comment for DECL_SAVED_TREE call.
	* tree-inline.c (copy_generic_body): Call gimple_body
	instead of DECL_SAVED_TREE.
	(inlinable_function_p): Likewise.
	(clone_body): Add deprecation comment for DECL_SAVED_TREE
	call.
	* tree-cfg.c (remove_useless_stmts_bind): Call
	gimple_body instead of DECL_SAVED_TREE.
	(remove_useless_stmts): Likewise.

2007-11-10  Aldy Hernandez  <aldyh@redhat.com>

	* tree-cfg.c (verify_types_in_gimple_call): OBJ_TYPE_REF are allowed
	as function types.

	[objc]
	* objc-act.c (objc_gimplify_expr): Change pre and post to sequences.
	* objc-act.h (objc_gimplify_expr): Change prototype accordingly.
	
	[testsuite]
	* lib/objc.exp: Set -I regardless of libobjc.

2007-11-10  Aldy Hernandez  <aldyh@redhat.com>

	* tree-gimple.h (tree_annotate_all_with_locus): New.
	* gimple-dummy.c: Add omp_reduction_init and
	diagnose_omp_structured_block_errors.
	* gimplify.c (tree_should_carry_locus_p): New.
	(tree_annotate_one_with_locus): New.
	(tree_annotate_all_with_locus): New.

2007-11-08  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @129982

	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.

2007-11-01  Diego Novillo  <dnovillo@google.com>

	* cgraphbuild.c (initialize_inline_failed): Re-enable.
	(build_cgraph_edges): Adapt to use tuples.
	(pass_build_cgraph): Re-enable.
	(rebuild_cgraph_edges): Adapt to use tuples.
	* cgraph.c (cgraph_release_function_body): Also NULLify the
	gimple body.
	(debug_cgraph_node): New.
	(debug_cgraph): New.
	* cgraph.h (struct cgraph_edge): Change field CALL_STMT to
	type gimple.  Update all users.
	* cgraphunit.c (cgraph_analyze_functions): If DECL does not
	have a struct function entry, discard it.
	* gimple.h (GF_CALL_CANNOT_INLINE): New.
	(gimple_call_lhs_ptr): New.
	(gimple_call_mark_uninlinable): New.
	(gimple_call_cannot_inline_p): New.
	(struct walk_stmt_info): Add field PSET.

2007-11-01  Diego Novillo  <dnovillo@google.com>

	* tree-optimize.c (tree_rest_of_compilation): Call
	gimple_set_body to remove the body if not inlining.
	* gimple.c (walk_gimple_stmt): Update documentation.
	Pass WI->PSET to every call to walk_tree.

2007-11-01  Diego Novillo  <dnovillo@google.com>

	* langhooks.h (struct lang_hooks_for_callgraph): Remove third
	argument from function pointer ANALYZE_EXPR.  Update all
	users.

2007-10-30  Diego Novillo  <dnovillo@google.com>

	* gimple.c (gimple_build_omp_return): Call
	gimple_omp_return_set_nowait if needed.
	* gimple.h (GIMPLE_CHECK, GIMPLE_CHECK2, GIMPLE_RANGE_CHECK):
	Move earlier in the file.
	(GF_NO_WARNING): Change to static const unsigned.
	(GF_CALL_TAILCALL): New.
	(GF_OMP_PARALLEL_COMBINED): Rename from
	OMP_PARALLEL_COMBINED_FLAG.  Change to static const unsigned.
	Update all users.
	(GF_OMP_RETURN_NOWAIT): Rename from OMP_RETURN_NOWAIT_FLAG.
	Change to static const unsigned.
	Update all users.
	(GF_OMP_SECTION_LAST): Rename from OMP_SECTION_LAST_FLAG.
	Change to static const unsigned.
	Update all users.
	(gimple_omp_return_set_nowait): New.
	(gimple_call_set_tail): New.
	(gimple_call_tail_p): New.

2007-10-30  Aldy Hernandez  <aldyh@redhat.com>

	* gimplify.c (get_tmp_var_for): Remove reference to IS_FORMAL in
	opening comment.
	(gimplify_return_expr): Return GS_ERROR if we have errored.
	(gimplify_statement_list): Handle case where voidify_wrapper returns a
	temporary.
	(gimplify_call_expr): Return gracefully on error.
	(gimplify_cond_expr): Same.
	* gimple.h (gimple_call_return_type): Do not error on methods.

2007-10-29  Diego Novillo  <dnovillo@google.com>
	    Tom Tromey  <tromey@redhat.com>

	* gimple.h (gimple_locus): Update comment.
	(gimple_set_locus): Likewise.
	(gimple_locus_empty_p): Add support for mapped locations.

2007-10-29  Diego Novillo  <dnovillo@google.com>

	* tree-optimize.c (execute_cleanup_cfg_pre_ipa): Re-enable.
	* gimple.c (walk_gimple_asm): Tidy comment.

2007-10-29  Aldy Hernandez  <aldyh@redhat.com>

	* tree-gimple.h (build_gimple_eh_filter_tree): Remove.
	* gimplify.c (build_gimple_eh_filter_tree): Move from here...
	* cp/cp-gimplify.c: ...to here.
	(cp_gimplify_init_expr): Convert to tuples.
	(gimplify_must_not_throw_expr): Make function return a
	gimplify_status and convert to tuples.
	(cp_gimplify_expr): Convert MUST_NOT_THROW_EXPR, INIT_EXPR, and
	USING_STMT to tuples.

2007-10-28  Aldy Hernandez  <aldyh@redhat.com>

	* gimplify.c (gimplify_body): Make work when body contains more than
	a GIMPLE_BIND statement.

2007-10-26  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @129659.

	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.

2007-10-26  Diego Novillo  <dnovillo@google.com>

	* gimple-low.c (lower_builtin_setjmp): Pass ARG to first
	call to gimple_build_call.

2007-10-17  Aldy Hernandez  <aldyh@redhat.com>

	* tree-gimple.c (get_gimple_rhs_class): Add case for EXC_PTR_EXPR.
	* gimplify.c (gimple_conditional_context): Enable.
	(gimplify_cleanup_point_expr): Enable.  Adjust for tuples.
	(gimple_push_cleanup): Enable.
	(gimplify_target_expr): Do not gimplify TARGET_EXPR_CLEANUP before
	calling gimple_push_cleanup.
	(gimplify_expr): Rename `try' to `try_'.
	Enable CLEANUP_POINT_EXPR case.
	Gimplify CATCH_EXPR and EH_FILTER_EXPR cases correctly.

2007-10-17  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.c (gimple_size): Handle GIMPLE_WITH_CLEANUP_EXPR.
	* gimple.h (struct gimple_statement_catch): Make handler a structure,
	not a pointer.
	(struct gimple_statement_eh_filter): Make failure a structure, not a
	pointer.
	document EH_FILTER_MUST_NOT_THROW subcode flag.
	(gimple_catch_handler): Handler is now a struct.
	(gimple_catch_set_handler): Same.
	(gimple_eh_filter_failure): Failure is now a struct.
	(gimple_eh_filter_set_failure): Same.
	(gimple_eh_filter_must_not_throw): New.
	(gimple_eh_filter_set_must_not_throw): New.
	(gsi_next): Update comment.
	(gsi_prev): Same.
	* tree-cfg.c (verify_types_in_gimple_seq_2): Handle GIMPLE_EH_FILTER.

2007-10-18  Diego Novillo  <dnovillo@google.com>

	* gimple-iterator.c (gsi_delink): Remove.
	* gimple.h (gsi_delink): Remove.

2007-10-17  Diego Novillo  <dnovillo@google.com>

	* coretypes.h (const_gimple_seq): New typedef.
	* gimple.h (gimple_seq_first): Constify argument.
	(gimple_seq_last): Likewise.
	(gimple_seq_copy): Likewise.
	(gimple_seq_empty_p): Likewise.
	(gimple_set_prev): Rename from set_gimple_prev.
	Update all users.
	(gimple_set_next): Rename from set_gimple_next.
	Update all users.
	(gimple_set_flags): Rename from set_gimple_flags.
	Update all users.
	(gimple_add_flag): Rename from add_gimple_flag.
	Update all users.
	(gimple_set_subcode): Rename from set_gimple_subcode.  
	Update all users.
	(gimple_set_block): Rename from set_gimple_block.
	Update all users.
	(gimple_set_locus): Rename from set_gimple_locus.
	Update all users.
	(gimple_locus_empty_p): Constify argument.
	(gimple_has_ops): Likewise.
	(gimple_has_mem_ops): Likewise.
	(gimple_def_ops): Likewise.
	(gimple_set_def_ops): Rename from set_gimple_def_ops.
	Update all users.
	(gimple_use_ops): Constify argument.
	(gimple_set_use_ops): Rename from set_gimple_use_ops.
	Update all users.
	(gimple_vuse_ops): Constify argument.
	(gimple_set_vuse_ops): Rename from set_gimple_vuse_ops.
	Update all users.
	(gimple_vdef_ops): Constify argument.
	(gimple_set_vdef_ops): Rename from set_gimple_vdef_ops.
	Update all users.
	(gimple_loaded_syms): Constify argument.
	(gimple_stored_syms): Constify argument.
	(gimple_modified): Constify argument.
	(gimple_set_modified): Rename from set_gimple_modified.
	Update all users.
	(gimple_omp_return_nowait_p): Constify argument.
	(gimple_omp_section_last_p): Constify argument.
	(gimple_omp_parallel_combined_p): Constify argument.
	(gimple_build_return): Rename from build_gimple_return.
	Update all users.
	(gimple_build_assign): Rename from build_gimple_assign.
	Update all users.
	(gimple_build_assign_with_ops): Rename from
	build_gimple_assign_with_ops.
	Update all users.
	(gimple_build_call_vec): Rename from build_gimple_call_vec.
	Update all users.
	(gimple_build_call): Rename from build_gimple_call.
	Update all users.
	(gimple_build_cond): Rename from build_gimple_cond.
	Update all users.
	(gimple_build_label): Rename from build_gimple_label.
	Update all users.
	(gimple_build_goto): Rename from build_gimple_goto.
	Update all users.
	(gimple_build_nop): Rename from build_gimple_nop.
	Update all users.
	(gimple_build_asm): Rename from build_gimple_asm.
	Update all users.
	(gimple_build_asm_vec): Rename from build_gimple_asm_vec.
	Update all users.
	(gimple_build_catch): Rename from build_gimple_catch.
	Update all users.
	(gimple_build_eh_filter): Rename from build_gimple_eh_filter.
	Update all users.
	(gimple_build_try): Rename from build_gimple_try.
	Update all users.
	(gimple_build_wce): Rename from build_gimple_wce.
	Update all users.
	(gimple_build_resx): Rename from build_gimple_resx.
	Update all users.
	(gimple_build_switch): Rename from build_gimple_switch.
	Update all users.
	(gimple_build_switch_vec): Rename from
	build_gimple_switch_vec.  Update all users.
	(gimple_build_omp_parallel): Rename from
	build_gimple_omp_parallel.  Update all users.
	(gimple_build_omp_for): Rename from build_gimple_omp_for.
	Update all users.
	(gimple_build_omp_critical): Rename from
	build_gimple_omp_critical.
	Update all users.
	(gimple_build_omp_section): Rename from
	build_gimple_omp_section.  Update all users.
	(gimple_build_omp_continue): Rename from
	build_gimple_omp_continue.  Update all users.
	(gimple_build_omp_master): Rename from
	build_gimple_omp_master.  Update all users.
	(gimple_build_omp_ordered): Rename from
	build_gimple_omp_ordered.  Update all users.
	(gimple_build_omp_sections): Rename from
	build_gimple_omp_sections.  Update all users.
	(gimple_build_omp_single): Rename from
	build_gimple_omp_single.  Update all users.
	(gimple_set_body): Rename from set_gimple_body.  Update all
	users.
	(gimple_set_bb): Rename from set_gimple_bb.  Update all users.
	(is_gimple_operand): Constify argument.
	(gimple_ops): Likewise.
	(gimple_op_ptr): Likewise.
	(gimple_call_lhs): Likewise.
	(gimple_call_return_type): Likewise.
	(gimple_call_chain): Likewise.
	(gimple_call_arg_ptr): Likewise.
	(gimple_cond_true_label): Likewise.
	(gimple_bind_vars): Likewise.
	(gimple_bind_set_body): Likewise.
	(gimple_bind_block): Likewise.
	(gimple_asm_ninputs): Likewise.
	(gimple_asm_noutputs): Likewise.
	(gimple_asm_nclobbers): Likewise.
	(gimple_asm_input_op): Likewise.
	(gimple_asm_output_op): Likewise.
	(gimple_asm_clobber_op): Likewise.
	(gimple_asm_string): Likewise.
	(gimple_asm_volatile_p): Likewise.
	(gimple_catch_types): Likewise.
	(gimple_catch_handler): Likewise.
	(gimple_eh_filter_types): Likewise.
	(gimple_eh_filter_failure): Likewise.
	(gimple_try_kind): Likewise.
	(gimple_try_set_eval): Likewise.
	(gimple_try_set_cleanup): Likewise.
	(gimple_wce_set_cleanup): Likewise.
	(gimple_wce_cleanup_eh_only): Likewise.
	(gimple_phi_capacity): Likewise.
	(gimple_phi_num_args): Likewise.
	(gimple_phi_result): Likewise.
	(gimple_resx_region): Likewise.
	(gimple_switch_num_labels): Likewise.
	(gimple_switch_label): Likewise.
	(gimple_switch_default_label): Likewise.
	(gimple_omp_set_body): Likewise.
	(gimple_omp_critical_name): Likewise.
	(gimple_omp_for_clauses): Likewise.
	(gimple_omp_for_index): Likewise.
	(gimple_omp_for_initial): Likewise.
	(gimple_omp_for_final): Likewise.
	(gimple_omp_for_incr): Likewise.
	(gimple_omp_for_set_pre_body): Likewise.
	(gimple_omp_parallel_clauses): Likewise.
	(gimple_omp_parallel_child_fn): Likewise.
	(gimple_omp_parallel_data_arg): Likewise.
	(gimple_omp_single_clauses): Likewise.
	(gimple_omp_sections_clauses): Likewise.
	(gimple_omp_for_cond): Likewise.
	(gimple_return_retval): Likewise.
	(is_gimple_omp): Likewise.
	(gimple_nop_p): Likewise.
	(gimple_expr_type): Likewise.

2007-10-17  Diego Novillo  <dnovillo@google.com>

	* tree-ssa-loop-manip.c (gimple_duplicate_loop_to_header_edge): Rename
	from tree_duplicate_loop_to_header_edge.
	Update all users.
	* value-prof.c: Convert and enable all functions in the file.
	(gimple_divmod_fixed_value): Rename from
	tree_divmod_fixed_value.
	(gimple_mod_pow2): Rename from tree_mod_pow2.
	(gimple_mod_subtract): Rename from tree_mod_subtract.
	(gimple_divmod_fixed_value_transform): Rename from
	tree_divmod_fixed_value_transform.
	(gimple_mod_pow2_value_transform): Rename from
	tree_mod_pow2_value_transform.
	(gimple_mod_subtract_transform): Rename from
	tree_mod_subtract_transform.
	(gimple_stringops_transform): Rename from tree_stringops_transform.
	(gimple_ic_transform): Rename from tree_ic_transform.
	Update all users.
	* value-prof.h (gimple_register_value_prof_hooks): Rename from
	tree_register_value_prof_hooks.  Update all users.
	* tree.h (OMP_DIRECTIVE_P): Remove.  Update all users.
	(validate_arglist): Move to gimple.h.
	* builtins.c: (validate_arglist): Change first argument to
	const_gimple.  Disable most callers.
	* gimple.def: Document all GIMPLE codes.
	* tree-gimple.c (is_gimple_operand): New.
	(get_gimple_rhs_class)<ADDR_EXPR>: Accept as a
	GIMPLE_SINGLE_RHS.
	<WITH_SIZE_EXPR>: Likewise.
	(get_gimple_rhs_num_ops): New.
	(is_gimple_call_addr): Tidy.
	* tree-gimple.h (get_gimple_rhs_num_ops): Declare.
	* gimple-dummy.c (free_histograms, stringop_block_profile):
	Remove.
	* gimple-low.c (lower_function_body): Tidy.
	* predict.c (gimple_predicted_by_p): Rename from
	tree_predicted_by_p.  Update all users.
	(gimple_predict_edge): Rename from tree_predict_edge.  Update
	all users.
	* gimple-iterator.c (gsi_link_seq_after): Update documentation.
	(gsi_link_after): Likewise.
	* tree-eh.c (stmt_could_throw_1_p): New.
	(stmt_could_throw_p): New.
	* gimple-pretty-print.c (dump_unary_rhs): Print ADDR_EXPR as
	a single operand.
	(dump_gimple_switch): Support NULL case labels.
	(dump_gimple_asm): Dump outputs first.
	* gimplify.c (compare_case_labels): Make the default label
	sort first.
	(sort_case_labels): Do not special case the default label.
	(gimplify_init_ctor_eval): Gimplify initializer expressions.
	(gimplify_modify_expr): Unshare the operands before setting
	them on the new GIMPLE_ASSIGN statement.
	(gimplify_asm_expr): NULLify the chain on operands before
	putting them on the input/output vectors.
	* tree-cfgcleanup.c: Convert and enable CFG cleanup functions.
	(cleanup_control_expr_graph): Call gimple_fold.
	* tree-flow.h (gimple_block_label): Rename from
	tree_block_label.  Update all users.
	(gimple_duplicate_sese_region): Rename from
	tree_duplicate_sese_region.  Update all users.
	(gimple_duplicate_sese_tail): Rename from
	tree_duplicate_sese_tail.  Update all users.
	(gimple_purge_dead_abnormal_call_edges): Rename from
	tree_purge_dead_abnormal_call_edges.  Update all users.
	(gimple_purge_all_dead_eh_edges): Rename from
	tree_purge_all_dead_eh_edges.  Update all users.
	(stmt_could_throw_p): Declare.
	(add_stmt_to_eh_region_fn): Move from except.h.
	(remove_stmt_from_eh_region_fn): Likewise.
	(lookup_stmt_eh_region_fn): Likewise.
	(lookup_stmt_eh_region): Likewise.
	(verify_eh_edges): Likewise.
	* Makefile.in (GIMPLE_H): Add dependencies on GGC_H, TM_H and
	TARGET_H.
	(ipa-inline.o): Add dependency on TREE_FLOW_H.
	(out_object_file): Add dependency on TREE_GIMPLE_H.
	* gimple.c (gimple_set_code): Rename from set_gimple_code.
	(gimple_size): New.
	(gimple_alloc): New.
	(gimple_alloc_ops): New.
	(build_gimple_with_ops): Call them.
	(build_gimple_return): Only call gimple_return_set_retval if
	RETVAL is not NULL.
	(build_gimple_call): Validate argument FN.
	(extract_ops_from_tree): New.
	(build_gimple_assign_with_ops): New.
	(build_gimple_assign): Call them.
	(build_gimple_nop):  Call gimple_alloc.
	(build_gimple_bind): Likewise.
	(build_gimple_asm_1): Tidy.
	(build_gimple_asm_vec): Tidy.
	(build_gimple_asm): Tidy.
	(build_gimple_catch): Call gimple_alloc.
	(build_gimple_eh_filter): Likewise.
	(build_gimple_try): Likewise.
	(build_gimple_wce): Likewise.
	(build_gimple_phi): Remove.
	(build_gimple_resx): Call gimple_alloc.
	(build_gimple_switch_1): Tidy.
	(build_gimple_switch): Tidy.
	(build_gimple_omp_critical): Call gimple_alloc.
	(build_gimple_omp_for): Likewise.
	(build_gimple_omp_parallel): Likewise.
	(build_gimple_omp_section): Likewise.
	(build_gimple_omp_master): Likewise.
	(build_gimple_omp_continue): Likewise.
	(build_gimple_omp_ordered): Likewise.
	(build_gimple_omp_return): Likewise.
	(build_gimple_omp_sections): Likewise.
	(build_gimple_omp_single): Likewise.
	(gimple_check_failed): Change GS to const_gimple.  Update all
	users.
	(gimple_range_check_failed): Likewise.
	(walk_gimple_seq): Change return type to tree.  Update all
	users.
	If the call to walk_gimple_stmt returns non-NULL,
	return it immediately.
	(walk_gimple_asm): Change return type to tree.  Update all
	users.
	If the call to walk_tree returns non-NULL, return it.
	(walk_gimple_stmt): Likewise.
	(gimple_fold): New.
	(gimple_assign_set_rhs_from_tree): New.
	(gimple_assign_set_rhs_with_ops): New.
	(gimple_copy): New.
	* basic-block.h (gimple_predicted_by_p): Rename from
	tree_predicted_by_p.  Update all users.
	(gimple_predict_edge): Rename from tree_predict_edge.  Update
	all users.
	* gimple.h: Add documentation to all inline functions.
	(gimple_seq_first): Return NULL if S is NULL.
	(gimple_seq_last): Likewise.
	(GF_ASM_VOLATILE): Define.
	(GF_NO_WARNING): Rename from GIMPLE_NO_WARNING.  Update all
	users.
	(build_gimple_assign_with_ops): Declare.
	(build_gimple_asm): Change unsigned arguments to size_t.
	Update all users.
	(build_gimple_switch): Likewise.
	(build_gimple_phi): Remove.
	(validate_arglist): Declare.
	(gimple_fold): Declare.
	(gimple_assign_set_rhs_from_tree): Declare.
	(gimple_assign_set_rhs_with_ops): Declare.
	(gimple_copy): Declare.
	(is_gimple_operand): Declare.
	(gimple_num_ops): Change argument to const_gimple.
	Return 0 if GS is not one of the statements that has tree
	operands.
	(gimple_ops): New.
	(gimple_op): Change argument to const_gimple.
	If GS is not a statement that has tree operands, return NULL.
	(gimple_op_ptr): Likewise.
	(gimple_assign_subcode): Change argument to const_gimple.
	(gimple_assign_operand): Remove.  Update all users.
	(gimple_assign_set_operand): Remove.  Update all users.
	(gimple_assign_lhs): Change argument type to const_gimple.
	(gimple_assign_rhs1): Likewise.
	(gimple_assign_rhs2): Likewise.
	(gimple_assign_set_rhs1): Assert that RHS is a valid operand.
	(gimple_assign_set_rhs2): Likewise.
	(gimple_call_lhs): Call gimple_op.
	(gimple_call_set_lhs): Assert that LHS is a valid operand.
	Call gimple_set_op.
	(gimple_call_set_fn): New.
	(gimple_call_fndecl): Change argument type to const_gimple.
	Call gimple_call_fn.
	(gimple_call_chain): Call gimple_op.
	(gimple_call_set_chain): Assert that CHAIN is valid.
	Call gimple_set_op.
	(gimple_call_nargs): Change argument to const_gimple.
	Call gimple_op.
	(gimple_call_arg_ptr): Call gimple_op_ptr.
	(gimple_call_set_arg): Assert that ARG is valid.
	Call gimple_set_op.
	(gimple_cond_code): Change argument to const_gimple.
	(gimple_cond_lhs): Change argument to const_gimple.
	(gimple_cond_set_lhs): Assert that the operand is valid.
	Call gimple_set_op.
	(gimple_cond_rhs): Change argument to const_gimple.
	Call gimple_op.
	(gimple_cond_true_label): Call gimple_op.
	(gimple_cond_false_label): Likewise.
	(gimple_label_label): Likewise.
	(gimple_cond_set_true_label): Assert that the operand is
	valid.
	Call gimple_set_op.
	(gimple_cond_set_false_label): Likewise.
	(gimple_goto_dest): Change argument to const_gimple.
	Call gimple_set_op.
	(gimple_goto_set_dest): Assert that the operand is valid.
	Call gimple_set_op.
	(gimple_asm_ninputs): Change return type to size_t.  Update
	all users.
	(gimple_asm_noutputs): Likewise.
	(gimple_asm_nclobbers): Rename from gimple_asm_nclobbered.
	Change return type to size_t.
	Update all users.
	(gimple_asm_set_input_op): Assert that the argument is
	valid.
	(gimple_asm_set_output_op): Likewise.
	(gimple_asm_set_clobber_op): Likewise.
	(gimple_asm_volatile_p): New.
	(gimple_asm_set_volatile): New.
	(gimple_asm_clear_volatile): New.
	(gimple_phi_set_capacity): Remove.
	(gimple_phi_set_nargs): Remove.
	(gimple_expr_type): New.
	(struct walk_stmt_info): Remove fields want_bind_expr and
	want_return_expr.  Update all users.
	* tree-cfg.c: Convert all functions for CFG cleanup and
	verification.
	(gimple_redirect_edge_and_branch): Rename from
	tree_redirect_edge_and_branch.
	(gimple_try_redirect_by_replacing_jump): Rename from
	tree_try_redirect_by_replacing_jump.
	(gimple_verify_flow_info): Rename from tree_verify_flow_info.
	(gimple_make_forwarder_block): Rename from
	tree_make_forwarder_block.
	(gimple_cfg2vcg): Rename from tree_cfg2vcg.
	(gimple_merge_blocks): Rename from tree_merge_blocks.
	(gimple_can_merge_blocks_p): Rename from tree_merge_blocks_p.
	(gimple_can_remove_branch_p): Rename from tree_can_remove_branch_p.
	(gimple_redirect_edge_and_branch): Rename from
	tree_redirect_edge_and_branch.
	(gimple_move_block_after): Rename from tree_move_block_after.
	(gimple_predict_edge): Rename from tree_predict_edge.
	(gimple_predicted_by_p): Rename from tree_predicted_by_p.
	(gimple_duplicate_bb): Rename from tree_duplicate_bb.
	(gimple_can_duplicate_bb_p): Rename from tree_can_duplicate_bb_p.
	(gimple_split_edge): Rename from tree_split_edge.
	(gimple_make_forwarder_block): Rename from tree_make_forwarder_block.
	(gimple_block_ends_with_call_p): Rename from
	tree_block_ends_with_call_p.
	(gimple_block_ends_with_condjump_p): Rename from
	tree_block_ends_with_condjump_p.
	(gimple_flow_call_edges_add): Rename from
	tree_flow_call_edges_add.
	(gimple_execute_on_growing_pred): Rename from
	tree_execute_on_growing_pred.
	(gimple_execute_on_shrinking_pred): Rename from
	tree_execute_on_shrinking_pred.
	(gimple_duplicate_loop_to_header_edge): Rename from
	tree_duplicate_loop_to_header_edge.
	(gimple_lv_add_condition_to_bb): Rename from
	tree_lv_add_condition_to_bb.
	(gimple_lv_adjust_loop_header_phi): Rename from
	tree_lv_adjust_loop_header_phi.
	(struct pass_build_cfg): Enable TODO_verify_stmts and
	TODO_cleanup_cfg.
	* passes.c (execute_function_todo): Enable call to
	cleanup_tree_cfg.

2007-10-17  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.def: Add GIMPLE_WITH_CLEANUP_EXPR.
	* gsstruct.def: Add GSS_WCE.
	* gimple-iterator.c (gsi_delink): New.
	(gsi_split_seq_*): Update comment.
	* gimple.c (gss_for_code): Handle GIMPLE_WCE.  Adjust whitespace.
	(build_gimple_wce): New.
	* gimple.h (struct gimple_statement_wce): New.
	(union gimple_statement_d): Add gimple_wce.
	(build_gimple_wce): Protoize.
	(gimple_wce_cleanup): New.
	(gimple_wce_set_cleanup): New.
	(gimple_wce_cleanup_eh_only): New.
	(gimple_wce_set_cleanup_eh_only): New.
	(gsi_delink): Protoize.

2007-10-12  Aldy Hernandez  <aldyh@redhat.com>

	* Makefile.in (GIMPLE_H): Depend on TARGET_H.
	* gimple.h (gsi_alloc): New.
	(_ALLOC_GSI): Remove.
	Replace _ALLOC_GSI uses by gsi_alloc.

2007-10-12  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.h (_ALLOC_GSI): New.
	Use it throughout when allocating a new gimple_stmt_iterator.

2007-10-11  Aldy Hernandez  <aldyh@redhat.com>

	Merge with mainline @129233.

	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.

2007-10-11  Aldy Hernandez  <aldyh@redhat.com>

	* cfg.c: Include tree-flow.h.
	(remove_edge_raw): Call redirect_edge_var_map_clear.
	(redirect_edge_succ_nodup): Call redirect_edge_var_map_dup.
	* tree-flow-inline.h (redirect_edge_var_map_def): New.
	(redirect_edge_var_map_result): New.
	* tree-cfgcleanup.c (remove_forwarder_block_with_phi): Replace
	PENDING_STMT use with redirect_edge_var_map_*.
	* tree-ssa.c (edge_var_maps): New definition.
	(redirect_edge_var_map_add): New.
	(redirect_edge_var_map_clear): New.
	(redirect_edge_var_map_dup): New.
	(redirect_edge_var_map_vector): New.
	(redirect_edge_var_map_destroy): New.
	(ssa_redirect_edge): Replace PENDING_STMT use with
	redirect_edge_var_map_*.
	(flush_pending_stmts): Same.
	(delete_tree_ssa): Destroy edge var map.
	* tree-flow.h (struct _edge_var_map): New.
	Define edge_var_map vector type.
	Declare redirect_edge_var_map_* prototypes.
	* Makefile.in (cfg.o): Depend on TREE_FLOW_H.
	* tree-cfg.c (reinstall_phi_args): Replace
	PENDING_STMT use with redirect_edge_var_map_*.

2007-10-02  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @128957.

	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.

2007-09-24  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @128708.
	
	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.

2007-09-24  Diego Novillo  <dnovillo@google.com>

	* gimple.h (gimple_code): Change argument type to
	const_gimple.
	(gimple_flags): Likewise.
	(gimple_subcode): Likewise.
	(gimple_next): Likewise.
	(gimple_prev): Likewise.
	(gimple_bb): Likewise.
	(gimple_block): Likewise.
	(gimple_locus): Likewise.

2007-09-15  Diego Novillo  <dnovillo@google.com>

	* gimple-iterator.c (gsi_replace): Call gsi_insert_before and
	gsi_remove to do the replacement.
	(gsi_insert_before): Take the basic block from the iterator.
	(gsi_insert_after): Likewise.
	* gimple-iterator.h: Move inside gimple.h.
	* tree-eh.c (make_eh_edge, make_eh_edges): Enable.
	* gimple-pretty-print.c (dump_gimple_seq, dump_gimple_cond,
	dump_gimple_bind, dump_gimple_try): Do not handle TDF_DETAILS.
	(dump_gimple_switch): Fix display of case labels.
	(dump_gimple_stmt): Handle TDF_DIAGNOSTIC.
	(pp_cfg_jump): New.
	(dump_implicit_edges): New.
	(gimple_dump_bb_buff): Call it.
	* domwalk.c (walk_dominator_tree):
	* gimplify.c (gimplify_switch_expr): Fix generation of
	GIMPLE_SWITCH labels.
	(gimplify_case_label_expr): Emit a label for CASE_LABEL
	instead of the CASE_LABEL_EXPR.
	* Makefile.in (GIMPLE_H): Add dependency on BASIC_BLOCK_H.
	* gimple.c (walk_gimple_stmt): Reverse meaning of return value
	of CALLBACK_STMT.  Update all users.
	Walk sub-statements of statements with bodies.
	* gimple.h (GCC_GIMPLE_H): Rename from GCC_GIMPLE_IR_H.
	Include vec.h, tm.h, hard-reg-set.h and basic-block.h.
	(bb_seq, set_bb_seq): Move from tree-flow-inline.h
	(gimple_label_set_label): Do not allow CASE_LABEL_EXPR.
	(gsi_start_bb): New.  Update all users that were calling
	gsi_start (bb_seq ()).
	(struct gimple_stmt_iterator): Add field 'bb'.
	* tree-cfg.c (build_gimple_cfg): Enable.
	(create_bb): Create a new sequence if the given one is NULL.
	(make_gimple_switch_edges): Rename from make_switch_expr_edges.
	Update all users.
	(cleanup_dead_labels): Fix handling of GIMPLE_SWITCH.
	(group_case_labels): Likewise.
	(verify_types_in_gimple_stmt): Do not allow CASE_LABEL_EXPR in
	a GIMPLE_LABEL.

2007-09-13  Diego Novillo  <dnovillo@google.com>

	* tree-pretty-print.c (dump_symbols, dump_generic_bb,
	dump_bb_header, dump_bb_end, dump_phi_nodes, pp_cfg_jump,
	dump_implicit_edges, dump_generic_bb_buff): Remove.
	* value-prof.c (histogram_eq): Enable.
	(dump_histograms_for_stmt): Adapt to tuples.
	* value-prof.h (struct):
	* cfghooks.h (struct cfg_hooks)<dump_bb>: Add int argument.
	Update all users.
	* gimple-dummy.c (gimple_remove_stmt_histograms,
	remove_stmt_from_eh_region): Remove.
	* gimple-iterator.h (gsi_start): Support NULL sequences.
	* tree-eh.c (add_stmt_to_eh_region): Enable.
	(remove_stmt_from_eh_region): Enable.
	(lookup_stmt_eh_region): Enable.
	(tree_could_throw_p): Enable.
	(stmt_can_throw_internal): Enable.
	* gimple-pretty-print.c: Include value-prof.h
	(dump_gimple_cond): Do not insert a newline initially.
	(dump_gimple_bind): Likewise.
	(dump_gimple_try): Likewise.
	(dump_gimple_asm): Likewise.
	(dump_symbols): Move from tree-pretty-print.c
	(dump_gimple_phi): New.
	(dump_gimple_stmt): Call it..
	(dump_bb_header): Move from tree-pretty-print.c
	(dump_bb_end): Likewise.
	(dump_phi_nodes): Likewise.
	(gimple_dump_bb_buff): New.
	(gimple_dump_bb): New.
	* Makefile.in (gimple-pretty-print.o): Add dependency
	value-prof.h
	* tree-cfg.c (fold_cond_expr_cond): Handle cases where
	fold_binary returns NULL.
	(make_cond_expr_edges): Take locus from the first statement of
	the destination blocks.
	(tree_dump_bb): Remove.
	(gimple_debug_bb): Rename from debug_tree_bb.
	Update all users.
	(gimple_debug_bb_n): Rename from debug_tree_bb_n.
	Update all users.
	(gimple_debug_cfg): Rename from debug_tree_cfg.
	Update all users.
	(gimple_dump_cfg): Rename from dump_tree_cfg.
	Update all users.
	(is_ctrl_altering_stmt): Call gimple_call_flags to determine
	whether the function is const/pure.
	* tree-ssa-operands.c (stmt_references_memory_p): Enable.

2007-09-11  Diego Novillo  <dnovillo@google.com>

	* tree.h (struct tree_ssa_name): Add field def_stmt.
	(SSA_NAME_DEF_STMT): Return it.
	* tree-phinodes.c (create_phi_node): Return gimple.
	Update all callers.
	(add_phi_args): Change PHI argument to gimple.  Update all
	callers.
	(remove_phi_node): Call gimple_remove.
	(phi_reverse): Remove.  Update all users.
	* tree-ssa-alias-warnings.c: Disable.
	* input.h (IS_LOCATION_EMPTY): Fix comparison of LOCATION_LINE.
	* fold-const.c: Include gimple.h.
	(fold_undefer_overflow_warnings): Change type of argument STMT to
	gimple.  Update all users.
	* cfghooks.h (struct cfg_hooks)<can_merge_blocks_p>: Change
	arguments to basic_block.  Update all users.
	* tree-gimple.c (get_gimple_rhs_class): Change argument to
	enum tree_code.  Update all users.  Move calls to
	is_gimple_lvalue and is gimple_val...
	(is_gimple_formal_tmp_rhs): ... here.
	* tree-ssa-ccp.c (fold_stmt_r): Enable.
	(fold_stmt): Enable.
	(fold_stmt_inplace): Enable.  Adapt to tuples.
	* ipa-pure-const.c (analyze_function): Disable.
	* tree-ssa-propagate.c (get_rhs): Adapt to tuples.  Update all
	users.
	* gimple-dummy.c (ssa_operands_active): Remove dummy function.
	(remove_stmt_from_eh_region, create_phi_node, add_phi_arg,
	substitute_in_loop_info, release_defs, push_stmt_changes,
	pop_stmt_changes, replace_exp): Add dummy functions.
	* predict.c: Disable.
	* gimple-iterator.c: Include tm.h and tree-flow.h
	(gsi_delink): Remove.  Update all users.
	(update_modified_stmt): Move from tree-cfg.c.
	(gsi_insert_before): New.
	(gsi_insert_seq_before): New.
	(gsi_insert_after): New.
	(gsi_insert_seq_after): New.
	(gsi_for_stmt): New.
	(gsi_move_after): New.
	(gsi_move_before): New.
	(gsi_move_to_bb_end): New.
	* gimple-iterator.h (gsi_remove): New.
	* tree-eh.c (add_stmt_to_eh_region_fn): Add comment
	(add_stmt_to_eh_region): Likewise.
	(remove_stmt_from_eh_region_fn): Likewise.
	(remove_stmt_from_eh_region): Likewise.
	(lookup_stmt_eh_region_fn): Likewise.
	(lookup_stmt_eh_region): Likewise.
	(tree_could_throw_p): Likewise.
	(stmt_can_throw_internal): Likewise.
	(tree_can_throw_external): Likewise.
	* gimple-pretty-print.c (op_gimple_cond): Remove.  Update all
	users.
	* tree-affine.c (tree_to_aff_combination_expand): Disable.
	* tree-flow-inline.h (op_iter_init_vdef): Call gimple_code
	instead of TREE_CODE.
	* gimplify.c (gimplify_cond_expr): Use enum tree_code instead
	of enum gimple_cond as the subcode for GIMPLE_COND.
	Do not switch around the conditional when the then clause is empty.
	(tree_to_gimple_tuple): Remove.  Update all users.
	(gimplify_omp_for):
	(force_gimple_operand_gsi): Rename from force_gimple_operand_bsi.  Update all users.
	* tree-dfa.c (find_referenced_vars): Disable.
	(collect_dfa_stats): Likewise.
	(collect_dfa_stats_r): Likewise.
	* cfgexpand.c: Disable.
	* tree-mudflap.c: Disable.
	* print-tree.c: Include diagnostic.h.
	(print_node): Call print_gimple_stmt when printing SSA_NAMEs.
	* lambda-code.c: Disable.
	* tree-profile.c (tree_init_edge_profiler): Disable.
	(tree_gen_edge_profiler): Disable.
	* tree-flow.h (block_stmt_iterator): Remove.  Update all users.
	(const_block_stmt_iterator): Likewise.
	* Makefile.in (print-tree.o): Add dependency on $(DIAGNOSTIC_H).
	(gimple-iterator.o): Add dependency on $(TREE_FLOW_H) and
	value-prof.h.
	(gimple.o): Likewise.
	(fold-const.o): Add dependency on $(GIMPLE_H).
	* gimple.c: Include tm.h, hard-reg-set.h, basic-block.h,
	tree-flow.h and value-prof.h.
	(build_gimple_with_ops): Do not allocate operands if NUM_OPS == 0.
	(build_gimple_return): Remove argument RESULT_DECL_P.  Update
	all users.
	(build_gimple_cond): Use enum tree_code instead of enum
	gimple_cond as the subcode.  Update all users.
	(gimple_cond_invert): Remove.  Update all users.
	(walk_gimple_seq): Add arguments CALLBACK_STMT and
	CALLBACK_OP.  Update all users.
	(walk_gimple_asm): Likewise.
	(walk_gimple_stmt): Likewise.
	(gimple_remove): New.
	(gimple_seq_reverse): New.
	(set_gimple_bb): New.
	* gimple.h (gimple_statement_base): Split field 'flags' into
	fields 'subcode' and 'flags'.  Update all users.
	(gimple_statement_with_ops): Rename field 'base' to
	'gsbase'.  Update all users.
	(gimple_statement_omp): Likewise.
	(gimple_statement_bind): Likewise.
	(gimple_statement_catch): Likewise.
	(gimple_statement_eh_filter): Likewise.
	(gimple_statement_phi): Likewise.
	(gimple_statement_resx): Likewise.
	(gimple_statement_try): Likewise.
	(gimple_statement_omp_parallel): Likewise.
	(enum gimple_cond): Remove.  Update all users.
	(GIMPLE_NO_WARNING): Define.
	(set_gimple_flags): Assert that FLAGS fits in 8 bits.
	(add_gimple_flag): Likewise.
	(set_gimple_subcode): New.  Use instead of set_gimple_flags
	everywhere.
	(gimple_subcode): New.  Use instead of gimple_flags
	everywhere.
	(gimple_no_warning_p): New.
	(gimple_cond_set_code): New.
	(gimple_cond_make_false): New.
	(gimple_cond_make_true): New.
	(gimple_phi_num_args): Rename from gimple_phi_nargs.  Update
	all users.
	* tree-cfg.c (build_gimple_cfg): Return immediately.
	(set_bb_for_stmt): Remove.  Move functionality to
	set_gimple_bb.  Update all users.
	(factor_computed_gotos):
	(bsi_for_stmt): Remove.
	(bsi_insert_before): Remove.
	(bsi_insert_seq_before): Remove.
	(bsi_insert_after): Remove.
	(bsi_insert_seq_after): Remove.
	(bsi_remove): Remove.
	(bsi_move_after): Remove.
	(bsi_move_before): Remove.
	(bsi_move_to_bb_end): Remove.
	(bsi_replace): Remove.
	(tree_verify_flow_info): Adapt to tuples.
	(tree_make_forwarder_block): Likewise.
	(tree_try_redirect_by_replacing_jump): Likewise.
	(tree_redirect_edge_and_branch): Likewise.
	(tree_purge_dead_eh_edges): Likewise.
	(gimple_cfg_hooks): Enable some hooks.
	* tree-ssanames.c (make_ssa_name): Change type of STMT to
	gimple.  Update all users.
	* tree-ssa-operands.c (ssa_operands_active): Enable.

2007-08-31  Diego Novillo  <dnovillo@google.com>

	* tree-gimple.c (is_gimple_addressable): Tidy.
	* Makefile.in (tree-ssa-structalias.o): Disable dependency on
	GTY header file.
	(tree-ssa-propagate.o): Likewise.
	(tree-phinodes.o): Likewise.
	(tree-scalar-evolution.o): Likewise.
	(tree-vect-generic.o): Likewise.
	* gimple.h (struct gimple_statement_phi): Change type of
	fields 'capacity' and 'nargs' to size_t.
	Update all users.
	* tree-cfg.c (verify_gimple_unary_expr): Remove.  Update all
	users.
	(verify_gimple_binary_expr): Remove.  Update all users.
	(verify_types_in_gimple_min_lval): Rename from
	verify_gimple_min_lval.
	(verify_types_in_gimple_reference): Rename from
	verify_gimple_reference.
	(verify_gimple_tree_expr): Remove.
	Move checks to verify_types_in_gimple_assign.
	(verify_types_in_gimple_call): Rename from verify_gimple_call.
	(verify_types_in_gimple_cond): Rename from verify_gimple_cond.
	(verify_types_in_gimple_assign): Rename from verify_gimple_assign.
	(verify_types_in_gimple_switch): Rename from verify_gimple_switch.
	(verify_types_in_gimple_phi): New.
	verify_types_in_gimple_return): Rename from
	verify_gimple_return.
	(verify_types_in_gimple_stmt): Rename from verify_gimple_stmt.
	(verify_types_in_gimple_seq): Rename from verify_gimple_seq.

2007-08-30  Chris Matthews  <chrismatthews@google.com>
	    Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_body): Call verify_gimple_seq if
	ENABLE_TYPES_CHECKING is set.
	* gimple.h (is_gimple_omp): New.
	* tree-cfg.c (verify_gimple_tree_expr): Rename from
	verify_gimple_expr.
	Verify tree nodes that should disappear after conversion to
	GIMPLE.
	Do not handle COND_EXPR, CALL_EXPR.
	(verify_gimple_modify_stmt): Remove.
	(verify_gimple_call): New.
	(verify_gimple_cond): New.
	(verify_gimple_assign): New.
	(verify_gimple_return): New.
	(verify_gimple_switch): New.
	(verify_gimple_stmt):  Change input argument to type gimple.
	Call new verifiers.
	(verify_gimple_seq): Rename from verify_gimple_1.

2007-08-30  Diego Novillo  <dnovillo@google.com>

	* gimple-low.c (gimple_try_catch_may_fallthru): Call
	gimple_code instead of gimple_flags.
	* gimple.c (set_gimple_body): Use gimple_seq instead of gimple
	when accessing vector gimple_bodies_vec.
	(gimple_body): Likewise.
	(gimple_assign_copy_p): New.
	* gimple.h (enum gimple_try_kind): New.
	(GIMPLE_TRY_CATCH): Move inside enum gimple_try_kind.
	(GIMPLE_TRY_FINALLY): Likewise.
	(gimple_assign_copy_p): Declare.
	(gimple_assign_rhs_code): New.
	Update callers that used to call gimple_flags.
	(gimple_cond_code): New.
	Update callers that used to call gimple_flags.
	(gimple_try_kind): New.
	(gimple_nop_p): Tidy comment.
	* gimple-pretty-print.c (dump_unary_rhs): New.
	(dump_gimple_assign): Call it.

2007-08-30  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_cond_expr): When gimplifying a ?: call
	gimplify_stmt with the expression just built instead of the
	original expression.
	Use the correct labels when calling build_gimple_cond.


2007-08-30  Diego Novillo  <dnovillo@google.com>

	* tree-vrp.c: Disable.
	* tree-loop-linear.c: Disable.
	* tree-into-ssa.c: Disable.
	* tree-ssa-loop-im.c: Disable.
	* tree-complex.c: Disable.
	* cgraphbuild.c: Disable most functions.
	* tree-ssa-threadupdate.c: Disable.
	* tree-ssa-loop-niter.c: Disable.
	* tree-pretty-print.c: Disable.
	* tree-ssa-loop-unswitch.c: Disable.
	* tree-ssa-loop-manip.c: Disable.
	* value-prof.c: Disable.
	* tree-tailcall.c: Disable.
	* tree-ssa-loop-ch.c: Disable.
	* tree-scalar-evolution.c: Disable.
	* tree-phinodes.c: Disable.
	* omp-low.c: Disable.
	* tree-ssa-dse.c: Disable.
	* ipa-reference.c: Disable.
	* tree-ssa-uncprop.c: Disable.
	* tree-ssa-sccvn.c: Disable.
	* cgraphunit.c (verify_cgraph_node): Disable basic block traversal.
	* tree-ssa-copyrename.c: Disable.
	* tree-ssa-ccp.c: Disable most functions.
	* tree-ssa-loop-ivopts.c: Disable.
	* tree-stdarg.c: Disable.
	* tree-ssa-math-opts.c: Disable.
	* tree-ssa-dom.c: Disable most functions.
	* tree-nrv.c: Disable.
	* tree-ssa-propagate.c: Disable.
	* gimple-dummy.c: New file.
	* tree-ssa-alias.c: Disable most functions.
	* tree-ssa-sink.c: Disable.
	* expr.c (expand_expr_real): Disable call to
	lookup_stmt_eh_region.
	* tree-ssa-loop-ivcanon.c: Disable.
	* predict.c (strip_builtin_expect): Disable.
	(tree_predict_by_opcode): Disable.
	(return_prediction): Disable.
	(apply_return_prediction): Disable.
	(tree_bb_level_predictions): Disable.
	(tree_estimate_probability): Disable.
	(predict_paths_leading_to): Disable.
	* gimple-iterator.c (gsi_replace): Mark unused arguments with
	ATTRIBUTE_UNUSED.
	* tree-ssa-ifcombine.c: Disable.
	* matrix-reorg.c: Disable.
	* c-decl.c (c_gimple_diagnostics_recursively): Disable call to
	diagnose_omp_structured_block_errors.
	* tree-eh.c: Disable most functions.
	* tree-vectorizer.c: Disable.
	* tree-vectorizer.h (nested_in_vect_loop_p): Disable.
	* ipa-type-escape.c: Disable.
	* tree-if-conv.c: Disable.
	* profile.c: Disable.
	* tree-data-ref.c: Disable.
	* tree-flow-inline.h (bsi_start): Set bsi.gsi to NULL if the
	block is invalid.
	(bsi_last): Likewise.
	(op_iter_next_use): Disable call to PHI_ARG_DEF_PTR.
	* tree-vect-analyze.c: Disable.
	* gimplify.c (gimple_conditional_context): Disable.
	(gimple_push_cleanup): Disable.
	(gimplify_omp_parallel): Disable calls to
	push_gimplify_context and pop_gimplify_context.
	* tree-ssa-phiopt.c: Disable.
	* calls.c (emit_call_1): Disable calls to lookup_stmt_eh_region.
	(expand_call): Likewise.
	(emit_library_call_value_1): Initialize low_to_save and
	high_to_save.
	* tree-ssa-coalesce.c: Disable.
	* tree-dfa.c (make_rename_temp): Disable call to
	mark_sym_for_renaming.
	(find_new_referenced_vars_1): Likewise.
	(collect_dfa_stats): Disable CFG iteration.
	(collect_dfa_stats_r): Disable.
	(mark_symbols_for_renaming): Disable.
	* cfgexpand.c (maybe_dump_rtl_for_tree_stmt): Disable.
	(label_rtx_for_bb): Disable.
	(expand_gimple_cond_expr): Disable.
	(expand_gimple_tailcall): Disable.
	(expand_gimple_basic_block): Disable.
	* tree-cfgcleanup.c: Disable.
	* tree-ssa-pre.c: Disable.
	* tree-ssa-live.c: Disable.
	* tree-sra.c: Disable most functions..
	* tree-predcom.c: Disable.
	* tree-mudflap.c: Disable.
	* ipa-prop.c: Disable.
	* tree-ssa-copy.c (may_propagate_copy): Disable.
	(propagate_value): Disable.
	(execute_copy_prop): Disable.
	(do_copy_prop): Disable.
	(store_copy_prop): Disable.
	* tree-ssa-forwprop.c: Disable.
	* tree-ssa-dce.c: Disable.
	* tree-vect-patterns.c: Disable.
	* tree-ssa-ter.c: Disable.
	* tree-ssa.c: Disable.
	* lambda-code.c: Disable.
	* tree-ssa-loop-prefetch.c: Disable.
	* tree-inline.c: Disable most functions.
	* tree-optimize.c (execute_fixup_cfg_pre_ipa): Disable.
	(execute_fixup_cfg): Disable.
	(execute_cleanup_cfg_post_optimizing): Disable.
	(execute_fixup_cfg): Disable.
	* tree-vect-transform.c: Disable.
	* tree-object-size.c: Disable.
	* tree-outof-ssa.c: Disable.
	* cfgloop.c (find_subloop_latch_edge_by_profile): Disable.
	(find_subloop_latch_edge_by_ivs): Disable.
	* tree-profile.c: Disable most functions.
	* c-gimplify.c (add_block_to_enclosing): Disable.
	* tree-vect-generic.c: Disable.
	* tree-flow.h (struct function_ann_d): Disable field
	reference_vars_info.
	* Makefile.in: Force -Werror even during stage 1.
	(OBJS-common): Add gimple-dummy.o.
	(GTFILES): Remove tree-scalar-evolution.c,
	tree-ssa-propagate.c, tree-vect-generic.c,
	tree-ssa-structalias.h, tree-ssa-structalias.c,
	ipa-reference.h, omp-low.c, tree-phinodes.c, ipa-reference.c
	* tree-ssa-structalias.c: Disable.
	* tree-cfg.c: Disable most functions.
	* passes.c (finish_optimization_passes): Disable call to
	end_branch_prob.
	(init_optimization_passes): Disable the registration of
	several passes.
	(execute_function_todo): Disable calls to update_ssa and
	need_ssa_update_p.
	* tree-ssa-reassoc.c: Disable.
	* tree-ssanames.c: Disable.
	* tree-ssa-threadedge.c: Disable.
	* tree-ssa-operands.c: Disable.

2007-08-29  Aldy Hernandez  <aldyh@redhat.com>

	* tree-ssa-operands.h (pop_stmt_changes, push_stmt_changes):
	Argument is gimple.
	(struct ssa_operand_iterator_d): Member phi_stmt is gimple.
	* value-prof.c (gimple_add_histogram_value): Adjust for tuples.
	(gimple_duplicate_stmt_histograms): Same.
	* value-prof.h (gimple_add_histogram_value): Same.
	(gimple_duplicate_stmt_histograms): Same.
	* tree-flow-inline.h (clear_and_done_ssa_iter): Same.
	(op_iter_init): Same.
	(op_iter_init_phiuse): Same.
	* tree-flow.h (stmt_references_memory_p): Same.
	* tree-cfg.c (tree_can_merge_blocks_p): Same.
	(remove_bb): Same.
	(find_taken_edge): Same.
	(tree_cfg2vcg): Same.
	(first_stmt): Same.
	(last_stmt): Same.
	(bsi_move_after): Same.
	(bsi_move_before): Same.
	(tree_find_edge_insert_loc): Same.
	Remove code handling a GIMPLE_MODIFY_STMT inside a RETURN_EXPR.
	(delete_tree_cfg_annotations): Remove code to remove annotations.
	* tree-ssa-operands.c (struct scb_d): Stmt_p is a gimple *.
	(push_stmt_changes): Adjust for tuples.
	(mark_difference_for_renaming): Same.
	(pop_stmt_changes): Same.
	(stmt_references_memory_p): Same.

2007-08-29  Aldy Hernandez  <aldyh@redhat.com>

	* tree-ssa-operands.h: Remove DEF_OPS, USE_OPS, VUSE_OPS,
	VDEF_OPS, LOADED_SYMS, STORED_SYMS.
	* tree-pretty-print.c (dump_generic_node): Adjust accordingly.
	(dump_vops): use gimple_v*_ops.  Adjust accordingly.
	* gimple.def: Add to comment.
	* tree-ssa-alias.c (create_structure_vars): Adjust for tuples.
	* tree-flow-inline.h (op_iter_init): Make stmt gimple.  Use
	gimple_*_ops functions.
	(op_iter_init_use): Make stmt gimple.
	(op_iter_init_def): Same.
	(op_iter_init_vdef): Same.
	(single_ssa_tree_operand): Same.
	(single_ssa_use_operand): Same.
	(single_ssa_def_operand): Same.
	(zero_ssa_operands): Same.
	(num_ssa_operands): Same.
	(compare_ssa_operands_equal): Make stmt[12] gimple.
	(link_use_stmts_after): Adjust for tuples.
	* tree-ssa-structalias.c (update_alias_info): Use
	gimple_stored_syms and gimple_loaded_syms.
	* gimple.h (gimple_has_mem_ops): New.
	(gimple_def_ops): New.
	(set_gimple_def_ops): New.
	(gimple_use_ops): New.
	(set_gimple_use_ops): New.
	(gimple_vuse_ops): New.
	(set_gimple_vuse_ops): New.
	(gimple_vdef_ops): New.
	(set_gimple_vdef_ops): New.
	(gimple_loaded_syms): New.
	(gimple_stored_syms): New.
	* tree-ssa-operands.c (finalize_ssa_defs): Adjust for tuples.
	(copy_virtual_operands): Same.
	(swap_tree_operands): Same.

2007-08-28  Aldy Hernandez  <aldyh@redhat.com>

	* Revert the parts of Kaveh's constification patch.that duplicate
	API calls.

2007-08-27  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @127831.
	
	* configure.ac (ACX_PKGVERSION): Update revision merge string.
	* configure: Regenerate.
	
2007-08-25  Diego Novillo  <dnovillo@google.com>

	* tree.c (build_gimple_modify_stmt_stat): Add depecrate note.
	* omp-low.c (scan_omp_1): Disable.
	(scan_omp): Likewise.
	(lower_omp_for): Likewise.
	(lower_omp_parallel): Likewise.
	(lower_omp_1): Likewise.
	(lower_omp): Likewise.
	(diagnose_sb_1): Likewise.
	(diagnose_sb_2): Likewise.
	(diagnose_omp_structured_block_errors): Likewise.
	* tree-gimple.h (_TREE_GIMPLE_H): Rename from _TREE_SIMPLE_H.
	(gimplify_body): Return the new GIMPLE body.
	(struct walk_stmt_info): Move to gimple.h.
	* gimple-low.c (lower_function_body): Assert that the function
	body is a single GIMPLE_BIND statement.
	Create a new gimple sequence to lower the existing body.
	Replace the function body with the new lowered sequence.
	(pass_lower_cf): Enable GIMPLE lowering.
	(lower_omp_directive): Disable.
	(lower_stmt): Do not call lower_omp_directive.
	(gimple_stmt_may_fallthru): Factor out of ...
	(gimple_seq_may_fallthru): ... here.
	* gimple-iterator.c (gsi_replace): New.
	* gimple-iterator.h (gsi_replace): Declare.
	* gimple-pretty-print.c: Do not include gimple-iterator.h
	* gimplify.c (gimplify_asm_expr): Tidy.
	Store the whole TREE_LIST node in the inputs and outputs vectors.
	(gimple_push_cleanup): Disable completely.
	(gimplify_body): Return a GIMPLE_BIND holding the gimplified
	body.
	Update all users.
	(gimplify_function_tree): Create a GIMPLE sequence to hold
	the gimplified body.
	* tree-flow.h (gimple_stmt_may_fallthru): Declare.
	* Makefile.in (GIMPLE_H): Add gimple-iterator.h.

2007-08-25  Diego Novillo  <dnovillo@google.com>

	* tree-nested.c: Re-implement to use GIMPLE tuples.
	(init_tmp_var_with_call): New.
	(init_tmp_var): Adapt to GIMPLE tuples.
	(save_tmp_var): Likewise.
	(convert_nl_goto_receiver): Likewise.
	(finalize_nesting_tree_1): Likewise.
	(gsi_gimplify_val): Likewise.
	Rename from tsi_gimplify_val.  Update all users.
	(walk_asm_expr): Remove.
	(walk_stmts): Remove.
	(walk_body): Call walk_gimple_seq.
	Add new argument callback_op.  Update all users.
	(walk_function): Add argument callback_op.  Update all users.
	(convert_nonlocal_reference_op): Rename from
	convert_nonlocal_omp_reference.  Update all users.
	(convert_nonlocal_reference_stmt): New.  Handle GIMPLE
	statements that used to be tree nodes.
	(convert_local_reference_op): Rename from
	convert_local_reference.  Update all users.
	(convert_local_reference_stmt): New.  Handle GIMPLE statements
	that used to be tree nodes.
	(convert_nl_goto_reference): Convert to walk_stmt_fn callback.
	Update all users.
	(convert_tramp_reference_op): Rename from
	convert_tramp_reference.  Update all users.
	(convert_tramp_reference_stmt): New.  Handle GIMPLE statements
	that used to be tree nodes.
	(convert_gimple_call): Rename from convert_call_expr.  Convert
	to be a walk_stmt_fn callback.
	* gimple.c (gimple_seq_add): Rename from gimple_add.  Update
	all users.
	(walk_gimple_seq): Rename from walk_seq_ops.  Update all
	users.
	(walk_gimple_stmt): Rename from walk_tuple_ops.  Update all
	users.
	Use two callback functions one for statements and another for
	operands.  If either is NULL do not invoke it.
	Allow callbacks to replace operands.
	(WALKIT): Remove.
	(walk_gimple_asm): New.
	* gimple.h: Include ggc.h
	(gimple_seq_alloc): New.  Use everywhere a GIMPLE sequence is
	allocated.
	(gimple_op_ptr): New.
	(gimple_call_arg_ptr): New.
	(gimple_catch_types_ptr): New.
	(gimple_eh_filter_types_ptr): New.
	(gimple_omp_critical_name_ptr): New.
	(gimple_omp_for_clauses_ptr): New.
	(gimple_omp_for_index_ptr): New.
	(gimple_omp_for_initial_ptr): New.
	(gimple_omp_for_final_ptr): New.
	(gimple_omp_for_incr_ptr): New.
	(gimple_omp_parallel_clauses_ptr): New.
	(gimple_omp_parallel_child_fn_ptr): New.
	(gimple_omp_parallel_data_arg_ptr): New.
	(gimple_omp_single_clauses_ptr): New.
	(gimple_omp_sections_clauses_ptr): New.
	(walk_stmt_fn): New type.
	(struct walk_stmt_info): Move from tree-gimple.h.
	Rename field callback to callback_op.
	Add new field callback_stmt.
	Replace field tsi with gsi of type gimple_stmt_iterator.
	(walk_gimple_seq): Declare.
	(walk_gimple_stmt): Declare.
	* tree-cfg.c (execute_build_cfg): Do not call
	build_gimple_cfg.
	(pass_build_cfg): Enable.
	Disable TODO_verify_stmts and TODO_cleanup_cfg.

2007-08-22  Aldy Hernandez  <aldyh@redhat.com>

	* tree-phinodes.c (reserve_phi_args_for_new_edge): Comment out
	call to phi_nodes_ptr.
	(remove_phi_node): Same.
	* tree-flow-inline.h (get_lineno): Work with empty statements or
	empty locations.
	(phi_nodes_ptr): Remove.
	(phi_arg_index_from_use): Adjust for tuples.
	(bsi_stmt_ptr): Add ATTRIBUTE_UNUSED.
	(op_iter_init): Remove assertion.
	(next_imm_use_stmt): Change NULL_TREE to NULL.
	* tree-dfa.c (mark_symbols_for_renaming): Adjust for tuples.
	* tree-flow.h: Remove bb_for_stmt prototype.
	(mark_symbols_for_renaming): Make argument gimple.

2007-08-22  Aldy Hernandez  <aldyh@redhat.com>

	Change all instances of bb_for_stmt to gimple_bb throughout.

	* gimple.h (gimple_omp_parallel_combined_p): New.
	* tree-ssa-operands.h (update_stmt_operands): Argument is now
	gimple.
	* tree-ssa-threadupdate.c (rederiction_block_p): Use gimple_nop_p
	instead of IS_EMPTY_STMT.
	* tree-ssa-loop-niter.c: Disable use of COND_EXPR_COND.
	* tree-pretty-print.c (dump_bb_header): Adjust for tuples.
	* cgraph.c (cgraph_add_new_function): Rename
	tree_register_cfg_hooks to gimple_register_cfg_hooks.
	* value-prof.c (set_histogram_value): Stmt type is now gimple.
	(gimple_histogram_value): Same.
	(gimple_remove_histogram_value): Same.
	(gimple_remove_stmt_histograms): Same.
	* tree.h (struct ssa_use_operand_d): Same.
	* value-prof.h (struct histogram_value_t): Same.
	Change gimple_*histogram* prototypes to use gimple instead of
	tree.
	* ipa-cp.c (ipcp_insert_stage): Rename tree_register_cfg_hooks to
	gimple_register_cfg_hooks.
	* cfghooks.c (gimple_register_cfg_hooks): Rename from
	tree_register_cfg_hooks.  Initialize cfg_hooks to gimple_cfg_hooks.
	(current_ir_type): Rename tree_cfg_hooks to gimple_cfg_hooks.
	* input.h (IS_LOCATION_EMPTY): New.
	* cfghooks.h: Rename tree_cfg_hooks to gimple_cfg_hooks.  Rename
	tree_register_cfg_hooks to gimple_register_cfg_hooks.
	* omp-low.c (determine_parallel_type): Adjust for tuples.
	(expand_omp_parallel): Rename bb_stmt_list to bb_seq.
	(expand_omp_for_generic): Call gimple_omp_return_nowait_p.
	(expand_omp_for_static_nochunk): Same.
	(expand_omp_sections): Call gimple_omp_section_last_p.
	(expand_omp_single): Comment out call to find_omp_clause.
	Call gimple_omp_return_nowait_p.
	* cgraphunit.c: Rename tree_register_cfg_hooks to
	gimple_register_cfg_hooks.
	* tree-ssa-propagate.c: Comment out non working code.
	* matrix-reorg.c (matrix_reorg): Rename tree_register_cfg_hooks to
	gimple_register_cfg_hooks.
	* tree-eh.c (add_stmt_to_eh_region_fn): Change `t' type to gimple.
	Adjust accordingly.
	(add_stmt_to_eh_region): Same.
	(remove_stmt_from_eh_region_fn): Same.
	(remove_stmt_from_eh_region): Same.
	(lookup_stmt_eh_region_fn): Same.
	(lookup_stmt_eh_region): Same.
	(make_eh_edges): Adjust for tuples.
	(stmt_can_throw_internal): Rename from tree_can_throw_internal.
	Adjust for tuples.
	(maybe_clean_or_replace_eh_stmt): Arg types are now gimple.
	* tree-vectorizer.c: Rename tree_register_cfg_hooks to
	gimple_register_cfg_hooks.
	* tree-if-conv.c (combine_blocks): Adjust for tuples.
	* profile.c (branch_prob): Same.
	* tree-flow-inline.h (bb_for_stmt): Remove.
	(get_lineno): Adjust for tuples.
	(noreturn_call_p): Same.
	(mark_stmt_modified): Same.
	(update_stmt): Same.
	(update_stmt_if_modified): Same.
	(stmt_modified_p): Same.
	(link_imm_use_stmt): Same.
	(relink_imm_use_stmt): Same.
	(single_imm_use): Same.
	(gimple_phi_arg_def): New.
	(gimple_phi_arg_edge): New.
	(phi_nodes): Adjust for tuples.
	(phi_nodes_ptr): Same.
	(set_phi_nodes): Same.
	(bb_seq): Rename from bb_stmt_list and adjust for tuples.
	(set_bb_seq): Rename from set_bb_stmt_list and adjust for tuples.
	(bsi_start): Adjust for tuples.
	(bsi_after_labels): Adjust for tuples.
	(bsi_last): Same.
	(bsi_next): Same.
	(bsi_prev): Same.
	(bsi_stmt): Same.
	(bsi_stmt_ptr): Same.
	(loop_containing_stmt): Same.
	(delink_stmt_imm_use): Same.
	(first_imm_use_stmt): Same.
	(next_imm_use_stmt): Same.
	* gimplify.c (force_gimple_operand_bsi): Same.
	* coretypes.h (const_gimple): New.
	* tree-ssa-phiopt.c (empty_block_p): Call gimple_nop_p.
	(conditional_replacement): Comment out COND_EXPR_COND.
	(value_replacement): Comment out COND_EXPR_COND.
	(minmax_replacement): Same.
	(abs_replacement): Same.
	* except.h (*eh_region*): Change trees to gimple.
	(struct throw_stmt_node): Change stmt type to gimple.
	* cfgexpand.c (label_rtx_for_bb): Adjust for tuples.
	(expand_gimple_cond_expr): Same.
	(expand_gimple_basic_block): Same.
	* tree-cfgcleanup.c (split_bbs_on_noreturn_calls): Same.
	* tree-ssa-pre.c (realify_fake_stores): Comment out non working
	code.
	* tree-ssa-forwprop.c (propagate_with_phi): Rename
	tree_can_throw_internal stmt_can_throw_internal.
	* tree-inline.c (copy_edges_for_bb): Rename
	tree_can_throw_internal to stmt_can_throw_internal.
	(initialize_cfun): Same.
	(copy_cfg_body): Same.
	(gimple_expand_calls_inline): Same.
	(make_nonlocal_label_edges): Rename tree_can_make_abnormal_goto to
	stmt_can_make_abnormal_goto.
	* tree-optimize.c (tree_lowering_passes): Rename
	tree_register_cfg_hooks to gimple_register_cfg_hooks.
	(tree_rest_of_compilation): Same.
	* tree-flow.h (struct gimple_df): Make modified_noreturn_calls a
	vector of gimple types.
	Adjust prototypes for tuples.
	(struct block_stmt_iterator): Make iterator a gimple iterator.
	(enum bsi_iterator_update): Remove BSI_CHAIN_START and
	BSI_CHAIN_END.
	* Makefile.in (tree-cfg.o): Depend on GIMPLE_H.
	(GTFILES): Move gimple.[hc] entries before tree-flow.h.
	* basic-block.h (struct edge_def): Make goto_locus of type
	location_t.
	(union basic_block_il_dependent): Adjust for tuples.
	(gimple_bb_info): Rename from tree_bb_info.  Adjust for tuples.
	* tree-cfg.c: Include gimple.h.
	Adjust prototypes for tuples.
	(build_gimple_cfg): Rename from build_tree_cfg.  Adjust for
	tuples.
	(execute_build_cfg): Rename build_tree_cfg call to
	build_gimple_cfg.
	(factor_computed_gotos): Adjust for tuples.
	(make_blocks): Same.
	(create_bb): Same.
	(fold_cond_expr_cond): Same.
	(make_edges): Same.
	(make_cond_expr_edges): Same.
	(make_switch_expr_edges): Same.
	(make_goto_expr_edges): Same.
	(cleanup_dead_labels): Same.
	(group_case_labels): Same.
	(tree_can_merge_blocks_p): Same.
	(replace_uses_by): Same.
	(tree_merge_blocks): Same.
	(is_ctrl): Same.
	(is_ctrl_altering_stmt): Same.
	(computed_goto_p): Same.
	(simple_goto_p): Same.
	(stmt_can_make_abnormal_goto): Rename from
	tree_can_make_abnormal_goto.
	Adjust for tuples.
	(stmt_starts_bb_p): Adjust for tuples.
	(stmt_ends_bb_p): Same.
	(first_stmt): Same.
	(last_stmt): Same.
	(last_and_only_stmt): Same.
	(set_bb_for_stmt): Same.
	(change_bb_for_stmt): Same.
	(bsi_for_stmt): Same.
	(update_modified_stmt): Rename from update_modified_stmts.
	Adjust for tuples.
	Handle only one statement.
	(bsi_insert_before): Adjust for tuples.
	(bsi_insert_after): Same.
	(bsi_insert_seq_before): New.
	(bsi_insert_seq_after): New.
	(bsi_remove): Ajust for tuples.
	(bsi_replace): Same.
	(verify_stmt): Same.
	(gimple_split_block): Rename from tree_split_block.
	Adjust for tuples.
	(tree_purge_dead_abnormal_call_edges): Adjust for tuples.
	(tree_cfg_hooks): Same.
	* tree-ssa-operands.c (update_stmt_operands): Same.

2007-08-22  Aldy Hernandez  <aldyh@redhat.com>

	* Makefile.in (TREE_GIMPLE_H): Depend on GIMPLE_H.
	* gimple-iterator.h: Do not include gimple.h.
	* gimple.h (OMP_SECTION_LAST_FLAG): New.
	(gimple_omp_return_nowait_p): New.
	(gimple_omp_section_last_p): New.
	(gimple_switch_set_num_labels): New.
	(gimple_nop_p): New.
	
2007-08-17  Aldy Hernandez  <aldyh@redhat.com>

	Revert this change:

	2007-08-14  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.c (gimple_call_flags): Make sure this is a GIMPLE_CALL.
	
2007-08-14  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-iterator.c (gsi_split_seq_after): New.
	(gsi_split_seq_before): New.
	* gimple-iterator.h: Prototype above two functions.
	
2007-08-14  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.h (gimple_has_ops): New.
	(gimple_modified): New.
	(set_gimple_modified): New.
	(gimple_switch_default_label): Call gimple_switch_label.
	(gimple_switch_set_default_label): Call gimple_switch_set_label.

2007-08-14  Aldy Hernandez  <aldyh@redhat.com>

	* gimple.c (gimple_call_flags): Make sure this is a GIMPLE_CALL.
	
2007-08-14  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @127480.

	* version.c (VERSUFFIX): Update.
	
2007-08-09  Diego Novillo  <dnovillo@google.com>

	* gimple-low.c: Document conversion to Low GIMPLE.
	* Makefile.in (gimple.o): Add dependency on gt-gimple.h
	(GTFILES): Add gimple.c.
	* gimple.c (gimple_bodies_vec): New.
	(gimple_bodies_map): Rename from gimple_bodies.
	(gss_for_code): Return GSS_ASM for GIMPLE_ASM.
	(walk_tuple_ops): Handle GSS_ASM like GSS_WITH_OPS.
	(set_gimple_body): Push body into gimple_bodies_vec and create
	a mapping to array index in gimple_bodies_map.
	(gimple_body): Corresponding changes to use gimple_bodies_map
	and gimple_bodies_vec.
	* gimple.h: Create VEC templates for gimple_seq.

2007-08-08  Aldy Hernandez  <aldy@quesejoda.com>

	* gimple-low.c (struct return_statements_t): Declare.
	(struct lower_data): Make return_statements a vector.
	(lower_function_body): Adjust for tuples.
	(pass_lower_cf): Add PROP_gimple_any to properties_required.
	(lower_sequence): Rename from lower_stmt_body.
	Adjust for tuples.
	(lower_omp_directive): Adjust for tuples.
	(lower_stmt): Same.
	(lower_gimple_bind): Rename from lower_bind_expr.
	Adjust for tuples.
	(gimple_try_catch_may_fallthru): New.
	(gimple_seq_may_fallthru): New.
	(lower_gimple_return): Rename from lower_return_expr and adjust
	for tuples.
	(lower_builtin_setjmp): Adjust for tuples.
	* gimple-iterator.c: New.
	* gimple-iterator.h: Include gimple.h.
	(enum gsi_iterator_update): Declare.
	(gsi_link_seq_before): New prototype.
	(gsi_link_before): Same.
	(gsi_link_seq_after): Same.
	(gsi_link_after): Same.
	(gsi_delink): Same.
	* gimplify.c (gimplify_body): Comment out verify_gimple_1 call.
	* tree-flow.h (gimple_seq_may_fallthru): New prototype.
	* Makefile.in (OBJS-common): Add gimple-iterator.o.
	(gimple-iterator.o): New.
	(gimple-pretty-print.o): Do not depend on gimple-iterator.h.
	* gimple.c (set_gimple_prev): Move to gimple.h.
	(set_gimple_next): Same.
	(gimple_call_flags): New.
	* gimple.h (struct gimple_sequence): Add GTY marker.
	(struct gimple_statement_bind): Add block field.
	(set_gimple_prev): New.
	(set_gimple_next): New.
	(gimple_call_flags): Protoize.
	(gimple_call_fndecl): New.
	(gimple_bind_block): New.
	(gimple_bind_set_block): New.


2007-08-08  Diego Novillo  <dnovillo@google.com>

	* gimple.h (GIMPLE_CHECK, GIMPLE_CHECK2, GIMPLE_RANGE_CHECK):
	Do not return the checked statement.  Update all users.
	Enable on compilers other than GCC.

2007-08-07  Chris Matthews  <chrismatthews@google.com>

	* gimple_iterator.h (gsi_start): Changed to produce a pointer instead of
	struct.  Updated clients.
	(gsi_last): Same.
	(gsi_end_p): Changed to operate on a pointer instead of struct.  Updated
	clients.
	(gsi_one_before_end_p): Same.
	(gsi_next): Same.
	(gsi_prev): Same.
	(gsi_stmt): Same.
	
2007-08-07  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @127277.

	* version.c (VERSUFFIX): Update.

2007-08-07  Diego Novillo  <dnovillo@google.com>

	* gimple.h (gimple_call_return): New.
	* gimplify.c (get_tmp_var_for): Call it.

2007-08-02  Chris Matthews  <chrismatthews@google.com>

	* gimplify.c (gimplify_asm_expr): Created new gimple tuple.
	* gimple-pretty-printer.c (dump_gimple_asm): Added function to dump a
	GIMPLE_ASM statement.
	(dump_gimple_stmt): Updated to use the dump_gimple_asm function.
	* gimple.c (gss_for_code): Made asm statements return as with_mem_ops.
	(build_gimple_with_ops): Asm statements are added as a specal case for
	allocation because they have extra fields that are not
	allocated correctly in the current generic op allocator.
	(build_gimple_asm_1): Added a helper function to setup the basics of a
	GIMPLE_ASM tuple.
	(build_gimple_asm_vec): Create a GIMPLE_ASM tuple from vector arguments.
	(build_gimple_asm): Changed to call the new helper function.

2007-08-03  Diego Novillo  <dnovillo@google.com>

	* gimple-pretty-print.c (INDENT): Tidy.
	(dump_binary_rhs): New.
	(dump_gimple_assign): Call it.
	* gimplify.c (gimplify_modify_expr_complex_part): If the value
	is not interesting, nullify *EXPR_P.
	(gimplify_body): Do not add the sequence to the GIMPLE_BIND more
	than once.

2007-08-01  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_switch_expr): Remove switch_body_seq_.
	Change switch_body_seq to struct gimple_sequence.
	Adjust all uses.
	Call gimplify_stmt instead of gimplify_statement_list
	(gimplify_to_stmt_list): Remove.
	Update all users.
	* tree-mudflap.c: Include gimple.h
	(mf_decl_cache_locals): Convert to emit GIMPLE.
	(mf_build_check_statement_for): Add FIXME and unreachable
	markers to convert to GIMPLE.
	* Makefile.in (tree-mudflap.o): Depend on $(GIMPLE_H).
	* config/i386/i386.c (ix86_gimplify_va_arg): Adapt to emit
	GIMPLE.

2007-08-01  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_switch_expr): Do not call sort_case_labels
	if there are no labels other than 'default'.
	* gimple.h (gimple_num_ops, gimple_op, gimple_set_op): Use
	result of GIMPLE_RANGE_CHECK call.

2007-08-01  Diego Novillo  <dnovillo@google.com>

	* DEV-PHASE: Revert to mainline version.
	* version.c (VERSUFFIX): Add branch name and revision number
	of latest mainline merge.

2007-07-31  Diego Novillo  <dnovillo@google.com>

	Mainline merge (@127100).
	* DEV-PHASE: Updated.

2007-07-31  Diego Novillo  <dnovillo@google.com>

	* dominance.c (free_dominance_info): If there is no CFG,
	do nothing.
	* cfg.c (compact_blocks): Likewise.

2007-07-30  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (get_tmp_var_for): When creating a new temporary
	for a GIMPLE_CALL, use the type returned by the function call
	instead of the type of the function decl.
	* gimple.c (build_gimple_return): Accept NULL and RESULT_DECL
	return values.

2007-07-30  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_init_constructor): If both sides
	of the constructor are in GIMPLE form but the assignment
	has not been emitted, emit it.

2007-07-28  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_return_expr): Do not create a MODIFY_EXPR
	as return argument
	* gimple.c (build_gimple_return): Assert that the returned value
	is a GIMPLE value.

2007-07-27  Diego Novillo  <dnovillo@google.com>

	* tree-gimple.c (get_gimple_rhs_class): New.
	(is_gimple_formal_tmp_rhs): Call it.
	* tree-gimple.h (enum gimple_rhs_class): New.
	* gimple-iterator.h (gsi_next): Assert that there is nothing
	beyond the end of the sequence.
	(gsi_prev): Assert that there is nothing before the start of
	the sequence.
	* gimplify.c (gimplify_switch_expr): Tidy creation of default label.
	(gimplify_expr): Fix concatenation of internal sequences to PRE_P.
	* gimple.c (get_num_ops_for): Remove.  Update users.
	(build_gimple_assign): Call get_gimple_rhs_class to determine
	how many operands to allocate.
	(gimple_add): Assert that GS does not have previous or next
	statements.
	(gimple_seq_append): Move from gimple.h.

2007-07-27  Aldy Hernandez  <aldy@quesejoda.com>

	* cgraph.c: Fix line wrap.
	* cgraph.h: Same.
	* tree-pass.h (struct tree_opt_pass): Add works_with_tuples_p
	field.
	* cgraphunit.c (cgraph_analyze_functions): Remove check for
	DECL_SAVED_TREE.
	(cgraph_expand_function): Comment out TREE_ASM_WRITTEN assertion.
	* tree-optimize.c (tree_lowering_passes): Comment out call to
	compact_blocks.
	* passes.c (execute_one_pass): Return if pass has not been
	converted to tuples.
	* tree-vrp.c, regrename.c, fwprop.c, tree-into-ssa.c,
	tree-complex.c, see.c, cgraphbuild.c, tracer.c, cgraph.c,
	postreload-gcse.c, postreload.c, tree-ssa-loop-ch.c,
	tree-tailcall.c, tree-pass.h, ipa-cp.c, final.c, omp-low.c,
	tree-ssa-dse.c, ipa-reference.c, tree-ssa-uncprop.c,
	auto-inc-dec.c, reorg.c, tree-ssa-copyrename.c, tree-ssa-ccp.c,
	df-core.c, mode-switching.c, tree-nomudflap.c, modulo-sched.c,
	ipa-pure-const.c, cse.c, web.c, tree-stdarg.c,
	tree-ssa-math-opts.c, tree-ssa-dom.c, tree-nrv.c,
	tree-ssa-alias.c, loop-init.c, gimple-low.c, tree-ssa-sink.c,
	ipa-inline.c, global.c, jump.c, ifcvt.c, predict.c,
	tree-ssa-loop.c, recog.c, dse.c, tree-ssa-ifcombine.c,
	matrix-reorg.c, c-decl.c, tree-eh.c, regmove.c, local-alloc.c,
	function.c, tree-vectorizer.c, gcse.c, ipa-type-escape.c,
	tree-if-conv.c, init-regs.c, ipa.c, tree-ssa-phiopt.c,
	rtl-factoring.c, lower-subreg.c, bt-load.c, tree-dfa.c except.c,
	emit-rtl.c, cfgexpand.c, tree-cfgcleanup.c, cfgcleanup.c,
	tree-ssa-pre.c, tree-sra.c, tree-mudflap.c, tree-ssa-copy.c,
	cfglayout.c, tree-ssa-forwprop.c, tree-ssa-dce.c, tree-ssa.c,
	regclass.c, integrate.c, tree-optimize.c, tree-object-size.c,
	combine.c, tree-outof-ssa.c, bb-reorder.c, stack-ptr-mod.c,
	var-tracking.c, tree-profile.c, tree-vect-generic.c, reg-stack.c,
	sched-rgn.c, tree-ssa-structalias.c, tree-cfg.c, passes.c,
	tree-ssa-reassoc.c, combine-stack-adj.c, cfgrtl.c, dce.c,
	tree-ssanames.c: Set works_with_tuples_p field to 0.

2007-07-25  Diego Novillo  <dnovillo@google.com>

	* gimple.c: Use ENABLE_GIMPLE_CHECKING instead of
	ENABLE_TREE_CHECKING.
	(set_gimple_code): New.
	(set_gimple_prev): New.
	(set_gimple_next): New.
	* gimple.h: Use ENABLE_GIMPLE_CHECKING instead of
	ENABLE_TREE_CHECKING.
	(gimple_code): Inline function replacement for GIMPLE_CODE.
	(gimple_flags): Inline function replacement for GIMPLE_SUBCODE_FLAGS.
	(gimple_next): Inline function replacement for GIMPLE_NEXT.
	(gimple_prev): Inline function replacement for GIMPLE_PREV.
	(gimple_locus): Inline function replacement for GIMPLE_LOCUS.
	(gimple_locus_empty_p): Inline function replacement for
	GIMPLE_LOCUS_EMPTY_P.
	(struct gimple_statement_base): Rename field 'subcode_flags'
	to 'flags'.
	(set_gimple_flags): New.
	(gimple_bb): New.
	(set_gimple_bb): New.
	(set_gimple_block): New.
	(set_gimple_locus): New.
	(add_gimple_flag): Rename from gimple_add_subcode_flag.

2007-07-25  Diego Novillo  <dnovillo@google.com>

	* tree-gimple.h (build_gimple_eh_filter_tree): Rename from
	gimple_build_eh_filter_tree.
	* gimple.h (build_gimple_return): Rename from gimple_build_return.
	(build_gimple_assign): Rename from gimple_build_assign.
	(build_gimple_call_vec): Rename from gimple_build_call_vec.
	(build_gimple_call): Rename from gimple_build_call.
	(build_gimple_label): Rename from gimple_build_label.
	(build_gimple_goto): Rename from gimple_build_goto.
	(build_gimple_nop): Rename from gimple_build_nop.
	(build_gimple_bind): Rename from gimple_build_bind.
	(build_gimple_asm): Rename from gimple_build_asm.
	(build_gimple_catch): Rename from gimple_build_catch.
	(build_gimple_eh_filter): Rename from gimple_build_eh_filter.
	(build_gimple_try): Rename from gimple_build_try.
	(build_gimple_phi): Rename from gimple_build_phi.
	(build_gimple_resx): Rename from gimple_build_resx.
	(build_gimple_switch): Rename from gimple_build_switch.
	(build_gimple_switch_vec): Rename from gimple_build_switch_vec.
	(build_gimple_omp_parallel): Rename from gimple_build_omp_parallel.
	(build_gimple_omp_for): Rename from gimple_build_omp_for.
	(build_gimple_omp_critical): Rename from gimple_build_omp_critical.
	(build_gimple_omp_section): Rename from gimple_build_omp_section.
	(build_gimple_omp_continue): Rename from gimple_build_omp_continue.
	(build_gimple_omp_master): Rename from gimple_build_omp_master.
	(build_gimple_omp_return): Rename from gimple_build_omp_return.
	(build_gimple_omp_ordered): Rename from gimple_build_omp_ordered.
	(build_gimple_omp_sections): Rename from gimple_build_omp_sections.
	(build_gimple_omp_single): Rename from gimple_build_omp_single.
	Update all users.

2007-07-24  Chris Matthews  <chrismatthews@google.com>

	* configure.ac: Added support for ENABLE_GIMPLE_CHECKING and the
	--enable-checking=gimple flag.
	* config.in: Same.
	* configure: Regenerated.
	* gimplify.c (cpt_same_type): Same.
	(gimple_push_condition): Same.
	(gimplify_addr_expr): Same.
	(gimplify_expr): Same.
	(gimplify_body): Same.
	(check_pointer_types_r): Same.

2007-07-24  Diego Novillo  <dnovillo@google.com>

	* gimple.def: Re-organize codes that take tree operands so
	they are consecutive.
	* gsstruct.def (GSS_LABEL, GSS_ASSIGN_BINARY, GSS_ASSIGN_UNARY_REG,
	GSS_ASSIGN_UNARY_MEM, GSS_COND, GSS_GOTO, GSS_SWITCH, GSS_CALL,
	GSS_RETURN): Remove.  Update al users.
	* gimple.c (gss_for_code): New.
	(gimple_statement_structure): Call it.
	(get_num_ops_for): New.
	(gimple_build_with_ops): New.
	(gimple_build_return, gimple_build_call_1, gimple_build_assign,
	gimple_build_cond, gimple_build_label, gimple_build_goto,
	gimple_build_switch_1, ): Call it.
	(gss_for_assign): Remove.  Update all users.
	(gimple_check_failed): Do not assume that subcode is a valid tree
	code.
	(gimple_range_check_failed): New.
	(walk_tuple_ops): Implement in terms of gimple_num_ops and
	gimple_op when dealing with GSS_WITH_OPS and GSS_WITH_MEM_OPS
	statements.
	* gimple.h (struct gimple_statement_with_ops): Add fields 'num_ops'
	and 'op'.
	(struct gimple_statement_label, gimple_statement_assign_binary,
	gimple_statement_assign_unary_reg, gimple_statement_assign_unary_mem,
	gimple_statement_cond, gimple_statement_goto, gimple_statement_switch,
	gimple_statement_call, gimple_statement_return): Remove.
	Update all users.
	(gimple_range_check_failed): Declare.
	(GIMPLE_RANGE_CHECK): Define.
	(gimple_num_ops): New.
	(gimple_op): New.
	(gimple_set_op): New.
	(gimple_assign_rhs1): Rename from gimple_assign_binary_rhs1.
	(gimple_assign_set_rhs1): Rename from gimple_assign_binary_set_rhs1.
	(gimple_assign_rhs2): Rename from gimple_assign_binary_rhs2.
	(gimple_assign_set_rhs2): Rename from gimple_assign_binary_set_rhs2.
	(gimple_assign_unary_rhs): Remove.  Update all users.
	(gimple_assign_unary_set_rhs): Likewise.
	(gimple_switch_num_labels): Rename from gimple_switch_nlabels.
	(gimple_call_fn, gimple_call_lhs, gimple_call_chain,
	gimple_call_set_chain, gimple_call_nargs, gimple_call_arg,
	gimple_call_set_arg, gimple_cond_lhs, gimple_cond_set_lhs,
	gimple_cond_rhs, gimple_cond_set_rhs, gimple_cond_true_label,
	gimple_cond_false_label, gimple_cond_set_true_label,
	gimple_cond_set_false_label, gimple_label_label,
	gimple_label_set_label, gimple_goto_dest,
	gimple_goto_set_dest, gimple_asm_input_op,
	gimple_asm_set_input_op, gimple_asm_output_op,
	gimple_asm_set_output_op, gimple_asm_clobber_op,
	gimple_asm_set_clobber_op, gimple_switch_num_labels,
	gimple_switch_index, gimple_switch_set_index,
	gimple_switch_default_label, gimple_switch_set_default_label,
	gimple_switch_label, gimple_switch_set_label,
	gimple_return_retval, gimple_return_set_retval): Implement
	using the array of operands in field 'with_ops'.
	(gimple_asm_set_ninputs, gimple_asm_set_noutputs,
	gimple_asm_set_nclobbered, gimple_asm_set_string): Remove.
	Update all users.


2007-07-24  Aldy Hernandez  <aldyh@redhat.com>

	* tree.c (get_callee_fndecl): Revert previous change.
	* gimplify.c (gimplify_call_expr): Use result from
	get_callee_fndecl if available.
	* c-common.c (c_warn_unused_result): Do not use
	get_callee_fndecl.
	Add assertion.

2007-07-24  Diego Novillo  <dnovillo@google.com>

	Merge with mainline (@126872)

2007-07-23  Aldy Hernandez  <aldyh@redhat.com>

	* tree.c (get_callee_fndecl): Work when only the CALL_EXPR_FN has
	been passed.
	* c-common.c (c_warn_unused_result): Use get_callee_fndecl.
	
2007-07-23  Aldy Hernandez  <aldyh@redhat.com>

	* c-decl.c: Include gimple.h.
	(c_gimple_diagnostics_recursively): Call c_warn_unused_result with
	tuplified body.
	Exit if -fgimple-only.
	* gimplify.c (gimplify_call_expr): Call gimple_build_call_vec with
	the correct callee.
	* c-gimplify.c (c_genericize): Remove exit.
	* c-common.c: Include gimple.h.
	(c_warn_unused_result): Tuplify.
	* c-common.h (c_warn_unused_result): Protoize.
	* Makefile.in (c-decl.o): Depend on GIMPLE_H.
	(c-common.o): Same.
	* gimple.c (gimple_build_catch): Handler is a sequence.
	Adjust accordingly.
	(gimple_build_eh_filter): Failure is a sequence.
	Adjust accordingly.
	(walk_tuple_ops): case GIMPLE_CATCH: Walk handler as a sequence.
	case GIMPLE_EH_FILTER: Walkder failure as a sequence.
	* gimple.h (gimple_statement_catch): Make handler a sequence.
	(gimple_statement_eh_filter): Make failure a sequence.
	(gimple_build_catch): Make second argument a sequence.
	(gimple_build_eh_filter): Same.
	(gimple_catch_handler): Return a sequence.
	(gimple_catch_set_handler): Make second argument a sequence.
	(gimple_eh_filter_failure): Return a sequence.
	(gimple_eh_filter_set_failture): Make second argument a sequence.

2007-07-20  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_return_expr): Handle an empty ret_expr
	gracefully.

2007-07-19  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/instrument.c: New.
	* gimplify.c (gimplify_function_tree): Generate tuples for function
	instrumentation.

2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimple_add_tmp_var): Remove abort.  Add comment.
	
2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimple_add_tmp_var): Remove abort.  Add comment.

2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_and_add): Remove unecessary temporary sequence.
	Remove fixme.  Add comment.
	(gimplify_loop_expr): Tuplefy.
	(gimplify_bind_expr): Streamline GIMPLE_TRY_FINALLY tuple.
	(gimplify_expr): Tuplefy TRY_*_EXPR cases.
	* gimple.c: Fix some spacing.
	(gimple_build_try, gimple_omp_build_*): Handle empty sequences.
	(gimple_push): Remove.
	* gimple.h (gimple_push): Remove.

2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* tree-gimple.h (declare_vars): Update arguments.
	* gimplify.c (pop_gimplify_context): Enable call to declare_vars.
	(declare_vars): Convert to use tuples.
	(gimple_add_tmp_var): Same.
	* gimple.h (GIMPLE_BLOCK): New.

2007-07-17  Chris Matthews  <chrismatthews@google.com>

	* gimplify.c (gs_build_eh_filter): Renamed to gs_build_eh_filter_tree
	to avoid name conflict.
	* gimple-pretty-print.c: Renamed to debug_gs_* to debug_gimple_*.
	Updated all users.
	* gimple.h: Renamed all functions with GS and gs prefixes to GIMPLE and
	gimple, and updated users.
	Renamed gs_seq_* functions to gimple_seq_*. Updated all users. 
	* gimple.def: Definitions changed to from GS_* to GIMPLE_*.

2007-07-16  Chris Matthews  <chrismatthews@google.com>

	* gimple.c (gs_build_switch): Changed nlabels to represent total number
	of labels including the default.
	(gs_build_switch_1): Same.
	(walk_tuple_ops): Same.
	* gimple-pretty-print.c (dump_gs_switch): Same.

2007-07-16  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_ctx): Rename current_bind_expr_seq to
	bind_expr_stack and make it a vector.
	(push_gimplify_context): Adjust bind_expr_stack for vectors.
	(pop_gimplify_context): Same.
	(gimple_push_bind_expr): Same.
	(gimple_pop_bind_expr): Same.
	(gimple_current_bind_expr): Same.
	(get_tmp_var_for): Use ``code''.
	(gimplify_bind_expr): Remove comment.
	(gimplify_case_label_expr): Add whitespace.
	* gimple.c (gs_pop): Remove.
	* gimple.h: Define vectors of a gimple type.
	(gs_pop): Remove prototype.
	* Makefile.in (GIMPLE_H): Add vec.h.

2007-07-15  Diego Novillo  <dnovillo@google.com>

	* gimple.c: Rename from gimple-ir.c.
	Update all users.
	* gimple.h: Rename from gimple-ir.h.
	Update all users.

2007-07-15  Diego Novillo  <dnovillo@google.com>

	* gimple-ir.c (gimple_statement_structure): Remove code
	after gcc_unreachable call.
	* gimplify.c (get_tmp_var_for): New.
	(gimplify_call_expr): Call it.

2007-07-14  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/with_size_expr.c: Check for GS_TRY.
	* Makefile.in (gimple-ir.o): Add diagnostic.h dependency.
	* gimple-pretty-print.c (dump_gs_call): Dump LHS if available.
	(dump_gs_try): New.
	(dump_gimple_stmt): Add case for GS_TRY.
	* gimple-ir.c.  Include diagnostic.h.
	(gs_build_try): Cleanup and eval are sequences.
	Remove catch_p and finally_p arguments.  Add catch_finally argument.
	(gs_omp_build_critical): Body is a gs_seq.
	(gs_omp_build_parallel): Same.
	(gs_omp_build_section): Same.
	(gs_omp_build_master): Same.
	(gs_omp_build_continue): Same.
	(gs_omp_build_ordered): Same.
	(gs_omp_build_sections): Same.
	(gs_omp_build_single): Same.
	(gs_omp_build_for): Body and pre_body is a gs_seq.
	(gs_push): New.
	(gs_pop): New.
	(walk_tuple_ops): Walk GS_TRY tuples eval and cleanups correctly.
	Dump tuple before we ICE.
	* gimple-ir.h (gs_seq_copy): New.
	(struct gimple_statement_try): Eval and cleanups are gs_seq's.
	(gs_bind_set_body): Use gs_seq_copy.
	(gs_try_eval): Return address of eval.
	(gs_try_cleanup): Return address of cleanup.
	(gs_try_set_eval): Use gs_seq_copy.
	(gs_try_set_cleanup): Same.
	(gs_omp_set_body): Same.
	(gs_omp_for_set_pre_body): Same.
	* gimplify.c (struct gimplify_ctx): Rename current_bind_expr to
	current_bind_expr_seq, and make it a sequence.
	(pop_gimplify_context): Adjust for current_bind_expr_seq.
	(gimple_push_bind_expr): Same.
	(gimple_pop_bind_expr): Same.
	(gimple_current_bind_expr): Same.
	(build_stack_save_restore): Generate tuples.
	(gimplify_bind_expr): Same.

2007-07-13  Diego Novillo  <dnovillo@google.com>

	* gimple-ir.c (gs_add): Swap arguments.
	Update all users.
	* gimple-ir.h (gs_seq_append): Likewise.

2007-07-12  Diego Novillo  <dnovillo@google.com>

	* tree.c (create_artificial_label): Move from gimplify.c
	(get_name): Likewise.
	* tree.h (create_artificial_label, get_name): Move
	declarations earlier in the file.
	* diagnostic.h (dump_gimple_stmt, print_gimple_stmt,
	dump_gimple_seq): Rearrange.
	* tree-gimple.h (gimplify_function_tree): Move from tree.h.
	* gimple-pretty-print.c (do_niy): Tidy.
	(maybe_init_pretty_print): Add comment.
	(newline_and_indent): Likewise.
	Remove "gimpleir: " prefix.
	(debug_gimple_stmt): Add comment.
	(dump_gs_seq): Remove.
	(dump_gimple_seq): Add argument SPC.
	Update all users.
	If FLAGS contains TDF_DETAILS, emit "gimpleir:" prefix.
	(dump_gs_cond): If FLAGS contains TDF_DETAILS, emit
	"gimpleir:" prefix.
	(dump_gs_bind): Likewise.
	* function.h (struct function): Remove field 'gimplified'.
	* gimple-ir.c (gimple_bodies): New private variable.
	(set_gimple_body): New.
	(gimple_body): New.
	* gimple-ir.h: Include pointer-set.h.
	Add comment before data structure definitons.
	(set_gimple_body): Declare.
	(gimple_body): Declare.
	* gimplify.c (create_artificial_label): Move to tree.c
	(get_name): Likewise.
	(gimplify_function_tree): Change return type to void.
	Call set_gimple_body after gimplification and nullify
	DECL_SAVED_TREE.
	Update all callers.
	* common.opt (fgimple-only): New option.
	* tree-optimize.c (tree_rest_of_compilation): Do not nullify
	DECL_SAVED_TREE.
	* c-gimplify.c (c_genericize): Restore gimplification logic to
	mainline version.
	If -fgimple-only was given, exit.
	* Makefile.in (GIMPLE_IR_H): Add pointer-set.h
	* tree-cfg.c (execute_build_cfg): Nullify GIMPLE body after
	building the CFG.
	(dump_function_to_file): If DECL_SAVED_TREE is NULL dump the
	GIMPLE body of the function.

2007-07-12  Diego Novillo  <dnovillo@google.com>

	* omp-low.c (lower_regimplify): Use a local GIMPLE sequence to
	hold the result from gimplification.
	* tree-gimple.c (is_gimple_min_val): Reformat.
	* tree-gimple.h (enum fallback_t): Document values.
	(gimplify_expr): Remove IS_STATEMENT argument.
	Update all users.
	* langhooks.c (lhd_gimplify_expr): Likewise.
	* gimplify.c (gimplify_statement_list): If a temporary
	was returned from voidify_wrapper_expr abort to mark the failure.
	(gimplify_expr): Remove argument IS_STATEMENT.
	Update all users.
	Assert that FALLBACK is used with the appropriate GIMPLE_TEST_F
	Restore logic to use internal queue.
	Do not abort if on return from gimplify_call_expr, *EXPR_P has
	a CALL_EXPR.

2007-07-12  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_switch_1): Allocate one less tree.
	(gs_build_switch_1): Offset labels by one.
	(gs_switch_label): Same.
	(gs_switch_set_label): Same.

2007-07-12  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (walk_seq_ops): Rename from walk_tree_seq.
	(walk_tuple_ops): Rename from walk_tree_tuple.
	* gimple-ir.h, gimplify.c, gimple-ir.c: Rename all calls to
	walk_tree_seq and walk_tree_tuple accordingly.

2007-07-12  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_switch_1): Fix spacing.
	Allocate one more tree.
	(gs_build_switch): Set labels starting at 1.
	(walk_tree_seq): New.
	(walk_tree_tuple): New.
	* gimple-ir.h: Add prototypes for walk_tree_tuple and walk_tree_seq.
	* gimplify.c (check_pointer_types_r): Uncomment.
	(gimplify_body): Walk gimple sequence with check_pointer_types_r.

2007-07-11  Chris Matthews  <chrismatthews@google.com> 

	* tree-pretty-print.c (dump_generic_node): Removed space before default
	label colon.
	* tree.h (sort_case_labels): Moved to gimple-ir.h.
	* gimplify.c (sort_case_labels): Changed to a vector instead of tree
	vector.
	(gimplify_switch_expr): Initial implementation with tuples.
	(gimplify_expr): Changed gimplify_case_label_expr parameter.
	(gimplify_case_label_expr): Added a gs_seq parameter, and put cases in
	that.
	(dump_gimple_stmt): Removed semicolon.
	(dump_gs_label):  Refactored from dump_gimple_expr.
	(dump_gs_switch): Added.
	(gs_build_switch_vec): Added.
	* gimple-ir.c (gs_build_switch_1): Added.
	(gs_build_switch): Refactored to use gs_build_switch_1.
	(gs_build_switch_vec): Added.
	* gs_switch.c: New test case.
	* gs_switch1.c: New test case.
	* gs_switch2.c: New test case.
	
2007-07-05  Aldy Hernandez  <aldyh@redhat.com> 

	* gimple-pretty-print.c (dump_gimple_stmt): Alphabetize cases.
	Add case for GS_NOP.
	* gimplify.c (gimplify_body): Handle null bodies.
	Use GS_CODE instead of GS_SUBCODE_FLAGS.

2007-07-05  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/with_size_expr.c: Clean up dump.
	* testsuite/gcc.dg/gimple/gs_bind.c: Clean up dump.
	* gimplify.c (struct gimplify_ctx): Make current_bind_expr a tuple.
	(pop_gimplify_context): Accept gimple.
	Comment out call to declare_vars.
	(gimple_current_bind_expr): Return gimple.
	(unshare_all_trees): Remove.
	(gimplify_self_mod_expr): Remove comment.
	(gimplify_cleanup_point_expr): Correct typo in call to gs_seq_init.
	(gimplify_body): Remove body local.  
	Build GS_BIND tuples when needed.
	Do not call unshare_all_trees.
	Call pop_gimplify_context with appropriate argument.
	Comment out call to walk_tree.
	* tree-pretty-print.c (print_declaration): Remove static.
	* diagnostic.h (print_declaration): Prototype.
	* tree-gimple.h (pop_gimplify_context): Accept gimple tuple.
	(gimple_current_bind_expr): Return tuple.
	* gimple-pretty-print.c (dump_gs_seq): New.
	(dump_gs_bind): New.
	(dump_gimple_stmt): Add case for GS_BIND.  Print semi-colons after
	each statement.

2007-06-29  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimple_push_condition): Enable.  Call gs_seq_init with
	address.
	(gimplify_cond_expr): Push and pop conditions.  Use other GS_COND
	predicates when appropriate

2007-06-28  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/gs_goto.c: New.
	* testsuite/gcc.dg/gimple/gs_cond.c: New.
	* tree-gimple.h (gimplify_stmt): Return bool.
	* gimple-pretty-print.c (INDENT): New.
	(newline_and_indent): New.
	(op_gs_cond): New.
	(dump_gs_cond): New.
	(dump_gimple_stmt): New.
	* gimple-ir.c (gs_cond_invert): New.
	* gimple-ir.h (enum gs_cond): Add comment.
	(gs_cond_invert): Protoize.
	* gimplify.c (gimplify_cond_expr): Rewrite for tuples.
	(gimplify_stmt): Return true if we added a statement to the queue.
	(gimplify_expr): Enable gimplify_cond_expr.
	Build tuples for GOTO_EXPRs and LABEL_EXPRs.

2007-06-27  Aldy Hernandez  <aldyh@redhat.com> 

	* gimple-ir.h (gs_seq_last): Return last statement.
	* testsuite/gcc.dg/gimple/compound_expr.c: Add checks.
	* testsuite/gcc.dg/gimple/gs_call.c: Same.
	* testsuite/gcc.dg/gimple/constructors.c: Same.
	* testsuite/gcc.dg/gimple/gs_assign.c: Same.

2007-06-27  Aldy Hernandez  <aldyh@redhat.com> 

	Put this patch back in.

	2007-06-22  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_modify_expr): Return after a successful
	call to gimplify_modify_expr_rhs.

2007-06-26  Aldy Hernandez  <aldyh@redhat.com>

	* testsuite/gcc.dg/gimple/gimple.exp: Pass -fdump-tree-gimple-details
	* testsuite/gcc.dg/gimple/compound_expr.c: Add dg-final.
	* testsuite/gcc.dg/gimple/gs_return.c: Same.
	* tree.h (gimplify_function_tree): Add return value.
	* diagnostic.h (debug_c_tree): Move under tree-pretty-print.c section.
	(dump_gimple_seq): New.
	to tests.
	* gimple-pretty-print.c (dump_gimple_seq): New.
	* gimplify.c (gimplify_function_tree): Add return value.
	Remove debug call and exit.
	Comment out non-working code.
	* c-gimplify.c (c_genericize): Dump gimple IR.  Exit.

2007-06-26  Diego Novillo  <dnovillo@google.com>

	* gimple-ir.c (gs_build_call_1): Fix formatting.

2007-06-26  Diego Novillo  <dnovillo@google.com>

	* gimple-pretty-print.c (dump_gs_assign, dump_gs_return,
	dump_gs_call): New functions.
	(dump_gimple_stmt): Call them.
	* gimple-ir.c (gs_build_call_1): Factor out of gs_build_call.
	(gs_build_call): Call it.
	(gs_build_call_vec): New function.
	* gimple-ir.h (struct gimple_statement_call): Change type of
	field 'nargs' to size_t.  Update all users.
	(gs_build_call_vec): Declare.
	(gs_call_set_fn): Remove.
	(gs_call_set_nargs): Remove.
	* gimplify.c: Include "vec.h"
	(gimplify_return_expr): Fix formatting
	(gimplify_call_expr): Call gs_build_call_vec.
	(gimplify_expr): Do not try to test if NULL expressions
	are in GIMPLE form.
	(gimplify_function_tree): Do not call debug_gimple_seq.
	* Makefile.in (gimplify.o): Include vec.h

2007-06-25  Chris Matthews  <chrismatthews@google.com>

	* gimplify.c (gimple_current_bind_expr): Changed to work with gs_seq
	accessors 
	(gimplify_and_add): Same.
	(annotate_all_with_locus): Same.
	(gimplify_self_mod_expr): Same.
	(gimplify_cleanup_point_expr): Same.
	(gimplify_expr): Same.
	(gimplify_body): Same.
	(force_gimple_operand): Same.
	(gimplify_init_ctor_eval_range): Added GS_ prefix.
	* gimple-iterator.h (gsi_last): Changed to gs_seq accessors.  Changed
	gimple_stmt_iterator to use a gimple instead of gimple *.
	(gsi_one_before_end_p): Same.
	(gsi_start): Same.
	* gimple-ir.h (gs_cond): Prepended GS_ to names.
	(gs_seq_first): Replaced macro.
	(gs_seq_last): Same.
	(gs_seq_set_first): Same.
	(gs_seq_set_last): Same.
	(gs_seq_init): Same.
	(gs_seq_empty_p): Same.
	(gs_assign_operand) Changed opno to be a size_t to match set.
	(gs_bind_body): Changed to use gs_seq.
	(gs_bind_set_body): Changed to use gs_seq, and gs_seq_set_first, and last. 
	(gs_asm_ninputs): Renamed.
	(gs_asm_noutputs): Renamed.
	(gs_asm_nclobbered): Renamed.
	(gs_asm_set_ninputs): Renamed.
	(gs_asm_set_noutputs): Renamed.
	(gs_asm_set_nclobbered): Renamed.
	(gs_asm_set_input_op): Renamed.
	(gs_asm_input_op): Renamed.
	(gs_asm_set_output_op): Renamed.
	(gs_asm_output_op): Renamed.
	(gs_omp_body): Changed to use gs_seq.
	(gs_omp_set_body): Changed to use gs_seq accessors.
	(gs_omp_for_pre_body): Changed to use gs_seq.
	(gs_omp_for_set_pre_body): Changed to use gs_seq accessors.
	(gs_seq_append): Changed to use gs_seq accessors.
	* gimple-ir.c (gs_add): Same.
	(gs_build_asm): Changed argument names to match accessors, and changed
	functions to new accessor names.
	(gs_build_cond): Reformatted.
	(gs_build_phi): Same.
	(gs_build_try): Renamed args to try_p and catch_p.
	(gs_build_omp_return): Change to correct arguments, and added a subcode 
	flag.
	* function.c (gimplify-oaraneters): Changed to gs_seq accessors.

2007-06-22  Aldy Hernandez  <aldyh@redhat.com>

	* gimplify.c (gimplify_modify_expr): Return after a successful
	call to gimplify_modify_expr_rhs.

2007-06-21  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.h (gs_assign_binary_rhs1): Add assertion for
	GSS_ASSIGN_BINARY.
	(gs_assign_binary_set_rhs1): Same.
	(gs_assign_binary_rhs2): Same.
	(gs_assign_binary_set_rhs2): Same.
	(gs_assign_unary_rhs): Same.
	(gs_assign_unary_set_rhs): Same.

2007-06-21  Aldy Hernandez  <aldyh@redhat.com>

	* gcc.dg/gimple/gimple.exp: New.
	* gcc.dg/gimple/compound_expr.c: New.
	* gcc.dg/gimple/with_size_expr.c: New.
	* gcc.dg/gimple/compound_expr.c: New.
	* gcc.dg/gimple/gs_call.c: New.
	* gcc.dg/gimple/constructors.c: New.
	* gcc.dg/gimple/gs_return.c: New.
	* gcc.dg/gimple/gs_assign.c: New.

2007-06-21  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_cond): Change order of arguments.  Make labels
	of type tree.
	(gs_build_asm): Fix formatting.
	* gimple-ir.h (gimple_statement_cond): Make labels of type tree.
	(gs_build_cond): Change order and type of arguments.
	(gs_build_asm): Fix formatting.
	(gs_omp_build_for): Same.
	(gs_assign_binary_rhs1): Remove assert.
	(gs_assign_binary_set_rhs1): Same.
	(gs_assign_binary_rhs2): Same.
	(gs_assign_binary_set_rhs2): Same.
	(gs_assign_unary_rhs): Same.
	(gs_cond_true_label): Return a tree.
	(gs_cond_set_true_label): Make label a tree.
	(gs_cond_set_false_label): Make label a tree.
	(gs_cond_false_label): Return a tree.
	* gimplify.c (gimplify_init_ctor_eval_range): Build tuples.
	(gimplify_init_ctor_eval): Same.
	(gimplify_init_constructor): Enable.  Adjust for tuples.
	(gimplify_modify_expr_rhs): Uncomment call to
	gimplify_init_constructor.

2007-06-21  Diego Novillo  <dnovillo@google.com>

	* gimple.def: Rename from gs.def.
	Adjust all users.

2007-06-21  Diego Novillo  <dnovillo@google.com>

	* tree-pretty-print.c (pred_symbol_code, do_gs_niy,
	debug_gimple_stmt, debug_gimple_seq, print_gimple_stmt,
	dump_gimple_stmt): Move to gimple-pretty-print.c
	* diagnostic.h: Add comment for functions in gimple-pretty-print.c
	* gimple-pretty-print.c: New file.
	* gimple-ir.c (gs_build_return): Fix spacing.
	(gs_build_assign): Likewise.
	* gimple-ir.h: Fix spacing.
	(gs_assign_set_operand): Change OPNO to size_t.
	Add assertions for OPNO's value.
	(gs_assign_lhs): Rename from gs_assign_operand_lhs.
	(gs_assign_binary_rhs1): Rename from gs_assign_operand_rhs.
	Assert that GS is GSS_ASSIGN_BINARY
	(gs_assign_binary_set_rhs1): Rename from gs_assign_set_rhs.
	Assert that GS is GSS_ASSIGN_BINARY.
	(gs_assign_binary_set_rhs2): Rename from gs_assign_set_rhs2.
	Assert that GS is GSS_ASSIGN_BINARY.
	(gs_assign_unary_rhs): New.
	(gs_assign_unary_set_rhs): New.
	(gs_call_fn, gs_call_lhs, gs_call_chain, gs_call_arg,
	gs_cond_lhs, gs_cond_rhs, gs_label_label, gs_goto_dest,
	gs_bind_vars, gs_asm_in_op, gs_asm_out_op, gs_asm_clobber_op,
	gs_catch_types, gs_catch_handler, gs_eh_filter_types,
	gs_eh_filter_failure, gs_try_eval, gs_try_cleanup,
	gs_phi_result, gs_switch_index, gs_switch_default_label,
	gs_switch_label,gs_omp_critical_name, gs_omp_for_clauses,
	gs_omp_for_index, gs_omp_for_initial, gs_omp_for_final,
	gs_omp_for_incr, gs_omp_parallel_clauses,
	gs_omp_parallel_child_fn, gs_omp_parallel_data_arg,
	gs_omp_single_clauses, gs_omp_sections_clauses,
	gs_return_retval): Change return type to 'tree'.
	* Makefile.in (OBJS-common): Add gimple-pretty-print.o.
	(gimple-pretty-print.o): New rule.

2007-06-20  Aldy Hernandez  <aldyh@redhat.com>

	* tree-pretty-print.c (dump_gimple_stmt): Change pred_symbol_code
	to op_symbol_code.

2007-06-19  Aldy Hernandez  <aldyh@redhat.com>

	* gimplify.c (gimplify_modify_expr_rhs): Enable.  Adjust for tuples.
	(gimplify_modify_expr): Call gimplify_modify_expr_rhs.
	(gimplify_compound_expr): Enable.  Adjust for tuples.  Remove comment
	that no longer applies.
	(gimplify_expr): Enable call to gimplify_compound_expr.

2007-06-18  Chris Matthews  <chrismatthews@google.com>

	* Makefile.in (GTFILES): Added gimeple-ir.h.

	* gimple-ir.c (gs_build_return, gs_build_call, gs_build_assign): 
	Changed to use new accessors.
	(gs_build_cond, gs_build_label, gs_build_goto,
	gs_build_nop, gs_build_bind gs_build_asm, gs_build_catch,
	gs_build_eh_filter, gs_build_try, gs_build_phi,
	gs_build_resx, gs_build_switch, gs_omp_build_critical,
	gs_omp_build_for, gs_omp_build_parallel,
	gs_omp_build_section, gs_omp_build_master,
	gs_omp_build_ordered, gs_omp_continue,
	gs_omp_build_ordered, gs_omp_build_return,
	gs_omp_build_sections, gs_omp_build_single): New
	functions.

	* gimple-ir.h (struct gimple_statement_switch): Changed
	default label to be in labels[0].

	(struct gimple_statement_asm): Corrected the allocation
	length.

	(enum gs_cond): New enum.
	(gs_assign_set_operand): Changed to work with new accessors.
	(gs_assign_operand_lhs, gs_assign_operand_rhs,
	gs_assign_operand_set_lhs, gs_assign_set_rhs,
	gs_assign_operand_rhs2, gs_assign_set_rhs2, gs_call_fn,
	gs_call_set_fn, gs_call_lhs, gs_call_set_lhs,
	gs_call_chain, gs_call_set_chain, gs_call_nargs,
	gs_call_set_nargs, gs_call_arg, gs_call_set_arg,
	gs_cond_lhs, gs_cond_set_lhs, gs_cond_rhs,
	gs_cond_set_rhs, gs_cond_true_label,
	gs_cond_set_true_label, gs_cond_set_false_label,
	gs_cond_false_label, gs_label_label, gs_label_set_label,
	gs_goto_dest, gs_goto_set_dest, gs_bind_vars,
	gs_bind_set_vars, gs_bind_body, gs_bind_set_body,
	gs_asm_ni, gs_asm_set_ni, gs_asm_no, gs_asm_set_no,
	gs_asm_nc, gs_asm_set_nc, gs_asm_in_op, gs_asm_set_in_op,
	gs_asm_out_op, gs_asm_set_out_op, gs_asm_clobber_op,
	gs_asm_set_clobber_op, gs_asm_string, gs_asm_set_string,
	gs_catch_types, gs_catch_handler, gs_catch_set_types,
	gs_catch_set_handler, gs_eh_filter_types,
	gs_eh_filter_failure, gs_eh_filter_set_types,
	gs_eh_filter_set_failure, gs_try_eval, gs_try_cleanup,
	gs_try_set_eval, gs_try_set_cleanup, gs_phi_capacity,
	gs_phi_set_capacity, gs_phi_nargs, gs_phi_set_nargs,
	gs_phi_result, gs_phi_set_result, gs_phi_arg,
	gs_phi_set_arg, gs_resx_region, gs_resx_set_region,
	gs_switch_nlabels, gs_switch_set_nlabels,
	gs_switch_index, gs_switch_set_index,
	gs_switch_default_label, gs_switch_set_default_label,
	gs_switch_label, gs_switch_set_label, gs_omp_body,
	gs_omp_set_body, gs_omp_critical_name,
	gs_omp_critical_set_name, gs_omp_for_clauses,
	gs_omp_for_set_clauses, gs_omp_for_index,
	gs_omp_for_set_index, gs_omp_for_initial,
	gs_omp_for_set_initial, gs_omp_for_final,
	gs_omp_for_set_final, gs_omp_for_incr,
	gs_omp_for_set_incr, gs_omp_for_pre_body,
	gs_omp_for_set_pre_body, gs_omp_parallel_clauses,
	gs_omp_parallel_set_clauses, gs_omp_parallel_child_fn,
	gs_omp_parallel_set_child_fn, gs_omp_parallel_data_arg,
	gs_omp_parallel_set_data_arg, gs_omp_single_clauses,
	gs_omp_single_set_clauses, gs_omp_sections_clauses,
	gs_omp_sections_set_clauses, gs_assign_omp_for_cond,
	gs_omp_for_cond gs_return_set_retval,
	gs_add_subcode_flag): New accessor functions.
	(gs_return_retval): Renamed gs_return_operand_retval to match accessor 
	conventions.

2007-05-31  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_call): New.
	* gimple-ir.h (GS_CALL_LHS): New.
	(GS_CALL_FN): New.
	(GS_CALL_CHAIN): New.
	(GS_CALL_NARGS): New.
	(GS_CALL_ARG): New.
	(gs_call_lhs): New.
	(gs_call_fn): New.
	(gs_call_chain): New.
	(gs_call_nargs): New.
	(gs_call_arg): New.
	* gimplify.c (gimplify_modify_expr_to_memcpy): Enable and rewrite for 
	tuples.
	(gimplify_modify_expr_to_memset): Same.
	(gimplify_statement_list): Same.
	(gimplify_expr): Enable STATEMENT_LIST case.

2007-05-29  Aldy Hernandez  <aldyh@redhat.com>

	Merged revisions 124007-125166 from mainline.

2007-05-23  Aldy Hernandez  <aldyh@redhat.com>

	* builtins.c (std_gimplify_va_arg_expr): Add argument to gimplify_expr.
	Remove seq argument.
	(gimplify_va_arg_expr): Same.
	* tree-gimple.h: Same.
	* langhooks.c (lhd_gimplify_expr): Change pre_p and post_p types to
	sequences.
	* langhooks-def.h (lhd_gimplify_expr): Change 
	* langhooks.h (struct lang_hooks): Remove argument.
	* gimplify.c (internal_get_tmp_var): Adjust calls to gimplify_expr
	for new arguments.
	(gimplify_switch_expr): Same.
	(gimplify_var_or_parm_decl): Same.
	(gimplify_compound_lval): Same.
	(gimplify_self_mod_expr): Same.
	(gimplify_arg): Same.
	(gimplify_call_expr): Same.
	(gimplify_init_ctor_preeval): Same.
	(gimplify_init_constructor): Same.
	(gimplify_modify_expr_rhs): Same.
	(gimplify_modify_expr): Same.
	(gimplify_save_expr): Same.
	(gimplify_addr_expr): Same.
	(gimplify_asm_expr): Same.
	(gimplify_target_expr): Same.
	(omp_check_private): Same.
	(gimplify_scan_omp_clauses): Same.
	(gimplify_omp_parallel): Same.
	(gimplify_omp_for): Same.
	(goa_stabilize_expr): Same.
	(gimplify_omp_atomic): Same.
	(gimplify_one_sizepos): Same.
	(force_gimple_operand): Same.
	(gimplify_expr): Remove seq_p argument.  Add new is_statement
	argument.  Adjust accordingly.  Make seq_p required.

2007-05-07  Aldy Hernandez  <aldyh@redhat.com>

	* function.c (gimplify_parameters): Use new GS_SEQ_INIT definition.
	* gimple-ir.h (GS_SEQ_INIT): Do not use C99 constructs.
	* gimplify.c: Disable non working code throughout.
	Pass additional call to gimplify_expr throughout.
	(gimplify_ctx): Make conditional_cleanups a sequence.
	(gimple_push_condition): Use GS_SEQ_EMPTY_P.
	(gimple_pop_condition): Adapt for sequences.
	(gimplify_and_add): Use gs_seq_append regardless of side effects.
	(internal_get_tmp_var): Use sequences.
	(get_formal_tmp_var): Same.
	(get_initialized_tmp_var): Same.
	(annotate_one_with_locus): Change GS_LOCUS to GS_LOCUS_EMPTY_P.
	(gimplify_bind_expr): Use sequences.
	Change append_to_statement_list to gimplify_and_add.
	(gimplify_return_expr): Add gimplified code to pre_p.
	(gimplify_decl_expr): New seq_p parameter.
	(gimplify_loop_expr): Adapt for sequences.
	Use gimplify_and_add instead of append_to_statement_list.
	(gimplify_switch_expr): Same.
	(gimplify_compound_lval): Use sequences.
	(gimplify_self_mod_expr): Same.
	Use gs_seq_append instead of append_to_statement_list.
	(gimplify_arg): Use sequences.
	(gimplify_call_expr): Same.
	(gimplify_cond_expr): Use sequences.
	(gimplify_init_ctor_preeval): Use sequences.
	(gimplify_init_ctor_eval_range): Same.
	Use gimplify_and_add instead of append_to_statement_list.
	(gimplify_init_ctor_eval): Use sequences.
	(gimplify_init_constructor): Same.
	Remove one call to append_to_statement_list.
	(gimplify_modify_expr_rhs): Use sequences.
	(gimplify_modify_expr_complex_part): Use sequences.
	Remove call to tree_to_gimple_tuple.
	Build GS_ASSIGN tuple.
	(gimplify_modify_expr): Use new argument.  Use sequences.
	Do not call append_to_statement_list.
	Build GS_ASSIGN tuple.
	Do not call tree_to_gimple_tuple.
	Set *expr_p to NULL when we do not want the value.
	(gimplify_compound_expr): Use sequences.
	(gimplify_save_expr): Same.
	(gimplify_addr_expr): Same.
	(gimplify_asm_expr): Same.
	(gimplify_cleanup_point_expr): Same.
	(gimple_push_cleanup): Same.
	Build GS_ASSIGN tuples.
	(gimplify_target_expr): Use sequences.
	(gimplify_scan_omp_clauses): Same.
	Add argument to gimplify_stmt calls.
	(gimplify_omp_parallel): Same.
	(gimplify_omp_for): Use sequences.
	(gimplify_omp_workshare): Same.
	(goa_stabilize_expr): Same.
	(gimplify_omp_atomic_pipeline): Same.
	(gimplify_omp_atomic_mutex): Same.
	(gimplify_omp_atomic): Same.
	(gimplify_expr): Same.
	Call GS_SEQ_INIT with argument.
	Use new seq_p argument.
	Do not call tree_to_gimple_tuple.
	Pass additional argument to gimplify_decl_expr.
	Do not pass seq_p argument to gimplify_return_expr.
	Call gs_seq_append instead of append_to_statement_list.
	Check that all statements have been converted to tuples.
	Make pre_p and seq_p sequences coexist.
	(gimplify_type_sizes): Use sequences.
	(gimplify_one_sizepos): Same.
	(gimplify_body): Make parm_stmts a sequence.
	Add argument to seq_p.
	(gimplify_function_tree): Call debug_gimple_seq.
	(force_gimple_operand): Use sequences.
	(force_gimple_operand_bsi): Use sequences.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* omp-low.c (build_omp_barrier): Adjust arguments for sequences.
	(lower_rec_input_clauses): Disable non working code.
	(lower_regimplify): Pass additional argument to gimplify_expr.
	* tree-mudflap.c (mx_register_decls): Disable non working code.
	* tree-inline.c (copy_bb): Disable non working code.
	(setup_one_parameter): Same.
	* tree-cfg.c (make_edges): Same.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* tree-gimple.h (get_initialized_tmp_var): Adjust prototype
	for sequences.
	(get_formal_tmp_var): Same.
	(gimplify_type_sizes): Same.
	(gimplify_one_sizepos): Same.
	(gimplify_stmt): Same.
	(gimplify_and_add): Same.
	(gimplify_va_arg_expr): Same.
	* langhooks.h (lang_hooks): Same.
	* function.c (gimplify_parm_type): Adjust for sequences.
	(gimplify_parameters): Same.
	* c-gimplify.c (gimplify_compound_literal_expr): Same.
	(c_gimplify_expr): Same.
	* tree-flow.h (force_gimple_operand): Same.
	* c-common.h (c_gimplify_expr): Adjust prototype for sequences.
	* config/i386/i386.c (ix86_gimplify_va_arg): Adjust for sequences.
	Change call to append_to_statement_list to gimplify_and_add.
	Add parameter to gimplify_expr.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_code_name): Constify.
	(gs_build_assign): New.
	(gimple_statement_structure): Abstract code out to...
	(gss_for_assign): ...here.
	(gs_add): Set the last item correctly.
	* gimple-ir.h (GS_LOCUS_EMPTY_P): New.
	(GS_SEQ_INIT): Add a cast.
	(gimple_statement_base): Make code a gs_code enum.
	(gimple_statement_with_ops): Remove address_taken.
	(GS_ASSIGN_BINARY_LHS): New.
	(GS_ASSIGN_BINARY_RHS1): New.
	(GS_ASSIGN_BINARY_RHS2): New.
	(GS_ASSIGN_UNARY_REG_LHS): New.
	(GS_ASSIGN_UNARY_REG_RHS): New.
	(GS_ASSIGN_UNARY_MEM_LHS): New.
	(GS_ASSIGN_UNARY_MEM_RHS): New.
	(gs_seq_append): New.
	Move gs_seq typedef to...
	* coretypes.h: ...here.
	* gimple-iterator.h (gsi_stmt_ptr): Add FIXME note.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* tree.h (std_gimplify_va_arg_expr): Change tree * to a sequence
	in prototype.
	(gimplify_parameters): Return a sequence.
	* target.h (gimplify_va_arg_expr): Change tree * to a sequence.
	* builtins.c (std_gimplify_va_arg_expr): Same.
	Pass additional argument to gimplify_expr.
	(gimplify_va_arg_expr): Change tree * to a sequence.
	Change append_to_statement_list call to gimplify_and_add.
	Pass additional argument to gimplify_expr calls.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* tree-pretty-print.c (do_gs_niy): New.
	(debug_gimple_stmt): New.
	(debug_gimple_seq): New.
	(print_gimple_stmt): New.
	(dump_gimple_stmt): New.
	* diagnostic.h: Add prototypes for dump_gimple_stmt,
	print_gimple_stmt, debug_gimple_stmt, debug_gimple_seq.

2007-04-26  Aldy Hernandez  <aldyh@redhat.com>

	* tree-gimple.h (annotate_all_with_locus): First argument is now a
	sequence.
	* gimple-ir.h (GS_LOCUS): New.
	(gimple_statement_base): Locus is of type location_t.
	* gimplify.c (internal_get_tmp_var): Use sequences.
	(should_carry_locus_p): Adjust for gimple ir.
	(annotate_one_with_locus): Same.
	(annotate_all_with_locus): Same.
	(gimplify_stmt): Adjust for sequences.
	(gimplify_expr): Same.

2007-04-25  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.h (GS_SEQ_EMPTY_P): New.
	Move gs_build_return, gs_add, and gimple_statement_structure
	prototypes.
	(gs_assign_operand): Fix typos in gss.
	Include gimple-iterator.h.
	* Makefile.in (GIMPLE_IR_H): Add gimple-iterator.h.
	(TREE_GIMPLE_H): Same.

2007-04-25  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-iterator.h (gsi_one_before_end_p): Use GS_SEQ_LAST.

2007-04-25  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-iterator.h: New file.

2007-04-23  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c: New file.
	* gimple-ir.h: New file.
	* gsstruct.def: New file.
	* gs.def: New file.
	* gengtype.c (open_base_files): Add gimple-ir.h.
	* tree-gimple.h: Include gimple-ir.h.
	Add sequence to gimplify_expr and gimplify_body prototypes.
	* gimplify.c: Include gimple-ir.h.
	(gimplify_and_add): Adjust for gimple IR.
	(gimplify_return_expr): Same.
	(gimplify_stmt): Add seq_p argument.
	(gimplify_expr): Add seq_p sequence and adjust accordingly.
	(gimplify_body): Same.
	* coretypes.h: Add gimple_statement_d and gimple definitions.
	* Makefile.in (GIMPLE_IR_H): New.
	(TREE_GIMPLE_H): Add gimple-ir.h.
	(OBJS-common): Add gimple-ir.o.
	(gimplify.o): Add GIMPLE_IR_H.
	(gimple-ir.o): New.
	(build/gencheck.o): Add gs.def.

Local Variables:
mode: change-log
End:
