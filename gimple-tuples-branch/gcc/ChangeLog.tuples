2007-08-07  Diego Novillo  <dnovillo@google.com>

	Merge with mainline @127277.

	* version.c (VERSUFFIX): Update.

2007-08-07  Diego Novillo  <dnovillo@google.com>

	* gimple.h (gimple_call_return): New.
	* gimplify.c (get_tmp_var_for): Call it.

2007-08-02  Chris Matthews  <chrismatthews@google.com>

	* gimplify.c (gimplify_asm_expr): Created new gimple tuple.
	* gimple-pretty-printer.c (dump_gimple_asm): Added function to dump a
	GIMPLE_ASM statement.
	(dump_gimple_stmt): Updated to use the dump_gimple_asm function.
	* gimple.c (gss_for_code): Made asm statements return as with_mem_ops.
	(build_gimple_with_ops): Asm statements are added as a specal case for
	allocation because they have extra fields that are not
	allocated correctly in the current generic op allocator.
	(build_gimple_asm_1): Added a helper function to setup the basics of a
	GIMPLE_ASM tuple.
	(build_gimple_asm_vec): Create a GIMPLE_ASM tuple from vector arguments.
	(build_gimple_asm): Changed to call the new helper function.

2007-08-03  Diego Novillo  <dnovillo@google.com>

	* gimple-pretty-print.c (INDENT): Tidy.
	(dump_binary_rhs): New.
	(dump_gimple_assign): Call it.
	* gimplify.c (gimplify_modify_expr_complex_part): If the value
	is not interesting, nullify *EXPR_P.
	(gimplify_body): Do not add the sequence to the GIMPLE_BIND more
	than once.

2007-08-01  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_switch_expr): Remove switch_body_seq_.
	Change switch_body_seq to struct gimple_sequence.
	Adjust all uses.
	Call gimplify_stmt instead of gimplify_statement_list
	(gimplify_to_stmt_list): Remove.
	Update all users.
	* tree-mudflap.c: Include gimple.h
	(mf_decl_cache_locals): Convert to emit GIMPLE.
	(mf_build_check_statement_for): Add FIXME and unreachable
	markers to convert to GIMPLE.
	* Makefile.in (tree-mudflap.o): Depend on $(GIMPLE_H).
	* config/i386/i386.c (ix86_gimplify_va_arg): Adapt to emit
	GIMPLE.

2007-08-01  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_switch_expr): Do not call sort_case_labels
	if there are no labels other than 'default'.
	* gimple.h (gimple_num_ops, gimple_op, gimple_set_op): Use
	result of GIMPLE_RANGE_CHECK call.

2007-08-01  Diego Novillo  <dnovillo@google.com>

	* DEV-PHASE: Revert to mainline version.
	* version.c (VERSUFFIX): Add branch name and revision number
	of latest mainline merge.

2007-07-31  Diego Novillo  <dnovillo@google.com>

	Mainline merge (@127100).
	* DEV-PHASE: Updated.

2007-07-31  Diego Novillo  <dnovillo@google.com>

	* dominance.c (free_dominance_info): If there is no CFG,
	do nothing.
	* cfg.c (compact_blocks): Likewise.

2007-07-30  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (get_tmp_var_for): When creating a new temporary
	for a GIMPLE_CALL, use the type returned by the function call
	instead of the type of the function decl.
	* gimple.c (build_gimple_return): Accept NULL and RESULT_DECL
	return values.

2007-07-30  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_init_constructor): If both sides
	of the constructor are in GIMPLE form but the assignment
	has not been emitted, emit it.

2007-07-28  Diego Novillo  <dnovillo@google.com>

	* gimplify.c (gimplify_return_expr): Do not create a MODIFY_EXPR
	as return argument
	* gimple.c (build_gimple_return): Assert that the returned value
	is a GIMPLE value.

2007-07-27  Diego Novillo  <dnovillo@google.com>

	* tree-gimple.c (get_gimple_rhs_class): New.
	(is_gimple_formal_tmp_rhs): Call it.
	* tree-gimple.h (enum gimple_rhs_class): New.
	* gimple-iterator.h (gsi_next): Assert that there is nothing
	beyond the end of the sequence.
	(gsi_prev): Assert that there is nothing before the start of
	the sequence.
	* gimplify.c (gimplify_switch_expr): Tidy creation of default label.
	(gimplify_expr): Fix concatenation of internal sequences to PRE_P.
	* gimple.c (get_num_ops_for): Remove.  Update users.
	(build_gimple_assign): Call get_gimple_rhs_class to determine
	how many operands to allocate.
	(gimple_add): Assert that GS does not have previous or next
	statements.
	(gimple_seq_append): Move from gimple.h.

2007-07-27  Aldy Hernandez  <aldy@quesejoda.com>

	* cgraph.c: Fix line wrap.
	* cgraph.h: Same.
	* tree-pass.h (struct tree_opt_pass): Add works_with_tuples_p
	field.
	* cgraphunit.c (cgraph_analyze_functions): Remove check for
	DECL_SAVED_TREE.
	(cgraph_expand_function): Comment out TREE_ASM_WRITTEN assertion.
	* tree-optimize.c (tree_lowering_passes): Comment out call to
	compact_blocks.
	* passes.c (execute_one_pass): Return if pass has not been
	converted to tuples.
	* tree-vrp.c, regrename.c, fwprop.c, tree-into-ssa.c,
	tree-complex.c, see.c, cgraphbuild.c, tracer.c, cgraph.c,
	postreload-gcse.c, postreload.c, tree-ssa-loop-ch.c,
	tree-tailcall.c, tree-pass.h, ipa-cp.c, final.c, omp-low.c,
	tree-ssa-dse.c, ipa-reference.c, tree-ssa-uncprop.c,
	auto-inc-dec.c, reorg.c, tree-ssa-copyrename.c, tree-ssa-ccp.c,
	df-core.c, mode-switching.c, tree-nomudflap.c, modulo-sched.c,
	ipa-pure-const.c, cse.c, web.c, tree-stdarg.c,
	tree-ssa-math-opts.c, tree-ssa-dom.c, tree-nrv.c,
	tree-ssa-alias.c, loop-init.c, gimple-low.c, tree-ssa-sink.c,
	ipa-inline.c, global.c, jump.c, ifcvt.c, predict.c,
	tree-ssa-loop.c, recog.c, dse.c, tree-ssa-ifcombine.c,
	matrix-reorg.c, c-decl.c, tree-eh.c, regmove.c, local-alloc.c,
	function.c, tree-vectorizer.c, gcse.c, ipa-type-escape.c,
	tree-if-conv.c, init-regs.c, ipa.c, tree-ssa-phiopt.c,
	rtl-factoring.c, lower-subreg.c, bt-load.c, tree-dfa.c except.c,
	emit-rtl.c, cfgexpand.c, tree-cfgcleanup.c, cfgcleanup.c,
	tree-ssa-pre.c, tree-sra.c, tree-mudflap.c, tree-ssa-copy.c,
	cfglayout.c, tree-ssa-forwprop.c, tree-ssa-dce.c, tree-ssa.c,
	regclass.c, integrate.c, tree-optimize.c, tree-object-size.c,
	combine.c, tree-outof-ssa.c, bb-reorder.c, stack-ptr-mod.c,
	var-tracking.c, tree-profile.c, tree-vect-generic.c, reg-stack.c,
	sched-rgn.c, tree-ssa-structalias.c, tree-cfg.c, passes.c,
	tree-ssa-reassoc.c, combine-stack-adj.c, cfgrtl.c, dce.c,
	tree-ssanames.c: Set works_with_tuples_p field to 0.

2007-07-25  Diego Novillo  <dnovillo@google.com>

	* gimple.c: Use ENABLE_GIMPLE_CHECKING instead of
	ENABLE_TREE_CHECKING.
	(set_gimple_code): New.
	(set_gimple_prev): New.
	(set_gimple_next): New.
	* gimple.h: Use ENABLE_GIMPLE_CHECKING instead of
	ENABLE_TREE_CHECKING.
	(gimple_code): Inline function replacement for GIMPLE_CODE.
	(gimple_flags): Inline function replacement for GIMPLE_SUBCODE_FLAGS.
	(gimple_next): Inline function replacement for GIMPLE_NEXT.
	(gimple_prev): Inline function replacement for GIMPLE_PREV.
	(gimple_locus): Inline function replacement for GIMPLE_LOCUS.
	(gimple_locus_empty_p): Inline function replacement for
	GIMPLE_LOCUS_EMPTY_P.
	(struct gimple_statement_base): Rename field 'subcode_flags'
	to 'flags'.
	(set_gimple_flags): New.
	(gimple_bb): New.
	(set_gimple_bb): New.
	(set_gimple_block): New.
	(set_gimple_locus): New.
	(add_gimple_flag): Rename from gimple_add_subcode_flag.

2007-07-25  Diego Novillo  <dnovillo@google.com>

	* tree-gimple.h (build_gimple_eh_filter_tree): Rename from
	gimple_build_eh_filter_tree.
	* gimple.h (build_gimple_return): Rename from gimple_build_return.
	(build_gimple_assign): Rename from gimple_build_assign.
	(build_gimple_call_vec): Rename from gimple_build_call_vec.
	(build_gimple_call): Rename from gimple_build_call.
	(build_gimple_label): Rename from gimple_build_label.
	(build_gimple_goto): Rename from gimple_build_goto.
	(build_gimple_nop): Rename from gimple_build_nop.
	(build_gimple_bind): Rename from gimple_build_bind.
	(build_gimple_asm): Rename from gimple_build_asm.
	(build_gimple_catch): Rename from gimple_build_catch.
	(build_gimple_eh_filter): Rename from gimple_build_eh_filter.
	(build_gimple_try): Rename from gimple_build_try.
	(build_gimple_phi): Rename from gimple_build_phi.
	(build_gimple_resx): Rename from gimple_build_resx.
	(build_gimple_switch): Rename from gimple_build_switch.
	(build_gimple_switch_vec): Rename from gimple_build_switch_vec.
	(build_gimple_omp_parallel): Rename from gimple_build_omp_parallel.
	(build_gimple_omp_for): Rename from gimple_build_omp_for.
	(build_gimple_omp_critical): Rename from gimple_build_omp_critical.
	(build_gimple_omp_section): Rename from gimple_build_omp_section.
	(build_gimple_omp_continue): Rename from gimple_build_omp_continue.
	(build_gimple_omp_master): Rename from gimple_build_omp_master.
	(build_gimple_omp_return): Rename from gimple_build_omp_return.
	(build_gimple_omp_ordered): Rename from gimple_build_omp_ordered.
	(build_gimple_omp_sections): Rename from gimple_build_omp_sections.
	(build_gimple_omp_single): Rename from gimple_build_omp_single.
	Update all users.

2007-07-24  Chris Matthews  <chrismatthews@google.com>

	* configure.ac: Added support for ENABLE_GIMPLE_CHECKING and the
	--enable-checking=gimple flag.
	* config.in: Same.
	* configure: Regenerated.
	* gimplify.c (cpt_same_type): Same.
	(gimple_push_condition): Same.
	(gimplify_addr_expr): Same.
	(gimplify_expr): Same.
	(gimplify_body): Same.
	(check_pointer_types_r): Same.

2007-07-24  Diego Novillo  <dnovillo@google.com>

	* gimple.def: Re-organize codes that take tree operands so
	they are consecutive.
	* gsstruct.def (GSS_LABEL, GSS_ASSIGN_BINARY, GSS_ASSIGN_UNARY_REG,
	GSS_ASSIGN_UNARY_MEM, GSS_COND, GSS_GOTO, GSS_SWITCH, GSS_CALL,
	GSS_RETURN): Remove.  Update al users.
	* gimple.c (gss_for_code): New.
	(gimple_statement_structure): Call it.
	(get_num_ops_for): New.
	(gimple_build_with_ops): New.
	(gimple_build_return, gimple_build_call_1, gimple_build_assign,
	gimple_build_cond, gimple_build_label, gimple_build_goto,
	gimple_build_switch_1, ): Call it.
	(gss_for_assign): Remove.  Update all users.
	(gimple_check_failed): Do not assume that subcode is a valid tree
	code.
	(gimple_range_check_failed): New.
	(walk_tuple_ops): Implement in terms of gimple_num_ops and
	gimple_op when dealing with GSS_WITH_OPS and GSS_WITH_MEM_OPS
	statements.
	* gimple.h (struct gimple_statement_with_ops): Add fields 'num_ops'
	and 'op'.
	(struct gimple_statement_label, gimple_statement_assign_binary,
	gimple_statement_assign_unary_reg, gimple_statement_assign_unary_mem,
	gimple_statement_cond, gimple_statement_goto, gimple_statement_switch,
	gimple_statement_call, gimple_statement_return): Remove.
	Update all users.
	(gimple_range_check_failed): Declare.
	(GIMPLE_RANGE_CHECK): Define.
	(gimple_num_ops): New.
	(gimple_op): New.
	(gimple_set_op): New.
	(gimple_assign_rhs1): Rename from gimple_assign_binary_rhs1.
	(gimple_assign_set_rhs1): Rename from gimple_assign_binary_set_rhs1.
	(gimple_assign_rhs2): Rename from gimple_assign_binary_rhs2.
	(gimple_assign_set_rhs2): Rename from gimple_assign_binary_set_rhs2.
	(gimple_assign_unary_rhs): Remove.  Update all users.
	(gimple_assign_unary_set_rhs): Likewise.
	(gimple_switch_num_labels): Rename from gimple_switch_nlabels.
	(gimple_call_fn, gimple_call_lhs, gimple_call_chain,
	gimple_call_set_chain, gimple_call_nargs, gimple_call_arg,
	gimple_call_set_arg, gimple_cond_lhs, gimple_cond_set_lhs,
	gimple_cond_rhs, gimple_cond_set_rhs, gimple_cond_true_label,
	gimple_cond_false_label, gimple_cond_set_true_label,
	gimple_cond_set_false_label, gimple_label_label,
	gimple_label_set_label, gimple_goto_dest,
	gimple_goto_set_dest, gimple_asm_input_op,
	gimple_asm_set_input_op, gimple_asm_output_op,
	gimple_asm_set_output_op, gimple_asm_clobber_op,
	gimple_asm_set_clobber_op, gimple_switch_num_labels,
	gimple_switch_index, gimple_switch_set_index,
	gimple_switch_default_label, gimple_switch_set_default_label,
	gimple_switch_label, gimple_switch_set_label,
	gimple_return_retval, gimple_return_set_retval): Implement
	using the array of operands in field 'with_ops'.
	(gimple_asm_set_ninputs, gimple_asm_set_noutputs,
	gimple_asm_set_nclobbered, gimple_asm_set_string): Remove.
	Update all users.


2007-07-24  Aldy Hernandez  <aldyh@redhat.com>

	* tree.c (get_callee_fndecl): Revert previous change.
	* gimplify.c (gimplify_call_expr): Use result from
	get_callee_fndecl if available.
	* c-common.c (c_warn_unused_result): Do not use
	get_callee_fndecl.
	Add assertion.

2007-07-24  Diego Novillo  <dnovillo@google.com>

	Merge with mainline (@126872)

2007-07-23  Aldy Hernandez  <aldyh@redhat.com>

	* tree.c (get_callee_fndecl): Work when only the CALL_EXPR_FN has
	been passed.
	* c-common.c (c_warn_unused_result): Use get_callee_fndecl.
	
2007-07-23  Aldy Hernandez  <aldyh@redhat.com>

	* c-decl.c: Include gimple.h.
	(c_gimple_diagnostics_recursively): Call c_warn_unused_result with
	tuplified body.
	Exit if -fgimple-only.
	* gimplify.c (gimplify_call_expr): Call gimple_build_call_vec with
	the correct callee.
	* c-gimplify.c (c_genericize): Remove exit.
	* c-common.c: Include gimple.h.
	(c_warn_unused_result): Tuplify.
	* c-common.h (c_warn_unused_result): Protoize.
	* Makefile.in (c-decl.o): Depend on GIMPLE_H.
	(c-common.o): Same.
	* gimple.c (gimple_build_catch): Handler is a sequence.
	Adjust accordingly.
	(gimple_build_eh_filter): Failure is a sequence.
	Adjust accordingly.
	(walk_tuple_ops): case GIMPLE_CATCH: Walk handler as a sequence.
	case GIMPLE_EH_FILTER: Walkder failure as a sequence.
	* gimple.h (gimple_statement_catch): Make handler a sequence.
	(gimple_statement_eh_filter): Make failure a sequence.
	(gimple_build_catch): Make second argument a sequence.
	(gimple_build_eh_filter): Same.
	(gimple_catch_handler): Return a sequence.
	(gimple_catch_set_handler): Make second argument a sequence.
	(gimple_eh_filter_failure): Return a sequence.
	(gimple_eh_filter_set_failture): Make second argument a sequence.

2007-07-20  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_return_expr): Handle an empty ret_expr
	gracefully.

2007-07-19  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/instrument.c: New.
	* gimplify.c (gimplify_function_tree): Generate tuples for function
	instrumentation.

2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimple_add_tmp_var): Remove abort.  Add comment.
	
2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimple_add_tmp_var): Remove abort.  Add comment.

2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_and_add): Remove unecessary temporary sequence.
	Remove fixme.  Add comment.
	(gimplify_loop_expr): Tuplefy.
	(gimplify_bind_expr): Streamline GIMPLE_TRY_FINALLY tuple.
	(gimplify_expr): Tuplefy TRY_*_EXPR cases.
	* gimple.c: Fix some spacing.
	(gimple_build_try, gimple_omp_build_*): Handle empty sequences.
	(gimple_push): Remove.
	* gimple.h (gimple_push): Remove.

2007-07-18  Aldy Hernandez  <aldyh@redhat.com> 

	* tree-gimple.h (declare_vars): Update arguments.
	* gimplify.c (pop_gimplify_context): Enable call to declare_vars.
	(declare_vars): Convert to use tuples.
	(gimple_add_tmp_var): Same.
	* gimple.h (GIMPLE_BLOCK): New.

2007-07-17  Chris Matthews  <chrismatthews@google.com>

	* gimplify.c (gs_build_eh_filter): Renamed to gs_build_eh_filter_tree
	to avoid name conflict.
	* gimple-pretty-print.c: Renamed to debug_gs_* to debug_gimple_*.
	Updated all users.
	* gimple.h: Renamed all functions with GS and gs prefixes to GIMPLE and
	gimple, and updated users.
	Renamed gs_seq_* functions to gimple_seq_*. Updated all users. 
	* gimple.def: Definitions changed to from GS_* to GIMPLE_*.

2007-07-16  Chris Matthews  <chrismatthews@google.com>

	* gimple.c (gs_build_switch): Changed nlabels to represent total number
	of labels including the default.
	(gs_build_switch_1): Same.
	(walk_tuple_ops): Same.
	* gimple-pretty-print.c (dump_gs_switch): Same.

2007-07-16  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_ctx): Rename current_bind_expr_seq to
	bind_expr_stack and make it a vector.
	(push_gimplify_context): Adjust bind_expr_stack for vectors.
	(pop_gimplify_context): Same.
	(gimple_push_bind_expr): Same.
	(gimple_pop_bind_expr): Same.
	(gimple_current_bind_expr): Same.
	(get_tmp_var_for): Use ``code''.
	(gimplify_bind_expr): Remove comment.
	(gimplify_case_label_expr): Add whitespace.
	* gimple.c (gs_pop): Remove.
	* gimple.h: Define vectors of a gimple type.
	(gs_pop): Remove prototype.
	* Makefile.in (GIMPLE_H): Add vec.h.

2007-07-15  Diego Novillo  <dnovillo@google.com>

	* gimple.c: Rename from gimple-ir.c.
	Update all users.
	* gimple.h: Rename from gimple-ir.h.
	Update all users.

2007-07-15  Diego Novillo  <dnovillo@google.com>

	* gimple-ir.c (gimple_statement_structure): Remove code
	after gcc_unreachable call.
	* gimplify.c (get_tmp_var_for): New.
	(gimplify_call_expr): Call it.

2007-07-14  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/with_size_expr.c: Check for GS_TRY.
	* Makefile.in (gimple-ir.o): Add diagnostic.h dependency.
	* gimple-pretty-print.c (dump_gs_call): Dump LHS if available.
	(dump_gs_try): New.
	(dump_gimple_stmt): Add case for GS_TRY.
	* gimple-ir.c.  Include diagnostic.h.
	(gs_build_try): Cleanup and eval are sequences.
	Remove catch_p and finally_p arguments.  Add catch_finally argument.
	(gs_omp_build_critical): Body is a gs_seq.
	(gs_omp_build_parallel): Same.
	(gs_omp_build_section): Same.
	(gs_omp_build_master): Same.
	(gs_omp_build_continue): Same.
	(gs_omp_build_ordered): Same.
	(gs_omp_build_sections): Same.
	(gs_omp_build_single): Same.
	(gs_omp_build_for): Body and pre_body is a gs_seq.
	(gs_push): New.
	(gs_pop): New.
	(walk_tuple_ops): Walk GS_TRY tuples eval and cleanups correctly.
	Dump tuple before we ICE.
	* gimple-ir.h (gs_seq_copy): New.
	(struct gimple_statement_try): Eval and cleanups are gs_seq's.
	(gs_bind_set_body): Use gs_seq_copy.
	(gs_try_eval): Return address of eval.
	(gs_try_cleanup): Return address of cleanup.
	(gs_try_set_eval): Use gs_seq_copy.
	(gs_try_set_cleanup): Same.
	(gs_omp_set_body): Same.
	(gs_omp_for_set_pre_body): Same.
	* gimplify.c (struct gimplify_ctx): Rename current_bind_expr to
	current_bind_expr_seq, and make it a sequence.
	(pop_gimplify_context): Adjust for current_bind_expr_seq.
	(gimple_push_bind_expr): Same.
	(gimple_pop_bind_expr): Same.
	(gimple_current_bind_expr): Same.
	(build_stack_save_restore): Generate tuples.
	(gimplify_bind_expr): Same.

2007-07-13  Diego Novillo  <dnovillo@google.com>

	* gimple-ir.c (gs_add): Swap arguments.
	Update all users.
	* gimple-ir.h (gs_seq_append): Likewise.

2007-07-12  Diego Novillo  <dnovillo@google.com>

	* tree.c (create_artificial_label): Move from gimplify.c
	(get_name): Likewise.
	* tree.h (create_artificial_label, get_name): Move
	declarations earlier in the file.
	* diagnostic.h (dump_gimple_stmt, print_gimple_stmt,
	dump_gimple_seq): Rearrange.
	* tree-gimple.h (gimplify_function_tree): Move from tree.h.
	* gimple-pretty-print.c (do_niy): Tidy.
	(maybe_init_pretty_print): Add comment.
	(newline_and_indent): Likewise.
	Remove "gimpleir: " prefix.
	(debug_gimple_stmt): Add comment.
	(dump_gs_seq): Remove.
	(dump_gimple_seq): Add argument SPC.
	Update all users.
	If FLAGS contains TDF_DETAILS, emit "gimpleir:" prefix.
	(dump_gs_cond): If FLAGS contains TDF_DETAILS, emit
	"gimpleir:" prefix.
	(dump_gs_bind): Likewise.
	* function.h (struct function): Remove field 'gimplified'.
	* gimple-ir.c (gimple_bodies): New private variable.
	(set_gimple_body): New.
	(gimple_body): New.
	* gimple-ir.h: Include pointer-set.h.
	Add comment before data structure definitons.
	(set_gimple_body): Declare.
	(gimple_body): Declare.
	* gimplify.c (create_artificial_label): Move to tree.c
	(get_name): Likewise.
	(gimplify_function_tree): Change return type to void.
	Call set_gimple_body after gimplification and nullify
	DECL_SAVED_TREE.
	Update all callers.
	* common.opt (fgimple-only): New option.
	* tree-optimize.c (tree_rest_of_compilation): Do not nullify
	DECL_SAVED_TREE.
	* c-gimplify.c (c_genericize): Restore gimplification logic to
	mainline version.
	If -fgimple-only was given, exit.
	* Makefile.in (GIMPLE_IR_H): Add pointer-set.h
	* tree-cfg.c (execute_build_cfg): Nullify GIMPLE body after
	building the CFG.
	(dump_function_to_file): If DECL_SAVED_TREE is NULL dump the
	GIMPLE body of the function.

2007-07-12  Diego Novillo  <dnovillo@google.com>

	* omp-low.c (lower_regimplify): Use a local GIMPLE sequence to
	hold the result from gimplification.
	* tree-gimple.c (is_gimple_min_val): Reformat.
	* tree-gimple.h (enum fallback_t): Document values.
	(gimplify_expr): Remove IS_STATEMENT argument.
	Update all users.
	* langhooks.c (lhd_gimplify_expr): Likewise.
	* gimplify.c (gimplify_statement_list): If a temporary
	was returned from voidify_wrapper_expr abort to mark the failure.
	(gimplify_expr): Remove argument IS_STATEMENT.
	Update all users.
	Assert that FALLBACK is used with the appropriate GIMPLE_TEST_F
	Restore logic to use internal queue.
	Do not abort if on return from gimplify_call_expr, *EXPR_P has
	a CALL_EXPR.

2007-07-12  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_switch_1): Allocate one less tree.
	(gs_build_switch_1): Offset labels by one.
	(gs_switch_label): Same.
	(gs_switch_set_label): Same.

2007-07-12  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (walk_seq_ops): Rename from walk_tree_seq.
	(walk_tuple_ops): Rename from walk_tree_tuple.
	* gimple-ir.h, gimplify.c, gimple-ir.c: Rename all calls to
	walk_tree_seq and walk_tree_tuple accordingly.

2007-07-12  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_switch_1): Fix spacing.
	Allocate one more tree.
	(gs_build_switch): Set labels starting at 1.
	(walk_tree_seq): New.
	(walk_tree_tuple): New.
	* gimple-ir.h: Add prototypes for walk_tree_tuple and walk_tree_seq.
	* gimplify.c (check_pointer_types_r): Uncomment.
	(gimplify_body): Walk gimple sequence with check_pointer_types_r.

2007-07-11  Chris Matthews  <chrismatthews@google.com> 

	* tree-pretty-print.c (dump_generic_node): Removed space before default
	label colon.
	* tree.h (sort_case_labels): Moved to gimple-ir.h.
	* gimplify.c (sort_case_labels): Changed to a vector instead of tree
	vector.
	(gimplify_switch_expr): Initial implementation with tuples.
	(gimplify_expr): Changed gimplify_case_label_expr parameter.
	(gimplify_case_label_expr): Added a gs_seq parameter, and put cases in
	that.
	(dump_gimple_stmt): Removed semicolon.
	(dump_gs_label):  Refactored from dump_gimple_expr.
	(dump_gs_switch): Added.
	(gs_build_switch_vec): Added.
	* gimple-ir.c (gs_build_switch_1): Added.
	(gs_build_switch): Refactored to use gs_build_switch_1.
	(gs_build_switch_vec): Added.
	* gs_switch.c: New test case.
	* gs_switch1.c: New test case.
	* gs_switch2.c: New test case.
	
2007-07-05  Aldy Hernandez  <aldyh@redhat.com> 

	* gimple-pretty-print.c (dump_gimple_stmt): Alphabetize cases.
	Add case for GS_NOP.
	* gimplify.c (gimplify_body): Handle null bodies.
	Use GS_CODE instead of GS_SUBCODE_FLAGS.

2007-07-05  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/with_size_expr.c: Clean up dump.
	* testsuite/gcc.dg/gimple/gs_bind.c: Clean up dump.
	* gimplify.c (struct gimplify_ctx): Make current_bind_expr a tuple.
	(pop_gimplify_context): Accept gimple.
	Comment out call to declare_vars.
	(gimple_current_bind_expr): Return gimple.
	(unshare_all_trees): Remove.
	(gimplify_self_mod_expr): Remove comment.
	(gimplify_cleanup_point_expr): Correct typo in call to gs_seq_init.
	(gimplify_body): Remove body local.  
	Build GS_BIND tuples when needed.
	Do not call unshare_all_trees.
	Call pop_gimplify_context with appropriate argument.
	Comment out call to walk_tree.
	* tree-pretty-print.c (print_declaration): Remove static.
	* diagnostic.h (print_declaration): Prototype.
	* tree-gimple.h (pop_gimplify_context): Accept gimple tuple.
	(gimple_current_bind_expr): Return tuple.
	* gimple-pretty-print.c (dump_gs_seq): New.
	(dump_gs_bind): New.
	(dump_gimple_stmt): Add case for GS_BIND.  Print semi-colons after
	each statement.

2007-06-29  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimple_push_condition): Enable.  Call gs_seq_init with
	address.
	(gimplify_cond_expr): Push and pop conditions.  Use other GS_COND
	predicates when appropriate

2007-06-28  Aldy Hernandez  <aldyh@redhat.com> 

	* testsuite/gcc.dg/gimple/gs_goto.c: New.
	* testsuite/gcc.dg/gimple/gs_cond.c: New.
	* tree-gimple.h (gimplify_stmt): Return bool.
	* gimple-pretty-print.c (INDENT): New.
	(newline_and_indent): New.
	(op_gs_cond): New.
	(dump_gs_cond): New.
	(dump_gimple_stmt): New.
	* gimple-ir.c (gs_cond_invert): New.
	* gimple-ir.h (enum gs_cond): Add comment.
	(gs_cond_invert): Protoize.
	* gimplify.c (gimplify_cond_expr): Rewrite for tuples.
	(gimplify_stmt): Return true if we added a statement to the queue.
	(gimplify_expr): Enable gimplify_cond_expr.
	Build tuples for GOTO_EXPRs and LABEL_EXPRs.

2007-06-27  Aldy Hernandez  <aldyh@redhat.com> 

	* gimple-ir.h (gs_seq_last): Return last statement.
	* testsuite/gcc.dg/gimple/compound_expr.c: Add checks.
	* testsuite/gcc.dg/gimple/gs_call.c: Same.
	* testsuite/gcc.dg/gimple/constructors.c: Same.
	* testsuite/gcc.dg/gimple/gs_assign.c: Same.

2007-06-27  Aldy Hernandez  <aldyh@redhat.com> 

	Put this patch back in.

	2007-06-22  Aldy Hernandez  <aldyh@redhat.com> 

	* gimplify.c (gimplify_modify_expr): Return after a successful
	call to gimplify_modify_expr_rhs.

2007-06-26  Aldy Hernandez  <aldyh@redhat.com>

	* testsuite/gcc.dg/gimple/gimple.exp: Pass -fdump-tree-gimple-details
	* testsuite/gcc.dg/gimple/compound_expr.c: Add dg-final.
	* testsuite/gcc.dg/gimple/gs_return.c: Same.
	* tree.h (gimplify_function_tree): Add return value.
	* diagnostic.h (debug_c_tree): Move under tree-pretty-print.c section.
	(dump_gimple_seq): New.
	to tests.
	* gimple-pretty-print.c (dump_gimple_seq): New.
	* gimplify.c (gimplify_function_tree): Add return value.
	Remove debug call and exit.
	Comment out non-working code.
	* c-gimplify.c (c_genericize): Dump gimple IR.  Exit.

2007-06-26  Diego Novillo  <dnovillo@google.com>

	* gimple-ir.c (gs_build_call_1): Fix formatting.

2007-06-26  Diego Novillo  <dnovillo@google.com>

	* gimple-pretty-print.c (dump_gs_assign, dump_gs_return,
	dump_gs_call): New functions.
	(dump_gimple_stmt): Call them.
	* gimple-ir.c (gs_build_call_1): Factor out of gs_build_call.
	(gs_build_call): Call it.
	(gs_build_call_vec): New function.
	* gimple-ir.h (struct gimple_statement_call): Change type of
	field 'nargs' to size_t.  Update all users.
	(gs_build_call_vec): Declare.
	(gs_call_set_fn): Remove.
	(gs_call_set_nargs): Remove.
	* gimplify.c: Include "vec.h"
	(gimplify_return_expr): Fix formatting
	(gimplify_call_expr): Call gs_build_call_vec.
	(gimplify_expr): Do not try to test if NULL expressions
	are in GIMPLE form.
	(gimplify_function_tree): Do not call debug_gimple_seq.
	* Makefile.in (gimplify.o): Include vec.h

2007-06-25  Chris Matthews  <chrismatthews@google.com>

	* gimplify.c (gimple_current_bind_expr): Changed to work with gs_seq
	accessors 
	(gimplify_and_add): Same.
	(annotate_all_with_locus): Same.
	(gimplify_self_mod_expr): Same.
	(gimplify_cleanup_point_expr): Same.
	(gimplify_expr): Same.
	(gimplify_body): Same.
	(force_gimple_operand): Same.
	(gimplify_init_ctor_eval_range): Added GS_ prefix.
	* gimple-iterator.h (gsi_last): Changed to gs_seq accessors.  Changed
	gimple_stmt_iterator to use a gimple instead of gimple *.
	(gsi_one_before_end_p): Same.
	(gsi_start): Same.
	* gimple-ir.h (gs_cond): Prepended GS_ to names.
	(gs_seq_first): Replaced macro.
	(gs_seq_last): Same.
	(gs_seq_set_first): Same.
	(gs_seq_set_last): Same.
	(gs_seq_init): Same.
	(gs_seq_empty_p): Same.
	(gs_assign_operand) Changed opno to be a size_t to match set.
	(gs_bind_body): Changed to use gs_seq.
	(gs_bind_set_body): Changed to use gs_seq, and gs_seq_set_first, and last. 
	(gs_asm_ninputs): Renamed.
	(gs_asm_noutputs): Renamed.
	(gs_asm_nclobbered): Renamed.
	(gs_asm_set_ninputs): Renamed.
	(gs_asm_set_noutputs): Renamed.
	(gs_asm_set_nclobbered): Renamed.
	(gs_asm_set_input_op): Renamed.
	(gs_asm_input_op): Renamed.
	(gs_asm_set_output_op): Renamed.
	(gs_asm_output_op): Renamed.
	(gs_omp_body): Changed to use gs_seq.
	(gs_omp_set_body): Changed to use gs_seq accessors.
	(gs_omp_for_pre_body): Changed to use gs_seq.
	(gs_omp_for_set_pre_body): Changed to use gs_seq accessors.
	(gs_seq_append): Changed to use gs_seq accessors.
	* gimple-ir.c (gs_add): Same.
	(gs_build_asm): Changed argument names to match accessors, and changed
	functions to new accessor names.
	(gs_build_cond): Reformatted.
	(gs_build_phi): Same.
	(gs_build_try): Renamed args to try_p and catch_p.
	(gs_build_omp_return): Change to correct arguments, and added a subcode 
	flag.
	* function.c (gimplify-oaraneters): Changed to gs_seq accessors.

2007-06-22  Aldy Hernandez  <aldyh@redhat.com>

	* gimplify.c (gimplify_modify_expr): Return after a successful
	call to gimplify_modify_expr_rhs.

2007-06-21  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.h (gs_assign_binary_rhs1): Add assertion for
	GSS_ASSIGN_BINARY.
	(gs_assign_binary_set_rhs1): Same.
	(gs_assign_binary_rhs2): Same.
	(gs_assign_binary_set_rhs2): Same.
	(gs_assign_unary_rhs): Same.
	(gs_assign_unary_set_rhs): Same.

2007-06-21  Aldy Hernandez  <aldyh@redhat.com>

	* gcc.dg/gimple/gimple.exp: New.
	* gcc.dg/gimple/compound_expr.c: New.
	* gcc.dg/gimple/with_size_expr.c: New.
	* gcc.dg/gimple/compound_expr.c: New.
	* gcc.dg/gimple/gs_call.c: New.
	* gcc.dg/gimple/constructors.c: New.
	* gcc.dg/gimple/gs_return.c: New.
	* gcc.dg/gimple/gs_assign.c: New.

2007-06-21  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_cond): Change order of arguments.  Make labels
	of type tree.
	(gs_build_asm): Fix formatting.
	* gimple-ir.h (gimple_statement_cond): Make labels of type tree.
	(gs_build_cond): Change order and type of arguments.
	(gs_build_asm): Fix formatting.
	(gs_omp_build_for): Same.
	(gs_assign_binary_rhs1): Remove assert.
	(gs_assign_binary_set_rhs1): Same.
	(gs_assign_binary_rhs2): Same.
	(gs_assign_binary_set_rhs2): Same.
	(gs_assign_unary_rhs): Same.
	(gs_cond_true_label): Return a tree.
	(gs_cond_set_true_label): Make label a tree.
	(gs_cond_set_false_label): Make label a tree.
	(gs_cond_false_label): Return a tree.
	* gimplify.c (gimplify_init_ctor_eval_range): Build tuples.
	(gimplify_init_ctor_eval): Same.
	(gimplify_init_constructor): Enable.  Adjust for tuples.
	(gimplify_modify_expr_rhs): Uncomment call to
	gimplify_init_constructor.

2007-06-21  Diego Novillo  <dnovillo@google.com>

	* gimple.def: Rename from gs.def.
	Adjust all users.

2007-06-21  Diego Novillo  <dnovillo@google.com>

	* tree-pretty-print.c (pred_symbol_code, do_gs_niy,
	debug_gimple_stmt, debug_gimple_seq, print_gimple_stmt,
	dump_gimple_stmt): Move to gimple-pretty-print.c
	* diagnostic.h: Add comment for functions in gimple-pretty-print.c
	* gimple-pretty-print.c: New file.
	* gimple-ir.c (gs_build_return): Fix spacing.
	(gs_build_assign): Likewise.
	* gimple-ir.h: Fix spacing.
	(gs_assign_set_operand): Change OPNO to size_t.
	Add assertions for OPNO's value.
	(gs_assign_lhs): Rename from gs_assign_operand_lhs.
	(gs_assign_binary_rhs1): Rename from gs_assign_operand_rhs.
	Assert that GS is GSS_ASSIGN_BINARY
	(gs_assign_binary_set_rhs1): Rename from gs_assign_set_rhs.
	Assert that GS is GSS_ASSIGN_BINARY.
	(gs_assign_binary_set_rhs2): Rename from gs_assign_set_rhs2.
	Assert that GS is GSS_ASSIGN_BINARY.
	(gs_assign_unary_rhs): New.
	(gs_assign_unary_set_rhs): New.
	(gs_call_fn, gs_call_lhs, gs_call_chain, gs_call_arg,
	gs_cond_lhs, gs_cond_rhs, gs_label_label, gs_goto_dest,
	gs_bind_vars, gs_asm_in_op, gs_asm_out_op, gs_asm_clobber_op,
	gs_catch_types, gs_catch_handler, gs_eh_filter_types,
	gs_eh_filter_failure, gs_try_eval, gs_try_cleanup,
	gs_phi_result, gs_switch_index, gs_switch_default_label,
	gs_switch_label,gs_omp_critical_name, gs_omp_for_clauses,
	gs_omp_for_index, gs_omp_for_initial, gs_omp_for_final,
	gs_omp_for_incr, gs_omp_parallel_clauses,
	gs_omp_parallel_child_fn, gs_omp_parallel_data_arg,
	gs_omp_single_clauses, gs_omp_sections_clauses,
	gs_return_retval): Change return type to 'tree'.
	* Makefile.in (OBJS-common): Add gimple-pretty-print.o.
	(gimple-pretty-print.o): New rule.

2007-06-20  Aldy Hernandez  <aldyh@redhat.com>

	* tree-pretty-print.c (dump_gimple_stmt): Change pred_symbol_code
	to op_symbol_code.

2007-06-19  Aldy Hernandez  <aldyh@redhat.com>

	* gimplify.c (gimplify_modify_expr_rhs): Enable.  Adjust for tuples.
	(gimplify_modify_expr): Call gimplify_modify_expr_rhs.
	(gimplify_compound_expr): Enable.  Adjust for tuples.  Remove comment
	that no longer applies.
	(gimplify_expr): Enable call to gimplify_compound_expr.

2007-06-18  Chris Matthews  <chrismatthews@google.com>

	* Makefile.in (GTFILES): Added gimeple-ir.h.

	* gimple-ir.c (gs_build_return, gs_build_call, gs_build_assign): 
	Changed to use new accessors.
	(gs_build_cond, gs_build_label, gs_build_goto,
	gs_build_nop, gs_build_bind gs_build_asm, gs_build_catch,
	gs_build_eh_filter, gs_build_try, gs_build_phi,
	gs_build_resx, gs_build_switch, gs_omp_build_critical,
	gs_omp_build_for, gs_omp_build_parallel,
	gs_omp_build_section, gs_omp_build_master,
	gs_omp_build_ordered, gs_omp_continue,
	gs_omp_build_ordered, gs_omp_build_return,
	gs_omp_build_sections, gs_omp_build_single): New
	functions.

	* gimple-ir.h (struct gimple_statement_switch): Changed
	default label to be in labels[0].

	(struct gimple_statement_asm): Corrected the allocation
	length.

	(enum gs_cond): New enum.
	(gs_assign_set_operand): Changed to work with new accessors.
	(gs_assign_operand_lhs, gs_assign_operand_rhs,
	gs_assign_operand_set_lhs, gs_assign_set_rhs,
	gs_assign_operand_rhs2, gs_assign_set_rhs2, gs_call_fn,
	gs_call_set_fn, gs_call_lhs, gs_call_set_lhs,
	gs_call_chain, gs_call_set_chain, gs_call_nargs,
	gs_call_set_nargs, gs_call_arg, gs_call_set_arg,
	gs_cond_lhs, gs_cond_set_lhs, gs_cond_rhs,
	gs_cond_set_rhs, gs_cond_true_label,
	gs_cond_set_true_label, gs_cond_set_false_label,
	gs_cond_false_label, gs_label_label, gs_label_set_label,
	gs_goto_dest, gs_goto_set_dest, gs_bind_vars,
	gs_bind_set_vars, gs_bind_body, gs_bind_set_body,
	gs_asm_ni, gs_asm_set_ni, gs_asm_no, gs_asm_set_no,
	gs_asm_nc, gs_asm_set_nc, gs_asm_in_op, gs_asm_set_in_op,
	gs_asm_out_op, gs_asm_set_out_op, gs_asm_clobber_op,
	gs_asm_set_clobber_op, gs_asm_string, gs_asm_set_string,
	gs_catch_types, gs_catch_handler, gs_catch_set_types,
	gs_catch_set_handler, gs_eh_filter_types,
	gs_eh_filter_failure, gs_eh_filter_set_types,
	gs_eh_filter_set_failure, gs_try_eval, gs_try_cleanup,
	gs_try_set_eval, gs_try_set_cleanup, gs_phi_capacity,
	gs_phi_set_capacity, gs_phi_nargs, gs_phi_set_nargs,
	gs_phi_result, gs_phi_set_result, gs_phi_arg,
	gs_phi_set_arg, gs_resx_region, gs_resx_set_region,
	gs_switch_nlabels, gs_switch_set_nlabels,
	gs_switch_index, gs_switch_set_index,
	gs_switch_default_label, gs_switch_set_default_label,
	gs_switch_label, gs_switch_set_label, gs_omp_body,
	gs_omp_set_body, gs_omp_critical_name,
	gs_omp_critical_set_name, gs_omp_for_clauses,
	gs_omp_for_set_clauses, gs_omp_for_index,
	gs_omp_for_set_index, gs_omp_for_initial,
	gs_omp_for_set_initial, gs_omp_for_final,
	gs_omp_for_set_final, gs_omp_for_incr,
	gs_omp_for_set_incr, gs_omp_for_pre_body,
	gs_omp_for_set_pre_body, gs_omp_parallel_clauses,
	gs_omp_parallel_set_clauses, gs_omp_parallel_child_fn,
	gs_omp_parallel_set_child_fn, gs_omp_parallel_data_arg,
	gs_omp_parallel_set_data_arg, gs_omp_single_clauses,
	gs_omp_single_set_clauses, gs_omp_sections_clauses,
	gs_omp_sections_set_clauses, gs_assign_omp_for_cond,
	gs_omp_for_cond gs_return_set_retval,
	gs_add_subcode_flag): New accessor functions.
	(gs_return_retval): Renamed gs_return_operand_retval to match accessor 
	conventions.

2007-05-31  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_build_call): New.
	* gimple-ir.h (GS_CALL_LHS): New.
	(GS_CALL_FN): New.
	(GS_CALL_CHAIN): New.
	(GS_CALL_NARGS): New.
	(GS_CALL_ARG): New.
	(gs_call_lhs): New.
	(gs_call_fn): New.
	(gs_call_chain): New.
	(gs_call_nargs): New.
	(gs_call_arg): New.
	* gimplify.c (gimplify_modify_expr_to_memcpy): Enable and rewrite for 
	tuples.
	(gimplify_modify_expr_to_memset): Same.
	(gimplify_statement_list): Same.
	(gimplify_expr): Enable STATEMENT_LIST case.

2007-05-29  Aldy Hernandez  <aldyh@redhat.com>

	Merged revisions 124007-125166 from mainline.

2007-05-23  Aldy Hernandez  <aldyh@redhat.com>

	* builtins.c (std_gimplify_va_arg_expr): Add argument to gimplify_expr.
	Remove seq argument.
	(gimplify_va_arg_expr): Same.
	* tree-gimple.h: Same.
	* langhooks.c (lhd_gimplify_expr): Change pre_p and post_p types to
	sequences.
	* langhooks-def.h (lhd_gimplify_expr): Change 
	* langhooks.h (struct lang_hooks): Remove argument.
	* gimplify.c (internal_get_tmp_var): Adjust calls to gimplify_expr
	for new arguments.
	(gimplify_switch_expr): Same.
	(gimplify_var_or_parm_decl): Same.
	(gimplify_compound_lval): Same.
	(gimplify_self_mod_expr): Same.
	(gimplify_arg): Same.
	(gimplify_call_expr): Same.
	(gimplify_init_ctor_preeval): Same.
	(gimplify_init_constructor): Same.
	(gimplify_modify_expr_rhs): Same.
	(gimplify_modify_expr): Same.
	(gimplify_save_expr): Same.
	(gimplify_addr_expr): Same.
	(gimplify_asm_expr): Same.
	(gimplify_target_expr): Same.
	(omp_check_private): Same.
	(gimplify_scan_omp_clauses): Same.
	(gimplify_omp_parallel): Same.
	(gimplify_omp_for): Same.
	(goa_stabilize_expr): Same.
	(gimplify_omp_atomic): Same.
	(gimplify_one_sizepos): Same.
	(force_gimple_operand): Same.
	(gimplify_expr): Remove seq_p argument.  Add new is_statement
	argument.  Adjust accordingly.  Make seq_p required.

2007-05-07  Aldy Hernandez  <aldyh@redhat.com>

	* function.c (gimplify_parameters): Use new GS_SEQ_INIT definition.
	* gimple-ir.h (GS_SEQ_INIT): Do not use C99 constructs.
	* gimplify.c: Disable non working code throughout.
	Pass additional call to gimplify_expr throughout.
	(gimplify_ctx): Make conditional_cleanups a sequence.
	(gimple_push_condition): Use GS_SEQ_EMPTY_P.
	(gimple_pop_condition): Adapt for sequences.
	(gimplify_and_add): Use gs_seq_append regardless of side effects.
	(internal_get_tmp_var): Use sequences.
	(get_formal_tmp_var): Same.
	(get_initialized_tmp_var): Same.
	(annotate_one_with_locus): Change GS_LOCUS to GS_LOCUS_EMPTY_P.
	(gimplify_bind_expr): Use sequences.
	Change append_to_statement_list to gimplify_and_add.
	(gimplify_return_expr): Add gimplified code to pre_p.
	(gimplify_decl_expr): New seq_p parameter.
	(gimplify_loop_expr): Adapt for sequences.
	Use gimplify_and_add instead of append_to_statement_list.
	(gimplify_switch_expr): Same.
	(gimplify_compound_lval): Use sequences.
	(gimplify_self_mod_expr): Same.
	Use gs_seq_append instead of append_to_statement_list.
	(gimplify_arg): Use sequences.
	(gimplify_call_expr): Same.
	(gimplify_cond_expr): Use sequences.
	(gimplify_init_ctor_preeval): Use sequences.
	(gimplify_init_ctor_eval_range): Same.
	Use gimplify_and_add instead of append_to_statement_list.
	(gimplify_init_ctor_eval): Use sequences.
	(gimplify_init_constructor): Same.
	Remove one call to append_to_statement_list.
	(gimplify_modify_expr_rhs): Use sequences.
	(gimplify_modify_expr_complex_part): Use sequences.
	Remove call to tree_to_gimple_tuple.
	Build GS_ASSIGN tuple.
	(gimplify_modify_expr): Use new argument.  Use sequences.
	Do not call append_to_statement_list.
	Build GS_ASSIGN tuple.
	Do not call tree_to_gimple_tuple.
	Set *expr_p to NULL when we do not want the value.
	(gimplify_compound_expr): Use sequences.
	(gimplify_save_expr): Same.
	(gimplify_addr_expr): Same.
	(gimplify_asm_expr): Same.
	(gimplify_cleanup_point_expr): Same.
	(gimple_push_cleanup): Same.
	Build GS_ASSIGN tuples.
	(gimplify_target_expr): Use sequences.
	(gimplify_scan_omp_clauses): Same.
	Add argument to gimplify_stmt calls.
	(gimplify_omp_parallel): Same.
	(gimplify_omp_for): Use sequences.
	(gimplify_omp_workshare): Same.
	(goa_stabilize_expr): Same.
	(gimplify_omp_atomic_pipeline): Same.
	(gimplify_omp_atomic_mutex): Same.
	(gimplify_omp_atomic): Same.
	(gimplify_expr): Same.
	Call GS_SEQ_INIT with argument.
	Use new seq_p argument.
	Do not call tree_to_gimple_tuple.
	Pass additional argument to gimplify_decl_expr.
	Do not pass seq_p argument to gimplify_return_expr.
	Call gs_seq_append instead of append_to_statement_list.
	Check that all statements have been converted to tuples.
	Make pre_p and seq_p sequences coexist.
	(gimplify_type_sizes): Use sequences.
	(gimplify_one_sizepos): Same.
	(gimplify_body): Make parm_stmts a sequence.
	Add argument to seq_p.
	(gimplify_function_tree): Call debug_gimple_seq.
	(force_gimple_operand): Use sequences.
	(force_gimple_operand_bsi): Use sequences.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* omp-low.c (build_omp_barrier): Adjust arguments for sequences.
	(lower_rec_input_clauses): Disable non working code.
	(lower_regimplify): Pass additional argument to gimplify_expr.
	* tree-mudflap.c (mx_register_decls): Disable non working code.
	* tree-inline.c (copy_bb): Disable non working code.
	(setup_one_parameter): Same.
	* tree-cfg.c (make_edges): Same.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* tree-gimple.h (get_initialized_tmp_var): Adjust prototype
	for sequences.
	(get_formal_tmp_var): Same.
	(gimplify_type_sizes): Same.
	(gimplify_one_sizepos): Same.
	(gimplify_stmt): Same.
	(gimplify_and_add): Same.
	(gimplify_va_arg_expr): Same.
	* langhooks.h (lang_hooks): Same.
	* function.c (gimplify_parm_type): Adjust for sequences.
	(gimplify_parameters): Same.
	* c-gimplify.c (gimplify_compound_literal_expr): Same.
	(c_gimplify_expr): Same.
	* tree-flow.h (force_gimple_operand): Same.
	* c-common.h (c_gimplify_expr): Adjust prototype for sequences.
	* config/i386/i386.c (ix86_gimplify_va_arg): Adjust for sequences.
	Change call to append_to_statement_list to gimplify_and_add.
	Add parameter to gimplify_expr.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c (gs_code_name): Constify.
	(gs_build_assign): New.
	(gimple_statement_structure): Abstract code out to...
	(gss_for_assign): ...here.
	(gs_add): Set the last item correctly.
	* gimple-ir.h (GS_LOCUS_EMPTY_P): New.
	(GS_SEQ_INIT): Add a cast.
	(gimple_statement_base): Make code a gs_code enum.
	(gimple_statement_with_ops): Remove address_taken.
	(GS_ASSIGN_BINARY_LHS): New.
	(GS_ASSIGN_BINARY_RHS1): New.
	(GS_ASSIGN_BINARY_RHS2): New.
	(GS_ASSIGN_UNARY_REG_LHS): New.
	(GS_ASSIGN_UNARY_REG_RHS): New.
	(GS_ASSIGN_UNARY_MEM_LHS): New.
	(GS_ASSIGN_UNARY_MEM_RHS): New.
	(gs_seq_append): New.
	Move gs_seq typedef to...
	* coretypes.h: ...here.
	* gimple-iterator.h (gsi_stmt_ptr): Add FIXME note.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* tree.h (std_gimplify_va_arg_expr): Change tree * to a sequence
	in prototype.
	(gimplify_parameters): Return a sequence.
	* target.h (gimplify_va_arg_expr): Change tree * to a sequence.
	* builtins.c (std_gimplify_va_arg_expr): Same.
	Pass additional argument to gimplify_expr.
	(gimplify_va_arg_expr): Change tree * to a sequence.
	Change append_to_statement_list call to gimplify_and_add.
	Pass additional argument to gimplify_expr calls.

2007-05-04  Aldy Hernandez  <aldyh@redhat.com>

	* tree-pretty-print.c (do_gs_niy): New.
	(debug_gimple_stmt): New.
	(debug_gimple_seq): New.
	(print_gimple_stmt): New.
	(dump_gimple_stmt): New.
	* diagnostic.h: Add prototypes for dump_gimple_stmt,
	print_gimple_stmt, debug_gimple_stmt, debug_gimple_seq.

2007-04-26  Aldy Hernandez  <aldyh@redhat.com>

	* tree-gimple.h (annotate_all_with_locus): First argument is now a
	sequence.
	* gimple-ir.h (GS_LOCUS): New.
	(gimple_statement_base): Locus is of type location_t.
	* gimplify.c (internal_get_tmp_var): Use sequences.
	(should_carry_locus_p): Adjust for gimple ir.
	(annotate_one_with_locus): Same.
	(annotate_all_with_locus): Same.
	(gimplify_stmt): Adjust for sequences.
	(gimplify_expr): Same.

2007-04-25  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.h (GS_SEQ_EMPTY_P): New.
	Move gs_build_return, gs_add, and gimple_statement_structure
	prototypes.
	(gs_assign_operand): Fix typos in gss.
	Include gimple-iterator.h.
	* Makefile.in (GIMPLE_IR_H): Add gimple-iterator.h.
	(TREE_GIMPLE_H): Same.

2007-04-25  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-iterator.h (gsi_one_before_end_p): Use GS_SEQ_LAST.

2007-04-25  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-iterator.h: New file.

2007-04-23  Aldy Hernandez  <aldyh@redhat.com>

	* gimple-ir.c: New file.
	* gimple-ir.h: New file.
	* gsstruct.def: New file.
	* gs.def: New file.
	* gengtype.c (open_base_files): Add gimple-ir.h.
	* tree-gimple.h: Include gimple-ir.h.
	Add sequence to gimplify_expr and gimplify_body prototypes.
	* gimplify.c: Include gimple-ir.h.
	(gimplify_and_add): Adjust for gimple IR.
	(gimplify_return_expr): Same.
	(gimplify_stmt): Add seq_p argument.
	(gimplify_expr): Add seq_p sequence and adjust accordingly.
	(gimplify_body): Same.
	* coretypes.h: Add gimple_statement_d and gimple definitions.
	* Makefile.in (GIMPLE_IR_H): New.
	(TREE_GIMPLE_H): Add gimple-ir.h.
	(OBJS-common): Add gimple-ir.o.
	(gimplify.o): Add GIMPLE_IR_H.
	(gimple-ir.o): New.
	(build/gencheck.o): Add gs.def.

Local Variables:
mode: change-log
End:
