
#rs600/t-linux64

LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/ppc64-fp.c \
	$(srcdir)/config/rs6000/darwin-ldouble.c

TARGET_LIBGCC2_CFLAGS = -mno-minimal-toc -fPIC -mlong-double-128
CRTSTUFF_T_CFLAGS_S = -mno-minimal-toc -fPIC

SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-ppc64.ver

# The idea of this single entry multilib which also happens to be the
# default, is to search $tooldir/lib64 for powerpc64 libs and crt files
# instead of $tooldir/lib.  This is the same dir that the biarch
# compiler searches.
MULTILIB_OPTIONS        = m64
MULTILIB_DIRNAMES       = 64
MULTILIB_EXTRA_OPTS     = fPIC mstrict-align
MULTILIB_OSDIRNAMES	= ../lib64

EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o \
			crtsavres.o

# ld provides these functions as needed.
crtsavres.S:
	echo >crtsavres.S

$(T)crtsavres.o: crtsavres.S
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavres.S -o $(T)crtsavres.o

# We want fine grained libraries, so use the new code to build the
# floating point emulation libraries.
# fp-bit is only to be used by 32-bit multilibs
FPBIT = fp-bit32.c
DPBIT = dp-bit32.c

dp-bit32.c: $(srcdir)/config/fp-bit.c
	( echo '#ifndef __powerpc64__'; \
	  cat $(srcdir)/config/fp-bit.c; \
	  echo '#endif' ) > dp-bit32.c

fp-bit32.c: $(srcdir)/config/fp-bit.c
	( echo '#ifndef __powerpc64__'; \
	  echo '#define FLOAT'; \
	  cat $(srcdir)/config/fp-bit.c; \
	  echo '#endif' ) > fp-bit32.c
