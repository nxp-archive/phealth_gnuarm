2002-09-09  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (tree-ssa.o): Add dependency on tree-simple.h.
	(tree-dfa.o): Add dependency on tree-simple.h and tree-inline.h.
	(tree-alias-steen.o): Add dependency on c-common.h.
	(tree-optimize.o): Add dependency on c-common.h.

	* c-simplify.c (deep_copy_node): Call walk_tree with mostly_copy_tree_r.
	(mostly_copy_tree_r): Also copy flags from original tree.
	(mark_not_simple_r): Call set_tree_flag.

	* tree-alias-steen.c: Include c-common.h.

	* tree-cfg.c (map_stmt_to_bb): Remove.
	(block_invalidates_loop): Change return type to bool.
	(create_loop_hdr): New function.
	(create_bb): Call it.
	(create_bb_ann): Return newly created annotation object.
	(remove_bb_ann): Nullify loop_hdr annotation, if there is one.
	(tree_delete_bb): Only remove basic block annotation from
	executables statements.
	(is_computed_goto): New function.

	* tree-dfa.c (pointer_refs): New file local variable.
	(call_sites): New global variable.
	(V_DEF, V_USE, V_PHI, V_PHI_ARG, E_FCALL, E_PHI, E_USE, E_KILL,
	E_INJ): New global constants.
	(M_DEFAULT, M_CLOBBER, M_MAY, M_PARTIAL, M_INITIAL, M_INDIRECT,
	M_VOLATILE): New global constants.
	(num_referenced_vars): New global variable.
	(referenced_vars): Rename from referenced_symbols.  Update all
	users.
	(clobber_vars_r): New function.
	(add_default_defs): New function.
	(add_call_site_clobbers): New function.
	(add_ptr_may_refs): New function.
	(add_phi_arg): New function.
	(find_list_node): New function.
	(remove_ref_from_list): Call it.
	(add_ref_to_list_after): New function.
	(is_pure_fcall): New function.
	(fcall_takes_ref_args): New function.
	(dump_referenced_vars): New function.
	(debug_referenced_vars): New function.
	(ref_type_name): New function.
	(validate_ref_type): New function.
	(debug_phi_args): Remove.
	(dump_phi_args): Remove.
	(add_referenced_var): Rename from add_ref_symbol.  Update all
	users.
	(dump_ref): Rename from dump_varref.  Update all users.
	(debug_ref): Rename from debug_varref.  Update all users.
	(dump_ref_list): Rename from dump_varref_list.  Update all users.
	(dump_ref_array): Rename from dump_varref_array.  Update all users.
	(next_tree_ref_id): Rename from next_varref_id.  Update all users.

	(tree_find_refs): Rename from tree_find_varrefs.  Update all users.
	Call add_default_defs.
	Call add_call_site_clobbers.
	Call add_ptr_may_refs.
	Call dump_referenced_vars.
	Create and destroy pointer_refs list.

	(find_refs_in_stmt): Set reference type to clobbering definition
	for the ASM_OUTPUTS and ASM_CLOBBERS expressions of an ASM_STMT.
	Set reference type to initial definition for the DECL_INITIAL node
	of a DECL_STMT.
	Clobber everything in CLEANUP_STMT nodes.

	(find_refs_in_expr): Re-write.
	Recursively clobber every VAR_DECL contained in non SIMPLE nodes.
	Mark indirect pointer references with M_INDIRECT flag.
	Add pointer references to pointer_refs list.
	Glob references to arrays and structures.
	Add function call expressions to call_sites list.

	(empty_ref_list): Do nothing if the list is empty already.
	(delete_ref_list): Ditto.
	(create_ref): Add new argument ADD_TO_BB.
	Set M_VOLATILE modifier if this is a reference to a volatile
	variable.
	Count number of incoming edges for V_PHI references before
	initializing the V_PHI_ARG array.
	Only add reference to basic block if ADD_TO_BB is true.
	Set output reference for the parent expression for V_DEF
	references.
	(remove_tree_ann): Do nothing if the tree didn't have an
	annotation.

	* tree-flow.h (enum treeref_type): Remove.  Update all users.
	(union varref_def): Ditto.
	(tree_ref): Rename from varref.  Update all users.
	(V_DEF): Declare.
	(V_USE): Declare.
	(V_PHI): Declare.
	(V_PHI_ARG): Declare.
	(E_FCALL): Declare.
	(E_PHI): Declare.
	(E_USE): Declare.
	(E_KILL): Declare.
	(E_INJ): Declare.
	(M_DEFAULT): Declare.
	(M_CLOBBER): Declare.
	(M_MAY): Declare.
	(M_PARTIAL): Declare.
	(M_INITIAL): Declare.
	(M_INDIRECT): Declare.
	(M_VOLATILE): Declare.
	(struct tree_ref_common): Rename from treeref_common.  Update all
	users.
	Change type of field 'type' to HOST_WIDE_INT.
	Rename field 'sym' to 'var'.
	(struct var_ref): Rename from varref.  Update all users.
	Join the structures varuse
	and vardef into a single structure.
	(struct expr_ref_common): Rename from exprref_common.  Update all
	users.
	(struct expr_use): Rename from expruse.  Update all users.
	(struct expr_phi): Rename from exprphi.  Update all users.
	(union tree_ref_d): Rename from varref_def.  Update all users.
	(EXPRPHI_PHI_ARGS): Rename from EXPRPHI_PHI_CHAIN.  Update all
	users.
	(struct tree_ann_d): Rename field 'compound_stmt' to
	'compound_parent'.
	Add field 'output_ref'.
	(enum tree_flags): New enum.
	(TF_REFERENCED): New flag.
	(phi_arg): Remove.
	(get_num_phi_args): Remove.
	(get_phi_arg): Remove.

	(struct vardef): Remove.  Update all users.
	(VARDEF_IMM_USES): Ditto.
	(VARDEF_SAVE_CHAIN): Ditto.
	(VARDEF_RUSES): Ditto.
	(VARDEF_MARKED): Ditto.
	(VARDEF_PHI_ARGS): Ditto.
	(struct varuse): Ditto.
	(VARUSE_IMM_RDEF): Ditto.
	(VARUSE_RDEFS): Ditto.
	(VARREF_ID): Ditto.
	(VARREF_TYPE): Ditto.
	(VARREF_BB): Ditto.
	(VARREF_EXPR): Ditto.
	(VARREF_OPERAND_P): Ditto.
	(VARREF_STMT): Ditto.
	(VARREF_SYM): Ditto.
	(IS_DEFAULT_DEF): Ditto.
	(IS_ARTIFICIAL_REF): Ditto.
	(TREE_ANN): Ditto.
	(BB_FOR_STMT): Ditto.
	(TREE_CURRDEF): Ditto.
	(TREE_REFS): Ditto.
	(TREE_COMPOUND_STMT): Ditto.
	(TREE_FLAGS): Ditto.
	(BB_ANN): Ditto.
	(BB_PARENT): Ditto.
	(BB_REFS): Ditto.
	(BB_PREV_CHAIN_P): Ditto.
	(BB_BINDING_SCOPE): Ditto.
	(BB_LOOP_HDR): Ditto.
	(FOR_INIT_STMT_BB): Ditto.
	(FOR_COND_BB): Ditto.
	(FOR_EXPR_BB): Ditto.
	(END_WHILE_BB): Ditto.
	(DO_COND_BB): Ditto.
	(BB_EMPTY_P): Ditto.

	(ref_type): New inline function.
	(ref_var): New inline function.
	(ref_stmt): New inline function.
	(ref_expr): New inline function.
	(ref_bb): New inline function.
	(ref_id): New inline function.
	(replace_ref_operand_with): New inline function.
	(restore_ref_operand): New inline function.
	(imm_uses): New inline function.
	(save_chain): New inline function.
	(set_save_chain): New inline function.
	(reached_uses): New inline function.
	(marked_with): New inline function.
	(mark_def_with): New inline function.
	(phi_args): New inline function.
	(num_phi_args): New inline function.
	(phi_arg): New inline function.
	(imm_reaching_def): New inline function.
	(set_imm_reaching_def): New inline function.
	(imm_reaching_def_edge): New inline function.
	(set_imm_reaching_def_edge): New inline function.
	(reaching_defs): New inline function.
	(tree_annotation): New inline function.
	(has_annotation): New inline function.
	(bb_for_stmt): New inline function.
	(set_bb_for_stmt): New inline function.
	(currdef_for): New inline function.
	(set_currdef_for): New inline function.
	(tree_refs): New inline function.
	(add_tree_ref): New inline function.
	(remove_tree_ref): New inline function.
	(compound_parent): New inline function.
	(set_compound_parent): New inline function.
	(set_tree_flag): New inline function.
	(clear_tree_flag): New inline function.
	(tree_flags): New inline function.
	(reset_tree_flags): New inline function.
	(output_ref): New inline function.
	(set_output_ref): New inline function.
	(bb_annotation): New inline function.
	(bb_parent): New inline function.
	(set_bb_parent): New inline function.
	(bb_refs): New inline function.
	(remove_bb_ref): New inline function.
	(prev_chain_p): New inline function.
	(set_prev_chain_p): New inline function.
	(binding_scope): New inline function.
	(set_binding_scope): New inline function.
	(header_blocks): New inline function.
	(for_init_bb): New inline function.
	(set_for_init_bb): New inline function.
	(for_cond_bb): New inline function.
	(set_for_cond_bb): New inline function.
	(for_expr_bb): New inline function.
	(set_for_expr_bb): New inline function.
	(end_while_bb): New inline function.
	(set_end_while_bb): New inline function.
	(do_cond_bb): New inline function.
	(set_do_cond_bb): New inline function.
	(bb_empty_p): New inline function.

	(referenced_vars): Rename from referenced_symbols.  Update all
	users.
	(num_referenced_vars): Declare.
	(NREF_SYMBOLS): Remove.  Update all users.
	(REF_SYMBOL): Ditto.
	(ADD_REF_SYMBOL): Ditto.
	(referenced_var): New inline function.
	(call_sites): Declare.
	(next_tree_ref_id): Rename from next_varref_id.  Update all users.
	(is_computed_goto): Declare.
	(is_pure_fcall): Declare.
	(fcall_takes_ref_args): Declare.
	(add_ref_to_list_after): Declare.
	(find_list_node): Declare.
	(ref_type_name): Declare.
	(validate_ref_type): Declare.

	* tree-optimize.c: Include c-common.h.
	(optimize_function_tree): Store DECL_SAVED_TREE in a local
	variable.

	* tree-ssa-ccp.c (cp_lattice_meet): New function.
	(visit_phi_node): Call it.
	(add_outgoing_control_edges): New function.
	(visit_expression_for): Call it.
	Don't handle static initializers.
	Handle computed gotos.
	(add_control_edge): New function.
	(visit_condexpr_for, simulate_block, add_outgoing_control_edges): Call
	it.
	(simulate_def_use_chains): Only look at unmodified V_USE references.
	(ssa_ccp_substitute_constants): Ditto.
	(evaluate_expr): Ditto.
	(initialize): Set initial value for incoming parameters and globals
	to VARYING.
	Set initial value for initialized static variables to VARYING,
	unless the variable is read-only.
	(set_lattice_value): Don't special case globals, volatiles and
	variables with their address taken.

	* tree-ssa.c: Include tree-simple.h.
	(tree_build_ssa): Don't add default definitions.
	(insert_phi_terms): Add new PHI nodes at the beginning of the list
	of references for the basic block.
	(search_fud_chains): Add def-def chains for non-killing
	definitions.
	(delete_ssa): Remove list call_sites.
	Set num_referenced_vars to 0.
	Set referenced_vars to NULL.
	(follow_chain): Follow def-def chains for non-killing definitions.
	(is_upward_exposed): Change return type to bool.
	(add_phi_arg): Remove.

2002-09-06  Frank Ch. Eigler  <fche@redhat.com>

	* tree-mudflap.c (deferred_static_decl*): Correct GTY markup.
	(mudflap_enqueue_decl): Correct iteration bounds.
	(mf_init_extern_trees): Add more constness to mf_cache_structptr_type.
	(mf_offset_expr_of_array_ref): Remove excess mx_flagging.  save_expr
	array subscripts.
	(mf_build_check_statement_for): Reorganize to take explicit
	check-base/size arguments, in addition to value argument.  save_expr
	array subscripts.  Copy value/base/size subtrees.
	(mx_xfn_indirect_ref): Support marking of subtrees for nontraversal.
	Track source line numbers more aggressively.  For arrays, check bounds
	from base through indexed element, not just the indexed element.
	Use nontraversal flagging to eliminate some excess instrumentation.
	(mf_xform_derefs): Support nontraversal by a hash table.
	(*): Remove "{{{"/"}}}" folding marks.
	
2002-09-02  Daniel Berlin  <dberlin@dberlin.org>
	
	* tree-alias-common.[ch]: New files.
	* tree-alias-steen.[ch]: Split out common stuff into
	tree-alias-common.[ch].
	* c-config-lang.in: Modify to use tree-alias-common.[ch] instead of
	tree-alias-steen, since this is where the GTY'd stuff is now.
	* Makefile.in: Add dependencies for tree-alias-common.[ch].

2002-09-03  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_goto_stmt): New function.
	(simplify_stmt): Call it.
	* tree-simple.c: Document grammar for GOTO_STMT nodes.
	(rationalize_compound_expr): Wrap it with #if 0/#endif.
	(get_base_symbol): Minor comment fixup.

2002-09-03  Frank Ch. Eigler  <fche@redhat.com>

	* gcc.c (MFWRAP_SPEC): Add --wrap=alloca.

2002-09-01  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_stmt): Mark CLEANUP_STMTs and ASM_STMTs
	not SIMPLE.
	(simplify_for_stmt): Do not allow expression sequences in
	FOR_INIT_STMT and FOR_EXPR nodes.
	* tree-simple.c: Document difference with original SIMPLE grammar.

2002-08-31  Frank Ch. Eigler  <fche@redhat.com>

	* tree-mudflap.c (mf_build_check_statement_for): Tolerate dereference
	of void pointers.
	(mx_register_decl): Correct typo in below patch.

2002-08-30  Graydon Hoare  <graydon@redhat.com>

	* tree-mudflap.c (mx_register_decl): Mark declarations as
	TREE_ADDRESSABLE when mudflap decides to register them.

2002-08-29  Graydon Hoare  <graydon@redhat.com>

	* tree-mudflap.c (mx_xfn_indirect_ref): Rewrite array references as
	pointer dereferences.
	(struct mf_xform_decls_data): New member: param_decls.
	(mx_register_decl): New function.
	(mx_xfn_xform_decls): Factor code out into mx_register_decl.
	Register live parameters with mudflap.
	(mx_xfn_find_addrof): Notice references to fields of structures
	and function parameters.

2002-08-29  Frank Ch. Eigler  <fche@redhat.com>

	* c-pretty-print.c (dump_c_tree): Detect loops in statement chains
	using a hash table to track visited status.
	* Makefile.in: Add hashtab.h dependency.

2002-08-28  Frank Ch. Eigler  <fche@redhat.com>

	* tree-mudflap.c (mudflap_enqueue_constant): Register non-string
	constants also.
	(mf_build_check_statement_for): Include pushlevel/pushdecl/poplevel
	for local variables.

2002-08-27  Frank Ch. Eigler  <fche@redhat.com>

	Better static registration:
	* varasm.c (make_decl_rtl): Handle DECL_RTL_SET_P case for
	mudflap static registration.
	* tree-mudflap.c (mudflap_enqueue_decl): Rewrite to handle
	deferred statics.
	(mudflap_finish_file): Call above fn back for deferred statics.

	Cleanup:
	* tree-mudflap.c (mf_varname_tree, mf_file_function_line_tree):
	Reorganize output_buffer reuse mechanism.
	(mf_build_check_statement_for): Set TREE_SIDE_EFFECTS.
	(mx_xfn_indirect_ref): Correct file/line collection tests.

	Dynamic linking support:
	* gcc.c (MFWRAP_SPEC): Make conditional on -static.  Add the	
	newer wrapped functions dlopen/mmap/munmap.
	(MFLIB_SPEC): Be sensitive to -static.  Partial support for
	dynamic linking.

2002-08-26  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (tree-ssa.o): Add dependency on ggc.h
	(c-simplify.o): Add dependency on langhooks-def.h
	* c-simplify.c: Include langhooks-def.h
	(simplify_function_tree): Do nothing if the front end does not
	support simplification.

	* tree-flow.h (struct vardef): Remove fields 'phi_chain' and
	'phi_chain_bb'.
	Add field 'phi_args'.
	(VARDEF_PHI_CHAIN): Remove.  Update all users.
	(VARDEF_PHI_CHAIN_BB): Remove.  Update all users.
	(VARDEF_PHI_ARGS): Define.
	(struct varuse): Rename field 'chain' to 'imm_rdef'.  Update all
	users.
	(VARUSE_IMM_RDEF):  Rename from VARUSE_CHAIN.  Update all users.
	(phi_arg): New structure.
	(get_num_phi_args): New function.
	(get_phi_arg): New function.
	(set_phi_arg): New function.
	(add_phi_arg): New function.
	(debug_phi_args): Declare.
	(dump_phi_args): Declare.
	* tree-dfa.c (create_ref): Remove initialization of
	VARDEF_PHI_CHAIN and VARDEF_PHI_CHAIN_BB.
	Initialize array VARDEF_PHI_ARGS.
	(dump_varref): Call dump_phi_args.
	(dump_phi_args): New function.
	(debug_phi_args): New function.
	* tree-ssa-ccp.c (PHI_PARMS): Remove.
	(EIE): Remove.
	(visit_phi_node): Get the argument's edge directly from the
	argument instead of calling find_edge.
	(initialize): Cast call to NUM_EDGES to unsigned.
	* tree-ssa-pre.c: Update uses of VARDEF_PHI_CHAIN,
	VARDEF_PHI_CHAIN_BB and VARUSE_CHAIN everywhere.
	* tree-ssa.c: Ditto.
	Include ggc.h.
	(search_fud_chains): Call add_phi_arg to add arguments to each PHI
	node.
	(tree_ssa_remove_phi_alternative): Call set_phi_arg to switch the
	last element with the element being removed.

2002-08-26  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (mostly_copy_tree_r): Unshare STMT_EXPR
	nodes.

2002-08-25  Diego Novillo  <dnovillo@redhat.com>

	* tree-dfa.c (find_refs_in_stmt): Replace calls to
	RETURN_EXPR with RETURN_STMT_EXPR.
	* c-simplify.c (simplify_return_stmt): Ditto.
	(deep_copy_node): Ditto.
	* c-pretty-print.c (dump_c_node): Ditto.

2002-08-24  Diego Novillo  <dnovillo@redhat.com>

	* c-pretty-print.c: Add `break' after calls to NIY in
	switch statements.

2002-08-23  Jeffrey A Law  (law@redhat.com)

	* tree-ssa-ccp.c (tree_ssa_ccp): Remove #if 0 that accidentally
	got checked in.  Cleanup the cfg to remove unreachable blocks
	discovered by CCP.

	* basic-block.h (EDGE_EXECUTABLE): New edge flag.

	* cfganal.c (find_edge): New function.

	* ssa-ccp.c: Convert to use EDGE_EXECUTABLE bit in the 
	edge flags rather than a bitmap.  Convert edge worklist
	into a varray.  Avoids expensive find_index_edge calls.
	* tree-ssa-ccp.c: Likewise.

	* tree-flow.h (tree_ssa_remove_phi_alternative): Declare.
	* tree-ssa.c (tree_ssa_remove_phi_alternative): New function.
	* tree-ssa-ccp.c (optimize_unexecutable_edges): Remove
	PHI alternatives for unexecutable edges.  Also remove
	unexecutable edges from the CFG.

2002-08-22  Jeffrey A Law  (law@redhat.com)

        * Makefile.in (tree-optimize.o): Depend on tree-dchain.o
        * tree-optimize.c: Include tree-dchain.h.
        (optimize_function_tree): Unconditionally build and tear down
        the backpointers for the statement chain.

2002-08-22  Diego Novillo  <dnovillo@redhat.com>

	* tree-dfa.c (find_refs_in_stmt): Look for VARUSE references in
	initialization expressions.
	(find_refs_in_expr): Reformat.
	(remove_ref_from_list): Optimize for the common case of removing
	the head or the tail of the list.
	(add_ref_to_list_end): Reformat comment.
	(create_ref): Store the reference to LHS of assignment expressions.
	(dump_varref): Also dump immediate uses of PHI nodes.
	* tree-flow.h (IS_GHOST_DEF): Rename to IS_DEFAULT_DEF.  Update all
	callers everywhere.
	(struct tree_ann_def): Update comments for field 'currdef'.
	* tree-ssa-ccp.c (ssa_edges): Change type to ref_list.
	(SSA_NAME): Remove.
	(initialize): New function
	(finalize): New function.
	(visit_expression): Rename to visit_expression_for.  Update all
	callers.
	(visit_condexpr_for): New function.
	(visit_assignment): Rename to visit_assignment_for.  Update all
	callers.
	(examine_flow_edges): Rename to simulate_block.  Update all
	callers.
	(follow_def_use_chains): Rename to simulate_def_use_chains.  Update
	all callers.
	(evaluate_expr_for): Rename to evaluate_expr.  Change argument to
	'tree'.
	(set_lattice_value): New function.
	(tree_ssa_ccp): Change main loop to visit flow_edges and ssa_edges
	alternately.
	(visit_phi_node): Do not set the lattice value to UNDEFINED when we
	find a non-executable edge.
	(visit_expression_for): Default definitions for PARM_DECLs are
	assigned a VARYING value.
	Default definitions for any other local variables are assigned an
	UNDEFINED value.
	Clobber VARDEFs that are not the LHS of an assignment.
	Clobber VARDEFs that initialize non-const static variables.
	* tree-ssa.c (search_fud_chains): Set up def-use edges for PHI
	nodes and regular definitions.

	* tree.c (simple_cst_equal): Call simple_cst_list_equal to compare
	CONSTRUCTOR_ELTS pointers.

2002-08-22  Diego Novillo  <dnovillo@redhat.com>

	* c-pretty-print.c (buffer): New file local variable.
	(initialized): New file local variable.
	(print_c_tree): Don't call init_output_buffer.  Call
	maybe_init_pretty_print.
	(print_c_node): Ditto.
	(print_c_node_brief): Ditto.
	(maybe_init_pretty_print): New function.
	* tree-mudflap.c (mf_varname_tree): Only call init_output_buffer
	once.  Call output_clear_message_text before returning.

2002-08-21  Frank Ch. Eigler  <fche@redhat.com>

	Support source-file/line coordinates in check/violation messages.
	* tree-mudflap.c (mf_init_extern_trees): Add new "location" formal
	arg to __mf_check.
	(mf_file_function_line_tree): New function to build an actual location
	string.
	(build_check_statement_for): Call it / pass it.
	(mx_xfn_indirect_ref): Track source file/line location via
	STMT_LINENO, FILE_STMT, EXPR_WITH_FILE_LOCATION traversal memos.

2002-08-21  Daniel Berlin  <dberlin@dberlin.org>

	* dominance.c: Cache immediate dominators.

2002-08-20  Daniel Berlin  <dberlin@dberlin.org>

	* tree-alias-steen.h (struct tree_alias_ops): Add flag for 
	interprocedural.

	* tree-alias-steen.c (steen_alias_ops): Set interprocedural to 0
	for now.
	(intra_function_call): New function to handle intraprocedural calling.
	(finc_func_aliases): Use it.
	Handle *x = *y, *x = &y, and *x = (cast) y.
	(display_points_to_set_helper): New function, split from ...
	(display_points_to_set): Here.
	(create_alias_vars): Try to print all alias vars we find in the
	alias_vars array, rather than just those that are linked directly to
	trees.
	Clear arrays when we finish if we aren't interprocedural.

2002-08-20  Frank Ch. Eigler  <fche@redhat.com>

	static object registration support:
	* tree-mudflap.c (mudflap_enqueue_decl, mudflap_enqueue_constant):
	Replace stubs with real code.
	(mf_enqueue_register_call): New function to generate asm-object
	call to __mf_register.
	(mf_flush_enqueued_calls): New function to emit global ctor function
	with enqueued __mf_register calls.
	(mf_varname_tree): Tolerate being called from non-function context.
	* c-objc-common.c: #include <tree-mudflap.h>.

	gengtypes support for mudflap:
	* Makefile.in (GTFILES): Include tree-mudflap.c.
	(gt-tree-mudflap.h): New target.
	* tree-mudflap.c: Annotate global tree nodes with GTY(()).
	* tree-nomudflap.c: Add dummy ggc root table.
	
2002-08-19  Diego Novillo  <dnovillo@redhat.com>

	* tree-dfa.c (find_refs_in_expr): If the current sub-expression is
	not SIMPLE, mark its parent.
	(create_ref): If the parent expression is not SIMPLE, create
	VARDEFs regardless of the original reference type.

	* tree-ssa-ccp.c (widen_bitfield): New function.
	(evaluate_expr_for): Call it.

2002-08-18  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-ccp.c (evaluate_expr_for): Fix thinko in
	2002-08-17 patch.

2002-08-17  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-ccp.c (evaluate_expr_for): keep VARREF_SYM in a local
	variable.

2002-08-16  Diego Novillo  <dnovillo@redhat.com>

	* basic-block.h (BB_CONTROL_EXPR): Update value.
	(BB_LOOP_CONTROL_EXPR): Define.
	(BB_CONTROL_ENTRY): Update value.
	* tree-cfg.c (make_for_stmt_blocks): Flag header blocks withh
	BB_LOOP_CONTROL_EXPR.
	(make_while_stmt_blocks): Ditto.
	(make_do_stmt_blocks): Ditto.
	(tree_delete_bb): Update annotations in the loop entry block when
	removing one of the loop expression blocks.

	* tree-dfa.c (tree_find_varrefs): Disregard empty blocks.
	(find_refs_in_stmt): Handle all the loop expression blocks in
	FOR_STMT and DO_STMT nodes.
	(find_refs_in_expr): Change first argument to tree *.  Update all
	callers.
	Force all references to be definitions when the expression is not
	in SIMPLE form.
	Also create references for compound variables and array references.
	Not just their individual components.
	Always use the original parent expression when making recursive
	calls.
	(create_ref): Add new argument operand_p.  Update all callers.
	(remove_tree_ann): New function.
	(dump_varref): Don't assume that the referenced symbol is a _DECL
	node.
	* tree-flow.h (treeref_common): Add field operand_p.
	(VARREF_OPERAND_P): Define.
	(BB_EMPTY_P): Define.
	(remove_tree_ann): Declare.
	(create_ref): Add new argument operand_p.
	* tree-simple.c (get_base_symbol): New function.
	* tree-simple.h (get_base_symbol): Declare.
	* tree-ssa-ccp.c (visit_assignment): Call it.
	(ssa_ccp_substitute_constants): Use VARREF_OPERAND_P to replace
	values into the expression.
	(evaluate_expr_for): Ditto.
	Do not try to evaluate the expression if the reference is not of
	the same type as the expression.
	After evaluation, restore the expression to its original form.
	* tree-ssa-pre.c (insert_occ_in_preorder_dt_order_): Update calls
	to create_ref.
	(finalize_): Ditto.
	(expr_phi_insertion): Ditto.
	* tree-ssa.c (tree_build_ssa): Ditto.
	(insert_phi_terms): Ditto.
	(delete_ssa): Call remove_tree_ann.

2002-08-15  Diego Novillo  <dnovillo@redhat.com>

	* c-pretty-print.c: Move extern definitions to diagnostic.h.
	(print_c_node_brief): New function.
	(debug_c_node_brief): New function.
	(debug_c_node): Add option for showing brief versions of statement
	nodes.  Update all callers.
	(print_declaration): Ditto.
	* c-simplify.c (simplify_function_tree): Add newline to debug
	output.
	* c-tree.h (print_c_node_brief): Declare.
	(debug_c_node_brief): Declare.
	* tree-cfg.c: Call print_c_node_brief in debugging otuput.
	* tree-mudflap.c (dump_c_node): Remove extern declaration.
	(mf_varname_tree): Update call to dump_c_node.

2002-08-15  Daniel Berlin  <dberlin@dberlin.org>

	* tree-cfg.c (find_expr_in_tree_helper): Renamed from find_expr_in_tree.
	(find_expr_in_tree): Redone.

2002-08-15  Daniel Berlin  <dberlin@dberlin.org>

	* tree-cfg.c (insert_before_ctrl_stmt): Fix insertion for various
	parts of for loop.

	* tree-ssa-pre.c (finalize_1): Set EXPR_STMT type to type of
	expression in it.  

2002-08-14  Frank Ch. Eigler  <fche@redhat.com>

	* gcc.c (LINK_COMMAND_SPEC): Tweak placement of %(mflib).

2002-08-14  Diego Novillo  <dnovillo@redhat.com>

	* tree-simple.h (is_simple_decl_stmt): Declare.

2002-08-13  Frank Ch. Eigler  <fche@redhat.com>

	* gcc.c (MFWRAP_SPEC, MFLIB_SPEC): New macros, splitting MFLIB_SPEC.
	(mfwrap_spec, mflib_spec): Define corresponding vars.
	(static_specs): Define correponding spec aliases.
	(LINK_COMMAND_SPEC): Include -fmudflap refs to new spec aliases.
	(cpp_unique_options): Move -fmudflap MFCPP_SPEC clause here.
	(cc1_options): Move -fmudflap MFCC1_SPEC clause here.
	(MFCC1_SPEC, MFCPP_SPEC, MFLIB_SPEC): Remove macros and uses.

2002-08-13  Graydon Hoare  <graydon@redhat.com>

	* tree-mudflap.c (mf_build_check_statement_for): Factor code out of
	mx_xfn_indirect_ref for use in ARRAY_REF case.
	(mf_build_check_statement_for): Check size of underlying object
	rather than size of pointer.
	(mx_xfn_indirect_ref): Check ARRAY_REF expressions.
	(mf_offset_expr_of_array_ref): New function to calculate array ref
	offsets.

2002-08-13  Diego Novillo  <dnovillo@redhat.com>

	* tree-simple.c (is_simple_condexpr): Update comment.
	* tree-ssa-ccp.c (ssa_ccp_substitute_constants): Add debugging code.

2002-08-12  Jason Merrill  <jason@redhat.com>

	* c-typeck.c (build_component_ref): Don't add a NON_LVALUE_EXPR
	in C99 mode.

	* c-simplify.c (simplify_expr): Always simplify.  Loop if *expr_p
	changed.
	(simplify_addr_expr): Just replace *expr_p if we have a '&*'.
	* tree-simple.c (is_simplifiable_builtin): Add more tree codes.

2002-08-11  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c: Fix typo.  Substitute CHECKING with ENABLE_CHECKING.
	* tree-cfg.c: Ditto.
	* tree-dfa.c: Ditto.
	* tree-ssa-ccp.c: Ditto.
	* tree-ssa.c: Ditto.

2002-08-11  Diego Novillo  <dnovillo@redhat.com>

	* tree-dfa.c (find_refs_in_expr): Use the given ref_type for some unary
	expressions.
	(create_ref): Insert ghost definitions at the beginning of the
	basic block.
	(find_expr_in_tree): Ignore IDENTIFIER_NODE.
	* tree-flow.h (treeref_common): Move the id field to the end of the
	structure.
	(IS_GHOST_DEF): Redefine to return non zero for definitions
	without an associated expression in basic block 0.
	* tree-ssa-ccp.c (tree_ssa_ccp): Use last_basic_block to allocate
	executable_blocks.
	(visit_expression): Set the lattice value for ghost definitions to
	VARYING.
	(examine_flow_edges): Update comments.
	* tree-ssa.c (tree_build_ssa): Create ghost definitions in basic
	block 0.
	(insert_phi_terms): Don't ignore ghost definitions.

	* c-simplify.c (simplify_function_tree): Return 0 if the function's
	body is not a COMPOUND_STMT.
	Return 0 if simplification failed.
	(simplify_expr): Change to return int.  Return non zero if
	simplification was successful.
	(c_simplify_expr): Add default case to avoid compile time warnings.
	(create_tmp_alias_var): Reformat comment.
	* tree-simple.h (simplify_expr): Change return type to int.

	* c-simplify.c: Guard consistency checks with #if defined CHECKING
	everywhere.
	* tree-cfg.c: Ditto.
	* tree-dfa.c: Ditto.
	* tree-ssa-ccp.c: Ditto.
	* tree-ssa.c: Ditto.

	* c-simplify.c: Include hard-reg-set.h, basic-block.h and
	tree-flow.h.
	(mark_not_simple_r): New function.
	(simplify_expr): Temporarily mark VA_ARG_EXPR and BIT_FIELD_REF
	trees as not simplifiable.
	(simplify_call_expr): If the builtin cannot be simplified, flag it.
	* Makefile.in (c-simplify.o): Update dependencies.
	* tree-dfa.c (create_ref): Variable references inside
	non-simplifiable expressions are always considered definitions.
	* tree-flow.h (TF_NOT_SIMPLE): New flag.
	* tree-simple.c (is_simplifiable_builtin): Update comments.

	* c-pretty-print.c (dump_c_node): Unparse anonymous structures and
	unions.
	Change rendering for SAVE_EXPR and BIT_FIELD_REF.

	* Makefile.in (tree-mudflap.o, tree-nomudflap.o): Add.

2002-08-11  Frank Ch. Eigler  <fche@redhat.com>

	Prototype -fmudflap support.
	* Makefile.in (C_AND_OBJC_OBJS): Add tree-mudflap.o.
	(OBJS): Add tree-nomudflap.o.
	* flags.h (flag_mudflap): New flag.
	* toplev.c: Map "-fmudflap" to that flag.
	* c-decl.c (c_expand_body): Call mudflap_c_function if flag_mudflap.
	* c-objc-common.c (c_objc_common_finish_file): Add mudflap hook.
	* varasm.c (make_decl_rtl): Add mudflap hook.
	(output_constant_def_contents): Ditto.
	* tree-mudflap.c: New file: implement mudflap instrumentation.
	* tree-nomudflap.c: New file: stub functions for non-C frontends.
	* tree-mudflap.h: New file: define exported functions.
	* gcc.c (MFLIB_SPEC, MFCC1_SPEC, MFCPP_SPEC): Add general
	-fmudflap spec mappings.
	* c-simplify.c (simplify_stmt): Stub: handle CLEANUP_STMT nodes.
	* tree-dfa.c (find_refs_in_stmt): Ditto.
	* c-pretty-print.c (dump_c_node): Ditto.
	(print_declaration): Handle "extern" decls.  Handle arrays with
	indefinite sizes.
	* tree-simple.h (is_simple_stmt, is_simple_compstmt): Remove decls.

2002-08-11  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (simplify_self_mod_expr): Unshare the lhs before
	using it again.
	(simplify_compound_lval): Don't unshare.

	* c-simplify.c (c_simplify_expr): Check statement_code_p.

	* c-simplify.c (maybe_fixup_loop_cond): Move to cp/cp-simplify.c.
	(simplify_for_stmt): Don't call it.
	(simplify_while_stmt): Don't call it.

2002-08-11  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_compound_lval): Use mostly_copy_tree_r.

2002-08-09  Jason Merrill  <jason@redhat.com>

	* langhooks-def.h: Replace the simplify_function_tree hook
	with a simplify_expr hook.
	* langhooks.h: Likewise.
	* langhooks.c: Replace lhd_simplify_function_tree with
	lhd_simplify_expr.
	* c-lang.c (LANG_HOOKS_SIMPLIFY_FUNCTION_TREE): Don't define.
	(LANG_HOOKS_SIMPLIFY_EXPR): Define.
	* c-decl.c (c_expand_body): De-hook simplify_function_tree.
	* c-common.h: Declare c_simplify_expr.
	* c-simplify.c (simplify_function_tree): Rename from 
	c_simplify_function_tree.  Call simplify_expr instead of
	simplify_stmt.
	(c_simplify_expr): Split out from...
	(simplify_expr): ...here.  No longer static.  Call langhook.
	(is_simple_decl_stmt): Move here from tree-simple.c.
	* tree-simple.c: Don't include c-tree.h.
	(is_simple_stmt, is_simple_compstmt): Remove.
	(is_simple_decl_stmt): Move to c-simplify.c.
	* tree.h: Declare simplify_function_tree.
	* tree-simple.h: Declare simplify_expr, add_tree.

	* tree-simple.c (rationalize_compound_expr): New fn.

2002-08-07  Diego Novillo  <dnovillo@redhat.com>

	* basic-block.h (EDGE_TRUE_VALUE): Define.
	(EDGE_FALSE_VALUE): Define.
	* tree-cfg.c: Include c-tree.h.
	(make_for_stmt_edges): Call simple_cst_equal to determine infinite
	and zero iteration loops.
	Set EDGE_TRUE_VALUE and EDGE_FALSE_VALUE to edges coming out of
	predicate block.
	(make_while_stmt_edges): Ditto.
	(make_do_stmt_edges): Ditto.
	(make_if_stmt_edges): Set EDGE_TRUE_VALUE and EDGE_FALSE_VALUE to
	edges coming out of predicate block.

	* c-simplify.c (simplify_compound_lval): Unshare the compound
	reference before simplification.

	* tree-cfg.c (insert_before_ctrl_stmt): Call print_c_node instead of
	print_node_brief.
	(insert_before_normal_stmt): Ditto.
	(insert_after_ctrl_stmt): Ditto.
	(insert_after_normal_stmt): Ditto.
	(insert_after_loop_body): Ditto.
	(replace_expr_in_tree): Ditto.
	(tree_dump_bb): Ditto.

	* tree-dfa.c: Include c-tree.h
	(next_varref_id): New global variable.
	(tree_find_varrefs): Initialize it to 0.
	(create_ref): Increment it after creating a new reference.  Store
	it in ref.common.id. 
	Add the new reference to the list of references for the containing
	expression.
	(dump_varref): Show the reference ID.
	* tree-flow.h (treeref_common): Add field 'id'.
	(VARREF_ID): Define.

	* tree-dump.c (dump_files): Re-order dump files.
	* tree.h (tree_dump_index): Ditto.

	* tree-optimize.c (optimize_function_tree): Remove blank lines.

	* tree-simple.c: Remove unary operator '!' from grammar.

	* tree-flow.h (tree_ann_def): Add field 'flags'.
	(TF_FOLD): Define.
	(TREE_ANN): Re-define into an lvalue.
	(BB_FOR_STMT): Ditto.
	(TREE_CURRDEF): Ditto.
	(next_varref_id): Declare.
	* tree-ssa-ccp.c: Include tree-simple.h
	(ssa_edges): Convert sbitmap into varray_type.  Update all uses.
	(decl_map): Remove.
	(SSA_NAME): Use VARREF_ID instead of DECL_UID.
	(visit_assignment): New function.
	(evaluate_expr_for): New function.
	(dump_lattice_value): New function.
	(tree_ssa_ccp): Add debugging dumps.
	Remove #if 0 code everywhere.
	(visit_phi_node): Add debugging dumps.
	Also visit PHI arguments.
	Remove basic block argument
	(visit_expression): Re-implement.
	(examine_flow_edges): Add debugging dumps.
	(ssa_ccp_substitute_constants): Add debugging dumps.
	Update comments.
	Mark and fold expressions with substituted constants.
	* tree-ssa.c (search_fud_chains): Don't check if BB_REFS(bb) is
	empty before iterating.
	Add comment explaining how we chain PHI node arguments to their
	originating basic block.

	* Makefile.in (tree-cfg.o, tree-dfa.o, tree-ssa-ccp.o): Update 
	dependencies.

2002-07-29  Daniel Berlin  <dberlin@dberlin.org>

	* tree-ssa-pre.c (tree_perform_ssapre): Ben forgot to add a
	dump_begin call when he removed the before dump. 

2002-07-24  Daniel Berlin  <dberlin@dberlin.org>

	* tree-alias-ecr.c (ECR_new_with_type): Use correct number in mapping.

2002-07-23  Daniel Berlin  <dberlin@dberlin.org>

	* c-simplify.c (simplify_for_stmt): Deep copy the result of the
	tail_expression, so it's unshared. 

2002-07-23  Daniel Berlin  <dberlin@dberlin.org>

	* tree-flow.h: Add prototype for create_alias_vars.

	* tree-alias-steen.c (display_points_to_set): New function.
	(init_alias_vars): Display points to sets when we are done.

	* disjoint-set.h (disjoint_set_def): ptr_alias to ECR_def so that
	we mark parent properly.
	
2002-07-24  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (GTFILES): Move tree-alias-type.[ch],
	tree-alias-ecr.[ch], tree-alias-steen.[ch] from ...
	* c-config-lang.in (gtfiles): ... here.

	* tree-simple.c (is_simplifiable_builtin): Replace
	BUILT_IN_VARARGS_START with BUILT_IN_VA_START.

2002-07-23  Andreas Jaeger  <aj@suse.de>

	* tree-ssa-pre.c (hash_expr_tree): Remove.

	* c-call-graph.c (write_dtd): Remove.

	* tree-ssa.c (delete_refs): Remove.

2002-07-23  Andreas Jaeger  <aj@suse.de>

	* gengtype.c (open_base_files): Add tree.h.

	* tree-alias-type.h: Remove inclusion of tree.h.

	* tree-alias-steen.c: Include tree.h.
	Add prototype for create_fun_alias_var_ptf.

	* tree-alias-ecr.c: Add prototype for ECR_add_pending.

	* tree-ssa-pre.c (calculate_preorder): Remove unused variables.

	* tree-simple.c: Include expr.h and rtl.h for prototypes.

	* tree-optimize.c: Include tree-alias-steen.h for prototypes.

	* Makefile.in (tree-optimize.o): Add tree-alias-steen.h.
	(tree-simple.o): Add expr.h and rtl.h.
	(tree-alias-steen.o): Add tree.h.
	
	* diagnostic.h: Add declaration of debug_output_buffer.

	* c-call-graph.c (construct_call_graph): Make static to follow
	declaration.
	(construct_call_graph): Use #if 0 instead of C++ comments to
	disable code.

2002-07-20  Andreas Jaeger  <aj@suse.de>

	* doc/invoke.texi (Option Summary): Fix syntax.

2002-07-19  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (simplify_return_stmt): Do simplify a returned
	expression in a void function.

	* c-simplify.c (simplify_stmt_expr): Handle C++ return semantics.

2002-07-19  Jason Merrill  <jason@redhat.com>

	* c-pretty-print.c (dump_c_node) [TARGET_EXPR]: Handle.
	[COND_EXPR]: Print a returned expression in a void function.

2002-07-19  Ben Elliston  <bje@redhat.com>
 
 	* tree-ssa-pre.c (tree_perform_ssapre): Don't dump the original
 	tree before applying this optimisation.
 
 	* flags.h (flag_dump_tree_all_ssa): New flag.
 	* toplev.c (flag_dump_tree_all_ssa): New flag.
 	(f_options): Add "dump-tree-all-ssa" option.
 	(process_options): Process flag_dump_tree_all_ssa.
 	* tree.h (dump_enable_all_ssa): Declare.
 	* tree-dump.c (dump_enable_all_ssa): New function.
 	* doc/invoke.texi (Option Summary): Add -fdump-tree-all-ssa and
 	-fdump-tree-ssapre options.
 	(Debugging Options): Describe in more detail.
 	* c-simplify.c (c_simplify_function_tree): Dump the original tree
 	only if a TDI_original dump is requested, rather than TDI_simple.
 
 	* tree-dump.c (dump_begin): Include phase number in dump filename.
 
2002-07-18  Ben Elliston  <bje@redhat.com>
 
 	* tree-dump.c (dump_files): Rename "unparse" to "raw".
 	* tree.h (TDF_UNPARSE): Rename from this ..
 	(TDF_RAW): .. to this.
 	* tree-ssa-pre.c (tree_perform_ssapre): Use TDF_RAW and invert the
 	logical sense of this flag.
 	* tree-ssa-ccp.c (tree_ssa_ccp): Likewise.
 	* c-simplify.c (c_simplify_function_tree): Likewise.
 
2002-07-18  Daniel Berlin  <dberlin@dberlin.org>

	* tree-ssa-pre.c (calculate_preorder): New function.
	(tree_perform_ssapre): Use it, rather than
	flow_compute_preorder_tranversal, which seems to not do 
	what we want.

2002-07-18  Daniel Berlin <dberlin@dberlin.org>
	
	* tree-alias-type.c: Move gt-tree-alias-type include to end of file.

	* tree-alias-steen.c: Move gt-tree-alias-steen include to end of file.

2002-07-18  Daniel Berlin  <dberlin@dberlin.org>

	* gengtype.c (get_base_file_bitmap): Mark tree-alias-* and
	disjoint-set* as c/c++/objc files only.

	* Makefile.in (gt-tree-alias-type.h): Add.
	(tree-alias-type.o): Add dependency on gt-tree-alias-type.h.

	* tree-alias-type.c: Include gt-tree-alias-type.h.
	(alias_bottom): Add a GTY marked version of alias_bottom here.

	* tree-alias-type.h: Remove the GTY marker from alias_bottom.

2002-07-17  Daniel Berlin  <dberlin@dberlin.org>

	* tree-alias-ecr.c (ECR_union_pending_sets): Only clear bitmap if
	it's not NULL.  

2002-07-16  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (add_tree): Build an EXPR_STMT immediately.
	(convert_to_stmt_chain): Remove.
	(simplify_stmt, simplify_for_stmt, simplify_while_stmt, 
	simplify_do_stmt, simplify_expr_wfl, tail_expression): Adjust.

2002-07-17  Daniel Berlin  <dberlin@dberlin.org>

	* tree-alias-ecr.c: New file. Equivalence Class Representation.

	* tree-alias-steen.c: New file. Steengaard Alias Analysis.

	* disjoint-set.c: New file. Disjoint set data structure.

	* tree-alias-type.c: New file. Alias types.

	* c-simplify.c (create_tmp_alias_var): New function, like
	create_tmp_var, but doesn't add it to the current binding.

	* tree-simple.h: Prototype for create_tmp_alias_var.

	* tree-optimize.c (build_tree_ssa): Create alias variables, if
	requested.

	* flags.h: Add flag_tree_points_to.

	* toplev.c: Ditto.
	
	* gengtype.c (open_base_files): Add disjoint-set.h,
	tree-alias-ecr.h, tree-alias-type.h, tree-flow.h.

	* Makefile.in (C_AND_OBJC_OBJS): Add disjoint-set.o,
	tree-alias-ecr.o, tree-alias-type.o, tree-alias-steen.o.
	(tree-alias-steen.o): Add dependencies.
	(tree-alias-ecr.o): Ditto.
	(tree-alias-type.o): Ditto.
	(disjoint-set.o): Ditto.

2002-07-10  Daniel Berlin  <dberlin@dberlin.org>
	    Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (C_AND_OBJC_OBJS): Add tree-ssa-ccp.o
	* flags.h (flag_tree_ssa_ccp): Declare.
	* fold-const.c (eval_subst): Make extern.
	* toplev.c (flag_tree_ssa_ccp): Define.
	(f_options): Document -ftree-ssa-ccp.
	* tree-dump.c (dump_files): Add -fdump-tree-ccp.
	* tree-flow.h (tree_perform_ssapre): Move declaration ...
	* tree-optimize.h: ... here.
	(tree_ssa_ccp): Declare.
	* tree-optimize.c (optimize_function_tree): Call tree_ssa_ccp.
	* tree-ssa-ccp.c: New file.
	* tree.c (next_decl_uid): Remove static declaration.
	* tree.h (next_decl_uid): Declare.
	(tree_dump_index): Add TDI_ccp.
	* cp/Make-lang.in (CXX_C_OBJS): Add tree-ssa-ccp.o.
	* doc/invoke.texi: Document -ftree-ssa-pre and -ftree-ssa-ccp.

2002-07-09  Daniel Berlin  <dberlin@dberlin.org>

	s/varrays of refs/ref_list of refs/g

	* tree-flow.h: Add ref_list structure.  
	Add prototypes for ref_list functions.
 	(FOR_EACH_REF, FOR_EACH_REF_REV): New macros to iterate through 
	ref lists.
	* tree-cfg.c, tree-ssa.c, tree-ssa-pre.c: Update all uses.

	* tree-dfa.c (create_ref_list): New function.
	(delete_ref_list): Ditto.
	(empty_ref_list): Ditto.
	(add_ref_to_list_end): Ditto.
	(add_ref_to_list_begin): Ditto.
	(remove_ref_from_list): Ditto.

2002-07-04  Diego Novillo  <dnovillo@redhat.com>

	* tree-simple.c (is_simplifiable_builtin): Don't simplify target
	builtins.

2002-07-03  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_decl_stmt): Unshare the
	initializer nodes before simplification.

2002-06-29  Aldy Hernandez  <aldyh@quesejoda.com>
            Diego Novillo  <dnovillo@redhat.com>

        * c-simplify.c (simplify_call_expr): Do not bail on all builtins.
        (is_simple_call_expr): Same.
	(simplify_addr_expr): New function.
	(simplify_expr): Call it.

        * tree-simple.c (is_simplifiable_builtin): New.
        (is_simple_compound_lval): Do not bail on INDIRECT_REF.

        * tree-simple.h: New prototype for is_simplifiable_builtin.

2002-06-26  Daniel Berlin  <dberlin@dberlin.org>

	* tree-ssa.c (tree_build_ssa): Call free_dominance_info, not
	free, on idom.

	* tree-ssa-pre.c (compute_domchildren): Update to use new
	dominance_info structure, rather than idom array.
	(tree_perform_ssapre): Don't forget to free the dominance info.

	s/VARRAY_FREE/VARRAY_CLEAR/g now that VARRAY's are ggc allocated.

2002-06-24  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa.c (build_fud_chains): Use dominance_info instead of int *.
	(search_fud_chains): Ditto.
	Call get_immediate_dominator.
	* tree-ssa-pre.c (a_dom_b): Call dominated_by_p.
	(pre_idom): Change type to dominance_info.  Update all uses.
	(pre_doms): Remove.  Update all uses.

2002-06-20  Jason Merrill  <jason@redhat.com>

	Simplify DECL_STMT, CONSTRUCTOR and COMPOUND_LITERAL_EXPR.
	* tree-simple.c (is_simple_decl_stmt): New fn.
	(is_simple_constructor, is_simple_constructor_elt): New fns.
	(is_simple_stmt, is_simple_unary_expr): Use them.
	(is_simple_modify_expr): Accept an INIT_EXPR.
	(is_simple_id): Don't allow a COMPOUND_LITERAL_EXPR.
	(is_simple_unary_expr): Here either.
	* c-simplify.c (simplify_decl_stmt, simplify_constructor): New fns.
	(simplify_compound_literal_expr): New fn.
	(simplify_stmt, simplify_expr): Use them.
	(get_initialized_tmp_var): Use an INIT_EXPR.
	(simplify_modify_expr): Accept an INIT_EXPR.
	(simplify_for_stmt): Call simplify_decl_stmt.
	(get_name): Don't crash if the decl is anonymous.
	(tail_expression): New fn.
	* tree-simple.h: Declare new fns.
	* c-pretty-print.c (dump_c_node) [INIT_EXPR]: Print like MODIFY_EXPR.
	(dump_c_node, op_prio): Handle COMPOUND_LITERAL_EXPR.
	* c-simplify.c (simplify_expr_wfl): Only wrap pre and post stuff
	that came from our subexpression.
	(simplify_stmt): Restore stmts_are_full_exprs_p.

	* c-simplify.c (simplify_expr_wfl): Bracket substatements with
	FILE_STMTs rather than wrapping them in EXPR_WITH_FILE_LOCATION.
	(simplify_stmt): Update lineno and input_filename from stmts.
	(simplify_expr et al): Don't copy lineno between stmts.  Don't pass 
	enclosing stmt down.
	(update_line_number): Remove.
	
	* c-simplify.c (simplify_expr_stmt): Don't check
	is_last_stmt_of_scope.
	(simplify_stmt_expr): Check it here.  Set *expr_p to void_zero_node
	instead of NULL_TREE.
	(expr_has_effect): No need to deal with NULL exprs now.
	(simplify_expr_wfl): Likewise.

2002-06-18  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (strip_off_ending): Rename to remove_suffix.
	Update callers.
	(is_last_stmt_of_scope): New function.
	(simplify_expr_stmt): Call it.
	(stmt_has_effect): Ditto.
	(c_simplify_function_tree): Update comment.

2002-06-18  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (maybe_fixup_loop_cond): New fn for C++ conditions.
	(simplify_for_stmt, simplify_while_stmt): Use it.
	
	* c-pretty-print.c (dump_c_node) [COMPONENT_REF]: Print "->" if
	appropriate.

2002-06-19  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (simplify_stmt_expr): New fn.
	(simplify_expr): Call it.
	(stmt_expr_level): Remove.
	(stmt_has_effect, c_simplify_function_tree): Remove refs.
	(expr_has_effect): Deal with null expression.
	(simplify_expr_wfl): If the subexpression is simplified away, drop
	this one, too.  Don't wrap statements.
	* tree-simple.c (is_simple_unary_expr): Don't allow a STMT_EXPR.
	* tree-inline.c (copy_tree_r): Clear the aux field in the copies.

2002-06-17  Frank Ch. Eigler  <fche@redhat.com>

	* c-pretty-print.c (dump_c_node): Print pointer-type
	integer constants as raw numbers with a "B" (bytes) suffix.

2002-06-17  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (simplify_stmt): Take a tree *.
	(various): Adjust.

2002-06-16  Daniel Berlin  <dberlin@dberlin.org>

	* c-simplify.c (get_name): New function.
	(get_initialized_tmp_var): Use it to try to get a prefix for
	create_tmp_var from the value we are initializing to.
	(simplify_cond_expr): Add prefix for create_tmp_var.
	(create_tmp_var): Add prefix argument.
	
	* tree-simple.h: Change create_tmp_var prototype to match.

	* tree-ssa-pre.c: Change create_tmp_var call.

2002-06-15  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (c-decl.o): Add dependency on langhooks.h
	(c-simplify.o): Add dependency on flags.h, langhooks.h, toplev.h
	and rtl.h.
	* c-decl.c: Include langhooks.h.
	(c_expand_body): Simplify the function.  If it succeeds and
	-ftree-ssa is enabled, call optimize_function_tree.
	* c-simplify.c: Include flags.h, rtl.h and toplev.h.
	(simplify_expr_stmt): New function.
	(simplify_stmt): Call it.
	* tree-optimize.c: Don't include langhooks.h.
	(optimize_function_tree): Don't call lang_hooks.simplify_function_tree.

	* c-decl.c (c_expand_body): Do not simplify nor optimize the
	function if -fdisable-simple is given.
	* c-simplify.c (simplify_expr): Use is_simple_addr_expr_arg when
	simplifying ADDR_EXPR nodes.
	* flags.h (flag_disable_simple): Declare.
	* toplev.c (flag_disable_simple): Define.
	(f_options): Document -fdisable-simple.
	(process_options): Warn if -fdisable-simple is used with
	optimization enabled.
	* tree-simple.c (is_simple_addr_expr_arg): New function.
        (is_simple_unary_expr): Call it.
	* tree-simple.h (is_simple_addr_expr_arg): Declare.
	* doc/invoke.texi: Document -fdisable-simple.

	* c-pretty-print.c (dump_c_node): Handle DECL_STMT nodes inside
	FOR_INIT_STMT.
	* c-simplify.c (c_simplify_function_tree): Don't do anything if the
	program had errors.
	(simplify_stmt): Skip DECL_STMTs.
	(simplify_for_stmt): Handle DECL_STMT nodes inside FOR_INIT_STMT.
	(simplify_save_expr): New function.
	(simplify_expr): Call it.
	(tree_last_decl): Handle cases where DECL_STMTs are found before
	the body of the function.
	* tree-simple.c (is_simple_stmt): Handle DECL_STMT nodes inside
	FOR_INIT_STMT.
	(is_simple_compound_lval): Handle nodes wrapped in NON_LVALUE_EXPR.

2002-06-14  Frank Ch. Eigler  <fche@redhat.com>

	* c-pretty-print.c (dump_c_node): Print more type qualifiers,
	especially for pointers.

2002-06-11  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c: Remove folding markers.
	(insert_before_first): Remove unused function.
	* tree-cfg.c: Remove folding markers.
	* tree-dfa.c: Ditto.
	* tree-flow.h: Ditto.
	* tree-optimize.c: Ditto.
	* tree-optimize.h: Ditto.
	* tree-simple.c: Ditto.
	* tree-ssa.c: Ditto.

2002-06-11  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (add_tree): Don't deep-copy expressions.
	(simplify_for_stmt): Only deep-copy pre_cond_s the first time.
	Don't deep copy expr_chain.

2002-06-10  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (remove_bb_ann): Don't call VARRAY_FREE.
	* tree-dfa.c (create_ref): Use sizeof (ref) instead of
	refs->element_size.
	* tree.h (struct tree_common): Skip field 'aux' from GC type
	information.
	* tree-optimize.c (optimize_function_tree): Don't call
	VARRAY_REF.
	* tree-ssa.c (insert_phi_terms): Ditto.
	(delete_refs): Ditto.
	* c-simplify.c (simplify_array_ref): Ditto.
	* simple-break-elim.c: Disable whole file.
	* simple-goto-elim.c: Disable whole file.

2002-06-10  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (simplify_switch_stmt): Let simplify_expr handle
	post-effects.  Reorder.
	(simplify_if_stmt): Likewise.  Don't build redundant comparison.
	(simplify_do_stmt, simplify_while_stmt): Likewise.
	(simplify_for_stmt): Likewise.  Remove POST_P parm.
	(simplify_stmt): Adjust.
	(insert_before_first): #if 0, no longer used.

	* c-pretty-print.c (dump_c_node): Print FIX_TRUNC_EXPR, FLOAT_EXPR
	et al as casts.  Add parens as needed.

	* tree-simple.c (is_union_based_ref): New fn.
	(is_simple_min_lval): Use it.  Rename from is_simple_arraybase.
	(is_simple_arrayref): Adjust.  Use loop instead of recursion.
	(is_simple_compref): Likewise.
	(is_simple_compref_lhs): Remove.
	* tree-simple.h: Adjust.
	* c-simplify.c (simplify_array_ref): Adjust.
	(simplify_component_ref): Adjust.

	* c-simplify.c (simplify_expr_common): Tweak ordering.
	(get_initialized_tmp_var): Let simplify_expr handle post-effects.
	* tree-simple.c (is_simple_stmt): Accept an rhs for a return expr.

	* c-simplify.c (simplify_boolean_expr): Avoid redundant tests.
	Give the temp the appropriate type for a boolean value, and
	reconvert at the end.

	* c-simplify.c (simplify_self_mod_expr): Don't duplicate side-effects.

	* c-simplify.c (simplify_return_stmt): Accept a SIMPLE rhs.
	Just hand off to simplify_expr.

	* c-simplify.c (get_initialized_tmp_var): New fn.
	(simplify_expr_common): Use it.  Handle post-effects internally if
	POST_P is NULL.
	(is_simple_tmp_var): Rename from simple_tmp_var_p.
	* tree-simple.h: Adjust.

2002-06-09  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_return_stmt): Update folding markers.
	(build_addr_expr): Ditto.
	* langhooks.h (struct langhooks): Document simplify_function_tree
	hook.

2002-06-09  Jason Merrill  <jason@redhat.com>

	* c-simplify.c (simplify_expr_common): Handle creating both lvalue
	and rvalue temps.  Add new parameter to specify which.
	(simplify_expr): Now just a wrapper.
	(simplify_lvalue_expr): Likewise.
	(simplify_expr_either): New wrapper.
	(simplify_component_ref): Use it instead of simplify_lvalue_expr.

	* c-pretty-print.c (debug_c_tree): Add a trailing newline.
	(debug_c_node): Likewise.
	* gdbinit.in (pct): New macro, calls debug_c_tree.

2002-06-08  Jason Merrill  <jason@redhat.com>

	* tree-simple.c (is_simple_unary_expr): Only allow the address of
	a varname.
	(is_simple_id): Allow STRING_CST.
	* c-simplify.c (simplify_expr_common): Split out from simplify_expr.
	Do simplify ADDR_EXPR.
	(simplify_lvalue_expr): Use it and build_addr_expr.  Take
	simple_test_f.
	(simplify_modify_expr): Adjust.
	(build_addr_expr): New fn.
	(simplify_array_ref): Use simplify_lvalue_expr.
	(simplify_component_ref): Likewise.
	
	* tree-simple.c (is_simple_rhs): Remove condexpr rule.
	(is_simple_compref_lhs): Remove &ID.idlist rule.
	(is_simple_relop): New fn.
	(is_simple_binary_expr, is_simple_condexpr): Use it.
	* tree-simple.h: Declare it.

	* c-simplify.c (create_tmp_var): Refuse to create an array temp.
	(simple_tmp_var_p): New fn.
	(simplify_lvalue_expr): Use it; make sure we don't return a temp.
	* tree-simple.h: Declare it.

	* c-pretty-print.c (dump_c_node) [ARRAY_REF]: Wrap array in parens
	as needed.
	[COMPONENT_REF]: Likewise.
	[POINTER_TYPE]: Fix pointer-to-function handling.
	[ARRAY_TYPE]: Don't try to print an unknown dimension.

	* tree-simple.c (is_simple_arraybase): New function.
	(is_simple_arrayref): Use it to check the array base again.
	* tree-simple.h: Add declaration.
	* c-simplify.c (simplify_array_ref): Do simplify the base.
	* expr.c (expand_expr): First make sure the type has a size.

2002-06-07  Jason Merrill  <jason@redhat.com>

	* cppexp.c (num_equality_op): Use a temporary variable to work
	around gcc 3.0.4 bug.

2002-06-05  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (BOOT_CFLAGS): Remove -ftree-ssa.
	* c-decl.c (c_expand_body): Call optimize_function_tree if tree SSA
	is enabled.
	* c-lang.c (LANG_HOOKS_SIMPLIFY_FUNCTION_TREE): Define.
	* c-simplify.c (simplify_tree): Rename to c_simplify_function_tree.
	Update all callers.
	Dump function body before and after simplification if
	-fdump-tree-simple is used.
	(simplify_expr): Document FIXME for simplification of BIT_FIELD_REF
	nodes.
	* c-tree.h (simplify_tree): Rename to c_simplify_function_tree.
	* langhooks-def.h (LANG_HOOKS_SIMPLIFY_FUNCTION_TREE): Define
	(LANGHOOKS_INITIALIZER): Add LANG_HOOKS_SIMPLIFY_FUNCTION_TREE.
	(lhd_simplify_function_tree): Declare.
	* langhooks.c (lhd_simplify_function_tree): New function.
	* langhooks.h (lang_hooks): Add simplify_function_tree function
	pointer.
	* toplev.c (parse_options_and_default_flags): Set flag_tree_ssa to
	1 at optimization levels >= 1.
	Revert to default warning when -Wuninitialized is used without -O.
	* tree-cfg.c (tree_find_basic_blocks): Rename argument 't' to
	'fnbody'.
	* tree-optimize.c: Include langhooks.h.
	(optimize_tree): Rename to optimize_function_tree.  Update all
	users.
	Rename argument 't' to 'fndecl'.
	Call simplify langhook before building SSA.
	(build_tree_ssa): Rename argument 't' to 'fndecl'.
	Adjust call to tree_find_basic_blocks to pass body of the function.
	* tree-optimize.h (optimize_tree): Rename to
	optimize_function_tree.
	* tree-simple.c (is_simple_unary_expr): Document FIXME on
	BIT_FIELD_REF nodes.
	* tree-ssa.c: Add whitespace.
	* testsuite/lib/c-torture.exp: Remove -ftree-ssa flag.

2002-06-03  Daniel Berlin  <dberlin@dberlin.org>

	* tree-cfg.c (insert_before_*):  For insertion into FOR_INIT's, if
	we have an expression statement, transform into a compound
	expression. 
	Pick the right place to insert a statement by iterating until we
	have a first_exec_stmt (first_non_decl_stmt) that is really the
	first executable non decl statement.
	(insert_after_*): Ditto.

2002-06-03  Daniel Berlin  <dberlin@dberlin.org>

	* tree-ssa-pre.c: Update BB stuff to new basic block structure.
	Add some comments throughout (more coming, particularly describing
	the algorithm, rather than the implementation).
	(free_expr_info): Free refs as well.
	(defs_y_dom_x): Handle unary expressions as well.
	(insert_euse_in_preorder_dt_order_1): Use block of ref, not block
	of statement. 
	Don't insert exit blocks if we hit them before hitting an
	occurrence (it's pointless).
	(rename_2): Return set of phi operands we touched, don't forget to
	free VARRAY's we allocated.
	(rename_1): Correct downsafety computation. Now get exact same
	results as Open64.
	Correct setting of has_real_use.
	(finalize_1): Fix up insertion.
	(code_motion): Fix up insertion.

	* tree-dfa.c (dump_varref):  Improve dumping of expression 
	references.

2002-06-03  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (delete_bb): Rename to tree_delete_bb.  Update callers.
	(tree_find_basic_blocks): Initializer last_basic_block.
	(create_bb): Update last_basic_block after creating a new block.
	(tree_cleanup_cfg): Delete unreachable blocks by traversing the
	linked list, not the array.  Update comments.
	(delete_bb): Update comments.
	(tree_dump_cfg): Also show last_basic_block.
	* tree-ssa.c (tree_build_ssa): Use last_basic_block instead of
	n_basic_blocks to allocate dominator arrays.
	(insert_phi_terms): Ditto.
	(search_fud_chains): User FOR_EACH_BB to look for dominator
	children.

2002-05-29  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (tree_find_basic_blocks): Set next_bb and prev_bb for
	ENTRY_BLOCK_PTR and EXIT_BLOCK_PTR.
	(create_bb): Set flag BB_NEW for every newly created block.
	Call link_block to add the new block to the linked list.
	(tree_split_bb): Traverse basic blocks using FOR_EACH_BB.
	(make_goto_stmt_edges): Ditto.
	(remove_unreachable_blocks): Add reminder comment to stop
	compacting the basic block array every time a block is deleted.
	(delete_cfg): Traverse basic blocks using FOR_EACH_BB.
	(tree_dump_bb): Ditto.
	(tree_dump_cfg): Ditto.
	(tree_cfg2dot): Ditto.
	* tree-dfa.c (tree_find_varrefs): Ditto.
	(create_tree_ann): Ditto.
	(get_fcalls): Ditto.
	(find_declaration): Ditto.
	* tree-ssa.c (tree_build_ssa): Ditto.

2002-05-28  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in: Add -ftree-ssa to BOOT_CFLAGS.

2002-05-27  Diego Novillo  <dnovillo@redhat.com>

	* c-decl.c (c_expand_body): Close dump file before simplifying the
	function.
	* c-pretty-print.c (dump_c_node): Handle COMPLEX_CST,
	BIT_FIELD_REF, COMPLEX_EXPR, CONJ_EXPR, REALPART_EXPR,
	IMAGPART_EXPR and VA_ARG_EXPR nodes.
	Display all type casts, not just pointer casts.
	(op_prio): Handle LROTATE_EXPR, RROTATE_EXPR, REALPART_EXPR and
	IMAGPART_EXPR.
	* c-simplify.c: Include "tree-inline.h"
	(dump_file): New local variable.
	(dump_flags): New local variable.
	(stmt_expr_level): New local variable.
	(simplify_tree): Open and close dump file if
	-fdump-tree-simple-details is given.
	Initialize stmt_expr_level.
	(simplify_stmt): Dump statement before and after simplification if
	-fdump-tree-simple-detail is given.
	Unshare the expression of an EXPR_STMT before simplifying it.
	Call simplify_return_stmt to handle RETURN_STMT nodes.
	Do not simplify DECL_STMT nodes.
	Call stmt_has_effect before re-chaining side effects.
	(simplify_for_stmt): Do not return the simplified statement.
	Update all callers.
	Simplify FOR_BODY after the headers.
	Unshare loop header expressions before simplification.
	(simplify_while_stmt): Do not return the simplified statement.
	Update all callers.
	Simplify WHILE_BODY after the headers.
	Unshare the loop header expression before simplification.
	(simplify_do_stmt): Do not return the simplified statement.  Update
	all callers.
	Unshare the loop header expression before simplification.
	(simplify_if_stmt): Do not return the simplified statement.  Update
	all callers.
	Simplify the condition expression before the clauses.
	Unshare the condition expression before simplification.
	(simplify_switch_stmt): Do not return the simplified statement.
	Update all callers.
	Simplify the switch expression before the body.
	Unshare the switch expression before simplification.
	(simplify_decl_stmt): Remove.
	(simplify_expr): Remove argument 'needs_lvalue'.
	Add argument 'stmt'.
	Replace first argument 'expr' with a pointer to the
	expression 'expr_p'.
	Do not return the simplified expression.
	Update all callers and uses.
	Handle TRUTH_NOT_EXPR nodes.  Simplify SAVE_EXPR nodes into a
	SIMPLE id and remove the SAVE_EXPR node.
	Do not simplify BIT_FIELD_REF nodes.
	Remove code that tried to create new lvalues.
	(simplify_array_ref): Replace first argument 'expr' with a pointer
	to the expression 'expr_p'.
	Do not return the simplified expression.
	Add argument 'stmt'.
	Update all callers and uses.
	(simplify_self_mod_expr): Replace first argument 'expr' with a
	pointer to the expression 'expr_p'.
	Do not return the simplified expression.
	Add argument 'stmt'.
	Update all callers and uses.
	Call simplify_lvalue_expr to simplify a copy of the LHS into an
	lvalue for the new assignment.
	Simplify the new binary expression.
	(simplify_component_ref): Replace first argument 'expr' with a
	pointer to the expression 'expr_p'.
	Do not return the simplified expression.
	Add argument 'stmt'.
	Update all callers and uses.
	(simplify_call_expr): Ditto.
	(simplify_tree_list): Ditto.
	(simplify_cond_expr): Ditto.
	Build a replacement IF_STMT and call simplify_if_stmt() to process
	it.  Set the line number of the new statement from the statement
	containing the original expression.
	(simplify_modify_expr): Replace first argument 'expr' with a
	pointer to the expression 'expr_p'.
	Do not return the simplified expression.
	Add argument 'stmt'.
	Update all callers.
	Call simplify_lvalue_expr to simplify the LHS of the assignment.
	(simplify_boolean_expr): Replace first argument 'expr' with a
	pointer to the expression 'expr_p'.
	Do not return the simplified expression.
	Add argument 'stmt'. 
	Update all callers.
	Build a new IF_STMT and simplify it all at once by calling
	simplify_if_stmt.
	(simplify_compound_expr): Replace first argument 'expr' with a
	pointer to the expression 'expr_p'.
	Do not return the simplified expression.
	Add argument 'stmt'. 
	Update all callers.
	(simplify_expr_wfl): Ditto.
	(simplify_lvalue_expr): New function.
	(add_tree): Create a copy of each expression before adding it to
	the list.
	(deep_copy_node): Call copy_tree_r to copy expression nodes.
	(stmt_has_effect): Return nonzero if the statement may be the last
	statement of a statement expression body.
	(mostly_copy_tree_r): New function.
	* tree-dump.c (dump_options): Add 'details'.
	* tree-simple.c: Update documentation about ADDRESSOF expressions.
	(is_simple_stmt): Test for SIMPLE values when checking return
	statements.
	Accept all DECL_STMT nodes.
	(is_simple_compstmt): Return nonzero if T is NULL.  Do not test
	DECL_STMT nodes
	(is_simple_expr): Return nonzero if T is NULL.
	(is_simple_rhs): Ditto.
	(is_simple_modify_expr): Ditto.
	(is_simple_modify_expr_lhs): Ditto.
	(is_simple_binary_expr): Ditto.
	(is_simple_cond_expr): Ditto.
	(is_simple_unary_expr): Call STRIP_NOPS before testing T.
	Always accept ADDR_EXPR nodes.
	Always accept BIT_FIELD_REF nodes.
	(is_simple_call_expr): Return nonzero if T is NULL.
	(is_simple_const): Ditto.
	(is_simple_val): Ditto.
	(is_simple_compref): Ditto.
	(is_simple_compref_lhs): Ditto.
	(is_simple_cast): Ditto.
	(is_simple_cast_op): Ditto.
	(is_simple_id): Return nonzero if T is NULL.  Allow identifiers
	wrapped inside NON_LVALUE_EXPR and EXPR_WITH_FILE_LOCATION nodes.
	Allow real and imaginary parts of a complex variable. 
	Allow compound literals.
	(is_simple_arrayref): Allow arrays of complex types.
	* tree.h (TDF_DETAILS): Define.
	* cp/pt.c (tsubst_template_parms): Check that 'parms' is non-NULL
	before calling TMPL_PARMS_DEPTH.
	* doc/invoke.texi: Document -fdump-tree-simple-details.

2002-05-10  Daniel Berlin  <dberlin@dberlin.org>

	* c-pretty-print.c (dump_c_node): Print "<unnamed whatever>" for
	types, variables, etc that have no name, rather than printing
	nothing.
	Handle PMF's properly.
	Print out structure initializers in a somewhat sensible way.
	Print SAVE_EXPR () around SAVE_EXPRs.
	(print_call_name): Handle EXPR_WITH_FILE_LOCATION.

2002-05-09  Daniel Berlin  <dberlin@dberlin.org>

	* tree-dfa.c (dump_varref): Tree inlining generates variables with
	no name. Don't crash on dumping varref's of them.

	* tree-inline.c (expand_call_inline): Generate a proper STMT_EXPR
	(it was missing COMPOUND_STMT).

2002-05-08  Daniel Berlin  <dberlin@dberlin.org>

	s/varref_type/treeref_type/g
	s/create_varref/create_ref/g
	
	* tree-flow.h: Add EXPRPHI, EXPRUSE, EXPRKILL, EXPRINJ.
	Add structures and macros for each.
	Add tree_perform_ssapre prototype.

	* Makefile.in (C_AND_OBJC_OBJS): Add tree-ssa-pre.o
	(tree-ssa-pre.o): Add dependencies for tree-ssa-pre.o

	* cp/Make-lang.in: Add tree-ssa-pre.o
	
	* flags.h: Add flag_tree_ssa_pre.

	* tree-ssa-pre.c: New file, SSA-PRE.

	* toplev.c: Add flag_tree_ssa_pre.
	(lang_independent_options): Add tree-ssa-pre.

	* tree-dump.c (dump_files): Add ssapre dump.

	* tree-optimize.c (optimize_tree): Do SSAPRE if requested.

	* tree.h (dump_index): Add TDI_ssa_pre.

	* tree-dfa.c (create_ref): Add support for creating the EXPR*'s refs.
	(dump_varref): Add support for dumping EXPR* refs.

	* tree-ssa.c (search_fud_chains): Add BB to VARDEF_PHI_CHAIN_BB.

2002-05-07  Diego Novillo  <dnovillo@redhat.com>

	* c-pretty-print.c (op_prio): Handle ABS_EXPR.
	Don't abort when the operand is not recognized.
	(op_symbol): Don't abort when the operand is not recognized.
	* c-simplify.c (simplify_expr): Remove 'const' qualifier from first
	argument.
	Do not copy incoming expression.
	Exclude handling of MODIFY_EXPR, INIT_EXPR, SAVE_EXPR and binary
	expression nodes.
	(simplify_array_ref): Remove 'const' qualifier from first argument.
	Do not copy the incoming expression.
	(simplify_self_mod_expr): Ditto.
	Do not simplify the first operand twice.
	(simplify_component_ref): Remove 'const' qualifier from first
	argument.  Do not copy the incoming expression.
	(simplify_call_expr): Ditto.
	(simplify_tree_list): Ditto.
	(simplify_cond_expr): Ditto.
	(simplify_modify_expr): Ditto.
	(simplify_boolean_expr): Ditto.
	(simplify_compound_expr): Ditto.
	(simplify_save_expr): Ditto.
	(simplify_expr_wfl): Ditto.
	(tree_build_scope): Re-write.  Do nothing if block already contains
	a scope.  Use chainon to chain the body with the scope closing
	node.
	(deep_copy_node): Do not check for NULL nodes.  Do not deep copy
	declarations, types and constants.

2002-05-06  Daniel Berlin  <dberlin@dberlin.org>

	* c-simplify.c (deep_copy_node): Don't copy DECL_STMT_DECL's.

2002-05-06  Daniel Berlin  <dberlin@dberlin.org>

	* tree-simple.c (is_simple_compstmt): Don't post-initialize
	statics or aggregate initializers. 

	* c-simplify.c (simplify_decl_stmt): Ditto.

2002-05-06  Sebastian Pop  <s.pop@laposte.net>

	* Makefile.in (simple-break-elim.o, simple-goto-elim.o, tree-dchain.o): 
	Added.
	* c-decl.c: Include tree-dchain.h
	(c_expand_body): Add entry point to the goto, break elimination 
	after the simplification pass.
	* simple-break-elim.c: New file.
	* simple-goto-elim.c: New file.
	* tree-dchain.h: New file.
	* tree-dchain.c: New file.

2002-05-02  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_expr): Constify first argument.
	Always work on a copy of the input expression.
	Do not simplify COMPOUND_LITERAL_EXPR nor CONSTRUCTOR nodes.
	(simplify_array_ref): Constify first argument.  Always work on a
	copy of the input expression.
	(simplify_self_mod_expr): Ditto.
	(simplify_component_ref): Ditto.
	(simplify_call_expr): Ditto.
	(simplify_tree_list): Ditto.
	(simplify_cond_expr): Ditto.
	When building the THEN_CLAUSE and ELSE_CLAUSE for the new IF_STMT,
	create a scope for them and simplify the scope, not the expression.
	(simplify_modify_expr): Constify first argument.  Always work on a
	copy of the input expression.
	(simplify_boolean_expr): Ditto.
	(simplify_compound_expr): Ditto.
	(simplify_save_expr): Ditto.
	(simplify_expr_wfl): Ditto.
	* tree-cfg.c (tree_find_basic_blocks): Update comments for
	-fdump-tree-dot.
	(tree_dump_cfg): Ditto.
	* tree-dump.c (dump_files): Rename -fdump-tree-graphviz to
	-fdump-tree-dot.
	* tree-simple.c (is_simple_unary_expr): Do not handle &CONST
	expressions.
	Handle COMPOUND_LITERAL_EXPR and CONSTRUCTOR nodes.
	(is_simple_const): Strip NOPS and handle &CONST expressions.
	* tree.h (enum tree_dump_index): Remove references to GraphViz.
	* doc/invoke.texi: Update documentation for -fdump-tree-dot.

2002-05-02  Sebastian Pop  <s.pop@laposte.net>

	* c-pretty-print.c (dump_c_node): Don't print declarations
	from the SCOPE_STMT_BLOCK, use the DECL_STMT instead.

2002-04-30  Diego Novillo  <dnovillo@redhat.com>

	* c-pretty-print.c (NIY): Display an error string instead of aborting.
	(op_prio): Add support for COMPOUND_EXPR, TRUTH_XOR_EXPR, MIN_EXPR,
	MAX_EXPR and NON_LVALUE_EXPR.
	For EXPR_WITH_FILE_LOCATION nodes, return the priority of
	the internal node.
	(op_symbol): Add support for TRUTH_XOR_EXPR.
	* c-simplify.c (simplify_stmt): Only remove null statements that
	have been nullified by simplification.
	Call debug_tree() dump unhandled tree nodes.
	(simplify_for_stmt): Always deep-copy PRE_COND_S before adding it
	to PRE_P.
	(simplify_expr): When simplifying a MODIFY_EXPR node into an
	rvalue, return operand 0.
	Handle VA_ARG_EXPR, BIT_FIELD_REF and NON_LVALUE_EXPR nodes.
	Treat TRUTH_AND_EXPR, TRUTH_OR_EXPR and TRUTH_XOR_EXPR nodes as
	regular binary expressions.
	Call debug_tree() to dump an unhandled expression.
	(simplify_array_ref): Do not simplify the base of an array.
	(simplify_call_expr): Do not simplify calls to builtins.
	(simplify_cond_expr): Handle conditional expressions of type void.
	(simplify_boolean_expr): Return 'T != 0' instead of 'T'.
	(simplify_save_expr): Do not wrap statement trees inside SAVE_EXPR
	nodes.
	(tree_last_decl): Ignore FILE_STMT nodes preceding a SCOPE_STMT.
	* tree-simple.c: Update grammar to accept any valid C array as the
	array base.
	(is_simple_compstmt): Accept DECL_INITIAL expressions for read-only
	variables.
	(is_simple_expr): Do not abort if the incoming tree is NULL.
	(is_simple_modify_expr): Allow SAVE_EXPR, EXPR_WITH_FILE_LOCATION
	and NON_LVALUE_EXPR wrappers.
	(is_simple_binary_expr): Ditto.
	(is_simple_condexpr): Ditto.
	Accept TRUTH_AND_EXPR, TRUTH_OR_EXPR and TRUTH_XOR_EXPR.
	(is_simple_unary_expr): Do not abort it the incoming tree is NULL.
	Allow SAVE_EXPR, EXPR_WITH_FILE_LOCATION and NON_LVALUE_EXPR
	wrappers.
	Handle BIT_FIELD_REF and VA_ARG_EXPR nodes.
	(is_simple_call_expr): Always return 1 for builtin calls.
	(is_simple_arrayref): Do not check the array base.

2002-04-30  Daniel Berlin  <dberlin@dberlin.org>

	* c-simplify.c (simplify_call_expr): Don't try to simplify
	call_expr arglist if it's not there. 

2002-04-27  Diego Novillo  <dnovillo@redhat.com>

	* c-decl.c (c_expand_body): Call simplify_tree to simplify a
	FUNCTION_DECL node.
	* c-simplify.c (simplify_tree): New function.
	(simplify_stmt): Remove variable 'new_vars'.  Update all called
	functions.
	Remove argument 'scope'.  Update all callers.
	Do not keep track of new scope statements as they are entered.
	Do not call declare_tmp_vars().
	(simplify_for_stmt): Remove argument new_vars_p.  Update all callers.
	(simplify_while_stmt): Ditto.
	(simplify_do_stmt): Ditto.
	(simplify_if_stmt): Ditto.
	(simplify_switch_stmt): Ditto.
	(simplify_decl_stmt): Reformat comments.
	(simplify_expr): Remove argument new_vars_p.  Update all callers.
	Call simplify_save_expr() to simplify SAVE_EXPR nodes.
	Call simplify_expr_wfl() to simplify EXPR_WITH_FILE_LOCATION nodes.
	Do not call is_unop() and is_binop() when checking for unary and
	binary operators.
	Do not return early after simplify statement-expressions.
	Do not call add_modify_stmt() to create assignment expressions.
	(simplify_array_ref): Remove argument new_vars_p.  Update all callers.
	(simplify_self_mod_expr): Ditto.
	(simplify_component_ref): Ditto.
	(simplify_call_expr): Ditto.
	(simplify_tree_list): Ditto.
	(simplify_cond_expr): Ditto.
	(simplify_modify_expr): Ditto.
	(simplify_boolean_expr): Ditto.
	(simplify_compound_expr): Ditto.
	(simplify_save_expr): New function.
	(simplify_expr_wfl): New function.
	(tree_build_scope): Reformat.
	(add_tree): Call stmt_has_effect() and expr_has_effect() to decide
	whether or not to add a new tree to the list.
	(add_modify_stmt): Remove.
	(create_tmp_var): Remove 'new_vars_p' argument.
	Call pushdecl() to insert the newly created variable in the current
	binding scope.
	(declare_tmp_vars): Do not create a BLOCK_VARS for the scope.
	(is_binop): Remove.
	(is_unop): Remove.
	(expr_has_effect): New function.
	* c-tree.h (simplify_tree): Remove second argument.
	* stmt.c (warn_if_unused_value): Check operand 0 of SAVE_EXPR
	nodes.
	* tree-dfa.c (find_refs_in_expr): Call find_refs_in_expr() to look
	inside an EXPR_WITH_FILE_LOCATION node.
	* tree-simple.c (is_simple_stmt): Add a case for SCOPE_STMT nodes.
	(is_simple_compstmt): Assume that T is the first tree in the
	compound statement's body.
	Stop when a scope ending SCOPE_STMT node is found.
	(is_simple_binary_expr): Don't call is_simple_binop().
	(is_simple_condexpr): Don't call is_simple_relop().
	(is_simple_binop): Remove.
	(is_simple_relop): Remove.
	(is_simple_unary_expr): Accept any operator with tree code class
	'1' followed by a simple value.
	Accept simple unary expressions wrapped inside SAVE_EXPR,
	EXPR_WITH_FILE_LOCATION and NON_LVALUE_EXPR nodes.
	(is_simple_id): Accept simple identifiers wrapped inside SAVE_EXPR,
	EXPR_WITH_FILE_LOCATION and NON_LVALUE_EXPR nodes.
	* tree-simple.h (create_tmp_var): Remove second argument.
	(is_simple_binop): Remove.
	(is_simple_relop): Remove.

2002-04-22  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (stmt_has_effect): New function.
	(simplify_stmt): Fix example code in comment.
	Use EXPR_STMT_EXPR to access the expression in an expression
	statement.
	Call debug_c_node to display unhandled statements.
	Call stmt_has_effect to determine whether the statement has been
	nullified by the simplification process.
	(simplify_for_stmt): Do not simplify the initialization expression
	if it's NULL.
	Do not convert post_cond_s into a statement chain.
	Do not simplify the expression if it's NULL.
	(simplify_switch_stmt): initialize post_cond_s to NULL before
	simplifying the expression.
	(simplify_expr): Rename argument IS_LHS to NEEDS_LVALUE.  Update
	all uses.
	When simplifying assignments, return the LHS of the assignment if
	the caller wants to use the assignment as an rvalue.
	Do not simplify ADDR_EXPR nodes.
	Handle NOP_EXPR, CONVERT_EXPR, FIX_TRUNC_EXPR, FIX_CEIL_EXPR,
	FIX_ROUND_EXPR, INDIRECT_REF, NEGATE_EXPR, INTEGER_CST, STRING_CST,
	COMPLEX_CST.
	Abort if the expression has not been simplified and cannot be used
	as an rvalue to assign it to a temporary.
	When creating a new temporary to hold an lvalue, if the expression
	is an indirect reference, use the address of the referenced object.
	When creating an indirect reference, use the pointed-to type as the
	type of the reference.
	(simplify_self_mod_expr): If the LHS operand needs to be
	simplified, simplify twice.  Once to produce an lvalue and another
	to produce a simple value.
	(simplify_modify_expr): Break assignment chains (a = b = c = ...)
	into individual assignments.
	(simplify_compound_expr):
	(create_tmp_var): If the type is an array, use TYPE_POINTER_TO as
	the pointer type.
	(update_line_number): Fix typo in comment.
	(is_unop): Ditto.
	(convert_to_stmt_chain): Only add statements that comply with
	stmt_has_effect().
	* tree-dfa.c (find_declaration): Fix typo in comment.
	(debug_varref): Ditto.
	* tree-flow.h: Ditto.
	* tree-simple.c (is_simple_stmt): New function.
	(is_simple_compstmt): New function.
	(is_simple_expr): Fix typo in comment.
	(is_simple_rhs): Allow conditional expressions.
	(is_simple_modify_expr): Fix typo in comment.
	(is_simple_modify_expr_lhs): Ditto.
	(is_simple_binary_expr): Ditto.
	(is_simple_condexpr): Ditto.
	(is_simple_relop): Ditto.
	(is_simple_unary_expr): Ditto.
	Allow taking the address of a constant (for strings).
	(is_simple_call_expr): Fix typo in comment.
	Call is_simple_id to determine if the first operand is a SIMPLE
	function identifier.
	(is_simple_arglist): Fix typo in comment.
	(is_simple_varname): Ditto.
	(is_simple_const): Don't accept casts of SIMPLE constants.
	(is_simple_id): Don't accept casts of SIMPLE identifiers.
	(is_simple_val): Fix typo in comment.
	(is_simple_arrayref): Ditto.
	(is_simple_compref): Ditto.
	(is_simple_compref_lhs): Ditto.
	(is_simple_cast_op): Ditto.
	(is_simple_exprseq): Allow NULL expression sequences.
	* tree-simple.h (is_simple_stmt): Declare
	(is_simple_compstmt): Declare.
	* tree-ssa.c (follow_chain): Fix typo in comment.

2002-04-22  Diego Novillo  <dnovillo@redhat.com>

	* c-pretty-print.c (dump_c_node): Don't print function
	bodies of FUNCTION_DECL nodes.

2002-04-19  Andreas Jaeger  <aj@suse.de>

	* Makefile.in (c-call-graph.o): New.

2002-04-18  Sebastian Pop  <s.pop@laposte.net>

	* c-pretty-print.c (PRINT_FUNCTION_NAME): Define.
	(dump_c_node): Call pretty_print_string to print string.
	Call print_call_name to print function names.
	(pretty_print_string): New function.
	(print_call_name): New function.

2002-04-17  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_do_stmt): Call is_simple_condexpr to test
	if the conditional is in SIMPLE form.
	(simplify_if_stmt): Ditto.

2002-04-17  Diego Novillo  <dnovillo@redhat.com>

	* c-pretty-print.c (dump_c_node): Handle escape sequences in strings.
	(op_symbol): Handle TRUTH_NOT_EXPR.
	* c-simplify.c: Rename 'after' with 'post' and 'before' with 'pre'
	everywhere.
	Re-group some functions and add comments.
	(simplify_stmt): Update calls to simplify_for_stmt,
	simplify_while_stmt, simplify_do_stmt and simplify_switch_stmt.
	Call simplify_if_stmt.
	Do not test if expression is in SIMPLE form before calling
	simplify_expr.
	Call convert_to_stmt_chain to emit statement trees for side effects
	found while simplifying.
	(simplify_for_stmt): Re-implement.  Do not change structure of the
	statement.  Simplify each header expression and emit side effects
	at sequence points.
	(simplify_while_stmt): Ditto.
	(simplify_do_stmt): Ditto.
	(simplify_switch_stmt): Ditto.
	(new_simplified_if): Rename to simplify_if_stmt.
	Call simplify_expr to simplify the conditional.
	(simplify_if_stmt): New name for new_simplified_if.
	(simplify_expr): Do not default simple_test_f to is_simple_expr.
	If simple_test_f is not set, abort.
	Handle COMPOUND_EXPR, MODIFY_EXPR, TRUTH_ANDIF_EXPR,
	TRUTH_ORIF_EXPR, SAVE_EXPR and EXPR_WITH_FILE_LOCATION.
	(simplify_arglist): Rename to simplify_tree_list.
	(simplify_tree_list): New name for simplify_arglist.
	(simplify_boolean_expr): New function.
	(simplify_compound_expr): New function.
	(tree_build_scope): Use SCOPE_BEGIN_P instead of TREE_LANG_FLAG_0
	to access scope operands.  Use COMPOUND_BODY instead of
	TREE_OPERAND to access the body of the compound statement.
	(add_tree): Use a TREE_LIST container instead of directly chaining the
	trees.
	(add_assignment_tree): Rename to add_modify_stmt.  Update all
	callers.
	(add_modify_stmt): New name for add_assignment_tree.
	(insert_before_continue_end): Do nothing it the tree to insert is
	NULL.
	(copy_stmt_chain): Rename to deep_copy_list.  Update all callers.
	(deep_copy_list): New name for copy_stmt_chain.
	(copy_stmt): Rename to deep_copy_node.  Update all callers.
	(deep_copy_node): New name for copy_stmt.  Handle TREE_LIST
	trees.
	(insert_before_first): New function.
	(is_binop): Add COMPOUND_EXPR.
	(convert_to_stmt_chain): New function.
	* tree-cfg.c (make_for_stmt_blocks): Fix comment.
	* tree-simple.c (is_simple_condexpr): New function.
	(is_simple_const): Allow casts of SIMPLE constants.
	(is_simple_id): Allow casts of SIMPLE identifiers.
	(is_simple_cast): Call is_simple_cast_op.
	(is_simple_cast_op): New function.
	(is_simple_exprseq): New function.
	* tree-simple.h (deep_copy_list): Declare.
	(deep_copy_node): Declare.
	(is_simple_cast_op): Declare.
	(is_simple_exprseq): Declare.

2002-04-03  Diego Novillo  <dnovillo@redhat.com>

	* c-simplify.c (simplify_expr): Add arguments simple_tree_f and
	is_lhs.  Update all callers.
	Call simplify_call_expr, simplify_cond_expr, simplify_arglist and
	simplify_modify_expr.
	Call is_unop and is_binop to check for unary and binary operators.
	(simplify_binary_expr): Remove.
	(simplify_call_expr): New function.
	(simplify_arglist): New function.
	(simplify_cond_expr): New function.
	(simplify_modify_expr): New function.
	(keep_stmt_p): Remove.
	(is_binop): New function.
	(is_unop): New function.
	(simplify_stmt): Don't call keep_stmt_p.
	(simplify_decl_stmt): Call add_assignment_tree.
	* tree-simple.c: Include c-tree.h
	Add expression-statements to the SIMPLE grammar.
	(is_simple_modify_expr_lhs): New function.
	(is_simple_modify_expr): Call it.
	(is_simple_relop): Update comment.
	(is_simple_unary_expr): Allow expression-statements.
	(is_simple_arglist): New function.
	(is_simple_call_expr): Call it.
	(is_simple_id): Accept expressions taking the address of a
	function.
	* tree-simple.h (is_simple_modify_expr_lhs): Declare.
	(is_simple_arglist): Declare.

2002-03-21  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (c-simplify.o): Add dependency on varray.h.
	* c-simplify.c: Include varray.h.
	Remove comments with SIMPLE grammar.
	(simplify_array_ref): New.
	(simplify_self_mod_expr): New.
	(simplify_component_ref): New.
	(add_assignment_tree): New.
	(simplify_expr): Call simplify_array_ref to simplify array
	references.
	Call simplify_self_mod_expr to simplify ++, --, += and -=
	expressions.
	Call simplify_component_ref to simplify references to structures.
	(simplify_binary_expr): Do not check whether the expression is
	already in SIMPLE form.
	* tree-simple.c: Document changes from original SIMPLE grammar.
	(is_simple_unary_expr): Add check for *ID.
	(is_simple_call_expr): Update comments.
	(is_simple_const): Ditto.
	(is_simple_id): Do not accept *ID expressions.
	(is_simple_val): Update comments.
	(is_simple_arrayref): Accept any variable name as the base address.
	(is_simple_compref_lhs): New.
	(is_simple_compref): Call it.
	* tree-simple.h (is_simple_compref_lhs): Declare.

2002-03-18  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (C_AND_OBJC_OBJS): Add tree-simple.o
	(tree-simple.o): New rule.
	* c-simplify.c (simplified_p): Remove.
	(simplified_rec_p): Remove.
	(simplified_condition_p): Remove.
	(simplify_for_stmt): Call is_simple_expr instead of
	simplified_condition_p.
	(simplify_while_stmt): Ditto.
	(simplify_do_stmt): Call is_simple_expr instead of simplified_p.
	(new_simplified_if): Call is_simple_expr instead of
	simplified_rec_p.
	(simplify_decl_stmt): Update comment.
	(simplify_expr): Return the original expression if it's already
	in SIMPLE form.
	Do not special case most binary and unary expressions.
	When simplifying array references, create temporary variables to
	hold the base address for the array.
	Simplify COMPONENT_REF expressions separately.
	Call simplify_binary_expr to handle most binary expressions.
	(simplify_binary_expr): New function.
	(keep_stmt_p): Call is_simple_unary_expr to determine whether the
	statement should be kept or not.
	* tree-simple.c: New file.
	* tree-simple.h (is_simple_expr): Declare.
	(is_simple_rhs): Declare.
	(is_simple_modify_expr): Declare.
	(is_simple_binary_expr): Declare.
	(is_simple_binop): Declare.
	(is_simple_relop): Declare.
	(is_simple_unary_expr): Declare.
	(is_simple_call_expr): Declare.
	(is_simple_const): Declare.
	(is_simple_id): Declare.
	(is_simple_varname): Declare.
	(is_simple_val): Declare.
	(is_simple_arrayref): Declare.
	(is_simple_compref): Declare.
	(is_simple_cast): Declare.
	* cp/Make-lang.in (CXX_C_OBJS): Add tree-simple.o

2002-03-18  Diego Novillo  <dnovillo@redhat.com>

	* tree-simple.h: New file.
	* Makefile.in (c-simplify.o): Add dependency on tree-simple.h
	* c-simplify.c: Reformat some comments.
	(tree_last_decl): Declare.

2002-03-18  Sebastian Pop  <s.pop@laposte.net>

        * c-simplify.c (insert_stmt_chain): Delete.
        (simplified_condition_p, insert_after_case_labels): New.
	(simplify_stmt, simplify_for_stmt, simplify_while_stmt,
	simplify_do_stmt, new_simplified_if, simplify_switch_stmt): 
	Returns a single node, generate a chain of statements to be executed
	before the if, and a list of new variables.
        (new_simplified_if): Simplify clauses.
        (simplify_expr): Remove unused parameter scope.

2002-03-14  Sebastian Pop  <s.pop@laposte.net>

	* c-simplify.c (simplify_switch_stmt, simplify_expr): Add scope
	parameter.
	(simplify_while_stmt, simplify_do_stmt, simplify_for_stmt): Avoid
	negating loop condition during simplification.
	(new_simplified_if): Don't simplify the IF_BODY.
	(copy_stmt_chain): Use copy_stmt.
	(copy_stmt): New function.

2002-02-28  Sebastian Pop  <s.pop@laposte.net>

	* tree-dfa.c (find_refs_in_stmt): Changed if/else statements in
	a switch.

2002-02-28  Sebastian Pop  <s.pop@laposte.net>

	* c-simplify.c (simplify_if_stmt): Deleted.
	(new_simplified_if): New function.
	(make_type_writable): New function.
	(insert_before_continue_end): New function.
	(insert_before_continue): New function.
	(copy_stmt_chain): New function.
	(insert_stmt_chain): New function.
	(update_line_number): New function.
	(simplified_p): New function.
	(simplified_rec_p) New function.
	(simplify_stmt): Modify the way to call simplification 
	of COMPOUND_STMT, FOR_STMT, WHILE_STMT, DO_STMT, IF_STMT, 
	and SCOPE_STMT in order to avoid to execute the code after 
	the switch.  Add FILE_STMT, LABEL_STMT, GOTO_STMT, ASM_STMT cases.
	Simplified a little the code after the switch.
	(simplify_for_stmt): Change functions parameters.
	Add code to simplify the FOR_INIT_STMT, FOR_COND, FOR_EXPR. 
	(simplify_while_stmt): Change functions parameters.
	Add code to simplify the WHILE_COND.
	(simplify_do_stmt): Change functions parameters.
	Add code to simplify the DO_COND.
	(simplify_switch_stmt): Change functions parameters.
	(simplify_expr): Remove scope parameter.
	Avoid to introduce a new temporary variable for an expression 
	that is already simplified.
	([ARRAY|COMPONENT]_REF, COND_EXPR): Handle them apart.
	(TRUTH_ANDIF_EXPR, TRUTH_ORIF_EXPR): Avoid to evaluate the second 
	operand if the value can be deduced from the first one.
	(keep_stmt_p): Add some other cases in which we don't need to keep 
	a statement after its simplification.

2002-02-28  Sebastian Pop  <s.pop@laposte.net>

	* Makefile.in: Add c-call-graph.o dependence.
	* c-call-graph.c: New file.
	* c-decl.c (c_expand_body): Add an entry point for call-graph.
	* tree-dump.c (dump_files): Add the flag dump-call-graph.
	* tree.h (tree_dump_index): Add TDI_xml.

2002-02-28  Sebastian Pop  <s.pop@laposte.net>

	* c-pretty-print.c (dump_c_tree): Declare it extern.
	(dump_c_node): Declare it extern.
	(dump_c_scope_vars): Deleted, some code moved in print_declaration ().
	(print_declaration): New function.
	(print_function_decl): New function.
	(print_struct_decl): New function.
	(INDENT_PRINT_C_NODE): Deleted.
	(INDENT): New macro.
	(NIY): Define the macro body in a block.
	(dump_c_node): Add dumping for TREE_PURPOSE operand in TREE_LIST.
	[VOID|INTEGER|REAL|COMPLEX|VECTOR|ENUMERAL|BOOLEAN|CHAR]_TYPE nodes: 
	insert some code from print-tree.c:print_node_brief () in order to 
	stabilise the type printing.
	[RECORD|UNION]_TYPE nodes: Don't print their contents by default, 
	move the existing code in print_struct_decl ().
	[POSTDECREMENT|POSTINCREMENT]_EXPR: Print the operand in post postion.
	[MIN|MAX|ABS]_EXPR: New code for printing these nodes.
	FOR_STMT: Don't print the FOR_BODY if it is not present.
	RETURN_STMT: Don't print the return expression for a void function.
	ASM_STMT: New code for printing this node.
	SCOPE_STMT: Use print_declaration instead of dump_c_scope_vars.
	COMPOUND_LITERAL_EXPR: Add the node as not implemented yet.
	(op_prio): Fix switch indent.
	Add node EXPR_WITH_FILE_LOCATION with priority 16.
	(op_symbol): Fix switch indent.

2002-01-25  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (c-pretty-print.o): Add dependency on errors.h.
	* c-decl.c (c_expand_body): React to -ftree-dump-simple.
	* c-pretty-print.c: Fix typo in header comment.
	(NYI): Flush output buffer, dump the tree and abort.
	(dump_c_node): Add unparsing code for ERROR_MARK, IDENTIFIER_NODE,
	ARRAY_TYPE, UNION_TYPE, STRING_CST, CEIL_DIV_EXPR, FLOOR_DIV_EXPR,
	ROUND_DIV_EXPR, TRUNC_MOD_EXPR, FLOOR_MOD_EXPR, ROUND_MOD_EXPR,
	RDIV_EXPR, EXACT_DIV_EXPR, LROTATE_EXPR, RROTATE_EXPR,
	BIT_ANDTC_EXPR, BIT_NOT_EXPR, UNORDERED_EXPR, SAVE_EXPR and
	EXPR_WITH_FILE_LOCATION.
	Unify unparsing code for common binary and unary expressions.
	Handle indirect references like any other unary expression.
	(dump_c_scope_vars): Remove unused variable 'context'.
	Call dump_c_node to print the type.
	(dump_c_indirect_ref): Remove.
	(op_prio): New function.
	(op_symbol): New function.
	* c-simplify.c (simplify_stmt): Do not simplify a return
	expression, only its second operand.
	Fix capitalization in error message.
	(simplify_expr): Add documentation.
	Fix capitalization in error message.
	* tree-dump.c (dump_files): Add entry for -fdump-tree-simple.
	(dump_options): Add entry for -unparse.
	* tree.h (TDI_simple): Define.
	(TDF_UNPARSE): Define.
	* doc/invoke.texi: Document -fdump-tree-simple.

2002-01-23  Sebastian Pop  <s.pop@laposte.net>

        * c-pretty-print.c: Clean C++ comments.
	(debug_output_buffer): Remove declaration and definition.
        * diagnostic.h (debug_output_buffer): Add declaration.
	* diagnostic.c (debug_output_buffer): Add definition.

2002-01-21  Diego Novillo  <dnovillo@redhat.com>

	* tree-dfa.c (find_refs_in_stmt): Fix capitalization in error
	message.
	(find_refs_in_expr): Ditto.

2002-01-20  Diego Novillo  <dnovillo@redhat.com>
            Sebastian Pop  <s.pop@laposte.net>

	* Makefile.in: Add c-simplify.o.
	* cp/Make-lang.in: Ditto.
	* c-decl.c (c_expand_body): Call simplify_stmt() before
	calling optimize_tree().
	* c-simplify.c: New file.
	* c-tree.h (simplify_stmt): Declare.
	(print_c_tree)
	* tree-dfa.c (find_refs_in_stmt): Fix error message for unhandled
	statement codes.

2002-01-20  Sebastian Pop  <s.pop@laposte.net>

	* Makefile.in: Add c-pretty-print.o.
	* cp/Make-lang.in: Ditto.
	* c-pretty-print.c: New file.
	* c-tree.h (print_c_tree): Declare.
	(print_c_node): Declare.
	(debug_c_tree): Declare.
	(debug_c_node): Declare.

2001-12-29  Diego Novillo  <dnovillo@redhat.com>

	* c-lang.c (c_post_options): Move code to enable tree-ssa
	if -Wuninitialized is used ...
	* c-common.c (c_common_post_options): ... here.

2001-12-29  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (tree-optimize.o): Don't depend on c-common.h
	* tree-cfg.c: Don't include c-tree.h.  Explain why we need to
	include c-common.h.
	* tree-dfa.c: Explain why we need to include c-common.h.
	* tree-ssa.c: Ditto.
	* tree-optimize.c: Don't include c-common.h

2001-12-21  Nathan Sidwell  <nathan@codesourcery.com>

	Revert my patch of 2001-07-23 for the moment.

2001-10-15  Diego Novillo  <dnovillo@redhat.com>

	* tree-dfa.c (create_varref): If the new reference is inside a
	statement, add it to the list of references for that statement.

2001-10-14  Diego Novillo  <dnovillo@redhat.com>

	* Merge from mainline:

	Tue Sep 11 11:37:52 CEST 2001  Jan Hubicka  <jh@suse.cz>

		* basic-block.h (cached_make_edge): New.
		(make_edge): Remove first parameter.
		* flow.c (cached_make_edge): Rename from make_edge; return
		newly created edge; use obstack allocation.
		(make_edge): New.
		(flow_call_edges_add): Updaet make_edge call.
		(add_noreturn_fake_exit_edges): Likewise.
		(connect_infinite_loops_to_exit): Liekwise.
		(make_label_edge, make_edges, find_sub_basic_blocks): Use
		cached_make_edge.
		* profile.c (branch_prob): Update make_edge call.
		* ssa-dce.c (ssa_eliminate_dead_code): Likewise.

2001-10-14  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (tree-ssa.o): Remove dependency on flags.h.
	(tree-optimize.o): Add dependency on flags.h.
	* bb-reorder.c (fixup_reorder_chain): Update call to make_edge.
	* c-lang.c (c_post_options): Set flag_tree_ssa if -Wuninitialized
	is given.
	* ifcvt.c (find_if_case_1): Update call to make_edge.
	* toplev.c (toplev_main): Do not warn about -Wuninitialized without
	-O if -ftree-ssa is used.
	* tree-cfg.c (dot_dump_file): Remove.
	(dot_dump_flags): Remove.
	(cfg_dump_file): Rename to dump_file.
	(cfg_dump_flags): Rename to dump_flags.
	(remove_bb_ann): New function.
	(tree_find_basic_blocks): Do not open dump files at the beginning
	of the function.
	Do not call delete_cfg.
	Create annotations for ENTRY_BLOCK_PTR and EXIT_BLOCK_PTR.
	(make_for_stmt_blocks): Update FOR_INIT_STMT_BB and FOR_COND_BB
	when creating the header blocks.
	Create the blocks for the loop body before the expression block.
	(make_while_stmt_blocks): Update END_WHILE_BB when creating the
	header blocks.
	Create the blocks for the loop body before the end-while block.
	(make_do_stmt_blocks): Update DO_COND_BB when creating header
	blocks.
	Create the blocks for the loop body before the block for DO_COND.
	(create_bb): When creating loop header blocks, allocate space for
	the header_blocks union.
	Call create_bb_ann to create a new annotation.
	(remove_bb_ann): New function.
	(tree_split_bb): New function.
	(make_edges): Remove first argument from call to make_edge,
	make_ctrl_stmt_edges, make_exit_edges, make_for_stmt_edges,
	make_while_stmt_edges, make_do_stmt_edges, make_if_stmt_edges,
	make_goto_stmt_edges, make_break_stmt_edges and
	make_continue_stmt_edges.
	When creating edges for the default label, remove the fallthru edge
	that was created for the associated SWITCH_STMT entry block.
	Do not call delete_unreachable_blocks.
	Call tree_cleanup_cfg.
	(make_ctrl_stmt_edges): Remove first argument.
	(make_exit_edges): Remove first argument.
	If the last element of the block is an EXPR_STMT, assume that it is
	the call to a non-returning function and make an edge to the exit
	block.
	Do not call make_return_stmt_edges.  Call make_edge directly.
	(make_for_stmt_edges): Remove first argument.
	Simplify the graph for infinite and zero-iteration loops.
	(make_while_stmt_edges): Remove first argument.
	Simplify the graph for infinite and zero-iteration loops.
	(make_do_stmt_edges): Remove first argument.
	Simplify the graph for infinite and one-iteration loops.
	(make_if_stmt_edges): Remove first argument.
	Simplify the graph for always-true and always-false conditionals.
	(make_goto_stmt_edges): Remove first argument.
	(make_break_stmt_edges): Remove first argument.
	(make_continue_stmt_edges): Remove first argument.
	(make_return_stmt_edges): Remove.
	(tree_cleanup_cfg): New function.
	(delete_unreachable_blocks): Do not react to -Wunreachable-code.
	Write to dump file blocks that have been removed.
	Call remove_edge.
	(is_ctrl_altering_stmt): If the statement contains a call to a
	non-returning function, return 1.
	(delete_cfg): Call remove_bb_ann.  Also remove annotations for
	ENTRY_BLOCK_PTR and EXIT_BLOCK_PTR.
	(latch_block): Use WHILE_COND_BB instead of END_WHILE_BB.
	(insert_stmt_tree_before): Use cfg_dump_file instead of dump_file.
	(insert_before_ctrl_stmt): Ditto.
	(insert_before_normal_stmt): Ditto.
	(insert_stmt_tree_after): Ditto.
	(insert_after_ctrl_stmt): Ditto.
	(insert_after_normal_stmt): Ditto.
	(replace_expr_in_tree): Ditto.
	(insert_bb_before): Ditto.
	* tree-dfa.c (tree_find_varrefs): Call find_refs_in_expr when the
	tree is not a statement.
	(find_refs_in_stmt): Update comments.
	Do not deal with FOR_STMT and DO_STMT trees separately.
	When processing VAR_DECLs, call find_refs_in_expr with the
	declaration, not its initial value.
	(find_refs_in_expr): When processing COMPONENT_REFs and ARRAY_REFs,
	recurse using the same reference type that was given by the
	original caller.
	(create_varref): Insert new PHI terms at the beginning of the
	BB_REFS array, not the end.
	* tree-flow.h (struct for_header_blocks): Declare.
	(union header_blocks): Declare.
	(struct bb_ann_def): Add new field 'loop_hdr'.
	(BB_ANN): Re-define so that it can be used as an lvalue.
	(BB_PARENT): Ditto.
	(BB_REFS): Ditto.
	(BB_PREV_CHAIN): Ditto.
	(BB_BINDING_SCOPE): Ditto.
	(BB_LOOP_HDR): Define.
	(FOR_INIT_STMT_BB): Redefine using BB_LOOP_HDR.
	(FOR_COND_BB): Ditto.
	(FOR_EXPR_BB): Ditto.
	(DO_COND_BB): Ditto.
	(END_WHILE_BB): New name for WHILE_COND_BB.
	(tree_warn_uninitialized): Declare.
	(tree_cleanup_cfg): Declare.
	(tree_split_bb): Declare.
	* tree-optimize.c: Include flags.h.
	(init_tree_flow): New function.
	(optimize_tree): Call build_tree_ssa instead of building SSA
	in-place.
	(build_tree_ssa): New function.
	* tree-optimize.h (build_tree_ssa): Declare.
	* tree-ssa.c: Don't include toplev.h
	(tree_warn_uninitialized): Define.
	(tree_compute_rdefs): Do not call is_upward_exposed.  Instead
	traverse all the uses of each variable and warn if the use is
	reached by the ghost definition.

2001-10-10  Graham Stott  <grahams@redhat.com>

	* tree-cfg.c (create_bb): Add new binding_scope parameter which allows
	the binding scope either to be explicitly specified if non-zero.
	(make_blocks): Update call to create_bb.
	(make_for_stmt_blocks): Ditto.
	(make_while_stmt_blocks): Ditto.
	(make_do_stmt_blocks): Ditto.
	(make_if_stmt_blocks): Ditto.
	(make_switch_stmt_blocks): Ditto.
	(create_maximal_bb): Ditto.
	(make_edges): If a statement expression is in the last basic
        block create an edge to EXIT_BLOCK_PTR and not the next block.
	(insert_before_normal_stmt): Pass the appropriate binding scope to
	create_bb.
 
2001-10-01  Graham Stott  <grahams@redhat.com>
            Diego Novillo  <dnovillo@redhat.com>

	* tree-optimize.c (optimize_tree): Early return if the program has
	errors.
 
2001-09-30  Diego Novillo  <dnovillo@redhat.com>

	* tree-optimize.c (optimize_tree): Compute reaching definitions
	after building SSA.

2001-09-30  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (insert_after_ctrl_stmt): Remove unused argument.
	(make_blocks): Pop top element from scope binding stack when an end
	of scope statement is found.
	(create_bb): Remove code for popping top element from scope binding
	stack.
	Do not push basic block 0 to initialize scope binding stack.
	(insert_stmt_tree_after): Remove unused argument from call to
	insert_after_ctrl_stmt.
	(tree_dump_bb): Dump BB_BINDING_SCOPE if defined.
	* doc/invoke.texi: Document debugging option -ftree-dump-ssa-rdefs.

2001-09-29  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (tree-ssa.o): Update dependencies.
	(tree-cfg.o): Ditto.
	(tree-optimize.o): Ditto.
	* basic-block.h (BB_CONTROL_EXPR): Define.
	(BB_CONTROL_ENTRY): Define.
	* c-common.h (TDF_RDEFS): Define.
	* c-dump.c (dump_option_value_in): Add entry for TDF_RDEFS.
	* tree-cfg.c: Include flags.h and c-tree.h
	(binding_stack): New local variable.
	(delete_block): Rename to delete_bb.
	(tree_find_basic_blocks): Initialize varray 'binding_stack'.
	Call make_blocks with an additional argument.
	Adjust size of varray 'basic_block_info' after building CFG.
	(make_blocks): Add new argument prev_chain_p.
	Update all callers and callees.
	Create sub-graphs for statement-expressions.
	Update prev_chain_p when accessing the next tree in the chain.
	(make_for_stmt_blocks): Add new argument prev_chain_p.
	Update all callers and callees.
	Update flags for control header blocks with BB_CONTROL_ENTRY and/or
	BB_CONTROL_EXPR.
	(make_while_stmt_blocks): Ditto.
	(make_do_stmt_blocks): Ditto.
	(make_if_stmt_blocks): Ditto.
	(make_switch_stmt_blocks): Ditto.
	(create_maximal_bb): Add new argument prev_chain_p.
	Update all callers and callees.
	(create_bb): Add new argument prev_chain_p.
	Push basic block 0 the first time into the binding scope stack.
	Associate the new basic block to the binding scope at the top of
	the binding stack.
	Push new binding scopes when a SCOPE_BEGIN statement is found.
	Pop the top binding scope when a SCOPE_END statement is found.
	(make_edges): Handle statement expressions.
	Handle case labels preceded by scope statements in switch
	statements.
	(make_for_stmt_edges): Use FOR_INIT_STMT_BB, FOR_COND_BB and
	FOR_EXPR_BB to access the header basic blocks.
	(delete_unreachable_blocks): Call delete_bb instead of
	delete_block.
	(delete_block): Rename to delete_bb.
	(block_invalidates_loop): Use data references to find calls to
	non-pure functions.
	(is_ctrl_stmt): Reformat.
	(loop_body): New function.
	(set_loop_body): New function.
	(stmt_starts_bb_p): Statement expression trees also start a new
	basic block.
	(delete_cfg): Call VARRAY_FREE to delete all the references in each
	basic block.
	(latch_block): Use FOR_EXPR_BB, WHILE_COND_BB and DO_COND_BB to
	find out the latch block for the loop.
	(last_exec_stmt): New function.
	(is_exec_stmt): Scope statements that begin a scope are also
	considered executables.
	(is_statement_expression): New function.
	(first_non_decl_stmt): New function.
	(first_decl_stmt): New function.
	(first_non_label_in_bb): New function.
	(insert_stmt_tree_before): New function.
	(insert_before_ctrl_stmt): New function.
	(insert_before_normal_stmt): New function.
	(insert_stmt_tree_after): New function.
	(insert_after_ctrl_stmt): New function.
	(insert_after_normal_stmt): New function.
	(insert_after_loop_body): New function.
	(replace_expr_in_tree): New function.
	(find_expr_in_tree): New function.
	(insert_bb_before): New function.
	(tree_dump_bb): Display the contents of BB_PREV_CHAIN_P.
	* tree-dfa.c (tree_find_varrefs): Use accessor macros for array
	'referenced_symbols'.
	(find_refs_in_stmt): Do not process error_mark_node trees.
	Handle statement-expression nodes as any other statement tree.
	Do not call find_refs_in_stmt_expr.
	(find_refs_in_stmt_expr): Remove.
	(add_ref_to_sym): Remove.
	(add_ref_to_bb): Remove.
	(find_refs_in_expr): Do not process error_mark_node trees.
	ADDR_EXPR trees are not variable references except if used in a
	CALL_EXPR node.
	Handle EXPR_WITH_FILE_LOCATION nodes.
	(create_varref): Remove variable 'is_new'.
	Initialize data-flow arrays VARDEF_IMM_USES, VARDEF_RUSES,
	VARDEF_PHI_CHAIN and VARUSE_RDEFS.
	Do not call add_ref_to_sym and add_ref_to_bb.
	(add_ref_symbol): Use accessor macros for varray
	'referenced_symbols'.
	(function_may_recurse_p): New function.
	(get_fcalls): New function.
	(find_declaration): New function.
	(dump_varref): Handle NULL values of VARREF_EXPR.
	Use VARDEF_PHI_CHAIN instead of VARPHI_CHAIN.
	(dump_varref_list): Check if the list is NULL before traversing it.
	* tree-flow.h (struct vardef): Add fields 'ruses', 'marked' and
	'phi_chain'.
	(VARDEF_RUSES): Define.
	(VARDEF_MARKED): Define.
	(VARDEF_PHI_CHAIN): Define.
	(VARPHI_CHAIN): Remove.
	(struct varphi): Remove.
	(struct varuse): Add field 'rdefs'.
	(VARUSE_RDEFS): Define.
	(union varref_def): Remove field 'phi'.
	(IS_GHOST_DEF): Define.
	(IS_ARTIFICIAL_REF): Define.
	(struct bb_ann_def): Add fields 'prev_chain_p' and 'binding_scope'.
	(BB_PREV_CHAIN_P): Define.
	(BB_BINDING_SCOPE): Define.
	(FOR_INIT_STMT_BB): Define.
	(FOR_COND_BB): Define.
	(FOR_EXPR_BB): Define.
	(WHILE_COND_BB): Define.
	(DO_COND_BB): Define.
	(IF_COND_BB): Define.
	(CASE_COND_BB): Define.
	(NREF_SYMBOLS): Define.
	(REF_SYMBOL): Define.
	(ADD_REF_SYMBOL): Define.
	(FCALL_NON_PURE): Define.
	(FCALL_PURE): Define.
	(FCALL_BUILT_IN): Define.
	(loop_body): Declare.
	(set_loop_body): Declare.
	(last_exec_stmt): Declare.
	(is_statement_expression): Declare.
	(first_non_decl_stmt): Declare.
	(first_decl_stmt): Declare.
	(first_non_label_in_bb): Declare.
	(insert_stmt_tree_before): Declare.
	(insert_stmt_tree_after): Declare.
	(replace_expr_in_tree): Declare.
	(find_expr_in_tree): Declare.
	(insert_bb_before): Declare.
	(function_may_recurse_p): Declare.
	(get_fcalls): Declare.
	(find_declaration): Declare.
	(tree_compute_rdefs): Declare.
	(analyze_rdefs): Declare.
	(is_upward_exposed): Declare.
	* tree-optimize.c (optimize_tree): Update name for varray
	referenced_symbols.
	Free varray referenced_symbols and call delete_ssa on exit.
	* tree-ssa.c: Include flags.h, diagnostic.h and toplev.h.
	(tree_build_ssa): Create ghost definitions before building FUD
	chains.
	(insert_phi_terms): Use accessor macros for 'referenced_symbols'.
	Ignore ghost definitions when placing PHI terms.
	(build_fud_chains): Call get_tree_ann to create an annotation for
	the symbol if it doesn't already have one.
	(search_fud_chains): Reformat comments.
	Do not initialize varray VARDEF_IMM_USES.
	If a successor basic block does not have references, continue on to
	the next one, do not stop.
	Do not initialize varray VARDEF_PHI_CHAIN.
	(delete_ssa): New function.
	(delete_refs): New function.
	(tree_compute_rdefs): New function.
	(analyze_rdefs): New function.
	(follow_chain): New function.
	(is_upward_exposed): New function.
 
2001-09-14  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (tree_find_basic_blocks): Remove call to
	mark_critical_edges.
	(create_maximal_bb): Do not create annotations for non-executable
	statements.
	(map_stmt_to_bb): Rename basic_block_ann with bb_ann.
	(delete_cfg): Ditto.
	(is_exec_stmt): Reformat.
	(create_bb_ann): New function.
	* tree-dfa.c (create_node): Remove.
	(ref_symbols_list): Remove.
	(create_tree_ann): Declare.
	(referenced_symbols): Declare.
	(tree_find_varrefs): Replace usage of linked lists with variable
	arrays.
	(create_varref): Remove second argument from call to
	add_ref_symbol.
	Update comments.
	(add_ref_to_sym): Replace usage of linked lists with variable
	arrays.
	Declare static.
	(add_ref_to_bb): Ditto.
	(add_ref_symbol): Ditto.
	(dump_varref_list): Ditto.
	(debug_varref_list): Ditto.
	(create_varref_list): Remove.
	(push_ref): Remove.
	(create_node): Remove.
	(delete_varref_list): Remove.
	(get_tree_ann): Call create_tree_ann if the tree doesn't have an
	annotation already.
	(create_tree_ann): New function.
	* tree-flow.h (varref_list_def): Remove.
	(vardef): Change type of field 'imm_uses' to 'varray_type'.
	(varphi): Change type of field 'phi_chain' to 'varray_type'.
	(varref_node_def): Remove.
	(varref_node): Remove.
	(VARREF_NODE_ELEM): Remove.
	(VARREF_NODE_NEXT): Remove.
	(VARREF_NODE_PREV): Remove.
	(varref_list_def): Remove.
	(varref_list): Remove.
	(VARREF_LIST_FIRST): Remove.
	(VARREF_LIST_LAST): Remove.
	(tree_ann_def): Change type of field 'refs' to 'varray_type'.
	(basic_block_ann_def): Rename to 'bb_ann_def'.
	Change type of field 'refs' to 'varray_type'.
	(basic_block_ann): Rename to 'bb_ann'.
	(ref_symbols_list): Remove.
	(referenced_symbols): Declare.
	(add_ref_to_sym): Remove.
	(add_ref_to_bb): Remove.
	(add_ref_symbol): Remove.
	(remove_ann_from_sym): Remove.
	(create_varref_list): Remove.
	(push_ref): Remove.
	(delete_varref_list): Remove.
	(debug_varref_list): Update argument type to be 'varray_type'.
	(dump_varref_list): Ditto.
	* tree-optimize.c: Include 'basic-block.h'.
	(optimize_tree): Replace references to 'ref_symbols_list' with
	'referenced_symbols'.
	Remove call to delete_varref_list.
	* tree-ssa.c (insert_phi_terms): Rename 'work_list' to
	'work_stack'.
	Use VARRAY_PUSH and VARRAY_TOP to access 'work_stack' instead of
	maintaining the stack pointer in 'work_list_top'.
	Remove code to grow 'work_stack'.
	Remove references to 'work_list_top'.
	Replace references to 'ref_symbols_list' with 'referenced_symbols'.
	(build_fud_chains): Replace references to 'ref_symbols_list' with
	'referenced_symbols'.
	(search_fud_chains): If there are no variable references in the
	basic block, return early.
	Change usage of linked lists with variable arrays.

2001-09-07  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (tree_find_basic_blocks): Document how to traverse
	trees inside a basic block.
	(make_for_stmt_blocks): Make sure that there is always a block for
	FOR_EXPR, even if the loop does not have an expression.
	Create a separate block for FOR_INIT_STMT.
	(make_while_stmt_blocks): Always create an "end_while" block. 
	(make_if_stmt_blocks): Do not store IF_COND in the header block of
	an IF statement.
	(make_for_stmt_edges): Create an edge from the block header to the
	block for FOR_INIT_STMT.
	Determine the first block of the loop body calling BB_FOR_STMT on
	the first executable statement in the body.
	Remove the special case for missing FOR_EXPR trees.
	(make_while_stmt_edges): Create a back edge from the end_while
	block to the header block.
	Determine the first block of the loop body calling BB_FOR_STMT on
	the first executable statement in the body.
	(make_do_stmt_edges): Determine the first block of the loop body
	calling BB_FOR_STMT on the first executable statement in the body.
	(condition_block): Rename to latch_block.  Return the latch
	block for the given loop header.
	(make_continue_stmt_edges): Rename condition_block to
	latch_block.
	(successor_block): Ditto.
	* tree-flow.h (condition_block): Rename to latch_block.

2001-09-06  Diego Novillo  <dnovillo@redhat.com>

	* tree-dfa.c (tree_find_varrefs): Use TDF_REFS instead of TDF_VARREF.
	* tree-flow.h (TDF_VARREF): Remove.
 
2001-09-04  Nathan Sidwell  <nathan@codesourcery.com>

	* c-common.h (tree_dump_index): Add more comments.
	(TDF_REFS): New dump flag.
	* c-dump.c (dump_files): Name flags `tree' rather than `ast'.
	(dump_option_value_info): New struct.
	(dump_options): New array.
	(dump_switch_p): Parse switch options symbolically.
	* doc/invoke.texi (-fdump-ast): Rename to ...
	(-fdump-tree): ... here. Document options are symbolic, and
	not all are applicable. Combine ssa related flags into the other
	tree dump flags.

2001-08-27  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (tree-ssa.o): Update dependencies.
	(tree-cfg.o): Ditto.
	(tree-dfa.o): Ditto.
	(tree-optimize.o): Ditto.

2001-08-26  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (C_AND_OBJC_OBJS): Replace tree-opt.o with
	tree-optimize.o.
	(c-decl.o): Ditto.
	(tree-ssa.o): Ditto.
	(tree-cfg.o): Ditto.
	(tree-dfa.o): Ditto.
	(tree-opt.o): Ditto.
	* c-decl.c: Replace tree-opt.h with tree-optimize.h.
	(c_expand_body): Remove call to init_tree_opt.
	* flow.c (flow_loop_dump): Do not display insn UIDs if this is not
	an RTL basic block.
	* tree-cfg.c: Replace tree-opt.h with tree-optimize.h.
	(block_invalidates_loop): New local function.
	(validate_loops): New function.
	(tree_dump_bb): Display the loop depth of the block.
	* tree-dfa.c: Replace tree-opt.h with tree-optimize.h.
	* tree-flow.h (validate_loops): Declare.
	* tree-opt.c: Rename to tree-optimize.c.
	* tree-opt.h: Rename to tree-optimize.h.
	* tree-optimize.c: Rename from tree-opt.c.
	* tree-optimize.h: Rename from tree-opt.h.
	* tree-ssa.c: Replace tree-opt.h with tree-optimize.h.
	(tree_build_ssa): Call tree_dump_bb instead of tree_debug_bb.
	* cp/Make-lang.in: Replace tree-opt.h with tree-optimize.h.
 
2001-08-20  Diego Novillo  <dnovillo@redhat.com>

	* basic-block.h (basic_block): Remove field 'reachable'.
	Add new field 'flags'.
	(BB_REACHABLE): Define.
	* c-common.h (tree_dump_index): Add TDI_cfg, TDI_dot, TDI_ssa.
	* c-decl.c (c_decode_option): Skip '-f' prefix before calling
	dump_switch_p.
	* c-dump.c (dump_file_info): Add entries for -fdump-tree-cfg,
	-fdump-tree-graphviz and -fdump-tree-ssa.
	* flow.c (find_unreachable_blocks): Use BB_REACHABLE bit in bb->flags
	instead of bb->reachable.
	(delete_unreachable_blocks): Ditto.
	* tree-cfg.c: Minor formatting changes throughout the file.
	(DEBUG_TREE_FLOW): Remove.
	(debug_tree_flow): Remove.
	(cfg_dump_file): New local variable.
	(dot_dump_file): New local variable.
	(cfg_dump_flags): New local variable.
	(dot_dump_flags): New local variable.
	(tree_find_basic_blocks): Remove unused arguments.
	Add code to react to -fdump-tree-cfg and -fdump-tree-graphviz.
	Remove uses of DEBUG_TREE_FLOW.
	(delete_unreachable_blocks): Use BB_REACHABLE bit in bb->flags
	instead of bb->reachable.
	(tree_dump_cfg): New.
	(tree_debug_cfg): Call tree_dump_cfg().
	(tree_cfg2dot): Accept a FILE pointer instead of a file name as
	argument.
	Name the graph with the current function name.
	* tree-dfa.c: Minor formatting changes throughout the file.
	(DEBUG_TREE_DFA): Remove.
	(debug_tree_dfa): Remove.
	(dump_file): New local variable.
	(dump_flags): New local variable.
	(tree_find_varrefs): Add code to react to -fdump-tree-ssa.
	Remove uses of DEBUG_TREE_DFA.
	(find_refs_in_expr): Remove uses of DEBUG_TREE_DFA.
	(create_varref): Replace VARREF_BLOCK with VARREF_BB.
	* tree-flow.h: Minor formatting changes throughout the file.
	(VARREF_BLOCK): Rename to VARREF_BB.
	(VARREF_NEXT): Remove.
	(VARREF_PREV): Remove.
	(TDF_VARREF): Define.
	(tree_find_basic_blocks): Remove unused arguments.
	(tree_dump_cfg): Declare.
	(tree_cfg2dot): Change argument to FILE *.
	* tree-opt.c: Minor formatting changes throughout the file.
	(optimize_tree): Remove unused arguments in call to
	tree_find_basic_blocks().
	* tree-opt.h: Ditto.
	* tree-ssa.c: Minor formatting changes throughout the file.
	(DEBUG_TREE_SSA): Remove.
	(debug_tree_ssa): Remove.
	(dump_file): New local variable.
	(dump_flags): New local variable.
	(tree_build_ssa): Add code to react to -fdump-tree-ssa.
	Remove uses of DEBUG_TREE_SSA.
	(insert_phi_terms): Remove uses of DEBUG_TREE_SSA.
	* doc/invoke.texi: Add documentation for -fdump-tree-cfg,
	-fdump-tree-graphviz and -fdump-tree-ssa.
	Replace existing references to -fdump-tree with -fdump-ast.

2001-08-10  Diego Novillo  <dnovillo@redhat.com>

	* basic-block.h (basic_block): Add new field 'reachable'.
	(expunge_block): Declare.
	* flow.c (ENTRY_BLOCK_PTR): Initialize field 'reachable'.
	(EXIT_BLOCK_PTR): Ditto.
	(expunge_block): Remove static declaration.
	(cleanup_cfg): Clear bb->aux on every basic block.
	(find_unreachable_blocks): Use field 'reachable' when computing
	reachability.
	(delete_unreachable_blocks): Use field 'reachable'. 

	* tree-cfg.c: Rename all instance of 'node' with 'block.
	(get_successor_block): Rename to successor_block.
	(make_compound_stmt_edges): Remove.
	(make_switch_stmt_edges): Remove.
	(delete_unreachable_blocks): New.
	(delete_block): New.
	(make_blocks): Add new argument 'compound_stmt'.  Do not include
	COMPOUND_STMT trees in the flowgraph.
	(make_for_stmt_blocks): Include FOR_INIT_STMT in the entry block of
	the loop.
	If FOR_COND does not exist, create a tree holding the constant 1.
	Add new argument 'compound_stmt'.
	(make_while_stmt_blocks): Include WHILE_COND in the entry block of
	the loop.
	Add new argument 'compound_stmt'.
	(make_do_stmt_blocks): Add new argument 'compound_stmt'.
	(make_if_stmt_blocks): Add new argument 'compound_stmt'.
	Include IF_COND in the IF header block.
	(make_switch_stmt_blocks): Add new argument 'compound_stmt'.
	Include SWITCH_COND in the SWITCH header block.
	(create_maximal_bb): Remove argument 'is_loop_header'.
	Add new argument 'compound_stmt'.
	Update all callers.
	Return the newly created basic block instead of its last statement.
	Update comments.
	Do not store control flow altering statements in bb->exit_stmt.
	Only add executable statements to the block.
	Annotate with 'compound_stmt' each tree added to the block.
	(create_bb): Do not update annotation 'is_loop_header'.
	(make_edges): Remove naive reachability analysis.
	When a label node is found, add an edge from the immediately
	enclosing switch statement.
	Call delete_unreachable_blocks() after adding all the edges.
	(make_ctrl_stmt_edges): Do not consider COMPOUND_STMT trees.
	Do nothing for SWITCH_STMT trees.
	(make_exit_edges): Use bb->end_tree instead of BB_EXIT_STMT.
	(make_for_stmt_edges): Remove code that added edges for the block
	holding FOR_INIT_STMT.
	Update comments.
	Do not consider the case where FOR_COND is NULL.
	Call first_exec_stmt() to determine if FOR_BODY is empty.
	Only create an edge from expr_bb to cond_bb if FOR_EXPR is
	non-null.
	(make_while_stmt_edges): Remove code that added edges for the block
	holding WHILE_COND.
	Update comments.
	Call first_exec_stmt() to determine if WHILE_BODY is empty.
	(make_do_stmt_edges): Call first_exec_stmt() to determine if
	DO_BODY is empty.
	(make_if_stmt_edges): Remove code that added edges for the block
	holding IF_COND.
	Call first_exec_stmt() to determine if THEN_CLAUSE or ELSE_CLAUSE
	are empty.
	(make_switch_stmt_edges): Remove.
	(make_goto_stmt_edges): Use bb->end_tree instead of BB_EXIT_STMT.
	(make_break_stmt_edges): Use bb->end_tree instead of BB_EXIT_STMT.
	Call switch_parent() and loop_parent() to determine if the
	statement is inside an appropriate control structure.
	(make_continue_stmt_edges): Use bb->end_tree instead of
	BB_EXIT_STMT.
	(make_return_stmt_edges): Ditto.
	(get_successor_block): Rename to successor_block.
	Call first_exec_stmt() to find the first executable statement in
	TREE_CHAIN.
	(is_ctrl_stmt): Do not consider COMPOUND_STMT trees.
	(stmt_starts_bb_p): Ditto.
	(stmt_ends_bb_p): Reformat comments.
	(delete_cfg): Reformat comments.
	(find_loop_parent): Rename to loop_parent.
	(get_condition_block): Rename to condition_block.
	Update to use new index numbers for control structure header
	blocks.
	(switch_parent): New.
	(first_exec_stmt): New.
	(is_exec_stmt): New.
	(tree_cfg2dot): Reformat comments.
	* tree-dfa.c (find_refs): Remove.
	(find_refs_in_stmt): New
	(find_refs_in_stmt_expr): New.
	(tree_find_varrefs): Look for variables doing a CFG traversal
	instead of the trees.  Remove both arguments.
	(find_refs_in_expr): Add new argument 'bb'.
	Update all recursive calls.
	(create_varref): Abort if the basic block 'bb' is NULL.
	(add_ref_to_sym): Reformat comments.
	(add_ref_symbol): Ditto.
	(delete_varref_list): Ditto.
	* tree-flow.h (struct tree_ann_def): Add 'compound_stmt'.
	(TREE_COMPOUND_STMT): New macro.
	(struct basic_block_ann_def): Remove 'exit_stmt' and
	'is_loop_header'.
	(BB_EXIT_STMT): Remove.
	(BB_IS_LOOP_HEADER): Remove.
	* tree-opt.c (optimize_tree): Call tree_find_varrefs() with no
	arguments.
	Only build DFA and SSA information if n_basic_blocks is greater
	than zero.
	* tree-ssa.c: Rename all instances of 'node' with 'block'.
	(tree_build_ssa): Reformat comments.
	(insert_phi_terms): Ditto.

2001-08-01  Diego Novillo  <dnovillo@redhat.com>

	* tree-cfg.c (USE_TREE_IL): Remove.
	(make_back_edges): Remove.
	(make_fallthru_edge): Remove.
	(get_outermost_scope_block): Remove.
	(is_last_block_of_loop): Remove.
	(tree_find_basic_blocks): Do not return early if 'errorcount' is set.
	(make_edges): Do not treat back edges as a separate case.
	Do not call make_fallthru_edge to create fall-through edges.
	Do not emit a warning for unreachable blocks containing a single
	closing brace.
	(make_do_stmt_edges): Update comment.
	(make_goto_stmt_edges): Do not call get_outermost_scope_block().
	(make_break_stmt_edges): Do not call get_outermost_scope_block().
	Do not call make_back_edges().
	(make_continue_stmt_edges): Call find_loop_parent().  Emit an error
	if the 'continue' statement is not inside a loop.  Call
	get_condition_block() to find the target node.
	(make_return_stmt_edges): Do not call get_outermost_scope_block().
	(get_successor_block): Return EXIT_BLOCK_PTR if 'bb' is the last
	block in the graph.
	Return the condition node of the loop if 'bb' doesn't have a
	natural successor and its parent is a loop header.
	(tree_cfg2dot): Output fake edges with dotted lines.
	* tree-dfa.c (USE_TREE_IL): Remove.
	* tree-opt.c (USE_TREE_IL): Remove.
	* tree-ssa.c (USE_TREE_IL): Remove.
	* tree-flow.h (is_last_block_of_loop): Remove.

2001-07-23  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (C_AND_OBJC_OBJS): Add tree-cfg.o, tree-dfa.o,
	tree-ssa.o and tree-opt.o.
	(c-decl.o): Add dependency on tree-opt.h
	(tree-ssa.o): New rule.
	(tree-cfg.o): New rule.
	(tree-dfa.o): New rule.
	(tree-opt.o): New rule.
	* c-decl.c: Include tree-opt.h.
	(c_expand_body): Call optimize_tree() when the -ftree-ssa flag is
	given.
	* flags.h (flag_tree_ssa): Declare.
	* toplev.c (flag_tree_ssa): Define.
	(lang_independent_options): Add -ftree-ssa.
	* tree-cfg.c: New file.
	* tree-dfa.c: New file.
	* tree-flow.h: New file.
	* tree-opt.c: New file.
	* tree-opt.h: New file.
	* tree-ssa.c: New file.
	* cp/Make-lang.in (CXX_C_OBJS): Add tree-cfg.o, tree-dfa.o,
	tree-opt.o and tree-ssa.o.
	* doc/invoke.texi: Add documentation for -ftree-ssa.

2001-07-23  Nathan Sidwell  <nathan@codesourcery.com>

	* Makefile.in (calls.o): Depend on intl.h.
	* calls.c: Include intl.h.
	(ECF_NEED_STACK_FRAME, ECF_NEED_ARG_FRAME): New flags.
	(special_function_p): Detect when we need a stack or arg
	frame. Don't optimize on length.
	(setjmp_call_p): Remove.
	(uninlinable_call_p): New function.
	* tree.h (setjmp_call_p): Remove.
	(uninlinable_call_p): Declare.

2001-07-22  Nathan Sidwell  <nathan@codesourcery.com>

	* params.def (PARAM_MAX_INLINE_AST): New parameter.
	(PARAM_ARG_INLINE_AST): New parameter.
	* doc/invoke.texi (max-inline-ast, arg-inline-ast): Document
	parameters.

Local Variables:
mode: change-log
change-log-default-name: "ChangeLog.tree-ssa"	
End:
