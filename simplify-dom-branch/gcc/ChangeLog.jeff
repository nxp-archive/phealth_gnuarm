2005-11-21  Jeff Law  <law@redhat.com>

	Checkpoint DOM VRP elimination before eliminating e->aux abuse.
	* tree-vrp (find_conditional_asserts): Document missed
	optimization opportunities due to use pruning.
	(simplify_stmt_for_jump_threading): New.
	(identify_jump_threads, finalize_jump_threads): New.
	(vrp_finalize): Call identify_jump_threads.
	(execute_vrp): Call finalize_jump_threads.10
	* tree-ssa-dom.c: Remove all VRP related code.
	(vrp_element, vrp_data, vrp_element_p, vrp_hash_elt): Kill.
	(vrp_variables_stack, vrp_hash, vrp_eq, vrp_free): Kill.
	(simplify_cond_and_lookup_avail_expr, record_range): Kill.
	(extract_range_from_cond, thread_across_edge): Kill.
	(tree_ssa_dominator_optimize): Do not set up or tream down VRP stuff.
	(dom_opt_finalize_block): Similarly.
	(record_equivalences_from_incoming_edge): Similarly.
	(eliminate_redundant_computations): Similarly.
	(simplify_stmt_for_jump_threading): New.
	(dom_thread_across_edge): New.
	(dom_opt_finalize_block): Simplify slightly using routines
	from tree-ssa-threadedge.c
	* loop-init.c: (loop_optimizer_finalize): Temporary hack to
	work around checking failure due to abuse of e->aux.
	* tree-flow.h (potentially_threadable_block): Prototype.
	(thread_across_edge): Prototype.
	* tree-ssa-threadedge.c: New, shared code for jump threading.
	* Makefile.in (OBJS-common): Add tree-ssa-threadedge.o.
	(tree-ssa-threadedge.o): Add dependencies.
	* passes.c (init_optimization_passes): Merge PHIs before
	VRP.
	* testsuite/gcc.c-torture/execute/930529-1.x: Use -fwrapv.

2005-11-10  Jeff Law  <law@redhat.com>

	PR middle-end/23181
	* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Do not
	perform reassociation if the parent statement will not die as
	a result of the optimization.

2005-10-20  Jeff Law  <law@redhat.com>

	* tree-ssa-dom.c (find_equivalent_equality_comparison): Moved
	from here into tree-ssa-forwprop.c.
	(simplify_cond_and_lookup_avail_expr): Similarly for code which
	walks the use-def chains to simplify comparisons.
	* tree-ssa-forwprop.c (find_equivalent_equality_comparison): Moved
	here from tree-ssa-dom.c.
	(simplify_cond): Code extracted from DOM.
	(forward_propagate_into_cond): Call simplify_cond.

	* tree-ssa-dom.c (local_fold): Kill.
	(thread_across_edge): Remove all type conversions after folding
	a condition.
	(simplify_rhs_and_lookup_avail_expr): Use fold_build2 followed
	by explicitly stripping useless type conversions rather than
	build + local_fold.  

2005-10-19  Jeff Law  <law@redhat.com>

        * tree-ssa-ccp.c (fold_stmt_r): DATA argument is now a pointer to
        a structure containing state rather than a pointer to a bool.
        (case ARRAY_REF): New code to handle folding some array references.
        (case ADDR_EXPR): Note when we are processing expressions found
        within an ADDR_EXPR.
        (fold_stmt, fold_stmt_inplace): Pass in a structure to fold_stmt_r
        for state variables rather than just a pointer to a boolean.
        * tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Remove
        handling of constant string references.

	* tree-ssa-dom.c (simplify_switch_and_lookup_avail_expr):  Code
	to simplify SWITCH_EXPR_COND moved from here to ...
	* tree-ssa-forwprop.c (simplify_switch_expr): Here.
	(tree_ssa_forward_propagate_single_use_vars): Call
	simplify_switch_expr when appropriate.

	* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Code to
	simplify ~~x and --x moved from here to ...
	* tree-ssa-forwprop.c (simplify_not_neg_expr): Here.
	(tree_ssa_forward_propagate_single_use_vars): Call
	simplify_not_neg_expr when appropriate.

        * tree-cfgcleanup.c (merge_phi_nodes): Allow merging in some
        cases the forwarder block dominates the destination.



