#ifdef TINYSTM_VERSION_0_9_0b1
DEF_GTM_BUILTIN (BUILT_IN_GTM_TXN_COMMIT, "stm_commit",
		  BT_FN_INT_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_ABORT, "stm_abort",
		  BT_FN_VOID_PTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_NEW, "stm_new",
		  BT_FN_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_GET_ENV, "stm_get_env",
		  BT_FN_PTR_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_TXN_BEGIN, "stm_start",
		  BT_FN_VOID_PTR_PTR_INT_PTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_N, "stm_store_n",
		  BT_FN_VOID_VAR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_1, "stm_store8",
		  BT_FN_VOID_PTR_VPTR_I1, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_2, "stm_store16",
		  BT_FN_VOID_PTR_VPTR_I2, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_4, "stm_store32",
		  BT_FN_VOID_PTR_VPTR_I4, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_8, "stm_store64",
		  BT_FN_VOID_PTR_VPTR_I8, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_FLOAT, "stm_store_float",
		  BT_FN_VOID_PTR_VPTR_FLOAT, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_DOUBLE, "stm_store_double",
		  BT_FN_VOID_PTR_VPTR_DOUBLE, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_PTR, "stm_store",
		  BT_FN_VOID_PTR_PTRPTR_PTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_N, "stm_load_n",
		  BT_FN_VOID_VAR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_1, "stm_load8",
		  BT_FN_I1_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_2, "stm_load16",
		  BT_FN_I2_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_4, "stm_load32",
		  BT_FN_I4_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_8, "stm_load64",
		  BT_FN_I8_PTR_VPTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_FLOAT, "stm_load_float",
		 BT_FN_FLOAT_PTR_VPTR, ATTR_NOTHROW_LIST)	 
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_DOUBLE, "stm_load_double",
		 BT_FN_DOUBLE_PTR_VPTR, ATTR_NOTHROW_LIST)	 
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_PTR, "stm_load",
		 BT_FN_PTR_PTR_PTRPTR, ATTR_NOTHROW_LIST)	 

DEF_GTM_BUILTIN (BUILT_IN_GTM_INIT, "stm_init",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_EXIT, "stm_exit",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
#endif /* TINYSTM_VERSION_0_9_0b1 */

#ifdef TINYSTM_VERSION_0_9_5
DEF_GTM_BUILTIN (BUILT_IN_GTM_TXN_COMMIT, "stm_commit",
		  BT_FN_INT, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_ABORT, "stm_abort",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_INIT_THREAD, "stm_init_thread",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_EXIT_THREAD, "stm_exit_thread",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_GET_ENV, "stm_get_env",
		  BT_FN_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_TXN_BEGIN, "stm_start",
		   BT_FN_VOID_PTR_INTPTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_N, "stm_store_n",
		  BT_FN_VOID_VAR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_1, "stm_store8",
		  BT_FN_VOID_VPTR_I1, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_2, "stm_store16",
		  BT_FN_VOID_VPTR_I2, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_4, "stm_store32",
		  BT_FN_VOID_VPTR_I4, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_8, "stm_store64",
		  BT_FN_VOID_VPTR_I8, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_FLOAT, "stm_store_float",
		  BT_FN_VOID_VPTR_FLOAT, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_DOUBLE, "stm_store_double",
		  BT_FN_VOID_VPTR_DOUBLE, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_PTR, "stm_store",
		  BT_FN_VOID_VPTR_PTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_N, "stm_load_n",
		  BT_FN_VOID_VAR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_1, "stm_load8",
		  BT_FN_I1_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_2, "stm_load16",
		  BT_FN_I2_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_4, "stm_load32",
		  BT_FN_I4_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_8, "stm_load64",
		  BT_FN_I8_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_FLOAT, "stm_load_float",
		  BT_FN_FLOAT_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_DOUBLE, "stm_load_double",
		  BT_FN_DOUBLE_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_PTR, "stm_load",
		  BT_FN_PTR_VPTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_INIT, "stm_init",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_EXIT, "stm_exit",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
#endif /* TINYSTM_VERSION_0_9_5 */

#ifdef TANGER
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_PTR, "tanger_stm_loadptr",
		 BT_FN_PTR_PTR_PTRPTR, ATTR_NOTHROW_LIST)	 

DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_N, "stm_load",
		  BT_FN_VOID_VAR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_1, "tanger_stm_load8",
		  BT_FN_I1_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_2, "tanger_stm_load16",
		  BT_FN_I2_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_4, "tanger_stm_load32",
		  BT_FN_I4_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_8, "tanger_stm_load64",
		  BT_FN_I8_PTR_VPTR, ATTR_NOTHROW_LIST)

/* TODO hack because currently the tanger interface does 
   not deal with doubles and floats, thus, the tinySTM 
   interface is used directly */
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_DOUBLE, "stm_load_double",
		  BT_FN_DOUBLE_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_LOAD_FLOAT, "stm_load_float",
		  BT_FN_FLOAT_PTR_VPTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_PTR, "tanger_stm_storeptr",
		  BT_FN_VOID_PTR_PTRPTR_PTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_N, "tanger_stm_store",
		  BT_FN_VOID_VAR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_1, "tanger_stm_store8",
		  BT_FN_VOID_PTR_VPTR_I1, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_2, "tanger_stm_store16",
		  BT_FN_VOID_PTR_VPTR_I2, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_4, "tanger_stm_store32",
		  BT_FN_VOID_PTR_VPTR_I4, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_8, "tanger_stm_store64",
		  BT_FN_VOID_PTR_VPTR_I8, ATTR_NOTHROW_LIST)

/* TODO hack because currently the tanger interface does 
   not deal with doubles and floats, thus, the tinySTM 
   interface is used directly */
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_DOUBLE, "stm_store_double",
		  BT_FN_VOID_PTR_VPTR_DOUBLE, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_STORE_FLOAT, "stm_store_float",
		  BT_FN_VOID_PTR_VPTR_FLOAT, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_TXN_BEGIN, "tanger_stm_begin",
		  BT_FN_VOID_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_TXN_COMMIT, "tanger_stm_commit",
		  BT_FN_VOID_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_NEW, "tanger_stm_get_tx",
		  BT_FN_PTR, ATTR_NOTHROW_LIST)
/* TODO hack tanger abort not supported by tanger interface 
   fall back to stm_abort call */
DEF_GTM_BUILTIN (BUILT_IN_GTM_ABORT, "stm_abort",
		  BT_FN_VOID_PTR, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_GET_ENV, "tanger_stm_get_jmpbuf",
		  BT_FN_PTR_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_INIT, "tanger_stm_init",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_EXIT, "tanger_stm_shutdown",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_INIT_THREAD, "tanger_stm_thread_init",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_EXIT_THREAD, "tanger_stm_thread_shutdown",
		  BT_FN_VOID, ATTR_NOTHROW_LIST)

DEF_GTM_BUILTIN (BUILT_IN_GTM_MALLOC, "tanger_stm_malloc",
		  BT_FN_PTR_SIZE_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_FREE, "tanger_stm_free",
		  BT_FN_VOID_PTR_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_CALLOC, "tanger_stm_calloc",
		  BT_FN_PTR_SIZE_SIZE_PTR, ATTR_NOTHROW_LIST)
DEF_GTM_BUILTIN (BUILT_IN_GTM_REALLOC, "tanger_stm_realloc",
		  BT_FN_PTR_PTR_SIZE_PTR, ATTR_NOTHROW_LIST)
/* TODO future work:
void* tanger_stm_indirect_resolve(void *nontxnal_function);
void tanger_stm_indirect_init(uint32_t number_of_call_targets);
void tanger_stm_indirect_register(void* nontxnal, void* txnal); */
#endif /* TANGER */
