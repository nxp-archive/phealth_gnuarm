2008-05-23  Andrey Belevantsev  <abel@ispras.ru>

	* tree-pass.h (pass_sel_sched): Remove.
	* sel-sched.c (maybe_skip_selective_scheduling): New.  Export it.
	(gate_handle_sel_sched, handle_sel_sched, pass_sel_sched): Remove.
	(debug_state): New.
	(advance_one_cycle, advance_state_on_fence): Use it.
	(extract_new_fences_from): Fix formatting.
	(can_substitute_through_p): Disallow substitutions through CONST_INTs.
	(estimate_insn_cost): New, factored from ...
	(vinsn_dfa_cost): ... here.  Renamed to get_expr_cost.
	(choose_best_insn): When max_issue is not used, try to select
	the first available insn from the ready list.  Correctly set can_issue.
	(stall_for_cycles): When stalling for more than one cycle, always
	set FENCE_AFTER_STALL_P.
	(track_scheduled_insns_and_blocks): Always add found insns to
        current_originators.
	(reset_sched_cycles_in_current_ebb): New variables real_insn,
        after_stall.  Use estimate_insn_cost.  Handle the corner case when
        state_transition seems to be lying about the cost.
	* sel-sched-ir.c (state_create): Always start from advanced state.
	(deps_init_id_note_reg_set): When stack registers are used,
        make the instruction of type use to avoid renaming.
	(maybe_downgrade_id_to_use): Likewise.  Downgrade only SETs.
        (setup_id_reg_sets): Treat writes/reads to/from stack registers
        as corresponding action with the first stack reg.
	(has_dependence_p): Also punt for MOVE_BARRIER.
	* sched-rgn.c (rest_of_handle_sched, rest_of_handle_sched2): Run
        selective scheduling if requested.
	* passes.c (init_optimization_passes): Remove mentions of pass_sel_sched.
	* config/i386/i386.c (override_options): Turn on selective scheduling
	with -O2 for testing purposes.
	* config/ia64/ia64.c (ia64_reorg): Remove debug handling of selective
        scheduling.

2008-05-13  Andrey Belevantsev  <abel@ispras.ru>

	* sel-sched-ir.c (vinsn_init): Call init_id_from_df when possible.
	(setup_id_for_insn): New, factor from ...
	(deps_init_id_start_insn): ... here.  Tidy.
	(setup_id_lhs_rhs, maybe_downgrade_id_to_use, setup_id_reg_sets): New.
	(init_id_from_df): New.  Use the above functions to setup id for insn
	when DF's data for it is known.

	* sel-sched-ir.h (struct _expr): Make target_available signed char.
	* sel-sched.c: Fix typo in comment.

2008-05-13  Andrey Belevantsev  <abel@ispras.ru>

	* sched-int.h: Fix typos, remove unneeded comments.
	(struct sched_deps_info_def): Remove start_x and finish_x fields.
	Remove all uses.  Update appropriate hook structures.

	* sel-sched-ir.c (sel_move_insn): New.
	(free_history_vect): New, factored from ... 
	(clear_expr): ... here.
	(prepare_insn_expr): New.
	(verify_backedges, maybe_tidy_empty_bb): New, factored from ...
	(sel_remove_insn): ... here.  Add only_disconnect and
	full_tidying parameters.  Call tidy_control_flow.
	(tidy_control_flow): New.
	(set_insn_init): Move initialization of EXPR_SPEC_DONE_DS
	to prepare_insn_expr.
	(init_insn): Use prepare_insn_expr.
	(get_seqno_by_preds): New.
	(remove_empty_bb): Tidy.  Remove an assert about edge fallthruness.

	* sel-sched-ir.h (EXPR_WAS_CHANGED): New.
	(sel_move_insn, get_seqno_by_preds, tidy_control_flow): Declare.

	* sel-sched.c (struct cmpd_local_params): New field removed_last_insn.
	(struct moveop_static_params): New field uid.
	(replace_dest_with_reg_in_expr): Move initialization of EXPR_WAS_RENAMED
	and EXPR_TARGET_AVAILABLE from ... 
	(try_replace_dest_reg): ... here.
	(reg_rename_this_tick): New static variable.
	(fill_vec_av_set, find_best_expr): Tidy.	
	(emit_insn_from_expr_after): Use EXPR_WAS_RENAMED.
	(find_seqno_for_bookkeeping): New, factored from ... 
	(generate_bookkeeping_insn): .. here.
	(move_exprs_to_boundary): Pass expr_vliw to move_op.
	Do not adjust c_expr anymore.
	(schedule_expr_on_boundary): Emit insn from expr_vliw, not c_expr.
	When possible, move insn instead of reemitting.
	(fill_insns): Do not verify backedges here.
	(move_op_merge_succs): Just use merge_expr_data instead of 
	trying to be clever about EXPR_USEFULNESS.
	(track_scheduled_insns_and_blocks, maybe_emit_renaming_copy,
	maybe_emit_speculative_check, handle_emitting_transformations,
	remove_insn_from_stream): New, factored from ...
	(move_op_orig_expr_found): ... here.  Do not clear data structures
	of removed insn if we are sure that it would be scheduled later.
	(move_op_at_first_insn): Do not update data sets on the removed boundary.
	Also do not update sets on the boundary which is a bb header.
	Fix comment.  Factor out some code to tidy_control_flow.
	(fur_orig_expr_not_found): Tidy comment.
	(code_motion_path_driver): Set removed_last_insn in local_params_in.
	Properly initialize first_insn and insn in corner cases.
	(move_op): Add expr_vliw parameter.  Initialize sparams.uid using it.
	(sel_region_init): Zero reg_rename_this_tick.

2008-05-13  Alexander Monakov  <amonakov@ispras.ru>

	* config/ia64/ia64.c (ia64_adjust_cost_2): Ignore true dependencies
	between a store and a call.
	* config/ia64/itanium2.md: Add bypass to reflect this.
	* sched-deps.c (sched_analyze_reg): Do not allow crossing calls for 
	registers that not already cross one.

2008-05-12  Andrey Belevanstev  <abel@ispras.ru>

        * tree-ssa-reassoc.c (rewrite_expr_tree): Add hunk accidentally removed
        during merge.

2008-04-18  Andrey Belevanstev  <abel@ispras.ru>
	    Dmitry Melnik  <dm@ispras.ru>
	    Alexander Monakov  <amonakov@ispras.ru>

	* cfgrtl.c (create_basic_block_structure): Set bb_index in one place.
	* cse.c (hash_rtx_string): Make static inline.
	* haifa-sched.c: Tidy, add comments, move static definitions to one 
	place.
	(schedule_block): Print less debugging info.
	(check_sched_flags, sched_finish_bbs): Remove.
	* loop-init.c (loop_optimizer_init): Remove old merge glitch.
	* modulo-sched.c: Remove #if 0'd code.
	* rtl.h (hash_rtx_string): Remove export.
	* sched-int.h (sched_extend_bbs): Remove export.
	(attach_life_info1): Likewise.
	(SEL_SCHED_P): Rewrite macro to inline function, rename to sel_sched_p.  
	Update all uses.
	* sel-sched-dump.c, sel-sched-dump.h, sel-sched-ir.c, sel-sched-ir.h, 
	sel-sched.c, sel-sched.h: Update headers to GPLv3.
	* sel-sched.c (cfglayout.h, cselib.h): Remove excessive includes.
	Update high-level overview of the scheduler.
	(collect_unavailable_regs_from_bnds, 
	try_replace_dest_reg): Split from ...
	(find_best_reg_for_expr): ... here.
	(fur_orig_expr_found): Remove needs_spec_check_p.
	* sel-sched-ir.h (struct _def): Remove needs_spec_check_p.  
	Update all uses.
	* config/ia64/ia64.c (ia64_sched_init): Check SCHED_GROUP_P bits
	when ! sel_sched_p.  
	(sel2_run): Add comment.
	* config/ia64/ia64.opt (ia64_max_memory_insns): Extend comment.
	* doc/invoke.texi: Fix documentation wrt removed sel-sched flags.
	
	
2008-04-17  Andrey Belevantsev  <abel@ispras.ru>

        * sel-sched-ir.c (expr_greater_p): Use UIDs instead of LUIDs
	for comparison.
	* ia64.c (ia64_override_options): Make the selective scheduler
	the default one starting from -O3.
	
2008-04-15  Andrey Belevantsev  <abel@ispras.ru>

        Merge from trunk rev. 134322.
	* tree-pass.h (pass_sel_sched): Declare.
	* sel-sched.c (moveup_expr_cached): Initialize trans_type.
	(move_cond_jump): Properly use df_insn_change_bb.
	(pass_sel_sched): Convert to rtl_opt_pass.
	* sched-rgn.h: Inline into sched-int.h and kill.  Kill all uses.
	* sched-rgn.c (candidate_table, compute_trg_info, free_trg_info,
	check_live, update_live): Make static.
	
2008-04-14  Andrey Belevantsev  <abel@ispras.ru>

	* common.opt (flag_selective_scheduling*): Disable by default.
	Put `Optimization' markers on sel-sched flags.
	* config/ia64/ia64.c (ia64_override_options): Turn on selective
	scheduling with -O3, disable -fauto-inc-dec.
	* opts.c (decode_options): Remove handling of selective scheduling
	options.
	* sel-sched.c (compute_av_set_at_bb_end, fill_vec_av_set): Do not
	truncate av set.

2008-04-14  Andrey Belevantsev  <abel@ispras.ru>
	    Alexander Monakov  <amonakov@ispras.ru>

	* config/ia64/ia64.c (ia64_h_i_d_extended): Reallocate stops_p
	by larger chunks.
	* cse.c (hash_rtx_cb): New.  
	(hash_rtx): Use it.
	* haifa-sched.c (haifa_sched_finish): Tidy. 
	(sched_finish): Call haifa_finish_h_i_d.
	(extend_h_i_d): Reallocate h_i_d by larget chunks.
	* rtl.c (rtx_equal_p_cb): New.
	(rtx_equal_p): Use it.
	* rtl.h (rtx_equal_p_cb, hash_rtx_cb): New.
	* sched-deps.c (init_deps_data_vector): New.  Allocate h_d_i_d
	by larger chunks.
	(sched_deps_init): Use it.
	(deps_extend_d_i_d, deps_finish_d_i_d, sched_deps_local_finish): Kill.
	* sched-int.h: Kill glat externs.
	(struct _haifa_deps_insn_data): New field cant_move, moved from d_i_d.
	(struct _deps_insn_data): Kill with all uses.
	* sel-sched-ir.h (struct _expr): New field cant_move.
	(_list_alloc): New, split from ... 
	(_list_add): ... here.
	* sel-sched-ir.c (sel_rtx_equal_p, sel_hash_rtx): Kill.
	(skip_unspecs_callback, hash_with_unspec_callback): New.
	(vinsn_init): Use hash_rtx_cb.
	(vinsn_equal_p): Use rtx_equal_p_cb.
	(init_expr, merge_expr_data, copy_expr, 
	init_global_and_expr_for_insn): Update for EXPR_CANT_MOVE.
	(update_target_availability, update_speculative_bits): New, split from ...
	(merge_expr_data): ... here.
	(expr_greater_p, av_set_add_element): New. 
	(av_set_add, av_set_add_nocopy): Use it.
	(join_distinct_sets, av_set_truncate): New.
	(av_set_union_and_clear, av_set_union_and_live): Use them.
	(extend_insn): Reallocate s_i_d by larger chunks.
	(finish_insns): Clear cant_move bit.
	(block_valid_for_bookkeeping_p, find_block_for_bookkeeping, 
	create_block_for_bookkeeping, find_place_for_bookkeeping,
	emit_bookkeeping_insn): New, split from ... 
	(generate_bookkeeping_insn): ... here.
	(stall_for_cycles): New.
	(update_fence_and_insn): New parameter need_stall.
	(fill_insns): Use stall_for_cycles. Pass need_stall
	to update_fence_and_insn.
	(move_op_at_first_insn): Do not remove jumps that are already scheduled.
	(sel_region_init): Tidy.
	(find_ebb_boundaries, reset_sched_cycles_in_current_ebb, put_TImodes,
	sel_region_target_finish): New, split from ... 
	(sel_region_finish): ... here.
	(sel_global_init): Initialize can_issue_more.

2008-04-14  Andrey Belevantsev  <abel@ispras.ru>

	* cfgloopmanip.c (has_preds_from_loop): New.
	(create_preheader): Use it.
	* sched-deps.c (deps_analyze_insn): Tidy.
	* sel-sched-ir.c (vinsns_correlate_as_rhses_p): Rename to vinsn_equal_p,
	deleting the latter.  Update all uses.
	(vinsn_copy): New.
	(find_in_history_vect_1): New parameter compare_vinsns.
	Do not compare when we're undoing transformations on a bookeeping copy.
	(find_in_history_vect, insert_in_history_vect): Use the new parameter.
	(merge_expr_data): Add usefulness only when merging on a split point.
	(has_dependence_p): Do not allow stores to move through checks.
	(init_insn): Properly init EXPR_TARGET_AVAILABLE and INSN_LIVE_VALID_P.
	(clear_outdated_rtx_info): Do not rely on INSN_TRANSFORMED_INSNS 
	when rescheduling.
	(sel_remove_loop_preheader): Tidy.

	* sel-sched.c (struct code_motion_path_driver_info_def): Add new 
	parameter to on_enter field. Rename at_bb_head to at_first_insn.
	(need_stall): Move to fill_insns.
	(vec_bk_blocked_exprs): Rename to vec_blocked_vinsns.
	(extract_new_fences_from): Fix for the case when a fence is not
	on a bb header.
	(substitute_reg_in_expr): New parameter undo.  Perform or undo 
	the change based on this parameter.
	(find_best_reg_for_expr): Use find_sequential_best_exprs.
	When renaming, set EXPR_TARGET_AVAILABLE to 1.
	(undo_transformations): When un-substituting through bookkeeping, 
	do not use the history data, but substitute_reg_in_expr instead.
	(moveup_expr_inside_insn_group): Do not care about any dependencies
	except substitutable ones. 
	(try_bitmap_cache, try_transformation_cache, update_bitmap_cache,
	update_transformation_cache): Split from ... 
	(moveup_set_expr): ... here.  
	(moveup_expr_cached): New function.
	(moveup_set_path*): Kill and rewrite into ... 
	(moveup_set_inside_insn_group): ... this.
	(equal_after_moveup_path_p): Rewrite without recursion.
	(compute_av_set_inside_bb): Check ineligibility for every insn.
	Leave a copy only on bb headers.
	(update_data_sets): Update only on bb headers.
	(expr_blocked_by_bookkeeping_p): Use vec_blocked_vinsns.
	(clear_blocked_exprs, add_to_blocked_exprs, free_blocked_exprs): New.
	(fill_vec_av_set): Remove unavailable due to bookeeping expressions
	even if they are separable.  Tidy.  Compute the minimal stall
	needed to be able to try any of the expressions in the ready set.
	(fill_ready_list, find_best_expr): Propagate the stall needed from
	fill_vec_av_set to fill_insns.
	(move_cond_jump): Fix for the case when a fence is not on a bb header.
	(compute_av_set_on_boundaries, find_sequential_best_exprs): Likewise.
	Handle substitutions inside insn group.
	(prepare_place_to_insert): Likewise.
	(move_exprs_to_boundary): Likewise for the case when more than one 
	expression corresponds to expr_vliw.
	(fill_insns): Stall for more than one cycle if needed.
	Check that we never create an extra back edge in a region when 
	pipelining.
	(update_and_record_unavailable_insns): Also update liveness in 
	the middle of the bookkeeping block.
	(move_op_at_first_insn): Handle the case when the insn is not 
	a bb header.
	(fur_at_first_insn): Likewise.
	(fur_on_enter): Move the handling of visited blocks to 
	code_motion_path_driver.
	(move_op_on_enter): New.
	(code_motion_process_successors): Rescan when basic block
	numbers have changed due to bb splitting.
	(code_motion_path_driver): Update for fences not on bb headers.
	(sel_region_init, sel_region_finish): Update liveness on single-block 
	loops when pipelining.  Use *_blocked_exprs routines.

2008-04-14  Andrey Belevantsev  <abel@ispras.ru>

	* sel-sched.c (extract_new_fences_from): Move fence to the new ones
	only if the succ insn has not yet been scheduled.  
	(find_best_expr): Tidy.
	(remove_insns_for_debug, compute_av_set_on_boundaries, 
	find_sequential_best_exprs, move_nop_to_previous_block,
	prepare_place_to_insert, move_exprs_to_boundary, 
	advance_state_on_fence, update_fence_and_insn, 
	update_boundaries, schedule_expr_on_boundary): Split from ... 
	(fill_insns): ... here.
	(move_op_ascend): Do not propagate through NOPs.
	(move_op_process_successors): Rename to code_motion_process_successors.
	Fix assert.
	(code_motion_path_driver): Change return type to int.
	Return -1 when we have found the previously created bookkeeping.
	(schedule_on_fences, find_min_max_seqno, calculate_new_fences,
	update_seqnos_and_stage): Split from ... 
	(sel_sched_region_2): ... here.
	* sched-deps.h: Inline into sched-int.h.  Kill.      
	* sel-sched-dump.c (debug_vinsn, debug_vinsn_1, debug_av_set,
	debug_lv_set, debug_ilist, debug_insn_vector, 
	debug_hard_reg_set): Fix '\n' printing.

2008-04-14  Andrey Belevantsev  <abel@ispras.ru>

	* sched-deps.c (sched_deps_init): Tidy.
	* sel-sched-ir.c (init_fence_for_scheduling): New.
	(flist_add): Use it.
	(init_fences): Merge ready_ticks_size.
	(merge_fences): Likewise.
	(new_fences_add): Rename to add_to_fences.
	(move_fence_to_fences): New.
	(new_fences_add_clean): Rename to move_fence_to_fences.
	(new_fences_add_dirty): Rename to add_dirty_fence_to_fences.
	(insn_eligible_for_subst_p): Kill.

	* sel-sched-ir.h (ready_ticks, ready_ticks_size): New.
	* sel-sched.c (extract_new_fences_from,
	sel_sched_region_2): Use the new fence functions.
	(can_substitute_through_p): New.
	(moveup_expr): Use it.
	(can_overcome_dep_p): Rename to can_speculate_dep_p.
	(fill_vec_av_set): Use FENCE_READY_TICKS.

2008-04-14  Alexander Monakov  <amonakov@ispras.ru>

	* common.opt (flag_sel_sched_pipelining_outer_loops): Init to 0.
	(flag_sel_sched_restrict_pipelining): New.
	* sched-rgn.c (find_rgns): Use flag_sel_sched_pipelining.
	* sel-sched-ir.c (deps_init_id_data): New field force_use_p.
	(deps_init_id_start_insn, deps_init_id_finish_lhs,
	deps_init_id_note_reg_set, deps_init_id_note_reg_clobber,
	deps_init_id): Upgrade to use it.
	(tick_check_p): Change return type to int.
	(clear_outdated_rtx_info): Zero INSN_SCHED_TIMES and INSN_AFTER_STALL_P.
	(delete_and_free_basic_block, sel_add_or_remove_bb,
	sel_split_block): Use blocks_to_reschedule.
	(pipeline_outer_loops_init): Rename to sel_init_pipelining.
	(pipeline_outer_loops_finish): Rename to sel_finish_pipelining.
	(sel_find_rgns): Use FOR_EACH_LOOP.

	* sel-sched.c: Update all uses of flag_sel_sched_pipelining_outer_loops
	to check only for current_loop_nest.
	(blocks_to_reschedule): New.
	(end_of_loop_p, check_stalling_p): Remove.
	(fill_vec_av_set): Limit pipelining aggressiveness.
	(move_op_orig_expr_found): Update blocks_to_reschedule.
	(init_seqno, init_seqno_1): Use it.
	(add_region_head): Kill.
	(sel_region_init): Allocate blocks_to_reschedule.
	(sel_region_finish): Free it.
	(sel_sched_region_1): Use blocks_to_reschedule to guide 
	lazy rescheduling.

2008-04-14  Andrey Belevantsev  <abel@ispras.ru>

	* common.opt (flag_sel_sched_emulate_haifa, 
	flag_sel_sched_pipelining_verbose, flag_sel_sched_verbose, 
	flag_sel_sched_substitute_inside_insn_group): Kill.  Kill all uses.
	(flag_sel_sched_single_block_regions, flag_sel_sched_ebb_regions, 
	flag_sel_sched_reset_tc_on_join): Likewise.
	* config/ia64/ia64.opt (mflag_sched_spec_verbose, 
	mflag_sel_sched_renaming, mflag_sel_sched_substitution): Likewise.
	* params.def (max-pipeline-region-blocks): Set to 15.
	(max-pipeline-region-insns): Set to 200.
	(selsched-verbose): Kill.
	(selsched-max-lookahead): Set to 50.
	* sel-sched-dump.h (print): Rename to sel_print.  
	* sel-sched-dump.c (push_indent, pop_indent, push_new_line, pop_new_line,
	block_start, block_finish, get_print_blocks_num, line_start, 
	line_finish, free_sel_dump_data): Kill.  Update all uses.
	(debug_find_insn_loop, debug_find_unreachable_blocks,
	av_set_contains_insn_with_uid): Kill.
	* sel-sched-ir.h (rhs_t): Kill.  Change all uses to expr_t.
	Likewise with accessor macros.
	(struct vinsn_def): Inline struct idata_def into it.
	(VINSN_ID): Update.
	(struct _sel_insn_data): New field live.
	(INSN_LIVE): New accessor macro.
	* sel-sched-ir.c (compute_live): Update for INSN_LIVE.
	(update_data_sets, update_liveness_on_insn, 
	compute_live_below_insn, update_data_sets,
	first_time_insn_init, init_first_time_insn_data, 
	free_first_time_insn_data, init_insn): Likewise.

2008-04-14  Andrey Belevantsev  <abel@ispras.ru>

	* genattr.c (main): Output maximal_insn_latency prototype.
	* genautomata.c (output_default_latencies): New. Factor its code from ... 
	(output_internal_insn_latency_func): ... here.
	(output_internal_maximal_insn_latency_func): New.
	(output_maximal_insn_latency_func): New.
	* hard-reg-set.h (UHOST_BITS_PER_WIDE_INT): Fix define.
	* lists.c (remove_free_EXPR_LIST_node): New.
	* rtl.h: Export it.
	* sched-deps.c (remove_from_dependence_list, 
	remove_from_both_dependence_lists): New.
	(remove_from_deps): New. Use the above functions.
	* sched-deps.h (remove_from_deps): Export.
	* sel-sched-ir.h (struct _fence): New field `executing_insns'.
	(FENCE_EXECUTING_INSNS): New accessor.
	(struct _sel_insn_data): Remove _expr to expr.  Update all uses.
	Change asm_p to bool_bitfield. New field `ready_cycle'.
	* sel-sched-ir.c (fence_init, flist_add, fence_clear, 
	init_fences, merge_fences, new_fences_add, new_fences_add_clean, 
	new_fences_add_dirty): Update for FENCE_EXECUTING_INSNS.
	* sel-sched.c (advance_one_cycle): Remove excessive insns from 
	FENCE_EXECUTING_INSNS.
	(undo_transformations): Forbid combined speculation.
	(process_use_exprs): Use EXPR_TARGET_AVAILABLE.
	(fill_insns): Set INSN_READY_CYCLE.  Update FENCE_EXECUTING_INSNS.
	(sel_sched_region_2): Likewise.

2008-04-14  Dmitry Melnik  <dm@ispras.ru>

	* sel-sched-dump.c (get_print_blocks_num): New.
	* sel-sched-dump.h: Export it.
	* sel-sched-ir.c (vinsn_equal_p): Use sel_rtx_equal_p for UNIQUE 
	vinsns too.
	(speculate_expr): Pass false to create_vinsn_from_insn_rtx.
	(create_vinsn_from_insn_rtx): New parameter force_unique_p.
	Pass it to vinsn_create.
	* sel-sched-ir.h (struct _def): Add comment to crosses_call.
	* sel-sched.c (struct cmpd_local_params, 
	struct moveop_static_params, struct fur_static_params,
	fur_static_params_p, cmpd_local_params_p, moveop_static_params_p,
	struct code_motion_path_driver_info_def,
	code_motion_path_driver_info, move_op_hooks, fur_hooks): New.
	(substitute_reg_in_rhs): Pass false to create_vinsn_from_insn_rtx.
	(replace_dest_with_reg_in_rhs, generate_bookkeeping_insn): Likewise.
	(code_motion_path_driver): New.
	(find_used_regs, move_op): Rewrite to use it.  Update all uses.
	(find_used_regs_1): Kill.
	(av_set_could_be_blocked_by_bookkeeping_p): New.
	(move_op_merge_succs, fur_merge_succs, move_op_after_merge_succs,
	move_op_orig_rhs_found, fur_orig_rhs_found, move_op_at_bb_head,
	fur_at_bb_head, move_op_ascend, fur_on_enter, 
	move_op_orig_rhs_not_found, fur_orig_rhs_not_found,
	move_op_process_successors, code_motion_path_driver_cleanup): New.

2008-02-28  Andrey Belevantsev  <abel@ispras.ru>
	
	* sel-sched-dump.c (dump_expr_1): Print correct value of 
	EXPR_TARGET_AVAILABLE.
	* sel-sched-ir.h (struct vinsn_def): New field hash_rtx.
	(VINSN_HASH_RTX): New accessor.
	(struct transformed_insns): New.
	(struct _sel_insn_data): New field transformed_insns.
	(INSN_TRANSFORMED_INSNS): New accessor.
	* sel-sched-ir.c (vinsn_init): Initialize VINSN_HASH_RTX.
	(vinsn_delete): Kill outdated comment.
	(speculate_expr): Return 2 when we think that the target
	register is unavailable for speculation.
	(hash_transformed_insns, eq_transformed_insns,
	free_transformed_insns): New.
	(init_first_time_insn_data): Init INSN_TRANSFORMED_INSNS.
	(free_first_time_insn_data): Free INSN_TRANSFORMED_INSNS.
	(finish_insns): Likewise.
	(finish_global_and_expr_insn): Do not assert that the vinsn
	is connected only to one insn.
	* sel-sched.c (undo_transformations): Also undo when only
	a dependence status has changed, not insn's pattern.
	Update comment.
	(was_target_conflict): New static variable.
	(moveup_rhs): Set it when a target conflict is encountered.
	(moveup_set_rhs): When an expression is changed, record this
	in INSN_TRANSFORMED_INSNS.  Lookup this hashtable before calling
	moveup_rhs.  Use was_target_conflict when recording.

2008-02-28  Andrey Belevantsev  <abel@ispras.ru>

	* sel-sched.c (sel_region_init): Move the removing empty blocks loop 
        to a proper place.  Fix the call to sel_remove_empty_bb.

2008-02-27  Andrey Belevantsev  <abel@ispras.ru>
        Merge from trunk rev. 132164.

2008-02-26  Andrey Belevantsev  <abel@ispras.ru>

	* sel-sched.c (sel_region_init): Iterate through region blocks removing 
	unneeded empty ones.

2008-02-26  Andrey Belevantsev  <abel@ispras.ru>

	Implement an iterator over hard register sets.
	* hard-reg-set.h (struct hard_reg_set_iterator): New.
	(hard_reg_set_iter_init, hard_reg_set_iter_set, 
	hard_reg_set_iter_next): New functions.
	(EXECUTE_IF_SET_IN_HARD_REG_SET): New macro.
	* sel-sched.c (mark_unavailable_hard_regs): Use EXECUTE_IF_SET_IN_HARD_REG_SET.
	(choose_best_reg_1): Likewise.
	
	* sel-sched-ir.c (merge_expr_data): Change a bool parameter join_point_p 
	to insn_t split_point.  When changing a speculative expression, record
	this in a history.
	(merge_expr): Also change a parameter.
	(av_set_union_and_clear): New parameter insn.  Pass it to merge_expr.
	Update all callers.
	(av_set_union_and_live): Likewise.
	* sel-sched-ir.h (_eligible_successor_edge_p): Fix assert.  Update 
	declarations.

2008-02-26  Dmitry Melnik  <dm@ispras.ru>

	Rewrite computing availability sets without recursion.
	* sel-sched.c (compute_av_set_inside_bb, compute_av_set_at_bb_end): New 
	functions that avoid recursion when computing av sets.
	(compute_av_set): Reimplement using them.

	* sel-sched-dump.c (sel_stat_file, sel_stat_output_buf): New 
	static variables.
	(sel_get_stat_filename, sel_get_stat_file): New functions.

2008-02-26  Andrey Belevantsev  <abel@ispras.ru>

	Avoid computing register liveness below original insns.
	* haifa-sched.c (sched_create_recovery_edges): Tidy.
	* sel-sched-ir.c (init_lv_set, free_lv_sets, 
	init_invalid_data_sets): Support creating liveness sets for empty blocks.
	(delete_and_free_basic_block): New function, factored from ... 
	(sel_add_or_remove_bb): ... here.  Use it.
	(sel_create_recovery_block): Do not create unneeded empty basic block.
	(sel_remove_loop_preheader): Use delete_and_free_basic_block instead of 
	plain delete_basic_block.
	* sel-sched-ir.h (get_all_loop_exits, _eligible_successor_edge_p): Assert
	that empty blocks are not met inside current scheduling region.
	* sel-sched.c (propagate_lv_set): Use df_simulate_one_insn_backwards.
	(compute_live_after_bb): Recurse through empty blocks.
	(compute_live_below_insn): Kill.
	(find_used_regs_1): New parameter live_way.  Also check INSN_REG_CLOBBERS
	along a code motion path.  Do not call 	compute_live_below_insn, instead
	find registers whose live ranges we crossed from the saved liveness sets 
	on our way ... 
	(find_used_regs): ... and from registers set in the already scheduled 
	insns of the current group.
	(sel_sched_region_1): Make gcc_assert allow valid liveness sets on 
	empty blocks.

2008-02-26  Andrey Belevantsev  <abel@ispras.ru>

	* sched-int.h (struct deps): New field last_reg_pending_barrier.
	(enum reg_pending_barrier_mode): Move from ...
	* sched-deps.c: ... here.  
	(sched_analyze_insn): Set last_reg_pending_barrier of the context.
	(init_deps): Init last_reg_pending_barrier.
	* sel-sched-ir.c (has_dependence_p): When last_reg_pending_barrier
	is set, mark insn->expr pair as having DEPS_IN_INSN dependency.

2008-02-26  Andrey Belevantsev  <abel@ispras.ru>

	* haifa-sched.c (haifa_init_insn): Extend dependency caches for a new insn.

2008-01-11  Dmitry Melnik  <dm@ispras.ru>

	Speedup find_used_regs by restricting it from visiting same blocks
	on different paths.

	* sel-sched-ir.c (init_expr): New parameter needs_spec_check_p.
	We now store it with the expression instead of computing in place.
	Init EXPR_NEEDS_SPEC_CHECK_P with the param.
	(copy_expr, copy_expr_onside): Pass the new param.
	(merge_expr_data): Merge EXPR_SPEC_DONE_DS.
	(speculate_expr): Init EXPR_NEEDS_SPEC_CHECK_P here.
	(init_global_and_expr_for_insn): Pass the new param.
	(init_simplejump): Ditto.
	* sel-sched-ir.c (struct _expr): New field needs_spec_check_p.
	(EXPR_NEEDS_SPEC_CHECK_P): New access macro.
	* sel-sched.c (current_originators, current_copies): These bitmaps 
	record original instructions scheduled on the current iteration and 
	bookkeeping copies created by them.
	(fur_visited_blocks): This bitmap marks the blocks visited by 
	find_used_regs so we don't visit them afterwards.
	(find_used_regs_1): Do not go past fur_visited_blocks.  Record blocks
	we visit in this bitmap.
	(find_used_regs): Clear fur_visited_blocks here.  Compute whether
	expr needs speculation based upon EXPR_NEEDS_SPEC_CHECK_P.  Do not 
	allow clobbering of ld.[sa] address in case some of the  original 
	operations need a check.
	(sel_region_init): Allocate fur_visited_blocks.
	(sel_region_finish): Free fur_visited_blocks.

2008-01-11  Andrey Belevantsev  <abel@ispras.ru>

	* haifa-sched.c (rtx_vec_t): Move to ... 
	* sched-int.h: ... here.
	* sel-sched-dump.c (dump_insn_array): Rename to 
	dump_insn_vector.  Rewrite for using vector of insns.
	(debug_insn_array): Likewise.
	* sel-sched-dump.h: Export the above functions.
	* sel-sched-ir.c (current_succs): New global variable.
	(init_fences): Use FOR_EACH_SUCC* instead of cfg_succs*.
	(get_seqno_of_a_pred): Likewise.
	(insert_in_history_vect): Properly handle the situation of
	merging different speculative statuses.
	(av_set_split_usefulness): Use FOR_EACH_RHS.
	(succs_info_pool): New variable.
	(cfg_succs_n, cfg_succs_1, cfg_succs_2, cfg_succs, 
	cfg_succs_other, cfg_succ_1, cfg_succ, overall_prob_of_succs): Kill.
	(alloc_succs_info, free_succs_info, compute_succs_info): New.
	(alloc_sched_pools, free_sched_pools): Move and rename from ...

	* sel-sched-ir.h (init_sched_pools, free_sched_pools) ... here.
	Update all callers.
	(MAX_WS): Move from sel-sched.c.
	(struct succs_info): New.
	(succ_iterator): New fields flags, current_flags.
	(_succ_iter_start, _succ_iter_cond, 
	_eligible_successor_edge_p): Use them.  

	* sel-sched.c (compute_av_set): Use *_succs_info functions instead of
	cfg_succs*.  Stop when maximal lookahead is reached even 
	on a bb header.
	(fill_insns): Use FOR_EACH_SUCC* instead of cfg_succs*.
	(sel_region_finish): Likewise.

2008-01-11  Andrey Belevantsev  <abel@ispras.ru>
	    Dmitry Zhurikhin  <zhur@ispras.ru>

	* config/ia64/ia64.opt (msched-fp-mem-deps-zero-cost): Init to 0.
	(msel-sched-data-spec): Init to 1.
	* params.def (PARAM_SELSCHED_MAX_LOOKAHEAD): Default to 40.

	* sel-sched-ir.c (sel_gen_insn_from_rtx_after): Add vinsn parameter.
	(merge_expr_data): Properly merge speculative expressions with 
	different speculation types.
	(speculate_expr): Move from sel-sched.c.
	(set_insn_init): Return the expression we've been initializing.
	Set speculative status to be as weak as possible.
	* sel-sched-ir.h (speculate_expr): Export.
	* sel-sched.c (create_speculation_check): Tidy.
	(undo_transformations): Add comment.
	(moveup_rhs): Avoid moving control flow insns through joins.
	(gen_insn_from_expr_after): Rename to emit_insn_from_expr_after.
	Tidy.
	(generate_bookkeeping_insn, fill_insns): Use it.  Tidy.
	(update_and_record_unavailable_insns): Fix assert.
	(init_seqno_1, sel_region_init): Tidy.

2008-01-11  Dmitry Melnik  <dm@ispras.ru>
        
	Fix different scheduler issues that prevent it from working 
	correctly before reload.
    
	* common.opt (fsel-insn-range): New flag for debugging.
	* ia64.c (get_mode_no_for_insn): Change the condition that prevents use
	of special hardware registers so it can now handle pseudos.
	(get_spec_check_gen_function): Assert so that we won't reference array 
	with a negative index.
	(ia64_gen_spec_check): Ditto. 
	* haifa-sched.c (after_recovery, adding_bb_to_current_region_p): 
	New variables to handle correct insertion of the recovery code.
	(init_before_recovery): Add new BEFORE_RECOVERY_PTR parameter.
	(sched_extend_bb): Add the prototype.
	(haifa_sched_init): Init new variable.
	(init_before_recovery): Add new param.  Fix the handling of the case
	when we insert a recovery code before the EXIT which has a predecessor
	with a fallthrough edge to it.
	(sched_create_recovery_block): Pass new parameter.
	(create_check_block_twin): Change parameter.  
	(haifa_init_insn): Do region specific insn initialization only if
	the insn was added to the current region.
	* opts.c (common_handle_option): Handle the fsel_insn_range option.
	* rtl.h (sel_sched_fix_param): Declare.
	* sched-deps.c (extend_deps_reg_info): Make sure REG_LAST vector is
	extended correctly before reload.
	(sched_analyze_reg): Permit move insn with pseudo even if it crosses
	call.
	(free_deps): Zero pointers explicitly after free.
	* sched-int.h (sched_create_recovery_block): Add new parameter.
	* sel-sched-dump.c (flag_insn_range): Insn range to perform selective
	scheduling.
	(block_for_insn, bb_av_set): New debug functions.
	(in_range_p_1, in_range_p): Parses expression that determines insn 
	range for selective scheduling.	
	(sel_sched_fix_param): Handle fsel-insn-range param in scheduler.
	(av_set_contains_insn_with_uid, av_set_for_bb_n): Debug functions.
	* sel-sched-dump.h (flag_insn_range, block_for_insn, bb_av_set, 
	in_range_p, av_set_contains_insn_with_uid, av_set_for_bb_n):
	Declare.        
	* sel-sched-ir.c (init_fences): Free unneeded successors.
	(sel_hash_rtx): Handle PRE_INC etc. as it's done in original hash_rtx.
	(sel_gen_insn_from_rtx_after): Add the assert that target reg is 
	available.  Postpone the simplification of the insns until the end of 
	the scheduling.
	(av_set_add): Assert that we never insert NOPs into the av_sets.
	(merge_with_other_exprs): Reset EXPR_TARGET_AVAILABLE to -1 if two
	exprs have different target availability values.
	(av_set_leave_one): Replace with av_set_leave_one_nonspec.  This 
	function keeps all speculative insns, leaving only one non-speculative.
	(init_first_time_insn_data): Do not init dependences on NOPs.
	(sel_remove_insn): Do not clear data sets on the AFTER_RECOVERY basic
	block.
	(finish_insns): Free dependence contexts that may have left from 
	insns that were removed during the scheduling.
	(sel_rtl_insn_added): Init new insns only if they're added to the
	current region.
	(copy_lv_set_from): New function.
	(is_ineligible_successor): Move to sel-sched.c.
	(sel_init_only_bb): Add call to extend_regions.
	(sel_create_recovery_block): Copy LV_SET to BEFORE_RECOVERY bb.
	* sel-sched-ir.h (adding_bb_to_current_region_p, after_recovery, 
	av_set_leave_one_nonspec): Declare.
	(copy_insn_out_of_stream, copy_insn_and_insert_before, 
	is_ineligible_successor): Remove unused declarations.
	(_succ_iter_cond): Handle AFTER_RECOVERY the same way as EXIT.
	* sel-sched.c (scheduled_something_on_previous_fence): New variable.
	(vec_temp_moveop_nops): New vector to store temporary NOPs inserted 
	in move_op to prevent removal of empty BBs.
	(substitute_reg_in_rhs): Do not allow clobbering the address register 
	of speculative insns.
	(replace_in_vinsn_using_bitmask_1, replace_in_rtx_using_bitmask,
	un_substitute): Remove.
	(verify_target_availability): Assert target availability if only
	something was scheduled on the previous fence.
	(has_spec_dependence_p, un_speculate): Remove.
	(undo_transformations): Use history to undo transformations.
	(is_ineligible_successor): Move the function here.
	(compute_av_set): Free SUCCS that are no longer needed.
	(find_used_regs_1): Use av_set_leave_one_nonspec.
	(expr_blocked_by_bookkeeping, vec_bk_blocked_exprs_clear): 
	New functions.
	(fill_vec_av_set): Recompute target availability or remove expr if the 
	it's availability was invalidated by the insertion of bookkeeping 
	earlier.
	(remove_temp_moveop_nops): New function.  Removes the temporary NOPs
	that might have been created during move_op.
	(fill_insns): Handle only insns that satisfy the FLAG_INSN_RANGE
	expression.  Call remove_temp_moveop_nops after the move_op.
	Init EXPR_TARGET_AVAILABLE with TRUE by default. 
	Init scheduled_something_on_previous_fence.
	(update_and_record_unavailable_insns): New function.  Updates data sets 
	for the bookkeeping block and records those expressions that become 
	no longer available after inserting the bookkeeping.
	(move_op): Use av_set_leave_one_nonspec.  Insert NOP in the bb if it's
	becoming empty so it won't be removed and we'll be able to insert 
	bookkeeping in it when coming later through another branch.  Call
	update_and_record_unavailable_insns on the bookkeeping block to
	record exprs that no longer can be scheduled above it.
	(simplify_changed_insns): New function.  Handles insn simplification 
        after the scheduling have completed.
	(sel_region_finish): Use simplify_changed_insns.  Free vector
	vec_bk_blocked_exprs.
	(sel_sched_region_2): Init scheduled_something_on_previous_fence and
	vec_bk_blocked_exprs.
	(sel_global_init): Init after_recovery.

2008-01-10  Andrey Belevantsev  <abel@ispras.ru>

	Properly fixup a merge with trunk rev. 130104.   

2007-12-28  Andrey Belevantsev  <abel@ispras.ru>

	* config/ia64/ia64.c (ia64_speculate_insn): Use ds_get_speculation_types
	when determining whether we need to change the pattern.
	* sched-int.h (LUID_BY_UID): New accessor macro.
	* sched-rgn.c (compute_block_dependences): Do not call add_branch_dependences
	for selective scheduling.
	(free_rgn_deps): Tidy.

	* sel-sched-ir.c (vinsn_attach, vinsn_detach): Export.
	(find_in_hash_vect{,_1}): Rename to find_in_history_vect{,_1}.  
	Rewrite to use a history vector.
	(insert_in_hash_vect): Likewise.  Rename to insert_in_history_vect.
	(init_expr): Change CHANGED_ON parameter to be a history vector.
	Update all callers.
	(merge_expr_data): Update for history vectors.
	(clear_expr): Likewise.
	(free_first_time_insn_data): Handle INSN_ORIGINATORS.
	(is_ineligible_successor): Do not check the path for back edges.
	(bb_ends_ebb_p, clear_outdated_rtx_info): Tidy.

	* sel-sched-ir.h (enum local_trans_type): New.
	(struct expr_history_def_1, expr_history_def): New.
	(struct _expr): Rename changed_on_insns vector to history_of_changes.
	Make it of expr_history_def type.
	(EXPR_CHANGED_ON_INSNS): Rename to EXPR_HISTORY_OF_CHANGES.
	(struct _sel_insn_data): Fix comments.  New field originators.
	(SID_BY_UID, INSN_ORIGINATORS, INSN_ORIGINATORS_BY_UID): New accessor 
	macros.

	* sel-sched.c (un_substitute): Mark as unused.
	(apply_spec_to_expr): Inline to ... 
	(speculate_expr): ... here.  Change return value to int. 
	Do not copy a pattern when no changes were made.
	(un_speculate): Mark as unused.
	(undo_transformations): Perform unspeculation and unsubstitution
	by looking into the history vector.
	(moveup_rhs): Add PTRANS_TYPE parameter, adjust all callers.  Return 
	the type of transformation being done.  Assert that we don't do 
	speculation and substitution on the same insn.
	(moveup_set_rhs): Record the performed transformation into the history
	vector of an expression.
	(current_copies, current_originators): New static variables.
	(generate_bookkeeping_insn): Record the generated insn in 
	current_copies.  Always set SCHED_TIMES of a bookkeeping insn to 0.
	(fill_insns): Clear current_* bitmaps before move_op.
	When some bookkeeping insns were generated, allocate INSN_ORIGINATORS
	for them and set it to the copy of current_originators.
	(move_op): Add dest parameter.  Pass it explicitly instead of 
	calculating from original operations.  When an original insn was 
	found, adjust current_copies and current_originators accordingly.
	(sel_region_init): Initialize current_* bitmaps.
	(sel_region_finish): Free them.

2007-12-27  Andrey Belevantsev  <abel@ispras.ru>

	Merge with trunk r.130104.

	* sel-sched-dump.c (sel_print_insn): Constify the first parameter.
	* sel-sched-dump.h (sel_print_insn): Likewise.
	* sel-sched-ir.c (sel_rtx_equal_p): Fix formatting.
	(av_set_split_usefulness): Avoid division by zero.
	* sel-sched.c (speculate_expr): Avoid combined data and control
	speculation when pipelining.
	(fill_vec_av_set): Do not try to rename data speculative insns.

2007-12-27  Andrey Belevantsev  <abel@ispras.ru>

        * sel-sched.c (sel_rank_for_schedule): Tidy.
        (fill_vec_av_set): Use VEC_unordered_remove instead of ordered.
        Properly calculate is_orig_reg_p.  Add the final qsort call
        after filtering out the av set.
        * sched-rgn.c (sched_rgn_init): With selective scheduling,
        always try to compute ebb regions instead of single block reagions.

2007-12-27  Andrey Belevantsev  <abel@ispras.ru>

        Cache that an expression can be moved up only as RHS.

	* sel-sched.c (enum MOVEUP_RHS_CODE): New value MOVEUP_RHS_AS_RHS.
	(moveup_rhs): Return it when an expression can be moved up as
        a RHS only.  Return MOVEUP_RHS_CHANGED only when expression
        was really changed.
	(moveup_set_rhs): Use fourth bit in INSN_ANALYZED_DEPS /
        INSN_FOUND_DEPS bitmaps for caching MOVEUP_RHS_AS_RHS results.
        Set EXPR_TARGET_AVAILABLE to false when moveup_rhs returns
	MOVEUP_RHS_AS_RHS.  Assert that when MOVEUP_RHS_CHANGED,
	expression's UID has been really changed.
	(fill_vec_av_set): Properly handle max_insns_to_rename.
	(sel_global_init): Use setup_sched_dumps.

	* sel-sched-dump.c (setup_sched_dump_to_stderr): Rename to
        setup_sched_dumps.  When sched_verbose_param >= 10, print to
        stderr. 
	* sel-sched-dump.h (setup_sched_dumps): Export. 
        
2007-12-26  Andrey Belevantsev  <abel@ispras.ru>

	Compute availability of target registers on the fly.
	Limit renaming to the best instructions.
	
	* sel-sched.c (max_insns_to_rename): New variable.
	(struct reg_rename): New structure that incapsulates the data
	about hard registers available for renaming.
	(expr_dest_reg, rhs_dest_regno): Kill.
	(vinsn_writes_one_of_regs_p): Also check VINSN_REG_CLOBBERS.
	(mark_unavailable_hard_regs): Use struct reg_rename instead of
	separate hard reg sets.
	(choose_best_reg_1): Ditto.  Also check all hard_regno_nregs
	registers, not only the first one.
	(choose_best_reg, choose_best_pseudo_reg): Ditto.
	(verify_target_availability): New.
	(find_used_regs): Use it for checking that EXPR_TARGET_AVAILABLE
	bit is consistent with find_used_regs_info.  Also check for 
	VINSN_REG_CLOBBERS.  Use struct reg_rename.
	(apply_spec_to_expr): Properly compute EXPR_TARGET_AVAILABLE
	for speculative insns.
	(moveup_rhs): Fix formatting.  Mark the target register of separate
	instructions having dependencies in LHS as unavailable.
	(moveup_set_rhs): Use merge_with_other_exprs when an expression 
	was changed.
	(compute_av_set): Add comment.  Compute other successors and 
	calculate whether target registers of expressions are available.
	Use av_set_union_and_live and mark_unavailable_targets.
	(propagate_lv_set): Handle INSN_REG_CLOBBERS too.
	(compute_live): Export.
	(find_used_regs_1): Use struct reg_rename.  Handle INSN_REG_CLOBBERS.
	(find_used_regs): Ditto.
	(fill_vec_av_set): Calculate statistics about target availability
	of expressions.  Sort the vector before filtering out expressions.
	Use target_available information for all expressions.  Try to rename
	only max_insns_to_rename expressions.
	(find_best_expr): Record whether an instruction was renamed.  
	(generate_bookkeeping_insn, remove_insns_that_need_bookkeeping): Tidy.
	(fill_insns): Tidy.  Use expr_dest_regno.  Set target availability
	flag for the newly emitted insn to true.
	(sel_global_init): Set max_insns_to_rename.
	* sel-sched-ir.c (vinsn_delete): Also handle VINSN_REG_CLOBBERS.
	(init_expr): Add target_available, was_renamed parameters.  
	Update all callers.
	(merge_expr_data): New parameter JOIN_POINT_P.  Compute target 
	availability also using this parameter.  Handle EXPR_WAS_RENAMED.
	(merge_expr): Ditto.  Properly change vinsns of speculative exprs.
	(set_unavailable_target_for_expr, expr_dest_reg, expr_dest_regno,
	mark_unavailable_targets, av_set_add_nocopy, av_set_lookup_and_remove,
	merge_with_other_exprs, av_set_union_and_live): New.
	(av_set_lookup_other_equiv_rhs): New parameter laterp.
	(deps_init_id_start_insn, deps_init_id_note_reg_clobber): Handle
	IDATA_REG_CLOBBERS.
	(cfg_succs_other): New.
	(sel_split_edge): New variable other_bb.  Assert that there is no more
	than two blocks added during splitting.  Put the correct lv set on the
	other bb.
	* sel-sched-ir.h (struct _expr): New fields target_available, 
	was_renamed.
	(EXPR_TARGET_AVAILABLE, EXPR_WAS_RENAMED): New accessor macros.
	(_list_remove_nofree, _list_iter_remove_nofree): New.
	(struct idata_def): New field reg_clobbers.
	(IDATA_REG_CLOBBERS, VINSN_REG_CLOBBERS, INSN_REG_CLOBBERS): New 
	accessor macros.
	(cfg_succs_other, av_set_union_and_live, merge_with_other_exprs, 
	expr_dest_regno, expr_dest_reg. max_insns_to_rename): Export.
	* sel-sched-dump.c (dump_expr_1): Handle EXPR_TARGET_AVAILABLE.
	* sched-rgn.h (struct region): Kill has_renaming_p, was_pipelined_p,
	needs_global_live_update fields.  Kill all uses.
	(RGN_HAS_RENAMING_P, RGN_WAS_PIPELINED_P, 
	RGN_NEEDS_GLOBAL_LIVE_UPDATE): Kill accessor macros.  Kill all uses.
	* params.def (PARAM_SELSCHED_INSNS_TO_RENAME): New.

2007-12-26  Dmitry Zhurikhin  <zhur@ispras.ru>

	* haifa-sched.c (sched_init): Add initialization of new spec_info 
        field: control_weakness_cutoff.
	(try_ready): Change weakness_cutoff for data_weakness_cutoff.
	* sel-sched.c (find_best_reg_for_rhs): New parameter - pointer 
	to bool, showing if best reg for rhs is an original reg.
	Update all callers.
	(moveup_set_rhs): Add computation of usefullness of rhses in av sets. 
	(compute_av_set): Same.
	(end_of_loop_p): New.
	(can_overcome_dep_p): Change weakness_cutoff for data_weakness_cutoff. 
	(process_spec_exprs): Same. 
	(check_stalling_p): New.
	(fill_vec_av_set): Remove from av set at the end of the loop insns 
	that will always cause stall at the beginning of 
	the next iteration if pipelined.
	(generate_bookkeeping_insn): Change return from void to basic_block
        where bookkeeping has been generated.
	Also add correction of some av sets.
	(fill_insns): When creating new floating bb header move data sets from
	the new basic block created above back to the old one.
	(move_op): Always assert that all bb headers that move_op passes has
        valid data sets.  Also correct data sets for bookkeeping
        block and remove unneeded jumps created by bookkeeping.
	(split_edges_incoming_to_rgn): Remove.
	(sel_region_init): Correctly initialize MARK_LOOP_FOR_PIPELINING.
	Also do not split edges coming into region, because
        generate_bookkeeping_code can correctly handle it.
	(sel_sched_region_1): Add cleanup of preheader block of pipelined loop
        if it is empty after pipelining.
	(sel_global_finish): Rearrange initialization routines so that if we
        cannot pipeline loop preheaders are not created.
	* sel-sched-ir.c (preheader_removed): New variable.
	(merge_fences): New.
	(new_fences_add): Use merge_fences. 
	(init_expr): Add handling of new expr fields: usefullness and 
        orig_sched_cycle.
	(copy_expr): Same.
	(merge_expr_data): Same. 
	(merge_expr): Same.
	(init_global_and_expr_for_insn): Same.
	(init_insn): Same.
	(av_set_split_usefulness): New.
	(free_lv_sets): Assert that empty basic blocks have empty lv_sets.
	(free_av_set): Make non-static.
	(exchange_av_sets): Same. 
	(copy_data_sets): New.
	(cfg_succs_2): New.
	(cfg_succs): Add computation of probabilities of succs.
	(overall_prob_of_succs): New.
	(sel_num_cfg_preds_gt_1): Remove wrong assert. 
	(jump_destination): New.
	(jump_to_back_edge_p): New.
	(path_contains_back_edge_p): New.
	(path_contains_switch_of_sched_times_p): New.
	(is_ineligible_successor): Consider insns scheduled on other fences as
        ineligible successors even if pipelining. 
	(sel_remove_empty_bb): Assert removing only empty bbs and after
        removing empty block remove unused jump in prev_bb if it exists.
	(considered_for_pipelining_p): Do initialization of pipelining of 
        outer loops only if pipelining current region.
	(sel_find_rgns): Move pipeline_outer_loops_init here from 
         sel_global_init.
	(sel_is_loop_preheader): Return false if preheader was removed.
	(jump_leads_only_to_bb_p): New.
	(sel_remove_loop_preheader): Do not create empty regions from empty
        preheader block - just remove it. 
	* sel-sched-ir.h (struct _expr): New fields usefullness and 
	orig_sched_cycle.  Also access macros for them. 
	* sel-sched-dump.c (dump_expr_1): Add dump for expr_usefullness.
	* passes.c (init_optimization_passes): Move pass_compute_alignments 
	below of pass_machine_reorg.
	* config/ia64/ia64.opt (mstop-bit-before-check): New flag.
	* config/ia64/ia64.c (group_barrier_needed): Use new flag.

2007-12-26  Alexander Monakov  <amonakov@ispras.ru>

        * sel-sched.c (create_speculation_check): Always create a recovery
        block when original instruction was speculative.  Make check
        instruction non-speculative irregardless of which speculation types it
        checks.  Use attributes of original instruction when creating a load
        in the recovery block.
        (selective_scheduling_run): Do not try to print liveness information
        in before-init and after-finish dumps.
        * config/ia64/ia64.opt (msched-max-memory-insns,
        msched-max-memory-insns-hard-limit): New target flags.
        * config/ia64/ia64.c (mem_ops_in_group, current_cycle): New variables.
        (ia64_sched_init): Initialize them.
        (is_load_p, record_memory_reference): New functions.
        (ia64_dfa_sched_reorder): Lower priority of loads when limit is
        reached.
        (ia64_variable_issue): Note if a load or a store is issued.
        (ia64_first_cycle_multipass_dfa_lookahead_guard_spec): Require a cycle
        advance if maximal number of loads or stores was issued on current cycle.
        (ia64_dfa_new_cycle): Update current_cycle and mem_ops_in_group.
        (struct _ia64_sched_context): New members.
        (ia64_init_sched_context): Initialize them.
        (ia64_set_sched_context): Copy them.
        * config/ia64/itanium2.md: Remove strange bypass.

2007-10-02  Andrey Belevantsev  <abel@ispras.ru>

	* sel-sched-ir.c (sched_lists_pool): New global variable.
	* sel-sched-ir.h (sched_lists_pool): Export.
	(init_sched_pools, free_sched_pools): New inline functions.
	(_list_add): Allocate memory from pool.
	(_list_remove): Return memory to pool.
	* sel-sched.c (stage): Kill unused variable.
	(sel_global_init): Call init_sched_pools.
	(sel_global_finish): Call free_sched_pools.

2007-10-02  Andrey Belevantsev  <abel@ispras.ru>

	Implement readonly dependence contexts.
	* sched-int.h (struct deps): New bitfield readonly.
	* sched-deps.c (add_dependence_list_and_free): Add deps parameter.
	Update all users.  Do not free dependence list when 
	deps context is readonly.
	(flush_pending_lists): Likewise.
	(add_insn_mem_dependence): Assert that deps context is not readonly.
	(deps_start_bb): Likewise.
	(extend_deps_reg_info): In a readonly context, do not extend 
	reg arrays.
	(sched_analyze_reg): Do not allocate sched_before_next_call in a 
	readonly context.
	(sched_analyze_1): Do not add memory dependence to a readonly context.
	(sched_analyze_2): Likewise.
	(sched_analyze_insn): Do not modify reg_last array of 
	a readonly context.  Likewise for reg_conditional_* regsets. 
	Do not handle post-call groups. 
	(deps_analyze_insn): Do not flush lists on jumps for 
	a readonly context.  Also, do not remember last function call;
	do not process libcalls.
	(init_deps_global, finish_deps_global): Kill #if 0'd code.
	* sel-sched-ir.h (struct _sel_insn_data): New field deps_context.
	(INSN_DEPS_CONTEXT, SUCC_ITER_EDGE): New accessor macros.
	(fallthru_bb_of_jump): Export.
	(inner_loop_header_p): Mark as inline.
	* sel-sched.c (moveup_rhs): Reformat conditions for moving up 
	a jump.
	(generate_bookkeeping_insn): Kill unneeded code.
	(move_cond_jump): Set EXPR_ORIG_BB_INDEX when moving an insn.
	(move_op): Tidy comments.  When merging expression data, do not 
	take into account bookkeeping insns.
	* sel-sched-ir.c (first_time_insn_init, 
	init_first_time_insn_data, free_first_time_insn_data): New.
	(init_global_and_expr_for_insn, finish_global_and_expr_insn,
	init_insn, init_simplejump): Use them.
	(fallthru_bb_of_jump): New.
	(sel_is_loop_preheader_p): Fix a merge thinko.  
	(has_dependence_p, tick_check_p): Tidy up.  Use readonly contexts
	when analyzing.

2007-09-27  Dmitry Zhurikhin  <zhur@ispras.ru>
	
	Patch to allow moving conditional jumps through some instructions.

	* sel-sched.c (moveup_rhs): Allow jumps to go through instructions
	if dependencies allow.
	(sel_rank_for_schedule): Prioritize jumps over other instructions.
	(fill_vec_av_set): Added more debug.
	(generate_bookkeeping_insn): Reset sched times on
	bookkeeping instructions.
	(move_cond_jump): New function.
	(fill_insns): Now handles scheduling of jumps.
	(sel_region_init): Added check to stop scheduling empty regions early.
	(sel_region_finish): Added some dump.
	(sel_sched_region_1): Cleanup.
	(sel_sched_region): Same.

	* sel-sched-ir.c (sel_split_edge): Remove now wrong assert.
	(bookkeeping_can_be_created_if_moved_through_p): Remove wrong 
	early check.

2007-09-26  Andrey Belevantsev  <abel@ispras.ru>
        Fix a merge glitch with ChangeLog.sel-sched.        

2007-09-26  Andrey Belevantsev  <abel@ispras.ru>

	Merge with trunk rev. 127475.
	
	* recog.c (validate_replace_rtx_1): New parameter simplify.
	Default it to true.  Update all uses.  Factor out simplifying
	code to ...
	(simplify_while_replacing): ... this new function.
	(validate_replace_rtx_part_nosimplify): New.
	
	* sel-sched-dump.c (sel_dump_cfg_2): Use df_get_live_*
	instead of global_live_at_*.
	
	* sel-sched-ir.c (sel_extend_global_bb_info,
	extend_region_bb_info, extend_bb_info, sel_finish_global_bb_info,
	finish_region_bb_info): Move to appropriate place.
	Regroup forward static declarations.
	(sel_gen_insn_from_expr_after): Simplify insn here.
	(sel_mark_hard_insn): New.
	(has_dependence_p): Initialize pro and dc fields.
	(init_lv_set): Use df sets.
	(recompute_rev_top_order): Update to new interface of
	post_order_compute.
	(sel_add_or_remove_bb): Do not use glat.
	(sel_split_block): Call change_loops_latches after
	sel_add_or_remove_bb.
	(sched_sel_haifa_sched_info): Initialize flags.
	(sel_set_sched_flags): New.
	(sel_setup_common_sched_info): Use it.  Kill outdated code.
	(sel_is_loop_preheader_p): Tidy.  Kill #if 0'd code.

	* sel-sched-ir.h (sel_set_sched_flags): Export.
	
	* sel-sched.c (substitute_reg_in_rhs): Do not simplify replaced
	rtx immediately using validate_replace_rtx_part_nosimplify.
	(init_hard_regs_data, choose_best_pseudo_reg, 
	gen_insn_from_expr_after): Use df sets.  
	(generate_bookkeeping_insn): Tidy.  Fix SCHED_TIMES field for 
	preheader insns.  
	(fill_insns): Rewind fence boundaries in case new bookkeeping code
	is created. 
	(add_region_head): Kill glat handling code.  
	(sel_region_init): Setup sched infos according to new flags. 
	(sel_global_init): Kill no_new_pseudos code.  
	Update setup of sched infos.
	(sel_global_finish): Likewise.  
	(handle_sel_sched): Update a call to split_all_insns.

2007-08-15  Alexander Monakov  <amonakov@ispras.ru>
	    Dmitry Zhurikhin  <zhur@ispras.ru>
	
	* gcc/common.opt (fsel-sched-reset-tc-on-join): New option.
	* gcc/config/ia64/ia64.c (group_barrier_needed): Add heuristic.
	(struct bundle_state): New field.
	(issue_nops_and_insn): Initialize it.
	(insert_bundle_state): Minimize mid-bundle stop bits.
	(bundling): Print number of mid-bundle stop bits.  Minimize mid-bundle
	stop bits.  Check correct calculation of mid-bundle stop bits.
	* gcc/haifa-sched.c (schedule_block): Call sched_init_luids to reset
	scheduler datastructure before target generates new insns.
	* gcc/sched-deps.c (sched_has_condition_p): New function.  Adjust
	users of sched_get_condition to use it instead.
	(conditions_mutex_p): Add arguments indicating which conditions are
	reversed.  Use them.
	(sched_get_condition_with_rev): Rename from sched_get_condition.  Add
	argument to indicate whether returned condition is reversed.  Do not
	generate new rtx when condition should be reversed; indicate it by
	setting new argument instead.
	(sched_insns_mutex_p): Use sched_get_condition_with_rev.
	(deps_analyze_insn): Do not flush pending write lists on speculation
	checks.  Do not make speculation check a scheduling barrier for memory
	references.
	* gcc/sched-int.h (sel_insn_is_speculation_check): Declare.
	* gcc/sched-rgn.c (sched_rgn_init): Do not calculate and free
	dominance info for selective scheduler here.
	* gcc/sel-sched-dump.c (dump_expr_1): Print new field.
	* gcc/sel-sched-dump.h (enum dump_expr): New member.
	* gcc/sel-sched-ir.c (init_expr): New arguments.  Initialize new
	fields of expr_t.
	(copy_expr): Update to pass new arguments to init_expr.
	(copy_expr_onside): Ditto.
	(init_global_and_expr_for_insn): Ditto.
	(init_simplejump): Ditto.
	(merge_expr_data): Calculate new fields of expr_t.
	(sel_insn_is_speculation_check): New function.
	(get_seqno_of_a_pred): Remove wrong assertion.
	(init_insn): Calculate new field of expr_t.
	(sel_split_block): Ditto.
	(pipeline_outer_loops_finish): Do not free dominance info here.
	* gcc/sel-sched-ir.h (struct _expr): New fields.
	(EXPR_ORIG_BB_INDEX): New accessor macro.
	(EXPR_WAS_SUBSTITUTED): Ditto.
	* gcc/sel-sched.c (stat_bookkeeping_copies,
	stat_insns_needed_bookkeeping, stat_renamed_scheduled,
	stat_substitutions_total): New global variables.
	(in_fallthru_bb_p): New function.
	(extract_new_fences_from): Use it. 
	(moveup_rhs_inside_insn_group): Record whether expr was substituted.
	(moveup_rhs): Ditto.  Do not disable motion of exprs that might need
	bookkeeping.
	(CANT_MOVE_TRAPPING): Allow moving trapping insns through speculation
	checks.
	(sel_rank_for_schedule): New heuristic.
	(generate_bookkeeping_insn): Avoid creating new basic block.
	(max_uid_before_move_op): New global variable.
	(remove_insns_that_need_bookkeeping): New function.
	(fill_insns): Use it.  Adjust statistical counters.
	(move_op): Adjust statistical counter.
	(sel_region_finish): Cleanup.
	(sel_sched_region_2): Initialize statistical counters, print them.
	(sel_global_init): Always calculate dominance info.
	(sel_global_finish): Always free calculate dominance info.

2007-06-16  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

	* fwprop.c: Fix merge problem.
	* df-problems.c: Ditto.
	* df-scan.c: Ditto.

2007-06-16  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

	Merge revisions 121417-125587 from trunk.

2007-06-14  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

	Initialized merge tracking via "svnmerge" with revisions "1-121416"
	from svn+ssh://gcc.gnu.org/svn/gcc/trunk.

2007-06-14  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

	Extend support for ia64 speculation to generate branchy checks.
	Move data sets to per basic block data structures.
	
	* sched-ebb.c (begin_schedule_ready): Update.
	
	* rtlanal.c (may_trap_p_1): Fix bug.
	
	* cfghooks.c (get_cfg_hooks, set_cfg_hooks): New functions.
	
	* cfghooks.h (get_cfg_hooks, set_cfg_hooks): Declare.
	
	* haifa-sched.c (restore_other_notes): Fix bug.
	(haifa_sched_init): Initialize hooks.
	(haifa_sched_finish): Finalize hooks.
	(init_before_recovery): Update.
	(create_recovery_block): Make global.  Rename to
	sched_create_recovery_block ().  Update.
	(sched_create_recovery_edges): Separate cfg manipulation code from
	create_check_block_twin () into new function.
	(create_check_block_twin): Update.
	(sched_speculate_insn): Handle be-in speculations.
	(insn_luid): New debug function.
	(sched_init_only_bb): New hook.
	(haifa_init_only_bb): Make static.
	(sched_split_block): New hook.
	(sched_split_block_1): New function.
	(sched_create_empty_bb): New hook.
	(sched_create_empty_bb_1): New function.
	
	* sel-sched.c (old_create_basic_block, old_delete_basic_block): Remove.
	(create_insn_rtx_with_rhs, replace_src_with_reg_ok_p): Update.
	(replace_dest_with_reg_ok_p, create_insn_rtx_with_lhs): Ditto.
	(create_speculation_check_insn_rtx): Rename to
	create_speculation_check ().  Rewrite to handle branchy speculation
	checks.
	(apply_spec_to_expr, un_speculate, undo_transformations): Update.
	(compute_av_set, compute_lv_set, update_data_sets): Move data sets
	to per basic block data structures.
	(find_used_regs_1, gen_insn_from_expr_after): Update.
	(generate_bookkeeping_insn, fill_insns, move_op): Ditto.
	(old_rtl_hooks): Remove.
	(sel_region_init): Move initialization of hooks to
	sel_register_rtl_hooks () and sel_register_cfg_hooks ().  Update.
	(sel_region_finish): Make sure lv sets at region entries are valid.
	Update.
	(sel_sched_region_1, sel_global_init, sel_global_finish): Update.
	
	* sel-sched-ir.c (sel_global_bb_info, sel_region_bb_info): New vector
	variables.
	(sel_bb_info): Remove.
	(sel_extend_global_bb_info): New function.
	(extend_region_bb_info, extend_bb_info): New static functions.
	(sel_finish_global_bb_info): New function.
	(finish_region_bb_info): New static functions.
	(init_fences, new_fences_add): Update.
	(nop_vinsn): New static variable.
	(get_nop_from_pool, return_nop_to_pool, free_nop_pool): Update.
	(sel_rtx_equal_p): New static function.
	(vinsn_equal_p): Use it.
	(sel_gen_insn_from_rtx_after): Update.
	(init_insn_force_unique_p): New static variable.
	(sel_gen_recovery_insn_from_rtx_after): New function.
	(vinsns_correlate_as_rhses_p, merge_expr_data, merge_expr): Update.
	(sel_cfg_note_p): Remove.
	(init_global_and_expr_for_bb): New static function.
	(init_global_and_expr_for_insn, sel_init_global_and_expr): Update.
	(finish_global_and_expr_insn_1): Remove.
	(finish_global_and_expr_for_bb): New static function.
	(finish_global_and_expr_insn_2): Rename to
	finish_global_and_expr_insn ().  Update.
	(sel_finish_global_and_expr): Update.
	(has_dependence_note_reg_use): Handle be-in speculations.
	(bookkeeping_can_be_created_if_moved_through): Update.
	(insn_is_the_only_one_in_bb_p): New static function.
	(sched_sel_remove_insn): Rename to sel_remove_insn ().  Update.
	(transfer_data_sets): Remove.
	(get_seqno_of_a_pred): Update.
	(finish_insn): Rename to finish_insns ().
	(sel_rtl_insn_added): Update.
	(orig_rtl_hooks, sel_rtl_hooks): New static variable.
	(sel_register_rtl_hooks, sel_unregister_rtl_hooks): New functions.
	(empty_vinsn): Remove.
	(insn_init_create_new_vinsn_p): New static variable.
	(set_insn_init, init_insn, init_simplejump): Update.
	(insn_init_move_lv_set_if_bb_header): Remove.
	(sel_init_new_insns): Update.
	(init_lv_set_for_insn): Rename to init_lv_set ().  Update.
	(init_lv_sets): Update.
	(release_lv_set_for_insn): Rename to free_lv_set ().  Update.
	(free_lv_sets): Update.
	(init_invalid_lv_set, init_invalid_av_set, init_invalid_data_sets): New
	static functions.
	(free_av_set, free_data_sets, exchange_lv_sets, exchange_av_sets):
	Ditto.
	(exchange_data_sets): Ditto.
	(get_av_set, get_av_level): New functions.
	(sel_bb_header_1): Remove.
	(sel_bb_header): Rename to sel_bb_head ().  Update.
	(sel_bb_header_p): Rename to sel_bb_head_p ().  Update.
	(sel_bb_empty_p_1): Remove.
	(sel_bb_empty_p, sel_bb_end): Update.
	(extend_bb): Remove.
	(sel_init_bbs): Update.
	(num_preds_gt_1): Rename to sel_num_cfg_preds_gt_1 ().  Update.
	(rtx_vec_t): New typedef.
	(bb_note_pool): New vector variable.
	(return_bb_to_pool, get_bb_note_from_pool, free_bb_note_pool): New
	static functions.
	(sel_add_or_remove_bb): Make static.  Update.
	(move_bb_info): New static function.
	(sel_remove_empty_bb): Update.
	(remove_empty_bb): New static function.
	(orig_cfg_hooks): New static variable.
	(sel_init_only_bb): New static function.
	(sel_split_block): Make static.  Update.
	(sel_split_edge): Update.
	(sel_create_empty_bb, sel_create_recovery_block): New static function.
	(sel_redirect_edge_force): Rename to
	sel_redirect_edge_and_branch_force ().  Update.
	(sel_redirect_edge_and_branch): Update.
	(sel_cfg_hooks): New static variable.
	(sel_register_cfg_hooks, sel_unregister_cfg_hooks): New functions.
	(create_insn_rtx_from_pattern_1, create_insn_rtx_from_pattern): Update.
	(create_copy_of_insn_rtx, setup_nop_and_exit_insns): Ditto.
	(setup_empty_vinsn): Rename to setup_nop_vinsn ().  Update.
	(free_empty_vinsn): Rename to free_nop_vinsn.  Update.
	(sel_add_loop_preheader, sel_is_loop_preheader_p): Update.
	(insn_sid): New debug function.
	
	* sel-sched-ir.h: Update.	
	(expr_equal_p): Remove.
	(struct _sel_insn_data: ws_level, spec_checked_ds): New fields.
	(struct _sel_insn_rtx_data: lv): Remove field.
	(struct _sel_global_bb_info, struct _sel_region_bb_info): New types.
	(get_all_loop_exits, _succ_iter_cond, _eligible_successor_edge_p):
	Update.
	
	* sel-sched-dump.c (dump_vinsn_flags, sel_dump_cfg_insn): Update.
	(sel_dump_cfg_2): Ditto.
	
	* sel-sched-dump.h: Update.

	* sched-deps.c (ds_max_merge): Update.

	* sched-int.h: Update.

	* sched-rgn.c (rgn_make_new_region_out_of_new_block): New function.
	(rgn_add_block): Update.

	* sched-rgn.h: Update.

	* config/ia64/ia64.c (insn_can_be_in_speculative_p): New static
	function.
	(ia64_speculate_insn, ia64_needs_block_p): Support branchy checks
	during selective scheduling.

	* cfgrtl.c (create_basic_block_structure): Update.

2007-06-14  Andrey Belevantsev  <abel@ispras.ru>
	    Alexander Monakov  <amonakov@ispras.ru>

	* sel-sched.c (substitue_reg_in_rhs): Fix vertical spacing.
	(un_substitute): Use correct vinsn when fixing expr.
	(identical_copy_p): New function.
	(undo_transformations): Use it when killing from the current av set 
	all exprs that use registers set by an insn.  Do not use 
	expression caches for now.
	(moveup_rhs): Fix spacing.  Add missing line_finish ().

	* sel-sched-ir.c (deps_init_id_finish_insn): When downgrading to USE,
	leave LHS and RHS fields of an expression intact for future use.
	(insn_eligible_for_subst_p): Fix thinko.  Do not consider 'reg=const'
	insns.
	
2007-06-14  Andrey Belevantsev  <abel@ispras.ru>

	* sel-sched.c (moveup_set_rhs): When analyzing an expression,
	first check the caches.  When a hard dependence/no dependence 
	is found, record this in the caches.

	* sel-sched-ir.h (struct sel_insn_data): Reorder fields.
	New fields analyzed_deps, found_deps.
	(INSN_ANALYZED_DEPS, INSN_FOUND_DEPS): New macros.
	
	* sel-sched-ir.c (init_global_and_expr_for_insn, init_insn, 
	init_simplejump): Initialize INSN_ANALYZED_DEPS and 
	INSN_FOUND_DEPS caches.
	(finish_global_and_expr_1): Free them.

2007-06-14  Andrey Belevantsev  <abel@ispras.ru>

        * sel-sched-ir.h (struct _expr): New field changed_on_insns.
        (EXPR_CHANGED_ON_INSNS): New macro.
        (copy_expr_onside): Declare.

        * sel-sched.c: Kill #if 0'd code.
        (undo_transformations): New function.  
        (un_substitute): Adapt for undo_transformations.  Add RHS parameter, 
        rename AV_PTR parameter to NEW_SET_PTR.  Kill #if 0'd code.  Process
        just one RHS instead of looping through the whole av set.
        (un_speculate): Likewise. 
        (moveup_set_rhs): When an expr has been changed, mark this.
        (equal_after_moveup_path_p): Use copy_expr_onside instead of 
        copy_expr.
        (generate_bookkeeping_insns): Likewise.
        (find_used_regs_1): Use undo_transformations.
        (move_op): Likewise.  Also use copy_expr_onside.

        * sel-sched-ir.c (init_expr): Add changed_on parameter.  Use it.
        Update all callers.
        (copy_expr_onside): New function.
        (merge_expr_data): Merge cache bitmaps.
        (clear_expr): Free the cache bitmap.
        (av_set_union_and_clear): Set *FROMP to NULL to mark that it's empty.
        
2007-06-13  Alexander Monakov  <amonakov@ispras.ru>

        * haifa-sched.c (haifa_classify_insn_1): Rename from
        haifa_classify_insn, add COND_EXEC handling, use recursion to analyze
        PARALLEL and COND_EXEC.
        (haifa_classify_insn): New implementation.
        * sel-sched.c (CANT_MOVE_TRAPPING): New macro.
        (moveup_rhs): Use it.

2007-06-13  Andrey Belevantsev  <abel@ispras.ru>

        * common.opt (fsel-sched-substitute-inside-insn-group): New flag.
        * sel-sched.c (moveup_rhs_inside_insn_group): New.
        (moveup_rhs): Add inside_insn_group parameter.  When it is true,
        use the above function.  Kill unneeded comment.
        (moveup_set_rhs): Add inside_insn_group parameter.  Pass it to 
        moveup_rhs.
        (equal_after_moveup_path_p_1): Call moveup_rhs with inside_insn_group
        set to true.
        (compute_av_set): Call moveup_set_rhs with inside_insn_group == false.
        (find_used_regs_1): Tidy.
        (generate_bookkeeping_insn): Kill #if 0'd code.
        (fill_insns): Add to rhs_seq expressions from boundaries' av sets 
        instead of rhs_vliw.  Put correct register in them.  Fix comment.
        Take pattern for the final insn to schedule from rhs_vliw.
        Move comment before 'if'.  Kill unneeded scope.
        (sel_region_init): Enable moveup_set_path when the user requested
        substitution inside insn groups.
        (sel_global_init): Do not pipeline outer loops when the user doesn't
        permit any kind of pipelining.
        * sel-sched-ir.c: Include sel-sched-dump.h.  Use again sel_print_insn
        as a debug hook. 
        (RHS_DEST): New macro.
        * sel-sched-dump.c (sel_print_insn): Resurrect.  Fix it to not 
        segfault, use new macros.
        * sched-vis.c (dump_insn_slim_1): Pass 1 instead of 0 to print_insn.
        * config/ia64/ia64.opt (msched-spec-verbose, msched-prefer-non-data-spec-insns,
        msched-prefer-non-control-spec-insns, msched-count-spec-in-critical-path,
        msel-sched-renaming, msel-sched-substitution, msel-sched-data-spec, 
        msel-sched-control-spec, msel-sched-dont-check-control-spec): Use Target 
        Report Var instead of Common Report Var.

2007-06-06  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

	Update various pieces of infrastructure.
 	Implement initial support for ia64 data and control speculation.
	
	* sched-ebb.c (n_insns, sched_n_insns): Rename to rgn_n_insns and
	sched_rgn_n_insns respectfully.  Update all uses.
	(ebb_common_sched_info): Move initialization to schedule_ebbs ().
	(add_remove_insn, add_block1, fix_recovery_cfg, ebb_head_or_leaf_p):
	Rename to ebb_add_remove_insn (), ebb_add_block (),
	ebb_fix_recovery_cfg (), ebb_region_head_or_leaf_p () respectfully.
	Update all uses.
	
	* target.h (struct gcc_target: needs_block_p): Change signature.
	Update all uses.
	(struct gcc_target: gen_check): Rename to gen_spec_check.  Change
	signature.  Update all uses.
	(struct gcc_target: get_insn_spec_ds, get_insn_checked_ds):
	New hooks to query speculation information of instruction.
	(struct gcc_target: skip_rtx_p): New hook to identify speculative
	markers of instruction.
	
	* rtlanal.c (may_trap_p_1): Skip through UNSPEC on request of target.

	* haifa-sched.c (vecprim.h): New include.
	(sched_max_uid, sched_last_basic_block, sched_bbs, sched_insns):
	Remove.
	(spec_info): Make global.
	(sched_init, sched_finish, haifa_sched_init, haifa_sched_finish):
	Restructure initialization.
	(haifa_speculate_insn): New static function.
	(try_ready): Use it instead of speculate_insn ().
	(sched_extend_ready_list, sched_finish_ready_list): New functions.
	(extend_ready, haifa_local_init, sched_local_init, sched_insns_init):
	Remove.
	(sched_insns_finish, extend_all): Ditto.
	(haifa_insns_init): Rename to haifa_insns_init.  Update all uses.
	(haifa_luid_for_non_insn): New static function.
	(dep_weak): Move to sched-deps.c.  Rename to ds_weak ().
	(init_before_recovery): Use haifa_init_only_bb () instead of
	add_block ().
	(create_check_block_twin): Update to use new initialization functions.
	(change_pattern): Rename to sched_change_pattern ().  Make global.
	Split haifa-specific functionality into ...
	(haifa_change_pattern): New static function.
	(speculate_insn): Rename to sched_speculate_insn ().  Make global.
	Split haifa-specific functionality into ...
	(haifa_speculate_insn): New static function.
	(sched_bbs_init, add_block, glat_init_1, glat_init, sched_bbs_finish):
	Remove.
	(debug_spec_status): Use get_dep_weak_1 () instead of get_dep_weak ()
	to prevent ICEs on malformed input.
	(extend_bb, init_bb, extend_insn, init_insn, init_insns_in_bb): New
	static functions for walking through scheduling region.
	(sched_scan): New function for walking through scheduling region.
	(sched_extend_bb, sched_init_bb): New static functions.
	(sched_init_bbs, sched_finish_bbs): New functions to init / finalize
	basic block information.
	(attach_life_info1, attach_life_info): Move to the better place.
	(sched_luids): New vector variable to replace uid_to_luid.
	(sched_luid_extend): Rename to luids_extend_insn ().  Update to use
	sched_luids.
	(sched_max_luid): New variable.
	(sched_luid_init): Rename to luids_init_insn ().
	(sched_init_luids, sched_finish_luids): New functions to
	init / finalize logical uids.
	(sched_luid_finish): Remove.
	(sched_insn_extend, sched_insn_init, sched_insn_finish): Remove.
	(sched_extend_target): New function.
	(h_i_d): Make it a vector.
	(extend_h_i_d, init_h_i_d, haifa_init_h_i_d, haifa_finish_h_i_d):
	New functions to initialize / finalize haifa instruction data.
	(haifa_init_insn): New static function.
	(sched_bb_extend, sched_bb_init): Remove.
	(haifa_init_only_bb): New static function.
	(sched_data_update, sched_data_finish): Remove.

	* modulo-sched.c (sms_common_sched_info): Move initialization to ...
	(setup_sched_infos): New static function.
	(sms_schedule): Move initialization of common_sched_info,
	sched_deps_info, current_sched_info to setup_sched_infos ().

	* sel-sched.c (reset_sched_cycles_p): New variable.
	(old_ready_veclen): Rename to max_issue_size.
	(substitute_rhs): Rename to substitute_reg_in_rhs ().  Update to use
	vinsns properly.
	(replace_in_vinsn_using_bitmask): Rename to
	replace_in_rtx_using_bitmask ().  Update to use	vinsns properly.
	(un_substitute): Update to use	vinsns properly.
	(replace_src_with_reg): Rename to create_insn_rtx_with_rhs.  Don't use
	vinsns.
	(replace_dest_with_reg_in_vinsn): Rename to create_insn_rtx_with_lhs.
	Don't use vinsns.
	(replace_dest_with_reg_in_rhs): Update.
	(expr_dest_reg): New static function.
	(rhs_dest_regno): Use expr_dest_reg ().
	(mark_unavailable_hard_regs): Update.
	(choose_best_reg): Add assertion.  Move logic to ...
	(choose_best_reg_1): New static function.
	(choose_best_pseudo_reg): Add output parameter.
	(find_best_reg_for_rhs): Change type of return value.  Update.
	(sel_speculation_p): New static variable.
	(can_overcome_dep_p, create_speculation_check_insn_rtx): New static
	functions.
	(apply_spec_to_expr, speculate_expr, has_spec_dependence_p): Ditto.
	(un_speculate): Ditto.
	(moveup_rhs): Add support for data and control speculation.  Update.
	(moveup_set_rhs, equal_after_moveup_path_p, compute_av_set): Update.
	(propagate_lv_set, compute_live, update_data_sets): Update.
	(get_spec_check_type_for_insn): New static function.
	(find_used_regs_1, find_used_regs, sel_rank_for_schedule): Update to
	support speculation.
	(fill_ready_list, find_best_rhs_and_reg_that_fits): Ditto.
	(gen_insn_from_expr_after): New static function.
	(generate_bookkeeping_insn, fill_insns): Update
	(get_dest_reg_from_orig_ops): New static function.
	(move_op): Update to support speculation.
	(init_seqno): Add parameter.  Update.
	(sel_restore_other_notes): Move to sel-sched-ir.c.
	(is_loop_preheader_p): Move to sel-sched-ir.c.  Rename to
	sel_is_loop_preheader_p ().
	(sel_remove_loop_preheader): Move to sel-sched-ir.c.
	(sel_region_init, sel_region_finish, sel_sched_region_1): Update.
	(sel_global_init, sel_global_finish): Update.
	(selective_scheduling_run): Add .dot dumping.
	(handle_sel_sched): Use debugging parameter to choose scheduler.

	* sel-sched-ir.c (sel_bb_info): Change array to vector.
	(sel_max_uid, lvs, lvs_size): Remove.
	(s_i_r_d): New static vector variable.
	(get_nop_from_pool): Rewrite.
	(free_nop_pool): Update.
	(vinsn_equal_insn_p): Remove.
	(vinsn_separable_p): Rename to lhs_and_rhs_separable_p.  Update.
	(vinsn_init): Update.
	(sel_insn_rtx_cost): New static function.
	(sel_vinsn_cost, sel_gen_insn_from_rtx_after): New functions.
	sel_gen_insn_from_expr_after): Ditto.
	(rhs_equal_p): Rename to vinsn_correlate_as_rhses_p ().  Update.
	(rhs_init): Rename to init_expr ().  Update.
	(rhs_copy): Rename to copy_expr ().
	(merge_expr_data): New function.
	(rhs_merge): Rename to merge_expr ().
	(rhs_equal_insn_p): Remove.
	(clear_expr): New function.
	(av_set_lookup_rhs): Rename to av_set_lookup ().  Update.
	(av_set_loopup_other_equiv_rhs): Update.
	(av_set_remove_rhs_with_insn): Remove.
	(av_set_add_vinsn): Rename to av_set_add ().  Update.
	(av_set_copy): Update.
	(av_set_lookup_insn): Remove.
	(av_set_add_insn): Remove.
	(deps_init_id_start_insn, deps_init_id_finish_insn): Update.
	(deps_init_id_start_lhs, deps_init_id_finish_lhs): Ditto.
	(deps_init_id_start_rhs, deps_init_id_finish_rhs): Ditto.
	(deps_init_id_reset_deps_to_insn): Rename to
	deps_init_id_downgrade_to_use ().
	(deps_init_id_note_reg_set, deps_init_id_note_reg_clobber): Ditto.
	(deps_init_id_note_reg_use, deps_init_id_note_mem_dep): Ditto.
	(sel_cfg_note_p): New static function.
	(init_global_and_expr_for_insn): New static function.
	(sel_init_global_and_expr): New function.
	(finish_global_and_expr_insn_1, finish_global_and_expr_insn_1): New
	static functions.
	(sel_finish_global_and_expr): New function.
	(sel_deps_*): Rename functions to has_dependence_*.  Update.
	(save_deps_info): Remove.
	(setup_has_dependence_sched_deps_info): New static function.
	(has_dependence_p): Update.
	(tick_check_dep_with_dw, tick_check_p): Update.
	(lhs_equals_reg_p): Rename to lhs_of_insn_equals_to_reg_p ().
	(get_vinsn_type_for_insn): Remove.
	(insn_valid_p): Rename to insn_rtx_valid.
	(sel_insn_deffered_init): Remove.
	(copy_insn_out_of_stream, copy_insn_and_insert_before): Remove.
	(set_insn_init): New function.
	(init_insn, init_simplejump, insn_init_move_lv_set_if_bb_header): New
	static functions.
	(sel_init_new_insns, sel_finish_new_insns): New functions.
	(dfa_cost): Rename to vinsn_dfa_cost ().
	(bb_header_p): Rename to sel_bb_header_p ().
	(bb_empty_p): Rename to sel_bb_empty_p ().
	(sel_insn_has_single_succ_p): New function.
	(sel_add_or_remove_bb): Update.
	(sel_create_basic_block_before, sel_merge_blocks): New function.
	(create_insn_rtx_from_pattern_1): New static function.
	(create_insn_rtx_from_pattern, create_vinsn_from_insn_rtx): New
	functions.
	(create_copy_of_insn_rtx, change_vinsn_in_expr): Ditto.

	* sel-sched-ir.h (struct _rhs): Rename to 'struct _expr'.
	(struct _expr: sched_times, spec_done_ds, spec_to_check_ds): New
	fields.
	(struct vinsn_def: sched_cycle, sched_times, separable): Remove fields.
	(struct vinsn_def: cost, may_trap_p): New fields.
	(struct sel_insn_data: sched_cycle): New field.
	(struct _sel_insn_rtx_data): New type.

	* sel-sched-dump.c (dump_insn_rtx, debug_insn_rtx): New functions.
	(dump_vinsn, debug_vinsn, dump_expr, debug_expr): Ditto.
	(dump_insn, debug_insn): Ditto.
	(sel_dump_cfg_2): Update.

	* sel-sched-dump.h (enum _dump_insn_rtx, enum _dump_idata): New enums.
	(enum _dump_vinsn, enum _dump_expr, enum _dump_insn): New enums.

	* emit-rtl.c (emit_insn_after_1): Call hook.

	* sched-deps.c (note_reg_use, note_reg_set, note_reg_clobber): Convert
	macros to functions.
	(note_mem_dep, note_dep): Ditto.
	(sched_analyze_2): Generate control speculative dependencies.
	(deps_analyze_insn): Update.
	(d_i_d): Convert array to vector.
	(deps_extend_d_i_d, deps_finish_d_i_d): New functions.
	(sched_deps_local_init): Update.
	(get_dep_weak): Move logic to ...
	(get_dep_weak_1): New function.
	(ds_merge): Move logic to ...
	(ds_merge_1): New static function.
	(ds_full_merge, ds_max_merge, ds_get_speculation_types): New functions.
	(ds_get_max_dep_weak): New function.

	* sched-deps.h (sched-int.h): New include.
	(struct deps_insn_data: depend): Move field to
	'struct haifa_deps_insn_data'.

	* target-def.h (TARGET_SCHED_GEN_CHECK): Rename to
	TARGET_SCHED_GEN_SPEC_CHECK.
	(TARGET_SCHED_GET_INSN_SPEC_DS, TARGET_SCHED_GET_INSN_CHECKED_DS):
	New macros.
	(TARGET_SCHED_SKIP_RTX_P): New macro.

	* sched-int.h (vecprim.h): New include.
	(bb_vec_t, insn_vec_t): New typedefs.
	(struct sched_scan_info_def): New type.
	(sched_scan_info): Declare variable.
	(sched_scan, sched_init_bbs, sched_finish_bbs, sched_init_luids):
	Declare functions.
	(sched_finish_luids, sched_extend_target, haifa_init_h_i_d): Ditto.
	(haifa_finish_h_i_d, haifa_init_only_bb): Ditto.
	(struct common_sched_info_def): Remove fields which_luid, remove_notes,
	bb_extend, bb_init, bb_finish, insn_extend, insn_init.  Add field
	luid_for_new_insn.
	(struct haifa_insn_data): Add fields reg_weight, priority_known.

	* Makefile.in (SCHED_INT_H, SCHED_DEPS_H): Update.
	(fwprop.o): Fix dependencies.
	(haifa-sched.o, sched-deps.o, sel-sched.o, sel-sched-ir.o): Update
	dependencies.

	* sched-rgn.c (find_single_block_region, haifa_find_rgns): Update.
	(extend_rgns, schedule_region, sched_rgn_finish): Ditto.
	(sched_rgn_local_preinit, sched_rgn_local_init): Ditto.
	(rgn_setup_common_sched_info, rgn_setup_sched_infos): New function.

	* sched-vis.c (dump_insn_slim_1): Update.

	* config/ia64/ia64.opt (msched-ldc): Rename to msched-spec-ldc.
	(msched-control-ldc): Rename to msched-spec-control-ldc.
	(msel-sched-data-spec, msel-sched-control-spec): New flags.
	(msel-sched-dont-check-control-spec): New flag.

	* config/ia64/ia64.c: Rewrite speculation hooks.

	* config/ia64/ia64.md (speculable1, speculable2): New attributes.

	* params.def (PARAM_SELSCHED_MAX_SCHED_TIMES): New parameter.
	(PARAM_ALLOW_START, PARAM_ALLOW_STOP, PARAM_ALLOW_P): Remove.
	(PARAM_SEL1_START, PARAM_SEL1_STOP, PARAM_SEL1_P): New parameters.
	(PARAM_SEL2_START, PARAM_SEL2_STOP, PARAM_SEL2_P): Ditto.

2007-05-23  Alexander Monakov  <amonakov@ispras.ru>

	* target.h (struct gcc_target): Add new parameter to adjust_cost_2
	declaration.
	* haifa-sched.c (dep_cost_1): Add new parameter into declaration, pass
	it to adjust_cost_2.
	(insn_cost1): Update.
	(dep_cost): Add new parameter into declaration, pass it to dep_cost_1.
	* sel-sched-ir.c (tick_check_dep_with_dw): Remove special memory
	dependencies handling.
	* common.opt (fsel-sched-mem-deps-zero-cost): Remove option.
	* sched-int.h (dep_cost): Move declaration.
	* params.def (PARAM_SCHED_MEM_TRUE_DEP_COST): Rename from
	PARAM_SELSCHED_MEM_TRUE_DEP_COST.
	* config/ia64/ia64.opt (msched_fp_mem_deps_zero_cost): New option.
	* config/ia64/ia64.c (ia64_optimization_options): Rename parameter.
	(ia64_adjust_cost_2): Add new parameter into declaration, add special
	memory dependencies handling.

2007-05-23  Alexander Monakov  <amonakov@ispras.ru>

	* sel-sched-ir.c (tick_check_dep_with_dw): Use special higher cost for
	memory dependencies that are likely to alias.
	(tick_check_note_dep, tick_check_note_mem_dep): Pass 0 to
	tick_check_dep_with_dw to indicate non-memory or non-true memory
	dependencies.
	* params.def (PARAM_SELSCHED_MEM_TRUE_DEP_COST): New parameter.
	* config/ia64/ia64.c (ia64_optimization_options): Set it to 4.

2007-05-22  Dmitry Melnik  <dm@ispras.ru>
	    Andrey Belevantsev  <abel@ispras.ru>

	Implement pipelining of outer loops.
	* common.opt (fsel-sched-pipelining-outer-loops): New flag.
	* params.def (PARAM_MAX_PIPELINE_REGION_{BLOCKS, INSNS}): New params.
	(PARAM_INSN_START, PARAM_INSN_STOP, PARAM_INSN_P): New debug params.
	* cfgloop.h (LOOPS_HAVE_FALLTHRU_PREHEADERS): New enum field.
	* loop-init.c (loop_optimizer_init): When LOOPS_HAVE_FALLTHRU_PREHEADERS,
	set CP_FALLTHRU_PREHEADERS when calling create_preheaders.
	(loop_optimizer_finalize): Do not verify flow info after reload.
	* cfgloopmanip.c (create_preheader): Honor CP_FALLTHRU_PREHEADERS.
	Assert that the preheader edge will be fall thru when it is set.
	* cfgloop.c (get_loop_body_in_custom_order): New function.
	* sel-sched-int.h (sel_find_rgns, extend_rgns): Add definition.
	* sel-sched-ir.h: Include cfgloop.h.
	(MARK_LOOP_FOR_PIPELINING, LOOP_MARKEG_FOR_PIPELINING_P,
	LOOP_PREHEADER_BLOCKS, SET_LOOP_PREHEADER_BLOCKS): New macros.
	(current_loop_nest, bbs_pipelined, sel_split_edge, 
	sel_redirect_edge_and_branch, pipeline_outer_loops, 
	pipeline_outer_loops_init, pipeline_outer_loops_finish,
	sel_sched_region, sel_find_rgns, get_loop_nest_for_rgn,
	considered_for_pipelining_p, make_region_from_loop_preheader,
	sel_add_loop_preheader, clear_outdated_rtx_info): Add definitions.
	(succ_iterator): Add bb and loop_exits fields.
	(inner_loop_header_p, get_loop_exit_edges_unique_dests,
	get_all_loop_exits): New static inline functions.
	(SUCCS_SKIP_TO_LOOP_EXITS): New #define.
	(_succ_iter_start, _succ_iter_cond, _succ_iter_next,
	_eligible_succesor_edge_p): Implement skipping to loop exits iterator.
	* sel-sched-ir.c (current_loop_nest, loop_nests, bbs_in_loop_rgns,
	rev_top_order_index, rev_top_ordex_index_len): New static variables. 
	(last_added_block): Change to vector last_added_blocks.
	(sel_add_block_to_region, sel_create_new_region, bb_top_order_comparator,
	make_region_from_loop, make_region_from_loop_preheader, 
	make_regions_from_loop_nest, pipeline_outer_loops_init, 
	pipeline_outer_loops_finish, get_loop_nest_for_rgn, 
	considered_for_pipelining_p, make_regions_from_the_rest,
	sel_find_rgns, sel_add_loop_preheader): New functions.  
	(init_fences): Use SUCCS_SKIP_TO_LOOP_EXITS, adapt to multiple 
	region entries.  
	(tick_check_note_dep, tick_check_note_mem_dep): Fix comment.  Tidy.
	(sel_rtl_insn_added): Assert that we adding an insn to the current region.
	(sel_init_insn_info): When pipelining outer loops, get SEQNO not only
	from preds, but from succs also.  Change asserts accordingly.
	(sel_create_basic_block): Adapt for using a vector of added blocks.
	(sel_add_or_remove_bb): Likewise.
	(sel_split_block, sel_split_edge): Likewise.  Fix loop structures
	in case we've spoiled them.
	(sel_redireect_edge_force, sel_redirect_edge_and_branch): Likewise.
	(cfg_pred_1): Assert that we're walking inside the current region.
	(clear_outdated_rtx_info, find_place_to_insert_bb, 
	recompute_rev_top_order): New functions.
	(sel_add_or_remove_bb_1): Use them.
	* sel-sched.c (compute_av_set): Fix typo in comment.
	(compute_live_below_insn): Use SUCCS_ALL instead of equivalent flag
	combination.
	(extract_new_fences_from): Use SUCCS_SKIP_TO_LOOP_EXITS.
	(generate_bookkeeping_insn): Check that we don't spoil current loop.
	Use sel_redirect_edge_and_branch.  Tidy.
	(fill_insns_run): New global debug variable.
	(fill_insns): Use it.  Move temp_state initialization to proper place.
	Use SUCCS_SKIP_TO_LOOP_EXITS.
	(init_seqno_1): Likewise.  Tidy.
	(is_loop_preheader_p, sel_remove_loop_preheader, 
	split_edges_incoming_to_rgn): New.
	(sel_region_init): Initialize current_loop_nest.  Move loop preheader
	to appropriate region.  Set pipelining_p to true when current_loop_nest
	is not NULL; call split_edges_incoming_to_rgn.
	(sel_region_finish): Do not reschedule and bundle loop preheader.
	Remove it for later inclusion into correct region.
	(sel_sched_region_1): When pipelining outer loops, init fences with 
	a loop header.  Clear outdated info for loop preheader after scheduling.
	(sel_sched_region): Call pipeline_outer_loops_{init,finish}.
	* sel-sched-dump.c (sel_print_insn): Change order of checks.
	* sched-rgn.c (find_rgns): Rename to haifa_find_rgns.  Implement
	new find_rgns function.
	(extend_rgns): Export.
	(sched_rgn_init): Calculate and free dominance info only when 
	we don't pipelining outer loops.
	* config/ia64/ia64.c (scheduled_good_insn): Check INSN_P before
	calling recog_memoized.

2007-05-22  Alexander Monakov  <amonakov@ispras.ru>

	* sel-sched-ir.c (tick_check_dep_with_dw): Rename from
	tick_check_note_dep, ignore cost for true memory dependencies that are
	not likely to alias.
	(tick_check_note_dep): New implementation.
	(tick_check_note_mem_dep): Calculate dependence weight.
	* common.opt (fsel-sched-mem-deps-zero-cost): New option.
	* sched-deps.c (estimate_dep_weak): Remove static qualifier.
	* sched-deps.h (estimate_dep_weak): Declare.

2007-05-22  Dmitry Zhurikhin  <zhur@ispras.ru>

	* config/ia64/ia64.c (scheduled_good_insn): New static helper function.
	(ia64_dfa_new_cycle): Mark that a stop bit should be before current
	insn if there was a cycle advance.
	(final_emit_insn_group_barriers): Emit stop bits before insns starting
	a new cycle.
	* config/ia64/ia64.opt (msched-stop-bits-after-every-cycle): New flag.

2007-03-29  Dmitry Zhurikhin <zhur@ispras.ru>

	* sel-sched.c (generate_bookkeeping_insn): Remove unneeded 
	conditions when checking if bookkeeping insn can be generated in
	existing block and fix coding.
        (init_seqno_1): Remove assert.
        (fill_insns): Remove unneeded moving of boundary. In rare case of
	generating bookkeeping insn at the block above floating bb header
	split this (upper) block after place_to_insert generating new 
	floating bb header that way.
        (sel_sched_region_1): Implement rescheduling of pipelined code.
	* sel-sched-ir.c (sel_split_block): Added second parameter meaning
	instruction, after which basic block should be splitted.
	* sel-sched-ir.h: Correct declaration.
	* sel-sched-dump.c (sel_print_insn): Check if INSN_VI is present
        before referencing VINSN_SCHED_TIMES.
	* common.opt (flag_sel_sched_reschedule_pipelined): New flag to 
	reschedule pipelined code without pipelining after scheduling
	region.
	* sched-deps.c (sched_analyze_insn): Replace TRUE_BARRIER with
	MOVE_BARRIER to generate anti instead of true dependencies for
	JUMP followed with a BARRIER.

2007-03-29  Dmitry Zhurikhin <zhur@ispras.ru>

	* sel-sched.c (generate_bookkeeping_insn): Implement creating of 
	bookkeeping insn in existing block if possible instead of always 
	creating a new basic block for bookkeeping insn.
	(find_best_rhs_and_reg_that_fits): Correct bug with always not 
	scheduling issue_rate-th instruction on current cycle when 
	pipelining is on.
	(fill_insns): Move BND_TO some instructions back if bookkeeping
	insn was inserted between last scheduled insn and BND_TO.

2007-03-29  Andrey Belevantsev  <abel@ispras.ru>

        Allow the selective scheduler to work before reload.
	* common.opt (fselective-scheduling2): New flag. 
	* sel-sched.c (replace_in_vinsn_using_bitmask_1): Call exp_equiv_p
	with FOR_GCSE set to true, not false.
	(count_occurrences_1): Skip subregs of registers we're searching for.
	(replace_src_with_reg): Do not generate the new register; use 
	new_src_reg instead.
	(replace_src_with_reg_ok_p): Change new_src_reg type from int to rtx.
	Adjust the code accordingly.  Do not generate a new register.
	Assert that dest's mode equals to new_src_reg's mode. 
	(replace_dest_with_reg_in_vinsn): Change new_reg type from int 
	to rtx.  Add clone_p parameter.  Don't generate a new register.
	Copy rtx only when clone_p set to true.
	(replace_dest_with_reg_in_rhs): Change new_reg type from int to rtx.
	(replace_dest_with_reg_ok_p): Change reg_num type from int to rtx;
	rename it to new_reg.  Adjust the code accordingly.
	(rhs_dest_regno): Change the return type from int to unsigned.
	Kill a spurious assert.
	(vinsn_writes_one_of_regs_p): Split REGS in used_regs and 
	unavailable_hard_regs.  Check both regsets.
	(mark_unavailable_hard_regs): Fix formatting.  Return early when 
	called for a pseudo.  If before reload, stop after processing 
	frame_regs and stack_regs.
	(choose_best_reg): Change return type to rtx.  Fix comment.
	Check that all original operations have the same mode for dest.
	(choose_best_pseudo_reg): New.
	(find_best_reg_for_rhs): Change return type to rtx.  Kill assert 
	for working only after reload.  Always pass unavailable_hard_regs
	to find_used_regs.  When before reload, don't fill hard_regs_used,
	call choose_best_pseudo_reg instead of choose_best_reg.
	(moveup_rhs): Don't move trapping insns through jumps.  Tidy.
	(sel_rank_for_schedule): Give preference to SCHED_GROUP_P insns.
	Fix comment.
	(fill_ready_list): Don't allow insns from a SCHED_GROUP to be 
	scheduled if their ancestors havn't been scheduled.
	(find_best_rhs_and_reg_that_fits): Change type of best_reg_found 
	to rtx*.  Adjust the code accordingly.  Assert that we choose 
	hard registers after reload.
	(fill_insns): Change type of best_reg to rtx; adjust the code.
	Adjust reg_rename_tick and regs_ever_live only when hard register
	is chosen.  Properly set FENCE_SCHED_NEXT.
	(generate_bookkeeping_insn): Pass true and reg when calling 
	replace_dest_with_reg_in_vinsn.
	(sel_global_init): Set no_new_pseudos to 0 before reload.
	(sel_global_finish): Set it back to 1.
	(gate_handle_sel_sched): Adjust for using flag_selective_scheduling2.
	(handle_sel_sched): Ditto.
	* opts.c (decode_options): Ditto.
	* sel-sched-ir.c (vinsn_separable_p): Don't allow ZERO_EXTEND insns 
	to be separable.
	(sel_finish_insn): Set MAY_TRAP_P.
	* sel-sched-ir.h (RHS_DEST): New macro.
	(bb_next_bb): New function.  Use it instead of bb->next_bb in sel-*.c.
	* sched-deps.c (extebd_deps_reg_info): New function.  
	(sched_analyze_reg): Use it.
	(sched_analyze_insn): Honor sched_emulate_haifa_p when processing 
	libcalls and postcalls.  
	* sched-deps.h (struct deps_insn_data): New bitfield may_trap.
	(MAY_TRAP): New accessor.
	* sched-rgn.c (gate_handle_sched): Honor flag_selective_scheduling.
	* passes.c (init_optimization_passes): Schedule pass_sel_sched 
	also before pass_sched.
	* config/ia64/ia64.c (ia64_reorg): Adjust for 
	flag_selective_scheduling2.

2007-02-28  Andrey Belevantsev  <abel@ispras.ru>

        * sel-sched.c (replace_in_vinsn_using_bitmask): Fix spacing.
        (compute_av_set): Instead of merging two rhs'es, remove one
        first, then add second.
        (fill_ready_list): Do not pipeline USEs and CLOBBERs that were
        already scheduled; bail out early when ready list doesn't contain
        other insns.  Fix thinko with '!'.
        (find_best_rhs_and_reg_that_fits): Kill 's' variable.  Call
        the reorder2 hook too, not only reorder.  Bail out early when
        can_issue_more is 0.  Move the call to variable_issue from ...
        (fill_insns): ... here.  When can_issue_more is 0, set need_stall
        to 1 and bail out.
        (sel_region_init): Initialize scheduling flags earlier.
        * sel-sched-ir.c (av_set_remove_rhs_with_insn): New function.
        * sel-sched-ir.h: Declare it.
        * sel-sched-dump.c (hard_regno_rename_ok): Mark the second
        parameter as unused too.
        * config/rs6000/rs6000.c: Include sched-deps.h.

2007-02-28  Dmitry Melnik  <dm@ispras.ru>

        * sel-sched.c (substitute_rhs): Kill outdated and commented assert.
        (remove_if_has_source): Put under #if 0.
        (un_substitute): Put the call to remove_if_has_source under #if 0.
        Add comment.
        (reg_alloc_tick): Rename to reg_rename_tick.
        (choose_best_reg): Don't modify it when original register is chosen.
        Don't set regs_ever_live.
        (moveup_set_rhs): Use av_set_lookup_other_equiv_rhs.
        (find_best_rhs_and_rtxhat_fits): Rename killing search&replace
        glitch.
        (fill_insns): Update reg_rename_tick here instead of choose_best_reg.
        (sel_region_finish): Change dumping flags.  Put extra parentheses.
        * sel-sched-ir.c (av_set_lookup_other_equiv_rhs): New function.
        * sel-sched-ir.h: Declare it.
        * config/ia64/ia64.opt (mflag_sel_sched_substitution): Define to 1.

2007-02-28  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

        * config/ia64/ia64.c (ia64_override_options): Initialize
        align_loops and align_functions to 32 and 64, respectively.

2007-02-28  Maxim Kuvyrkov <mkuvyrkov@ispras.ru>

        * haifa-sched.c (schedule_block): Add debugging of insns and their
        costs.  Move debugging of the total scheduling time before updating
        head and tail.
        * sched-ebb.c (schedule_ebb): Kill dead code setting head and tail.
        * sched-dump.c (dump_insn_1): Do not print insn with a verbose flag
        set to one.

2007-01-31  Andrey Belevantsev  <abel@ispras.ru>
	    Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>
	    Dmitry Melnik  <dm@ispras.ru>

	* sel-sched.h, sel-sched-dump.h, sel-sched-ir.h, sel-sched.c,
	sel-sched-dump.c, sel-sched-ir.c, sched-deps.h, 
	sched-rgn.h: New files.

	* cfghooks.h (rtl_delete_block_not_barriers): New prototype.
	* cfgrtl.c (get_last_bb_insn_1): New forward declaration.
	(rtl_delete_block_1): New static function.  Move logic from ...
	(rtl_delete_block): ... here.
	(rtl_delete_block_not_barriers): New function.
	(get_last_bb_insn_1): New static function.  Move logic from ... 
	(get_last_bb_insn): .. here.
	* common.opt (fsel-sched-emulate-haifa, fsel-sched-bookkeeping,
	fsel-sched-pipelining, fsel-sched-pipelining-verbose,
	fsel-sched-renaming, fsel-sched-substitution, fsel-sched-verbose,
	fsel-sched-dump-cfg, fsel-sched-single-block-regions,
	fsel-sched-ebb-regions, fselective-scheduling): New flags.
	* ddg.c: Include sched-deps.h.
	* emit-rtl.c (add_insn, add_insn_after, add_insn_before): Call
	insn_added hook.
	* haifa-sched.c: Include sched-deps.h.
	(issue_rate, sched_verbose_param, note_list, dfa_state_size,
	ready_try, cycle_issued_insns, dfa_lookahead, max_luid): Make global.
	(sched_max_uid, common_sched_info, uid_to_luid, reg_weights,
	sched_bbs, sched_insns, ready): New global variables.
	(glat_start, glat_end): Initialize with NULL.
	(struct ready_list): Move declaration to sched-int.h.
	(ready_p, rgn_n_insns): Initialize.
	(current_sched_info_var): Change type to struct haifa_sched_info.
	(dep_cost_1): New static function.  Prototype it.  Move logic from ... 
	(insn_cost1): ... here. 
	(dep_cost): New static function.
	(priority): Adjust to work with selective scheduling.  Use 
	sched_deps_info instead of current_sched_info.  Process the corner
	case when all dependencies don't contribute to priority.
	(ready_lastpos, ready_element, ready_sort, reemit_notes, move_insn,
	find_fallthru_edge): Make global, remove static prototypes.
	(advance_state): New function.  Move logic from ... 
	(advance_one_cycle): ... here.
	(schedule_insn): Use sched_deps_info instead of current_sched_info.
	(add_to_note_list, concat_note_lists): New functions. 
	(unlink_other_notes): Move logic to add_to_note_list.  Handle
	selective scheduler.
	(rm_other_notes): Make static.  Adjust for selective scheduling.
	(remove_notes, restore_other_notes): New functions.
	(find_insn_reg_weight1): Rename to find_insn_reg_weight.
	(find_insn_reg_weight): Remove.
	(max_issue): Add privileged_n and state parameters.  Use them.
	Add comments.  Move debug dumping to choose_ready.
	(choose_ready): Remove lookahead variable, use dfa_lookahead.
	Remove more_issue, max_points.  Move the code to initialize 
	max_lookahead_tries to max_issue.
	(schedule_block): Remove rgn_n_insns1 parameter.  Don't allocate
	ready.  Adjust uses of move_insn.  Call restore_other_notes.
	(sched_init, sched_finish): Move Haifa-specific initialization/
	finalization to ... 
	(haifa_sched_init, haifa_sched_finish): ... respectively.  
	New functions.
	(extend_h_i_d, init_h_i_d): Remove.
	(haifa_local_init, haifa_local_finish, sched_local_init, 
	sched_local_finish, sched_insns_init, sched_insns_finish): 
	New functions.
	(extend_all, add_to_speculative_block, init_before_recovery,
	create_check_block_twin): Use haifa_insns_init 
	instead of extend_global.
	(sched_bbs_init): New function.  Move logic from ... 
	(extend_bb): ... here.
	(add_block): Use common_sched_info instead of current_sched_info.
	Use sched_bbs_init.  Add stricter asserts.
	(fix_jump_moves, move_block_after_check, attach_life_info1): 
	Use common_sched_info.
	(init_glat): Remove.
	(init_glat_1): Rename to glat_init_1.
	(glat_init, sched_bbs_finish): New functions.
	(check_sched_flags): Use sched_deps_info.
	(sched_luid_extend, sched_luid_init, sched_luid_finish, 
	sched_insn_extend, sched_insn_init, sched_insns_finish,
	sched_bb_extend, sched_bb_init, sched_bb_finish, 
	sched_data_update, sched_data_finish): New functions.
	* lists.c (remove_free_INSN_LIST_node): New function.
	* modulo-sched.c: Include sched-deps.h.
	(issue_rate): Guard with #if 0.
	(sms_sched_info): Rename to sms_common_sched_info.
	(sms_sched_deps_info, sms_sched_info): New.
	(sms_schedule): Initialize them.  Call haifa_sched_init/finish.
	* opts.c (decode_options).  If optimize >=2, turn on selective
	scheduling.
	* params.def (PARAM_SELSCHED_VERBOSE, PARAM_SELSCHED_DUMP_CFG_FLAGS,
	PARAM_SELSCHED_MAX_LOOKAHEAD, PARAM_ALLOW_START, PARAM_ALLOW_STOP,
	PARAM_ALLOW_P, PARAM_REGION_START, PARAM_REGION_STOP, 
	PARAM_REGION_P): New parameters.
	* passes.c (init_optimization_passes): Add sel_sched pass.
	* recog.c (validate_replace_rtx_part): New function.
	* recog.h: Prototype it.
	* rtl.h (remove_free_INSN_LIST_NODE, debug_bb_n_slim, debug_bb_slim,
	print_rtl_slim): Add prototypes.
	(struct rtl_hooks <insn_added>): New RTL hook.
	(insn_added): New macro.
	* rtlhooks-def.h (RTL_HOOKS_INSN_ADDED): Define to NULL.
	Add to RTL_HOOKS_INITIALIZER.
	* sched-deps.c: Include sched-deps.h.
	(sched_deps_info): New.  Update all relevant uses of current_sched_info
	to use it.
	(d_i_d, h_d_i_d): New variables.
	({true, output, anti, spec, forward}_dependency_cache): Initialize 
	to NULL.
	(cur_max_luid, cur_insn, can_start_lhs_rhs_p): New static variables.
	(add_or_update_back_dep_1): Initialize present_dep_type.
	(fixup_sched_groups): Use add_dependence instead of 
	maybe_add_or_update_back_dep.
	(haifa_start_insn, haifa_finish_insn, haifa_note_reg_set,
	haifa_note_reg_clobber, haifa_note_reg_use, haifa_note_mem_dep,
	haifa_note_dep): New functions implementing dependence hooks for 
	the Haifa scheduler.
	(note_reg_use, note_reg_set, note_reg_clobber, note_mem_dep,
	note_dep): New macros.
	(ds_to_dt): New function.
	(sched_analyze_reg, sched_analyze_1, sched_analyze_2, 
	sched_analyze_insn): Update to use dependency hooks infrastructure.
	(deps_analyze_insn): New function.  Move part of logic from ... 
	(sched_analyze): ... here.  Also move some logic to ... 
	(deps_start_bb): ... here.  New function.  
	(add_forw_dep, delete_forw_dep): Guard use of INSN_DEP_COUNT with
	!SEL_SCHED_P.
	(sched_deps_local_init): New function.  Move code from ... 
	(init_dependency_caches): ... here.  
	(sched_deps_local_finish): New function.  Move code from ... 
	(free_dependency_caches): ... here.
	(init_deps_global, finish_deps_global): Adjust for use with 
	selective scheduling.
	(add_dependence): Make static.  Adjust for use of dependency hooks.
	(maybe_add_or_update_back_dep): New.
	(add_or_update_back_dep, add_or_update_back_forw_dep, 
	add_back_forw_dep): Adjust to use with selective scheduling.
	* sched-ebb.c: Include sched-deps.h.
	(debug_ebb_dependencies): New function.
	(init_ready_list): Use it.
	(ebb_print_insn): Indicate when an insn starts a new cycle.
	(contributes_to_priority, compute_jump_reg_dependencies): Add 
	ebb_ prefix to function names.
	(ebb_sched_deps_info, ebb_common_sched_info): New variables.
	(schedule_ebb): Initialize them.  Use remove_notes instead of 
	rm_other_notes.  Use haifa_local_init/finish.  
	(schedule_ebbs): Use haifa_sched_init/finish.
	* sched-int.h: Include basic-block.h.
	(sched_verbose_param, common_sched_info, sched_emulate_haifa_p,
	glat_start, glat_end, sched_max_uid, sched_last_basic_block,
	uid_to_luid, max_luid, sched_blocks, sched_insns): New prototypes.
	Prototype new functions in haifa-sched.c, sched-ebb.c, 
	and sched-vis.c.
	(enum sched_pass_id_t): New enumeration.
	(struct common_sched_info_def): New structure.
	(INSN_NEED_LUID_P, SEL_SCHED_P, INSN_LUID): New macros.
	(deps_t): New typedef.
	(current_sched_info): Change type to ... 
	(struct haifa_sched_info): ... this.  New structure.  Move 
	Haifa-specific fields from struct sched_info.
	(struct haifa_insn_data): Move dependency-related fields to 
	struct deps_insn_data.
	(INSN_PRIORITY, INSN_PRIORITY_KNOWN): Change to use d_i_d.
	(INSN_COST): Adjust for selective scheduling.
	Move sched-deps.c functions to sched-deps.h.
	* sched-rgn.c: Include cselib.h and sched-deps.h.
	(region, candidate, BB_TO_BLOCK, EBB_{FIRST,LAST}_BB, IS_VALID,
	IS_SPECULATIVE): Move to sched-rgn.h.
	(nr_regions, rgn_table, rgn_bb_table, block_to_bb, containing_rgn,
	current_nr_blocks, current_blocks, candidate_table, extend_rgns): 
	Make global.
	(debug_region, bb_in_region_p, dump_region_dot, 
	dump_region_dot_file, sched_rgn_estimate_number_of_insns): 
	New functions.	
	(find_single_block_region): Add ebbs_p parameter.
	(too_large, find_rgns, new_ready): Use comon_sched_info.
	(compute_trg_info): Make global.  Move initialization of 
	candidate_table, bblst_table, and edgelst_table from ... 
	(init_ready_list): ... here.
	(free_trg_info): New function.
	(check_live, update_live, contributes_to_priority): Make global.
	(rgn_common_sched_info, rgn_sched_deps_info,
	rgn_after_reload_sched_deps_info): New variables.
	(region_sched_info): Change type to struct haifa_sched_info.
	(ref_counts): New static variable. 	
	(add_branch_dependences): Use maybe_add_or_update_back_dep instead
	of add_dependence.
	(deps_join): New function.
	(propagate_deps): Use it.  New function.
	(free_rgn_deps, compute_priorities): New function.
	(sched_rgn_init, sched_rgn_finish): New functions.
	(schedule_region): Use them.
	(sched_rgn_local_preinit, sched_rgn_local_init, 
	sched_rgn_local_free, sched_rgn_local_finish): New functions.
	* sched-vis.c (print_value, print_pattern): Make global.
	(dump_insn_slim_1, print_rtl_slim, debug_bb_slim, 
	debug_bb_n_slim): New functions.
	* target-def.h (TARGET_SCHED_ALLOC_SCHED_CONTEXT, 
	TARGET_SCHED_INIT_SCHED_CONTEXT, TARGET_SCHED_SET_SCHED_CONTEXT, 
	TARGET_SCHED_CLEAR_SCHED_CONTEXT, TARGET_SCHED_FREE_SCHED_CONTEXT):
	New target hooks.  Initialize them to 0.
	* target.h (struct gcc_target): Add them.
	* timevar.def (TV_SEL_SCHED): New timevar.
	* tree-pass.h (pass_sel_sched): Prototype it.
	
	* Makefile.in (OBJS-common): Add selective scheduling object
	files. 
	(sel-sched.o, sel-sched-dump.o, sel-sched-ir.o): New entries.
	(SEL_SCHED_IR_H, SEL_SCHED_DUMP_H): New entries.
	(SCHED_INT_H): Add dependency on sched-deps.h.
	(sched-deps.o): Add sched-deps.h.
	(sched-rgn.o): Add $(SCHED_RGN_H).

	* config/ia64/ia64.opt (msel-sched-renaming, 
	msel-sched-substitution): New target-dependent flags.
	* config/ia64/ia64.c: Include sched-deps.h and sel-sched.h.
	(TARGET_SCHED_ALLOC_SCHED_CONTEXT, TARGET_SCHED_INIT_SCHED_CONTEXT,
	TARGET_SCHED_SET_SCHED_CONTEXT, TARGET_SCHED_CLEAR_SCHED_CONTEXT,
	TARGET_SCHED_FREE_SCHED_CONTEXT): Define new target hooks.
	(struct _ia64_sched_context): New structure.
	(ia64_sched_context_t): New typedef.
	(ia64_alloc_sched_context, ia64_init_sched_context, 
	ia64_set_sched_context, ia64_clear_sched_context,
	ia64_free_sched_context): New static functions.  Prototype them.
	(ia64_override_options): Set global selective scheduling flags 
	according to target-dependent flags.
	(dfa_state_size): Remove static declaration.
	(ia64_sched_init): Remove checks for !SCHED_GROUP_P after reload.
	(ia64_dfa_new_cycle): Assert that last_scheduled_insn is set when
	a group barrier is needed.  Fix vertical spacing.  Guard the code
	doing state transition with last_scheduled_insn check.
	(ia64_variable_issue): Change use of current_sched_info to 
	sched_deps_info.  Update comment.
	(ia64_h_i_d_extended): Ditto.	
	(ia64_mode_to_int): Check common_sched_info instead of *flags.
	(ia64_set_sched_flags): Ditto.
	(bundling): When shifting TImode from unimportant insns, ignore 
	also group barriers.  Assert that best state is found before 
	the backward bundling pass.
	(ia64_sched_finish, final_emit_insn_group_barriers): Fix formatting.
	(ia64_reorg): Wen flag_selective_scheduling, run the selective 
	scheduling pass instead of schedule_ebbs.
	* config/ia64/t-ia64 (ia64.o): Add dependency on sel-sched.h.

	* doc/invoke.texi: Document new flags and parameters.
	* doc/tm.texi: Document new target hooks.
