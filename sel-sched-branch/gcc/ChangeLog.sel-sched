2007-03-29  Andrey Belevantsev  <abel@ispras.ru>

        Allow the selective scheduler to work before reload.
	* common.opt (fselective-scheduling2): New flag. 
	* sel-sched.c (replace_in_vinsn_using_bitmask_1): Call exp_equiv_p
	with FOR_GCSE set to true, not false.
	(count_occurrences_1): Skip subregs of registers we're searching for.
	(replace_src_with_reg): Do not generate the new register; use 
	new_src_reg instead.
	(replace_src_with_reg_ok_p): Change new_src_reg type from int to rtx.
	Adjust the code accordingly.  Do not generate a new register.
	Assert that dest's mode equals to new_src_reg's mode. 
	(replace_dest_with_reg_in_vinsn): Change new_reg type from int 
	to rtx.  Add clone_p parameter.  Don't generate a new register.
	Copy rtx only when clone_p set to true.
	(replace_dest_with_reg_in_rhs): Change new_reg type from int to rtx.
	(replace_dest_with_reg_ok_p): Change reg_num type from int to rtx;
	rename it to new_reg.  Adjust the code accordingly.
	(rhs_dest_regno): Change the return type from int to unsigned.
	Kill a spurious assert.
	(vinsn_writes_one_of_regs_p): Split REGS in used_regs and 
	unavailable_hard_regs.  Check both regsets.
	(mark_unavailable_hard_regs): Fix formatting.  Return early when 
	called for a pseudo.  If before reload, stop after processing 
	frame_regs and stack_regs.
	(choose_best_reg): Change return type to rtx.  Fix comment.
	Check that all original operations have the same mode for dest.
	(choose_best_pseudo_reg): New.
	(find_best_reg_for_rhs): Change return type to rtx.  Kill assert 
	for working only after reload.  Always pass unavailable_hard_regs
	to find_used_regs.  When before reload, don't fill hard_regs_used,
	call choose_best_pseudo_reg instead of choose_best_reg.
	(moveup_rhs): Don't move trapping insns through jumps.  Tidy.
	(sel_rank_for_schedule): Give preference to SCHED_GROUP_P insns.
	Fix comment.
	(fill_ready_list): Don't allow insns from a SCHED_GROUP to be 
	scheduled if their ancestors havn't been scheduled.
	(find_best_rhs_and_reg_that_fits): Change type of best_reg_found 
	to rtx*.  Adjust the code accordingly.  Assert that we choose 
	hard registers after reload.
	(fill_insns): Change type of best_reg to rtx; adjust the code.
	Adjust reg_rename_tick and regs_ever_live only when hard register
	is chosen.  Properly set FENCE_SCHED_NEXT.
	(generate_bookkeeping_insn): Pass true and reg when calling 
	replace_dest_with_reg_in_vinsn.
	(sel_global_init): Set no_new_pseudos to 0 before reload.
	(sel_global_finish): Set it back to 1.
	(gate_handle_sel_sched): Adjust for using flag_selective_scheduling2.
	(handle_sel_sched): Ditto.
	* opts.c (decode_options): Ditto.
	* sel-sched-ir.c (vinsn_separable_p): Don't allow ZERO_EXTEND insns 
	to be separable.
	(sel_finish_insn): Set MAY_TRAP_P.
	* sel-sched-ir.h (RHS_DEST): New macro.
	(bb_next_bb): New function.  Use it instead of bb->next_bb in sel-*.c.
	* sched-deps.c (extebd_deps_reg_info): New function.  
	(sched_analyze_reg): Use it.
	(sched_analyze_insn): Honor sched_emulate_haifa_p when processing 
	libcalls and postcalls.  
	* sched-deps.h (struct deps_insn_data): New bitfield may_trap.
	(MAY_TRAP): New accessor.
	* sched-rgn.c (gate_handle_sched): Honor flag_selective_scheduling.
	* passes.c (init_optimization_passes): Schedule pass_sel_sched 
	also before pass_sched.
	* config/ia64/ia64.c (ia64_reorg): Adjust for 
	flag_selective_scheduling2.

2007-02-28  Andrey Belevantsev  <abel@ispras.ru>

        * sel-sched.c (replace_in_vinsn_using_bitmask): Fix spacing.
        (compute_av_set): Instead of merging two rhs'es, remove one
        first, then add second.
        (fill_ready_list): Do not pipeline USEs and CLOBBERs that were
        already scheduled; bail out early when ready list doesn't contain
        other insns.  Fix thinko with '!'.
        (find_best_rhs_and_reg_that_fits): Kill 's' variable.  Call
        the reorder2 hook too, not only reorder.  Bail out early when
        can_issue_more is 0.  Move the call to variable_issue from ...
        (fill_insns): ... here.  When can_issue_more is 0, set need_stall
        to 1 and bail out.
        (sel_region_init): Initialize scheduling flags earlier.
        * sel-sched-ir.c (av_set_remove_rhs_with_insn): New function.
        * sel-sched-ir.h: Declare it.
        * sel-sched-dump.c (hard_regno_rename_ok): Mark the second
        parameter as unused too.
        * config/rs6000/rs6000.c: Include sched-deps.h.

2007-02-28  Dmitry Melnik  <dm@ispras.ru>

        * sel-sched.c (substitute_rhs): Kill outdated and commented assert.
        (remove_if_has_source): Put under #if 0.
        (un_substitute): Put the call to remove_if_has_source under #if 0.
        Add comment.
        (reg_alloc_tick): Rename to reg_rename_tick.
        (choose_best_reg): Don't modify it when original register is chosen.
        Don't set regs_ever_live.
        (moveup_set_rhs): Use av_set_lookup_other_equiv_rhs.
        (find_best_rhs_and_rtxhat_fits): Rename killing search&replace
        glitch.
        (fill_insns): Update reg_rename_tick here instead of choose_best_reg.
        (sel_region_finish): Change dumping flags.  Put extra parentheses.
        * sel-sched-ir.c (av_set_lookup_other_equiv_rhs): New function.
        * sel-sched-ir.h: Declare it.
        * config/ia64/ia64.opt (mflag_sel_sched_substitution): Define to 1.

2007-02-28  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

        * config/ia64/ia64.c (ia64_override_options): Initialize
        align_loops and align_functions to 32 and 64, respectively.

2007-02-28  Maxim Kuvyrkov <mkuvyrkov@ispras.ru>

        * haifa-sched.c (schedule_block): Add debugging of insns and their
        costs.  Move debugging of the total scheduling time before updating
        head and tail.
        * sched-ebb.c (schedule_ebb): Kill dead code setting head and tail.
        * sched-dump.c (dump_insn_1): Do not print insn with a verbose flag
        set to one.

2007-01-31  Andrey Belevantsev  <abel@ispras.ru>
	    Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>
	    Dmitry Melnik  <dm@ispras.ru>

	* sel-sched.h, sel-sched-dump.h, sel-sched-ir.h, sel-sched.c,
	sel-sched-dump.c, sel-sched-ir.c, sched-deps.h, 
	sched-rgn.h: New files.

	* cfghooks.h (rtl_delete_block_not_barriers): New prototype.
	* cfgrtl.c (get_last_bb_insn_1): New forward declaration.
	(rtl_delete_block_1): New static function.  Move logic from ...
	(rtl_delete_block): ... here.
	(rtl_delete_block_not_barriers): New function.
	(get_last_bb_insn_1): New static function.  Move logic from ... 
	(get_last_bb_insn): .. here.
	* common.opt (fsel-sched-emulate-haifa, fsel-sched-bookkeeping,
	fsel-sched-pipelining, fsel-sched-pipelining-verbose,
	fsel-sched-renaming, fsel-sched-substitution, fsel-sched-verbose,
	fsel-sched-dump-cfg, fsel-sched-single-block-regions,
	fsel-sched-ebb-regions, fselective-scheduling): New flags.
	* ddg.c: Include sched-deps.h.
	* emit-rtl.c (add_insn, add_insn_after, add_insn_before): Call
	insn_added hook.
	* haifa-sched.c: Include sched-deps.h.
	(issue_rate, sched_verbose_param, note_list, dfa_state_size,
	ready_try, cycle_issued_insns, dfa_lookahead, max_luid): Make global.
	(sched_max_uid, common_sched_info, uid_to_luid, reg_weights,
	sched_bbs, sched_insns, ready): New global variables.
	(glat_start, glat_end): Initialize with NULL.
	(struct ready_list): Move declaration to sched-int.h.
	(ready_p, rgn_n_insns): Initialize.
	(current_sched_info_var): Change type to struct haifa_sched_info.
	(dep_cost_1): New static function.  Prototype it.  Move logic from ... 
	(insn_cost1): ... here. 
	(dep_cost): New static function.
	(priority): Adjust to work with selective scheduling.  Use 
	sched_deps_info instead of current_sched_info.  Process the corner
	case when all dependencies don't contribute to priority.
	(ready_lastpos, ready_element, ready_sort, reemit_notes, move_insn,
	find_fallthru_edge): Make global, remove static prototypes.
	(advance_state): New function.  Move logic from ... 
	(advance_one_cycle): ... here.
	(schedule_insn): Use sched_deps_info instead of current_sched_info.
	(add_to_note_list, concat_note_lists): New functions. 
	(unlink_other_notes): Move logic to add_to_note_list.  Handle
	selective scheduler.
	(rm_other_notes): Make static.  Adjust for selective scheduling.
	(remove_notes, restore_other_notes): New functions.
	(find_insn_reg_weight1): Rename to find_insn_reg_weight.
	(find_insn_reg_weight): Remove.
	(max_issue): Add privileged_n and state parameters.  Use them.
	Add comments.  Move debug dumping to choose_ready.
	(choose_ready): Remove lookahead variable, use dfa_lookahead.
	Remove more_issue, max_points.  Move the code to initialize 
	max_lookahead_tries to max_issue.
	(schedule_block): Remove rgn_n_insns1 parameter.  Don't allocate
	ready.  Adjust uses of move_insn.  Call restore_other_notes.
	(sched_init, sched_finish): Move Haifa-specific initialization/
	finalization to ... 
	(haifa_sched_init, haifa_sched_finish): ... respectively.  
	New functions.
	(extend_h_i_d, init_h_i_d): Remove.
	(haifa_local_init, haifa_local_finish, sched_local_init, 
	sched_local_finish, sched_insns_init, sched_insns_finish): 
	New functions.
	(extend_all, add_to_speculative_block, init_before_recovery,
	create_check_block_twin): Use haifa_insns_init 
	instead of extend_global.
	(sched_bbs_init): New function.  Move logic from ... 
	(extend_bb): ... here.
	(add_block): Use common_sched_info instead of current_sched_info.
	Use sched_bbs_init.  Add stricter asserts.
	(fix_jump_moves, move_block_after_check, attach_life_info1): 
	Use common_sched_info.
	(init_glat): Remove.
	(init_glat_1): Rename to glat_init_1.
	(glat_init, sched_bbs_finish): New functions.
	(check_sched_flags): Use sched_deps_info.
	(sched_luid_extend, sched_luid_init, sched_luid_finish, 
	sched_insn_extend, sched_insn_init, sched_insns_finish,
	sched_bb_extend, sched_bb_init, sched_bb_finish, 
	sched_data_update, sched_data_finish): New functions.
	* lists.c (remove_free_INSN_LIST_node): New function.
	* modulo-sched.c: Include sched-deps.h.
	(issue_rate): Guard with #if 0.
	(sms_sched_info): Rename to sms_common_sched_info.
	(sms_sched_deps_info, sms_sched_info): New.
	(sms_schedule): Initialize them.  Call haifa_sched_init/finish.
	* opts.c (decode_options).  If optimize >=2, turn on selective
	scheduling.
	* params.def (PARAM_SELSCHED_VERBOSE, PARAM_SELSCHED_DUMP_CFG_FLAGS,
	PARAM_SELSCHED_MAX_LOOKAHEAD, PARAM_ALLOW_START, PARAM_ALLOW_STOP,
	PARAM_ALLOW_P, PARAM_REGION_START, PARAM_REGION_STOP, 
	PARAM_REGION_P): New parameters.
	* passes.c (init_optimization_passes): Add sel_sched pass.
	* recog.c (validate_replace_rtx_part): New function.
	* recog.h: Prototype it.
	* rtl.h (remove_free_INSN_LIST_NODE, debug_bb_n_slim, debug_bb_slim,
	print_rtl_slim): Add prototypes.
	(struct rtl_hooks <insn_added>): New RTL hook.
	(insn_added): New macro.
	* rtlhooks-def.h (RTL_HOOKS_INSN_ADDED): Define to NULL.
	Add to RTL_HOOKS_INITIALIZER.
	* sched-deps.c: Include sched-deps.h.
	(sched_deps_info): New.  Update all relevant uses of current_sched_info
	to use it.
	(d_i_d, h_d_i_d): New variables.
	({true, output, anti, spec, forward}_dependency_cache): Initialize 
	to NULL.
	(cur_max_luid, cur_insn, can_start_lhs_rhs_p): New static variables.
	(add_or_update_back_dep_1): Initialize present_dep_type.
	(fixup_sched_groups): Use add_dependence instead of 
	maybe_add_or_update_back_dep.
	(haifa_start_insn, haifa_finish_insn, haifa_note_reg_set,
	haifa_note_reg_clobber, haifa_note_reg_use, haifa_note_mem_dep,
	haifa_note_dep): New functions implementing dependence hooks for 
	the Haifa scheduler.
	(note_reg_use, note_reg_set, note_reg_clobber, note_mem_dep,
	note_dep): New macros.
	(ds_to_dt): New function.
	(sched_analyze_reg, sched_analyze_1, sched_analyze_2, 
	sched_analyze_insn): Update to use dependency hooks infrastructure.
	(deps_analyze_insn): New function.  Move part of logic from ... 
	(sched_analyze): ... here.  Also move some logic to ... 
	(deps_start_bb): ... here.  New function.  
	(add_forw_dep, delete_forw_dep): Guard use of INSN_DEP_COUNT with
	!SEL_SCHED_P.
	(sched_deps_local_init): New function.  Move code from ... 
	(init_dependency_caches): ... here.  
	(sched_deps_local_finish): New function.  Move code from ... 
	(free_dependency_caches): ... here.
	(init_deps_global, finish_deps_global): Adjust for use with 
	selective scheduling.
	(add_dependence): Make static.  Adjust for use of dependency hooks.
	(maybe_add_or_update_back_dep): New.
	(add_or_update_back_dep, add_or_update_back_forw_dep, 
	add_back_forw_dep): Adjust to use with selective scheduling.
	* sched-ebb.c: Include sched-deps.h.
	(debug_ebb_dependencies): New function.
	(init_ready_list): Use it.
	(ebb_print_insn): Indicate when an insn starts a new cycle.
	(contributes_to_priority, compute_jump_reg_dependencies): Add 
	ebb_ prefix to function names.
	(ebb_sched_deps_info, ebb_common_sched_info): New variables.
	(schedule_ebb): Initialize them.  Use remove_notes instead of 
	rm_other_notes.  Use haifa_local_init/finish.  
	(schedule_ebbs): Use haifa_sched_init/finish.
	* sched-int.h: Include basic-block.h.
	(sched_verbose_param, common_sched_info, sched_emulate_haifa_p,
	glat_start, glat_end, sched_max_uid, sched_last_basic_block,
	uid_to_luid, max_luid, sched_blocks, sched_insns): New prototypes.
	Prototype new functions in haifa-sched.c, sched-ebb.c, 
	and sched-vis.c.
	(enum sched_pass_id_t): New enumeration.
	(struct common_sched_info_def): New structure.
	(INSN_NEED_LUID_P, SEL_SCHED_P, INSN_LUID): New macros.
	(deps_t): New typedef.
	(current_sched_info): Change type to ... 
	(struct haifa_sched_info): ... this.  New structure.  Move 
	Haifa-specific fields from struct sched_info.
	(struct haifa_insn_data): Move dependency-related fields to 
	struct deps_insn_data.
	(INSN_PRIORITY, INSN_PRIORITY_KNOWN): Change to use d_i_d.
	(INSN_COST): Adjust for selective scheduling.
	Move sched-deps.c functions to sched-deps.h.
	* sched-rgn.c: Include cselib.h and sched-deps.h.
	(region, candidate, BB_TO_BLOCK, EBB_{FIRST,LAST}_BB, IS_VALID,
	IS_SPECULATIVE): Move to sched-rgn.h.
	(nr_regions, rgn_table, rgn_bb_table, block_to_bb, containing_rgn,
	current_nr_blocks, current_blocks, candidate_table, extend_rgns): 
	Make global.
	(debug_region, bb_in_region_p, dump_region_dot, 
	dump_region_dot_file, sched_rgn_estimate_number_of_insns): 
	New functions.	
	(find_single_block_region): Add ebbs_p parameter.
	(too_large, find_rgns, new_ready): Use comon_sched_info.
	(compute_trg_info): Make global.  Move initialization of 
	candidate_table, bblst_table, and edgelst_table from ... 
	(init_ready_list): ... here.
	(free_trg_info): New function.
	(check_live, update_live, contributes_to_priority): Make global.
	(rgn_common_sched_info, rgn_sched_deps_info,
	rgn_after_reload_sched_deps_info): New variables.
	(region_sched_info): Change type to struct haifa_sched_info.
	(ref_counts): New static variable. 	
	(add_branch_dependences): Use maybe_add_or_update_back_dep instead
	of add_dependence.
	(deps_join): New function.
	(propagate_deps): Use it.  New function.
	(free_rgn_deps, compute_priorities): New function.
	(sched_rgn_init, sched_rgn_finish): New functions.
	(schedule_region): Use them.
	(sched_rgn_local_preinit, sched_rgn_local_init, 
	sched_rgn_local_free, sched_rgn_local_finish): New functions.
	* sched-vis.c (print_value, print_pattern): Make global.
	(dump_insn_slim_1, print_rtl_slim, debug_bb_slim, 
	debug_bb_n_slim): New functions.
	* target-def.h (TARGET_SCHED_ALLOC_SCHED_CONTEXT, 
	TARGET_SCHED_INIT_SCHED_CONTEXT, TARGET_SCHED_SET_SCHED_CONTEXT, 
	TARGET_SCHED_CLEAR_SCHED_CONTEXT, TARGET_SCHED_FREE_SCHED_CONTEXT):
	New target hooks.  Initialize them to 0.
	* target.h (struct gcc_target): Add them.
	* timevar.def (TV_SEL_SCHED): New timevar.
	* tree-pass.h (pass_sel_sched): Prototype it.
	
	* Makefile.in (OBJS-common): Add selective scheduling object
	files. 
	(sel-sched.o, sel-sched-dump.o, sel-sched-ir.o): New entries.
	(SEL_SCHED_IR_H, SEL_SCHED_DUMP_H): New entries.
	(SCHED_INT_H): Add dependency on sched-deps.h.
	(sched-deps.o): Add sched-deps.h.
	(sched-rgn.o): Add $(SCHED_RGN_H).

	* config/ia64/ia64.opt (msel-sched-renaming, 
	msel-sched-substitution): New target-dependent flags.
	* config/ia64/ia64.c: Include sched-deps.h and sel-sched.h.
	(TARGET_SCHED_ALLOC_SCHED_CONTEXT, TARGET_SCHED_INIT_SCHED_CONTEXT,
	TARGET_SCHED_SET_SCHED_CONTEXT, TARGET_SCHED_CLEAR_SCHED_CONTEXT,
	TARGET_SCHED_FREE_SCHED_CONTEXT): Define new target hooks.
	(struct _ia64_sched_context): New structure.
	(ia64_sched_context_t): New typedef.
	(ia64_alloc_sched_context, ia64_init_sched_context, 
	ia64_set_sched_context, ia64_clear_sched_context,
	ia64_free_sched_context): New static functions.  Prototype them.
	(ia64_override_options): Set global selective scheduling flags 
	according to target-dependent flags.
	(dfa_state_size): Remove static declaration.
	(ia64_sched_init): Remove checks for !SCHED_GROUP_P after reload.
	(ia64_dfa_new_cycle): Assert that last_scheduled_insn is set when
	a group barrier is needed.  Fix vertical spacing.  Guard the code
	doing state transition with last_scheduled_insn check.
	(ia64_variable_issue): Change use of current_sched_info to 
	sched_deps_info.  Update comment.
	(ia64_h_i_d_extended): Ditto.	
	(ia64_mode_to_int): Check common_sched_info instead of *flags.
	(ia64_set_sched_flags): Ditto.
	(bundling): When shifting TImode from unimportant insns, ignore 
	also group barriers.  Assert that best state is found before 
	the backward bundling pass.
	(ia64_sched_finish, final_emit_insn_group_barriers): Fix formatting.
	(ia64_reorg): Wen flag_selective_scheduling, run the selective 
	scheduling pass instead of schedule_ebbs.
	* config/ia64/t-ia64 (ia64.o): Add dependency on sel-sched.h.

	* doc/invoke.texi: Document new flags and parameters.
	* doc/tm.texi: Document new target hooks.
