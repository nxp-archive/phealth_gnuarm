2006-07-15  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/ipa-type-escape.c (check_call): Use num_parm_types and
	nth_parm_type.

	* gcc/tree.c (type_num_arguments): Use num_parm_types and
	nth_parm_type.

	* gcc/dwarf2out.c (gen_formal_types_die): Use num_parm_types and
	nth_parm_type.

2006-07-14  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-decl.c (start_function): Use num_parm_types and
	nth_parm_type.

	* gcc/c-format.c (check_format_string): Use num_parm_types and
	nth_parm_type in check_format_string.

	* gcc/c-common.c (handle_sentinel_attribute): Use nth_parm_type
	and num_parm_types.

	* gcc/c-typeck.c (type_lists_compatible_p): Use num_parm_types and
	nth_parm_type.

	* gcc/c-typeck.c (convert_arguments): Use num_parm_types and
	nth_parm_type.

	* gcc/expr.c (block_move_libcall_safe_for_call_parm): Use
	num_parm_types and nth_parm_type.

	* gcc/ipa-type-escape.c (check_cast): Use num_parm_types and
	nth_parm_type.

2006-07-13  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-decl.c (diagnose_arglist_conflict): Use num_parm_types and
	nth_parm_type.

	* gcc/c-decl.c (match_builtin_function_types): Use num_parm_types
	and nth_parm_type.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-operands.c (add_call_read_ops): Use new CALL_EXPR
	accessors.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-structalias.c (find_func_aliases): Use new
	CALL_EXPR accessors and iterators.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-profile.c (tree_gen_interval_profiler): Use
	build_call_expr.
	(tree_gen_pow2_profiler): Likewise.
	(tree_gen_one_value_profiler): Likewise.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-object-size.c (alloc_object_size):  Use build_call_expr
	and simplify logic to avoid having to iterate over arguments.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-vect-transform.c (vectorizable_load): Use build_call_expr.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-loop-prefetch.c (issue_prefetch_ref): Use
	build_call_expr.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-sra.c (sra_walk_call_expr): Use new CALL_EXPR interface
	for iterating over arguments.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-pre.c (phi_translate): Use new CALL_EXPR accessors.
	(valid_in_set):  Likewise.
	(create_expression_by_pieces): Likewise.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-alias.c (find_used_portions): Use new CALL_EXPR
	accessors.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-stdarg.c (execute_optimize_stdarg):  Use new CALL_EXPR
	accessors.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-ccp.c (ccp_fold, fold_stmt): Use new CALL_EXPR
	accessors and constructor.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-tailcall.c (find_tail_calls, eliminate_tail_call):  Use
	new CALL_EXPR argument iterators.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-pretty-print.c (dump_generic_node, print_call_name):
	Use new CALL_EXPR accessors and iterators.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined):  Use
	FOR_EACH_CALL_EXPR_ARG to iterate over arguments.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-vrp.c (stmt_interesting_for_vrp, vrp_visit_stmt):  Use
	new CALL_EXPR accessors.

2006-07-12  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/builtins.c (builtin_mathfn_code): Use num_parm_types and
	nth_parm_type.

2006-07-11  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/calls.c (expand_call): Use num_parm_types.

	* gcc/c-common.c (self_promoting_args_p): Use num_parm_types
	and nth_parm_type.

	* gcc/c-format.c (handle_format_attribute): Use num_parm_types.

	* gcc/dwarf2out.c (decl_class_context): Use nth_parm_type.

	* gcc/tree.c (decl_function_context): Use nth_parm_type.

	* gcc/tree.c (stdarg_p): Use num_parm_types and nth_parm_type.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-inline.c (initialize_inlined_parameters): Pass whole
	CALL_EXPR instead of arglist and static_chain.  Use new abstract 
	accessors to extract the pieces.  Fixed callers.
	(estimate_num_insns_1):  Use abstract CALL_EXPR iterator.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-nested.c (convert_nl_goto_reference): Use build_call_expr.
	(convert_tramp_reference): Likewise.  Iterate over arguments
	directly instead of extracting them as a TREE_LIST.
	(convert_call_expr): Use CALL_EXPR_STATIC_CHAIN.
	(finalize_nesting_tree_1): Use build_call_expr.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-mudflap.c (mf_build_check_statement_for):  Use
	build_call_expr instead of build_function_call_expr.
	(mx_register_decls): Likewise.
	(mudflap_register_call): Likewise.
	(mudflap_finish_file): Likewise.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-data-ref.c (find_data_references_in_loop): Use new
	abstract CALL_EXPR iterators.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/predict.c (expr_expected_value): Use new CALL_EXPR accessors.
	Fix obvious cut-and-paste error.
	(strip_builtin_expect): Use new CALL_EXPR accessors.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-gimple.c (is_gimple_call_addr): Fix comment.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.c (contains_placeholder_p): Use new abstract CALL_EXPR
	accessors and argument iterators.
	(simple_cst_equal): Likewise.
	(get_callee_fndecl): Likewise.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-complex.c (expand_complex_libcall): Use build_call_expr.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-dump.c (dequeue_and_dump): dump arguments individually
	instead of as a list.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/targhooks.c (default_external_stack_protect_fail): Use
	build_call_expr instead of build_function_call_expr.
	(default_hidden_stack_protect_fail): Likewise.

2006-07-10  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/method.c (synthesize_method): Use num_parm_types,
	num_artificial_parms_for, and nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_parameter_declaration_clause):
	Use num_artificial_parms_for and nth_parm_type in
	pp_cxx_parameter_declaration_clause.

	* gcc/cp/error.c (dump_type, dump_type_suffix,
	dump_function_decl): Adjust calls to dump_parameters.
	(dump_parameters): Add a parameter to specify how many parameters
	are to be skipped.

2006-07-08  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (grokdeclarator): Use num_parm_types,
	nth_parm_type, and num_artificial_parms_for.

	* gcc/cp/decl.c (grokparms): Use num_parm_types,
	num_artificial_parms_for, and nth_parm_type.

2006-07-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.c (call_expr_argp): New function that returns a pointer
	to the Nth argument, rather than its value.  I'm expecting this
	function to go away again once the low-level conversion of
	CALL_EXPR representation is in place; it only exists to support....
	* gcc/tree.h (CALL_EXPR_ARG): New macro to access the Nth argument as
	an lvalue.

	* gcc/fold-const.c (negate_expr_p): Use new abstract CALL_EXPR
	accessors, constructors, and iterators.
	(negate_expr): Likewise.
	(operand_equal_p): Likewise.
	(fold_mathfn_compare): Likewise.
	(fold_binary): Likewise.
	(tree_expr_nonnegative_p): Likewise.
	* gcc/gimplify.c (build_stack_save_restore): Likewise.
	(gimplify_decl_expr): Likewise.
	(gimplify_call_expr): Likewise.
	(gimplify_cond_expr): Likewise.
	(gimplify_modify_expr_to_memcpy): Likewise.
	(gimplify_modify_expr_to_memset): Likewise.
	(gimplify_variable_sized_compare): Likewise.
	(gimplify_omp_atomic_fetch_op): Likewise.
	(gimplify_omp_atomic_pipeline): Likewise.
	(gimplify_omp_atomic_mutex): Likewise.
	(gimplify_function_tree): Likewise.
	* gcc/ipa-cp.c (ipcp_update_callgraph): Likewise.
	* gcc/ipa-prop.c (ipa_callsite_compute_count): Likewise.
	(ipa_callsite_compute_param): Likewise.
	* gcc/ipa-pure-const.c (check_call): Likewise.
	* gcc/ipa-reference.c (check_call): Likewise.
	* gcc/function.c (gimplify_parameters): Likewise.
	* gcc/ipa-type-escape.c (check_call): Likewise.
	* gcc/omp-low.c (build_omp_barrier): Likewise.
	(lower_rec_input_clauses): Likewise.
	(lower_reduction_clauses): Likewise.
	(expand_parallel_call): Likewise.
	(maybe_catch_exception): Likewise.
	(expand_omp_for_generic): Likewise.
	(expand_omp_for_static_nochunk): Likewise.
	(expand_omp_for_static_chunk): Likewise.
	(expand_omp_sections): Likewise.
	(lower_omp_single_simple): Likewise.
	(lower_omp_single_copy): Likewise.
	(lower_omp_master): Likewise.
	(lower_omp_ordered): Likewise.
	(lower_omp_critical): Likewise.

2006-07-07  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.h (FOR_EACH_CALL_EXPR_ARG):  Define new macro for
	iterating over argument lists.

	* gcc/builtins.c (expand_builtin): Use FOR_EACH_CALL_EXPR_ARG.
	* gcc/cgraphunit.c (cgraph_create_edges): Likewise.
	* gcc/c-pretty-print.c (pp_c_postfix_expression): Likewise.
	* gcc/c-common.c (verify_tree): Likewise.

2006-07-07  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/cgraphunit.c (cgraph_create_edges, update_call_expr): Convert
	to use new abstract CALL_EXPR accessors, iterators, and constructors.
	* gcc/dojump.c (do_jump): Likewise.
	* gcc/expr.c (emit_block_move_via_libcall): Likewise.
	(clear_storage_via_libcall): Likewise.
	(expand_expr_real_1): Likewise.
	* gcc/c-pretty-print.c (pp_c_postfix_expression): Likewise.
	* gcc/calls.c (alloca_call_p, call_expr_flags): Likewise.
	* gcc/coverage.c (create_coverage): Likewise.
	* gcc/c-omp.c (c_finish_omp_barrier, c_finish_omp_flush): Likewise.
	* gcc/c-common.c (verify_tree): Likewise.
	(check_function_arguments_recurse): Likewise.
	* gcc/convert.c (convert_to_real, convert_to_integer): Likewise.

2006-07-07  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (add_conv_candidate): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/call.c (add_function_candidate): Use num_parm_types
	and nth_parm_type.

	* gcc/cp/decl.c (duplicate_decls): Use num_parm_types and
	nth_parm_type.

2006-07-06  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.c (init_call_expr_arg_iterator): Define.
	(first_call_expr_arg): Define.
	(next_call_expr_arg): Define.
	(more_call_expr_args_p): Define.
	(call_expr_nargs): Define.
	(call_expr_arg): Define.
	* gcc/tree.h (CALL_EXPR_FN, CALL_EXPR_STATIC_CHAIN, CALL_EXPR_ARGS):
	Define.
	(CALL_EXPR_ARG0, CALL_EXPR_ARG1, CALL_EXPR_ARG2): Define.
	(call_expr_arg_iterator): Declare.
	(init_call_expr_arg_iterator): Declare.
	(first_call_expr_arg): Declare.
	(next_call_expr_arg): Declare.
	(more_call_expr_args_p): Declare.
	(call_expr_nargs): Declare.
	(call_expr_arg): Declare.
	(fold_call_expr): Declare new function replacing fold_builtin.
	(fold_builtin_next_arg): Add bool argument.
	(fold_build_call_expr): Declare.
	(build_call_expr): Declare.
	* gcc/builtins.c: Doc fixes throughout.  Clean up to use NULL_RTX
	or NULL_TREE instead of constant 0 where appropriate.
	(expand_builtin_setjmp): Change interfaces to all the
	expand_builtin_foo functions pass the whole CALL_EXPR instead
	of just its arglist, while the fold_builtin_foo functions get the
	individual arguments instead.  Use the new argument accessors.
	Update all callers.  
	(expand_builtin_nonlocal_goto): Likewise.
	(expand_builtin_prefetch): Likewise.
	(expand_builtin_classify_type): Likewise.
	(expand_errno_check): Likewise.
	(expand_builtin_mathfn): Likewise.
	(expand_builtin_mathfn_2): Likewise.
	(expand_builtin_mathfn_3): Likewise.
	(expand_builtin_sincos): Likewise.
	(expand_builtin_int_roundingfn): Likewise.
	(expand_builtin_pow): Likewise.
	(expand_builtin_powi): Likewise.
	(expand_builtin_strstr): Likewise.
	(expand_builtin_strchr): Likewise.
	(expand_builtin_strrchr): Likewise.
	(expand_builtin_strpbrk): Likewise.
	(expand_builtin_memcpy): Likewise.
	(expand_builtin_mempcpy): Likewise.
	(expand_builtin_memmove): Likewise, plus split off new helper 
	function expand_builtin_memmove_args.
	(expand_builtin_bcopy): Likewise.
	(expand_builtin_strcpy): Likewise, plus split off new helper
	function expand_builtin_strcpy_args.
	(expand_builtin_stpcpy): Likewise.
	(expand_builtin_strncpy): Likewise.
	(expand_builtin_memset): Likewise, plus split off new helper
	function expand_builtin_memset_args.
	(expand_builtin_bzero): Likewise.
	(expand_builtin_memcmp): Likewise.
	(expand_builtin_strcmp): Likewise.
	(expand_builtin_strncmp): Likewise.
	(expand_builtin_strcat): Likewise.
	(expand_builtin_strncat): Likewise.
	(expand_builtin_strspn): Likewise.
	(expand_builtin_strcspn): Likewise.
	(expand_builtin_args_info): Likewise.
	(expand_builtin_va_start): Likewise.
	(expand_builtin_va_end): Likewise.
	(expand_builtin_va_copy): Likewise.
	(expand_builtin_frame_address): Likewise.
	(expand_builtin_alloca): Likewise.
	(expand_builtin_unop): Likewise.
	(expand_builtin_fputs): Likewise.
	(expand_builtin_expect): Likewise.
	(expand_builtin_expect_jump): Likewise.
	(expand_builtin_fabs): Likewise.
	(expand_builtin_copysign): Likewise.
	(expand_builtin_printf): Likewise.
	(expand_builtin_fprintf): Likewise.
	(expand_builtin_sprintf): Likewise.
	(expand_builtin_init_trampoline): Likewise.
	(expand_builtin_adjust_trampoline): Likewise.
	(expand_builtin_signbit): Likewise.
	(expand_builtin_fork_or_exec): Likewise.
	(expand_builtin_sync_operation): Likewise.
	(expand_builtin_compare_and_swap): Likewise.
	(expand_builtin_lock_test_and_set): Likewise.
	(expand_builtin_lock_release): Likewise.
	(expand_builtin): Likewise.
	(builtin_mathfn_code): Likewise.
	(fold_builtin_constant_p): Likewise.
	(fold_builtin_expect): Likewise.
	(fold_builtin_classify_type): Likewise.
	(fold_builtin_strlen): Likewise.
	(fold_builtin_nan): Likewise.
	(fold_trunc_transparent_mathfn): Likewise.
	(fold_fixed_mathfn): Likewise.
	(fold_builtin_cabs): Likewise.
	(fold_builtin_sqrt): Likewise.
	(fold_builtin_cbrt): Likewise.
	(fold_builtin_sin): Likewise.
	(fold_builtin_cos): Likewise.
	(fold_builtin_tan): Likewise.
	(fold_builtin_atan): Likewise.
	(fold_builtin_trunc): Likewise.
	(fold_builtin_floor): Likewise.
	(fold_builtin_ceil): Likewise.
	(fold_builtin_round): Likewise.
	(fold_builtin_int_roundingfn): Likewise.
	(fold_builtin_bitop): Likewise.
	(fold_builtin_logarithm): Likewise.
	(fold_builtin_pow): Likewise.
	(fold_builtin_powi): Likewise.
	(fold_builtin_exponent): Likewise.
	(fold_builtin_memcpy): Likewise.
	(fold_builtin_mempcpy): Likewise.
	(fold_builtin_memmove): Likewise.
	(fold_builtin_strcpy): Likewise.
	(fold_builtin_strncpy): Likewise.
	(fold_builtin_memcmp): Likewise.
	(fold_builtin_strcmp): Likewise.
	(fold_builtin_strncmp): Likewise.
	(fold_builtin_signbit): Likewise.
	(fold_builtin_copysign): Likewise.
	(fold_builtin_isascii): Likewise.
	(fold_builtin_toascii): Likewise.
	(fold_builtin_isdigit): Likewise.
	(fold_builtin_fabs): Likewise.
	(fold_builtin_abs): Likewise.
	(fold_builtin_classify): Likewise.
	(fold_builtin_unordered_cmp): Likewise.
	(fold_builtin_1): Likewise.  Split into new functions
	fold_builtin_n, fold_builtin_0, fold_builtin_1, fold_builtin_2,
	fold_builtin_3, fold_builtin_4, and fold_builtin_varargs, to dispatch
	based on the number of arguments.
	(fold_call_expr): New function replacing fold_builtin.
	(fold_build_call_expr): New function.
	(build_call_expr): New function.
	(rewrite_call_expr): New function.
	(validate_arg): New function.
	(validate_arglist): Rewrite to use new interfaces, as above.  Change
	return type from int to bool to reflect usage.
	(fold_builtin_strstr): Likewise.
	(fold_builtin_strchr): Likewise.
	(fold_builtin_strrchr): Likewise.
	(fold_builtin_strpbrk): Likewise.
	(fold_builtin_strcat): Likewise.
	(fold_builtin_strncat): Likewise.
	(fold_builtin_strspn): Likewise.
	(fold_builtin_strcspn): Likewise.
	(fold_builtin_fputs): Likewise.
	(fold_builtin_next_arg): Likewise.  Also fix destructive
	modification of argument list, which seems like a Bad Idea.
	(fold_builtin_sprintf): Likewise.
	(expand_builtin_object_size): Likewise.
	(expand_builtin_memory_chk): Likewise.
	(maybe_emit_chk_warning): Likewise.
	(maybe_emit_sprintf_chk_warning): Likewise.
	(fold_builtin_object_size): Likewise.
	(fold_builtin_memory_chk): Likewise.
	(fold_builtin_stxcpy_chk): Likewise.
	(fold_builtin_strncpy_chk): Likewise.
	(fold_builtin_strcat_chk): Likewise.
	(fold_builtin_strncat_chk): Likewise.
	(fold_builtin_sprintf_chk): Likewise.
	(fold_builtin_snprintf_chk): Likewise.
	(fold_builtin_printf): Likewise.
	(fold_builtin_fprintf): Likewise.
	* gcc/fold-const.c (fold_ternary): Remove call to fold_builtin....
	(fold): ...and replace it with a call to fold_call_expr here.
	(fold_build3_stat): Use fold_build_call_expr to fold and construct
	CALL_EXPRs.
	* gcc/tree-ssa-ccp.c (ccp_fold): Use new arglist primitives and
	update calls to the various fold_builtin_foo functions to reflect
	their new interfaces.
	(ccp_fold_builtin): Likewise.
	* gcc/gimplify.c (gimplify_call_expr): Likewise.
	* gcc/except.c (expand_builtin_eh_return_data_regno): Change
	arguments to match other expand_builtin_foo functions.
	* gcc/tree-object-size.c (compute_object_sizes): Replace call to
	fold_builtin with fold_call_expr.

2006-07-05  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/pc/call.c (build_op_delete_call): Use nth_parm_type.

2006-07-03  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/tree.c (varargs_function_p): Use num_parm_types and
	nth_parm_type in varargs_function_p.

	* gcc/cp/pt.c (determine_specialization): Use num_parm_types and
	nth_parm_type in determine_specialization.

	* gcc/cp/typeck.c (merge_types): Use nth_parm_type.

	* gcc/cp/typeck.c (convert_arguments): Use num_parm_types and
	nth_parm_type in convert_arguments.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_parameter_declaration_clause):
	Use DECL_INITIAL instead of TREE_PURPOSE.

	* gcc/cp/decl2.c (check_classfn): Stop using TREE_CHAIN on
	TYPE_ARG_TYPES.

2006-07-02  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/cp-gimplify.c (cxx_omp_clause_apply_fn): Use
	num_parm_types and nth_parm_type.

	* gcc/cp/mangle.c (write_method_parms): Use num_parm_types and
	nth_parm_type in write_method_parms.

	* gcc/cp/class.c (add_method): Use nth_parm_type.

	* gcc/cp/pt.c (push_template_decl_real): Use num_parm_types and
	nth_parm_type in push_template_decl_real.

2006-06-30  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_over_call): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/decl.c (grok_op_properties): Use num_parm_types and
	nth_parm_type.

2006-06-29  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/pt.c (unify): Use nth_parm_type.

	* gcc/cp/tree.c (no_linkage_check): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/parser.c (cp_parser_late_parsing_default_args): Use
	num_parm_types and nth_parm_type.

2006-06-28  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (standard_conversion): Use nth_parm_type.

	* gcc/cp/cp-tree.h (DECL_CONST_MEMFUNC_P,
	DECL_VOLATILE_MEMFUNC_P): Use nth_parm_type.

	* gcc/cp/pt.c (for_each_template_parm_r): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/pt.c (tsubst_default_arguments): Use num_parm_types and
	nth_parm_type in tsubst_default_arguments.

	* gcc/cp/typeck.c (compparms): Use num_parm_types and
	nth_parm_type in compparms.

	* gcc/cp/call.c (add_function_candidate): Turn a redundant check
	into a gcc_assert.

2006-06-26  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/class.c (same_signature_p): Use nth_parm_type.

	* gcc/cp/class.c (type_requires_array_cookie): Use
	num_parm_types and nth_parm_type.

	* gcc/cp/call.c (build_op_delete_call): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_direct_abstract_declarator):
	Use nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_implicit_parameter_type): Use
	nth_parm_type.

	* gcc/cp/decl2.c (check_java_method): Use num_parm_types and
	nth_parm_type in check_java_method.

	* gcc/cp/decl.c (grokdeclarator): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/mangle.c (write_function_type): Use nth_parm_type.

2006-06-25  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_operator_new_call): Use num_parm_types
	and nth_parm_type.

2006-06-24  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/name-lookup.c (arg_assoc_args): Use num_parm_types
	and nth_parm_type.

	* gcc/cp/pt.c (dependent_type_p_r): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/method.c (locate_copy): Use num_parm_types,
	nth_parm_type, and num_artificial_parms_for.

2006-06-23  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/method.c (num_artificial_parms_for): New.
	* gcc/cp/cp-tree.h: Add a prototype for
	num_artificial_parms_for.

	* gcc/cp/call.c (standard_conversion, build_op_delete_call):
	Update the calls to compparms.
	* gcc/cp/class.c (add_method, same_signature_p): Likewise.
	* gcc/cp/decl.c (decls_match, duplicate_decls): Likewise.
	* gcc/cp/decl2.c (check_classfn): Likewise.
	* gcc/cp/name-lookup.c (push_overloaded_decl,
	do_nonmember_using_decl): Likewise.
	* gcc/cp/pt.c (is_specialization_of_friend,
	determine_specialization): Likewise.
	* gcc/cp/search.c (look_for_overrides_here): Likewise.
	* gcc/cp/typeck.c (comptypes): Likewise.
	(compparms): Add two parameters to specify the number of
	elements to be skipped.
	* gcc/cp/cp-tree.h: Update the prototype for compparms.

	* gcc/tree.c (num_parm_types, nth_parm_type): New.
	* gcc/tree.h: Add prototypes for the two new functions.

	* gcc/cp/call.c (add_template_candidate_real): Stop using
	TREE_CHAIN on TYPE_ARG_TYPES.

2006-06-16  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_op_delete_call): Use compparms.

2006-06-14  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/cp-tree.h (FUNCTION_ARG_CHAIN): Remove.

	* gcc/c-aux-info.c (deserves_ellipsis): Remove.
	(gen_formal_list_for_func_def): Call stdarg_p instead of
	deserves_ellipsis.

2006-06-13  Sandra Loosemore <sandra@codesourcery.com>

	* gcc/cp/cp-tree.h (TYPE_LANG_SLOT_1): No longer used for
	ENUM_TEMPLATE_INFO, since template info is no longer a tree type.
	(enum lang_type_tag): New.
	(struct lang_type_header): Change is_lang_type_class -> type_tag;
	updated all references.
	(struct lang_type_class): Use struct template_info * here.
	(struct lang_type_enum): New.
	(struct lang_type): Add struct lang_type_enum to union.
	(LANG_TYPE_ENUM_CHECK): New.
	(struct lang_decl_flags): Split alias from template_info; update
	all references.
	(ENUM_TEMPLATE_INFO): Rewrite for new location of enum info.
	(SET_ENUM_TEMPLATE_INFO): New, for lazy allocation of lang_type.
	(SET_TYPE_TEMPLATE_INFO): Rewrite for new location of enum info.
	(struct template_info): New.
	(TI_TEMPLATE, TI_ARGS, TI_PENDING_TEMPLATE_FLAG): Use
	struct template_info * here.
	(build_template_info, copy_template_info): Declare new functions.
	* gcc/cp/class.c (build_clone): Change copy_node -> copy_template_info.
	* gcc/cp/decl.c (grokfndecl): Change tree_cons -> build_template_info.
	(grokdeclarator): Do not assume TYPE_LANG_SPECIFIC always
	represents a class.
	* gcc/cp/call.c (struct z_candidate): Use struct template_info * here.
	(add_template_candidate_real): Change tree_cons -> build_template_info.
	* gcc/cp/error.c (dump_template_parms): Use struct template_info *.
	* gcc/cp/tree.c (bind_template_template_parm): Change tree_cons ->
	build_template_info.
	* gcc/cp/mangle.c (decl_is_template_id): Use struct template_info *
	here; update all callers.
	* gcc/cp/pt.c (check_explicit_specialization): Change tree_cons ->
	build_template_info.
	(push_template_decl_real): Use struct template_info * here; change
	tree_cons -> build_template_info.
	(classtype_mangled_name): Use struct template_info * here.
	(lookup_template_class): Change tree_cons -> build_template_info.
	(for_each_template_parm_r): Change TREE_VALUE -> TI_ARGS.
	(tsubst_friend_function): Use struct template_info * here.
	(tsubst_friend_class): Use struct template_info * here.
	(tsubst_decl): Use struct template_info * here; change build_tree_list
	-> build_template_info, tree_cons -> build_template_info.
	(tsubst): Change tree_cons -> build_template_info.
	(build_template_info, copy_template_info): New.
	* gcc/cp/lex.c (copy_lang_type): Make it know about lang_type_enum. 

2006-06-12  Mark Mitchell  <mark@codesourcery.com>
	    Kazu Hirata  <kazu@codesourcery.com>

	* gcc/testsuite/g++.dg/parse/ctor6.C,
	gcc/testsuite/g++.dg/parse/defarg11.C,
	gcc/testsuite/g++.dg/template/friend42.C,
	gcc/testsuite/g++.dg/template/spec30.C: New.

	Put default arguments in DECL_INITIAL of a PARM_DECL instead
	of TREE_PURPOSE of a type.
	* gcc/cp/call.c (sufficient_parms_p): Take a list of
	PARM_DECLs instead of a list of types.
	(add_function_candidate): Adjust the call to
	sufficient_parms_p.
	(add_conv_candidate): Set viable to 0 if parameters are still
	left after the "for"loop.
	sufficient_parms_p.
	(build_over_call): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.
	* gcc/cp/class.c (build_clone): Push PARM_DECLs with
	DEFAULT_ARG to DEFARG_INSTANTIATIONS.
	(adjust_clone_args): Remove.
	* gcc/cp/cp-gimplify.c (cxx_omp_clause_apply_fn): Use
	DECL_INITIAL instead of TREE_PURPOSE for default arguments.
	* gcc/cp/cp-tree.h (FUNCTION_FIRST_USER_PARM): Use
	DECL_TEMPLATE_RESULT if NODE is a function template.
	Remove the prototype for adjust_clone_args.
	Add a prototype for update_cloned_parms.
	* gcc/cp/decl.c (merge_default_arguments): New.
	(duplicate_decls): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.  Call merge_default_arguments.  Call
	update_cloned_parms.
	(grokfndecl): Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	(grokparms): Put a default argument in DECL_INITIAL instead of
	TREE_PURPOSE of a type.
	(copy_fn_p, grok_op_properties): Use DECL_INITIAL instead of
	TREE_PURPOSE for default arguments.
	(start_preparsed_function): Don't call adjust_clone_args.
	* gcc/cp/decl2.c (Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	* gcc/cp/error.c (dump_type, dump_type_suffix,
	dump_function_decl): Adjust the call dump_parameters.
	(dump_parameters): Take parmdecls as an additional parameter.
	Use DECL_INITIAL instead of TREE_PURPOSE for default
	arguments.
	* gcc/cp/method.c (locate_ctor): Adjust the call to
	sufficient_parms_p.
	(locate_copy): Adjust the call to sufficient_parms_p.
	* gcc/cp/optimize.c (update_cloned_parms): New.
	(maybe_clone_body): Call update_cloned_parms.
	* gcc/cp/parser.c (cp_parser_save_default_args,
	cp_parser_late_parsing_default_args): Use DECL_INITIAL instead
	of TREE_PURPOSE for default arguments.
	* gcc/cp/pt.c (copy_default_args_to_explicit_spec_1): Remove.
	(copy_default_args_to_explicit_spec): Copy default arguments.
	(check_explicit_specialization, tsubst_default_arguments,
	tsubst_decl): Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	(tsubst_arg_types): Don't touch DEFARG_INSTANTIATIONS.
	(fn_type_unification, unify): Adjust the call to
	type_unification_real.
	(type_unification_real): Take fn as an additional parameter.
	Use DECL_INITIAL instead of TREE_PURPOSE for default
	arguments.
	* gcc/cp/typeck.c (commonparms): Don't merge default
	arguments.
	(convert_arguments): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.

2006-06-12  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-decl.c (store_parm_decls_oldstyle): Simplify the
	construction of a linked list.

	* gcc/c-format.c (handle_format_attribute): Simplify using
	list_length.

2006-06-11  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-mudflap.c (build_function_type_0,
	build_function_type_1, build_function_type_3,
	build_function_type_4): Remove.
	(mudflap_init): Use build_function_type_list.

	* gcc/config/gcc/i386.c (init_cumulative_args): Simplify using
	stdarg_p.

	* gcc/config/gcc/i386.c (init_cumulative_args): Simplify using
	tree_last.

2006-06-10  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (sync_resolve_params): Remove an effectively
	write-only variable.

	* gcc/tree.c (build_function_type_list): Simplify by building
	the type list in the forward order in the first run.

2006-06-09  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (handle_sentinel_attribute): Use tree_last
	instead of rolling one on our own.

	* gcc/tree.c (stdarg_p): New.
	* gcc/tree.h: Add a prototype for stdarg_p.
	* gcc/builtins.c (fold_builtin_next_arg): Call stdarg_p.
	* gcc/config/i386/i386.c (ix86_return_pops_args,
	ix86_setup_incoming_varargs): Likewise.
	* gcc/dwarf2out.c (gen_subprogram_die): Likewise.
	* gcc/function.c (allocate_struct_function): Likewise.

2006-06-06  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-ssa.c (ssa_redirect_edge): Store TREE_VEC in
	PENDING_STMT.
	(reinstall_phi_args): Adjust the uses of PENDING_STMT.
	* gcc/tree-cfgcleanup.c (remove_forwarder_block_with_phi):
	Likewise.

2006-06-05  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (registered_builtin_types): Change the type
	to VEC(tree,gc) *.
	(c_common_type_for_mode, c_register_builtin_type): Update the
	uses of registered_builtin_types.

	* gcc/c-pragma.c (pending_weak_d, pending_weak): New.
	(pending_weaks): Change the type to VEC((pending_weak,gc) *.
	(maybe_apply_pragma_weak, maybe_apply_pending_pragma_weaks,
	handle_pragma_weak): Update the uses of pending_weaks.

	* gcc/tree.h (DECL_ARG_TYPE): Use parm_decl.arg_type.
	(tree_parm_decl): Add arg_type.
	* gcc/testsuite/gcc.dg/Wshadow-1.c,
	gcc/testsuite/gcc.dg/decl-4.c,
	gcc/testsuite/gcc.dg/parm-forwdecl-1.c: Look for "declaration"
	instead of "definition".

	* gcc/coverage.c (build_fn_info_value): Call build_constructor
	instead of build_constructor_from_list.

	* gcc/coverage.c (build_gcov_info): Call build_constructor
	instead of build_constructor_from_list.

	* gcc/varasm.c (weak_decls): Change the type to VEC(tree,gc) *.
	(merge_weak, declare_weak, weak_finish, globalize_decl):
	Adjust uses of weak_decls.

2006-06-03  Kazu Hirata  <kazu@codesourcery.com>

	* c-common.c (saved_function_name_decl_d,
	saved_function_name_decl): New.
	(saved_function_name_decls): Change the type to
	VEC(saved_function_name_decl,gc) *.
	(start_fname_decls, finish_fname_decls, fname_decl): Adjust
	the uses of saved_function_name_decls.
	* c-common.h (CTI_SAVED_FUNCTION_NAME_DECLS,
	saved_function_name_decls): Remove.

2006-06-01  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-vect-transform.c (vect_get_vec_def_for_operand):
	Call build_constructor instead of build_constructor_from_list.

2006-05-31  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/stor-layout.c (pending_sizes): Change the type to
	VEC(tree,gc) *.
	(get_pending_sizes, put_pending_size, put_pending_sizes):
	Update the uses of pending_sizes.
	* gcc/c-decl.c (store_parm_decls): Likewise.
	* gcc/tree.h: Update the prototype for get_pending_sizes and
	put_pending_sizes.

	* gcc/tree-cfg.c (reinstall_phi_args): Move to ...
	* gcc/tree-ssa.c: ... here.
	(flush_pending_stmts): Use reinstall_phi_args.
	* gcc/tree-flow.h: Add a prototype for reinstall_phi_args.

	* gcc/coverage.c (build_ctr_info_value): Call
	build_constructor instead of build_constructor_from_list.
