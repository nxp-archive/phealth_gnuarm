2006-07-03  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/tree.c (varargs_function_p): Use num_parm_types and
	nth_parm_type in varargs_function_p.

	* gcc/cp/pt.c (determine_specialization): Use num_parm_types and
	nth_parm_type in determine_specialization.

	* gcc/cp/typeck.c (merge_types): Use nth_parm_type.

	* gcc/cp/typeck.c (convert_arguments): Use num_parm_types and
	nth_parm_type in convert_arguments.

2006-07-02  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/cp-gimplify.c (cxx_omp_clause_apply_fn): Use
	num_parm_types and nth_parm_type.

	* gcc/cp/mangle.c (write_method_parms): Use num_parm_types and
	nth_parm_type in write_method_parms.

	* gcc/cp/class.c (add_method): Use nth_parm_type.

	* gcc/cp/pt.c (push_template_decl_real): Use num_parm_types and
	nth_parm_type in push_template_decl_real.

2006-06-30  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_over_call): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/decl.c (grok_op_properties): Use num_parm_types and
	nth_parm_type.

2006-06-29  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/pt.c (unify): Use nth_parm_type.

	* gcc/cp/tree.c (no_linkage_check): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/parser.c (cp_parser_late_parsing_default_args): Use
	num_parm_types and nth_parm_type.

2006-06-28  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (standard_conversion): Use nth_parm_type.

	* gcc/cp/cp-tree.h (DECL_CONST_MEMFUNC_P,
	DECL_VOLATILE_MEMFUNC_P): Use nth_parm_type.

	* gcc/cp/pt.c (for_each_template_parm_r): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/pt.c (tsubst_default_arguments): Use num_parm_types and
	nth_parm_type in tsubst_default_arguments.

	* gcc/cp/typeck.c (compparms): Use num_parm_types and
	nth_parm_type in compparms.

	* gcc/cp/call.c (add_function_candidate): Turn a redundant check
	into a gcc_assert.

2006-06-26  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/class.c (same_signature_p): Use nth_parm_type.

	* gcc/cp/class.c (type_requires_array_cookie): Use
	num_parm_types and nth_parm_type.

	* gcc/cp/call.c (build_op_delete_call): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_direct_abstract_declarator):
	Use nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_implicit_parameter_type): Use
	nth_parm_type.

	* gcc/cp/decl2.c (check_java_method): Use num_parm_types and
	nth_parm_type in check_java_method.

	* gcc/cp/decl.c (grokdeclarator): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/mangle.c (write_function_type): Use nth_parm_type.

2006-06-25  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_operator_new_call): Use num_parm_types
	and nth_parm_type.

2006-06-24  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/name-lookup.c (arg_assoc_args): Use num_parm_types
	and nth_parm_type.

	* gcc/cp/pt.c (dependent_type_p_r): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/method.c (locate_copy): Use num_parm_types,
	nth_parm_type, and num_artificial_parms_for.

2006-06-23  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/method.c (num_artificial_parms_for): New.
	* gcc/cp/cp-tree.h: Add a prototype for
	num_artificial_parms_for.

	* gcc/cp/call.c (standard_conversion, build_op_delete_call):
	Update the calls to compparms.
	* gcc/cp/class.c (add_method, same_signature_p): Likewise.
	* gcc/cp/decl.c (decls_match, duplicate_decls): Likewise.
	* gcc/cp/decl2.c (check_classfn): Likewise.
	* gcc/cp/name-lookup.c (push_overloaded_decl,
	do_nonmember_using_decl): Likewise.
	* gcc/cp/pt.c (is_specialization_of_friend,
	determine_specialization): Likewise.
	* gcc/cp/search.c (look_for_overrides_here): Likewise.
	* gcc/cp/typeck.c (comptypes): Likewise.
	(compparms): Add two parameters to specify the number of
	elements to be skipped.
	* gcc/cp/cp-tree.h: Update the prototype for compparms.

	* gcc/tree.c (num_parm_types, nth_parm_type): New.
	* gcc/tree.h: Add prototypes for the two new functions.

	* gcc/cp/call.c (add_template_candidate_real): Stop using
	TREE_CHAIN on TYPE_ARG_TYPES.

2006-06-16  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_op_delete_call): Use compparms.

2006-06-14  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/cp-tree.h (FUNCTION_ARG_CHAIN): Remove.

	* gcc/c-aux-info.c (deserves_ellipsis): Remove.
	(gen_formal_list_for_func_def): Call stdarg_p instead of
	deserves_ellipsis.

2006-06-13  Sandra Loosemore <sandra@codesourcery.com>

	* gcc/cp/cp-tree.h (TYPE_LANG_SLOT_1): No longer used for
	ENUM_TEMPLATE_INFO, since template info is no longer a tree type.
	(enum lang_type_tag): New.
	(struct lang_type_header): Change is_lang_type_class -> type_tag;
	updated all references.
	(struct lang_type_class): Use struct template_info * here.
	(struct lang_type_enum): New.
	(struct lang_type): Add struct lang_type_enum to union.
	(LANG_TYPE_ENUM_CHECK): New.
	(struct lang_decl_flags): Split alias from template_info; update
	all references.
	(ENUM_TEMPLATE_INFO): Rewrite for new location of enum info.
	(SET_ENUM_TEMPLATE_INFO): New, for lazy allocation of lang_type.
	(SET_TYPE_TEMPLATE_INFO): Rewrite for new location of enum info.
	(struct template_info): New.
	(TI_TEMPLATE, TI_ARGS, TI_PENDING_TEMPLATE_FLAG): Use
	struct template_info * here.
	(build_template_info, copy_template_info): Declare new functions.
	* gcc/cp/class.c (build_clone): Change copy_node -> copy_template_info.
	* gcc/cp/decl.c (grokfndecl): Change tree_cons -> build_template_info.
	(grokdeclarator): Do not assume TYPE_LANG_SPECIFIC always
	represents a class.
	* gcc/cp/call.c (struct z_candidate): Use struct template_info * here.
	(add_template_candidate_real): Change tree_cons -> build_template_info.
	* gcc/cp/error.c (dump_template_parms): Use struct template_info *.
	* gcc/cp/tree.c (bind_template_template_parm): Change tree_cons ->
	build_template_info.
	* gcc/cp/mangle.c (decl_is_template_id): Use struct template_info *
	here; update all callers.
	* gcc/cp/pt.c (check_explicit_specialization): Change tree_cons ->
	build_template_info.
	(push_template_decl_real): Use struct template_info * here; change
	tree_cons -> build_template_info.
	(classtype_mangled_name): Use struct template_info * here.
	(lookup_template_class): Change tree_cons -> build_template_info.
	(for_each_template_parm_r): Change TREE_VALUE -> TI_ARGS.
	(tsubst_friend_function): Use struct template_info * here.
	(tsubst_friend_class): Use struct template_info * here.
	(tsubst_decl): Use struct template_info * here; change build_tree_list
	-> build_template_info, tree_cons -> build_template_info.
	(tsubst): Change tree_cons -> build_template_info.
	(build_template_info, copy_template_info): New.
	* gcc/cp/lex.c (copy_lang_type): Make it know about lang_type_enum. 

2006-06-12  Mark Mitchell  <mark@codesourcery.com>
	    Kazu Hirata  <kazu@codesourcery.com>

	* gcc/testsuite/g++.dg/parse/ctor6.C,
	gcc/testsuite/g++.dg/parse/defarg11.C,
	gcc/testsuite/g++.dg/template/friend42.C,
	gcc/testsuite/g++.dg/template/spec30.C: New.

	Put default arguments in DECL_INITIAL of a PARM_DECL instead
	of TREE_PURPOSE of a type.
	* gcc/cp/call.c (sufficient_parms_p): Take a list of
	PARM_DECLs instead of a list of types.
	(add_function_candidate): Adjust the call to
	sufficient_parms_p.
	(add_conv_candidate): Set viable to 0 if parameters are still
	left after the "for"loop.
	sufficient_parms_p.
	(build_over_call): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.
	* gcc/cp/class.c (build_clone): Push PARM_DECLs with
	DEFAULT_ARG to DEFARG_INSTANTIATIONS.
	(adjust_clone_args): Remove.
	* gcc/cp/cp-gimplify.c (cxx_omp_clause_apply_fn): Use
	DECL_INITIAL instead of TREE_PURPOSE for default arguments.
	* gcc/cp/cp-tree.h (FUNCTION_FIRST_USER_PARM): Use
	DECL_TEMPLATE_RESULT if NODE is a function template.
	Remove the prototype for adjust_clone_args.
	Add a prototype for update_cloned_parms.
	* gcc/cp/decl.c (merge_default_arguments): New.
	(duplicate_decls): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.  Call merge_default_arguments.  Call
	update_cloned_parms.
	(grokfndecl): Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	(grokparms): Put a default argument in DECL_INITIAL instead of
	TREE_PURPOSE of a type.
	(copy_fn_p, grok_op_properties): Use DECL_INITIAL instead of
	TREE_PURPOSE for default arguments.
	(start_preparsed_function): Don't call adjust_clone_args.
	* gcc/cp/decl2.c (Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	* gcc/cp/error.c (dump_type, dump_type_suffix,
	dump_function_decl): Adjust the call dump_parameters.
	(dump_parameters): Take parmdecls as an additional parameter.
	Use DECL_INITIAL instead of TREE_PURPOSE for default
	arguments.
	* gcc/cp/method.c (locate_ctor): Adjust the call to
	sufficient_parms_p.
	(locate_copy): Adjust the call to sufficient_parms_p.
	* gcc/cp/optimize.c (update_cloned_parms): New.
	(maybe_clone_body): Call update_cloned_parms.
	* gcc/cp/parser.c (cp_parser_save_default_args,
	cp_parser_late_parsing_default_args): Use DECL_INITIAL instead
	of TREE_PURPOSE for default arguments.
	* gcc/cp/pt.c (copy_default_args_to_explicit_spec_1): Remove.
	(copy_default_args_to_explicit_spec): Copy default arguments.
	(check_explicit_specialization, tsubst_default_arguments,
	tsubst_decl): Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	(tsubst_arg_types): Don't touch DEFARG_INSTANTIATIONS.
	(fn_type_unification, unify): Adjust the call to
	type_unification_real.
	(type_unification_real): Take fn as an additional parameter.
	Use DECL_INITIAL instead of TREE_PURPOSE for default
	arguments.
	* gcc/cp/typeck.c (commonparms): Don't merge default
	arguments.
	(convert_arguments): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.

2006-06-12  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-decl.c (store_parm_decls_oldstyle): Simplify the
	construction of a linked list.

	* gcc/c-format.c (handle_format_attribute): Simplify using
	list_length.

2006-06-11  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-mudflap.c (build_function_type_0,
	build_function_type_1, build_function_type_3,
	build_function_type_4): Remove.
	(mudflap_init): Use build_function_type_list.

	* gcc/config/gcc/i386.c (init_cumulative_args): Simplify using
	stdarg_p.

	* gcc/config/gcc/i386.c (init_cumulative_args): Simplify using
	tree_last.

2006-06-10  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (sync_resolve_params): Remove an effectively
	write-only variable.

	* gcc/tree.c (build_function_type_list): Simplify by building
	the type list in the forward order in the first run.

2006-06-09  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (handle_sentinel_attribute): Use tree_last
	instead of rolling one on our own.

	* gcc/tree.c (stdarg_p): New.
	* gcc/tree.h: Add a prototype for stdarg_p.
	* gcc/builtins.c (fold_builtin_next_arg): Call stdarg_p.
	* gcc/config/i386/i386.c (ix86_return_pops_args,
	ix86_setup_incoming_varargs): Likewise.
	* gcc/dwarf2out.c (gen_subprogram_die): Likewise.
	* gcc/function.c (allocate_struct_function): Likewise.

2006-06-06  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-ssa.c (ssa_redirect_edge): Store TREE_VEC in
	PENDING_STMT.
	(reinstall_phi_args): Adjust the uses of PENDING_STMT.
	* gcc/tree-cfgcleanup.c (remove_forwarder_block_with_phi):
	Likewise.

2006-06-05  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (registered_builtin_types): Change the type
	to VEC(tree,gc) *.
	(c_common_type_for_mode, c_register_builtin_type): Update the
	uses of registered_builtin_types.

	* gcc/c-pragma.c (pending_weak_d, pending_weak): New.
	(pending_weaks): Change the type to VEC((pending_weak,gc) *.
	(maybe_apply_pragma_weak, maybe_apply_pending_pragma_weaks,
	handle_pragma_weak): Update the uses of pending_weaks.

	* gcc/tree.h (DECL_ARG_TYPE): Use parm_decl.arg_type.
	(tree_parm_decl): Add arg_type.
	* gcc/testsuite/gcc.dg/Wshadow-1.c,
	gcc/testsuite/gcc.dg/decl-4.c,
	gcc/testsuite/gcc.dg/parm-forwdecl-1.c: Look for "declaration"
	instead of "definition".

	* gcc/coverage.c (build_fn_info_value): Call build_constructor
	instead of build_constructor_from_list.

	* gcc/coverage.c (build_gcov_info): Call build_constructor
	instead of build_constructor_from_list.

	* gcc/varasm.c (weak_decls): Change the type to VEC(tree,gc) *.
	(merge_weak, declare_weak, weak_finish, globalize_decl):
	Adjust uses of weak_decls.

2006-06-03  Kazu Hirata  <kazu@codesourcery.com>

	* c-common.c (saved_function_name_decl_d,
	saved_function_name_decl): New.
	(saved_function_name_decls): Change the type to
	VEC(saved_function_name_decl,gc) *.
	(start_fname_decls, finish_fname_decls, fname_decl): Adjust
	the uses of saved_function_name_decls.
	* c-common.h (CTI_SAVED_FUNCTION_NAME_DECLS,
	saved_function_name_decls): Remove.

2006-06-01  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-vect-transform.c (vect_get_vec_def_for_operand):
	Call build_constructor instead of build_constructor_from_list.

2006-05-31  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/stor-layout.c (pending_sizes): Change the type to
	VEC(tree,gc) *.
	(get_pending_sizes, put_pending_size, put_pending_sizes):
	Update the uses of pending_sizes.
	* gcc/c-decl.c (store_parm_decls): Likewise.
	* gcc/tree.h: Update the prototype for get_pending_sizes and
	put_pending_sizes.

	* gcc/tree-cfg.c (reinstall_phi_args): Move to ...
	* gcc/tree-ssa.c: ... here.
	(flush_pending_stmts): Use reinstall_phi_args.
	* gcc/tree-flow.h: Add a prototype for reinstall_phi_args.

	* gcc/coverage.c (build_ctr_info_value): Call
	build_constructor instead of build_constructor_from_list.
