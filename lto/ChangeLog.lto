2006-08-14  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (build_ptrmem_type, check_function_type): Use
	nth_parm_type and copy_type_arg_types_skip.
	* gcc/cp/error.c (dump_type_suffix, dump_function_decl): Use
	nth_parm_type.

	* gcc/cp/pt.c (more_specialized_fn): Use nth_parm_type.

2006-08-13  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/pt.c (type_unification_real_args): Use num_parm_types and
	nth_parm_type.

2006-08-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/calls.c (initialize_argument_information): Pass original EXP
	and STRUCT_VALUE_ADDR_VALUE instead of a list of arguments.  Move
	code to split complex arguments here, as part of initializing the
	ARGS array.
	(expand_call): Remove code that builds a list of arguments.  Simply
	count how many implicit arguments need to be inserted to compute
	the size of the ARGS array.
	(split_complex_values): Delete unused function.

2006-08-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.h (call_expr_arg_iterator, FOR_EACH_CALL_EXPR_ARG):
	Move towards bottom of file to be near other iterator declarations.
	(tree_size, tree_code_size): Update comments.
	(init_call_expr_arg_iterator): Change from extern to static inline.
	(first_call_expr_arg): Likewise.
	(next_call_expr_arg): Likewise.
	(more_call_expr_args_p): Likewise.
	* gcc/tree.c (tree_code_size): Update comments.
	(init_call_expr_arg_iterator): Moved to tree.h as static inline.
	(first_call_expr_arg): Likewise.
	(next_call_expr_arg): Likewise.
	(more_call_expr_args_p): Likewise.

	* gcc/cp/tree.c (build_cplus_new): Use different call constructor
	to avoid constructing a temporary arglist.

	* gcc/tree-ssa-pre.c (temp_copy_call_expr): Use obstack_copy instead
	of obstac_alloc/memcpy.

	* gcc/cp/pt.c (tsubst_copy): Rewrite CALL_EXPR case to avoid
	constructing a temporary arglist.
	(tsubst_copy_and_subst): Add FIXME comment on another temporary
	arglist case.

	* gcc/java/builtins.c (java_build_function_call_expr): Rewrite to
	avoid constructing a temporary argument list.

	* gcc/java/java-tree.def (NEW_CLASS_EXPR): Update comments.

2006-08-11  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (grokparms): Use vec_heap2parm_types.

	* gcc/cp/pt.c (type_unification_real): Clone to
	type_unification_real_args and type_unification_real_parms.
	(fn_type_unification): Call type_unification_real_args instead
	of type_unification_real.
	(unify): Call type_unification_real_parms instead of
	type_unification_real.

2006-08-10  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/except.c (do_free_exception): Use alloc_parm_types.

	* gcc/cp/method.c (implicitly_declare_fn): Use alloc_parm_types.

2006-08-10  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/gentype.c (walk_type): Precompute array length before walking
	array elements.

	* gcc/tree.c (tree_code_size): Remove tcc_vl_exp, so that this
	signals an error on variably-sized expressions.
	(tree_size): Use VL_EXP_OPERAND_LENGTH instead of the more general
	TREE_OPERAND_LENGTH.
	(tree_operand_length): New function to implement TREE_OPERAND_LENGTH.
	(make_node_stat): Remove tcc_vl_exp, so that this signals an error.
	(build_nt_call_list): Rewrite to use build_vl_exp as the primitive.
	(process_call_operands): Remove explicit loop over arguments, since
	arguments are now ordinary operands.
	(build_vl_exp_stat): New primitive constructor for tcc_vl_exp objects.
	(build_call_list): Rewrite to use build_vl_exp as the primitive.
	(build_call_valist): Likewise.
	(build_call_array): Likewise.
	(init_call_expr_iterator): Rewrite for new CALL_EXPR representation.
	(next_call_expr_arg): Likewise.
	(more_call_expr_args_p): Likewise.
	(call_expr_nargs): Delete (this is now a macro).
	(call_expr_arg): Delete.  Calls changed to use the lvalue macro
	CALL_EXPR_ARG instead.
	(call_expr_argp): Delete, since it's no longer needed by the
	CALL_EXPR_ARG macro.
	(call_expr_arglist): New function used to implement the
	CALL_EXPR_ARGS macro.  
	* gcc/tree.h (TREE_OPERAND_LENGTH): Expand to call
	tree_operand_length instead of TREE_CODE_LENGTH, to account for
	variably-sized expression nodes.
	(VL_EXP_OPERAND_LENGTH): New macro.
	(CALL_EXPR_FN): Redefine for new CALL_EXPR representation.
	(CALL_EXPR_ARGS): Likewise.
	(CALL_EXPR_ARG0, CALL_EXPR_ARG1, CALL_EXPR_ARG2): Likewise.
	(CALL_EXPR_ARG): Likewise.
	(CALL_EXPR_ARGP): New macro to point to argument array in a
	CALL_EXPR.
	(call_expr_arg_iterator): Change internal state to reflect new
	CALL_EXPR representation.
	(tree_operand_length): Declare.
	(build_vl_exp_stat): Declare.
	(build_vl_exp): New macro.
	(call_expr_nargs, call_expr_arg, call_expr_argp): Delete declarations.
	(call_expr_arglist): Declare.

	* gcc/tree.def (CALL_EXPR): Document new CALL_EXPR layout.

	* gcc/builtins.c (fold_call_expr): Remove unnecessary copy to local
	array.
	(rewrite_call_expr): Rewrite to use new build_call_array.
	(expand_builtin_memory_chk): Change call_expr_arg to CALL_EXPR_ARG.
	(maybe_emit_chk_warning): Likewise.
	(maybe_emit_sprintf_chk_warning): Likewise.
	(fold_builtin_sprintf_chk): Likewise.
	(fold_builtin_snprintf_chk): Likewise.

	* gcc/objc/objc-act.c (receiver_is_class_object): Change
	call_expr_arg to CALL_EXPR_ARG.
	* gcc/tree-ssa-ccp.c (ccp_fold_builtin): Likewise.

	* gcc/tree-ssa-pre.c (list_node_pool):  Delete, since argument lists
	no longer need special treatment.
	(pool_copy_list): Likewise.
	(temp_copy_call_expr): Delete argument list copy.
	(create_expression_by_pieces): Rewrite to avoid building temporary
	argument list.
	(create_value_expr_from): Remove explicit traversal of arguments,
	since they're now ordinary operands.
	(init_pre, fini_pre): Remove references to list_node_pool.

	* gcc/cp/cp-tree.def (AGGR_INIT_EXPR): Document new layout.

	* gcc/cp/semantics.c (simplify_aggr_init_expr): Rewrite to avoid
	building a temporary argument list.

	* gcc/java/java-tree.def (NEW_CLASS_EXPR): Document new layout.

	* gcc/doc/c-tree.texi (Expression trees): Document
	new CALL_EXPR and AGGR_INIT_EXPR layout and accessors.

2006-08-10  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/pt.c (tsubst_arg_types): Use alloc_parm_types and its
	friends.

	* gcc/fortran/trans-intrinsic.c (gfc_get_intrinsic_lib_fndecl):
	Use vec_heap2parm_types.

	* gcc/cp/dbxout.c (dbxout_args): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/decl2.c (maybe_retrofit_in_chrg): Use
	vec_heap2parm_types.

2006-08-09  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/java/parse.y (patch_unaryop): Use CALL_EXPR_FN to pick
	apart CALL_EXPRs.  

2006-08-09  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/typeck.c (merge_types): Use nth_parm_type.

	* gcc/cp/decl.c (build_this_parm): Use nth_parm_type.

2006-08-09  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/builtins.c (fold_builtin_cbrt): Use CALL_EXPR_ARG0.

2006-08-09  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree.c (build_function_type_list): Don't allocate a
	temporary vector.

	* gcc/fortran/trans-decl.c (gfc_build_library_function_decl): Use
	alloc_parm_types.

	* gcc/fortran/trans-types.c (gfc_get_function_type): Use
	vec_heap2parm_types.

	* gcc/cp/call.c (standard_conversion): Use
	copy_type_arg_types_skip.
	* gcc/cp/class.c (build_clone,
	resolve_address_of_overloaded_function): Likewise.
	* gcc/cp/decl.c (revert_static_member_fn): Likewise.
	* gcc/cp/decl2.c (build_memfn_type): Likewise.
	* gcc/cp/pt.c (tsubst_function_type, unify): Likewise.
	* gcc/cp/rtti.c (get_tinfo_decl): Likewise.
	* gcc/cp/typeck.c (merge_types): Likewise.

2006-08-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/config/arm/arm.c (arm_expand_binop_builtin): Pass entire
	CALL_EXPR instead of arglist; use new accessor macros to extract
	the arguments.  Changed callers.
	(arm_expand_unop_builtin): Likewise.
	(arm_expand_builtin): Use CALL_EXPR_FN.  Use argument accessor
	macros instead of constructing an arglist.

	* gcc/config/bfin/bfin.c (bfin_expand_binop_builtin): Pass entire
	CALL_EXPR instead of arglist; use new accessor macros to extract
	the arguments.  Changed callers.
	(bfin_expand_unop_builtin): Likewise.
	(bfin_expand_builtin): Use CALL_EXPR_FN.  Use argument accessor
	macros instead of constructing an arglist.

2006-08-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/config/rs6000/rs6000.c (rs6000_expand_unop_builtin: Pass entire
	CALL_EXPR instead of arglist; use new accessor macros to extract
	the arguments.  Changed callers.
	(altivec_expand_abs_builtin): Likewise.
	(rs6000_expand_binop_builtin): Likewise.
	(altivec_expand_predicate_builtin): Likewise.
	(altivec_expand_lv_builtin): Likewise.
	(spe_expand_stv_builtin): Likewise.
	(altivec_expand_stv_builtin): Likewise.
	(rs6000_expand_ternop_builtin): Likewise.
	(altivec_expand_ld_builtin): Use CALL_EXPR_FN.  Use argument accessor
	macros instead of constructing an arglist.
	(altivec_expand_st_builtin): Likewise.
	(altivec_expand_dst_builtin): Likewise.
	(altivec_expand_vec_init_builtin):  Pass entire
	CALL_EXPR instead of arglist; use new accessor macros to extract
	the arguments.  Changed callers.
	(altivec_expand_vec_set_builtin): Likewise.
	(altivec_expand_vec_ext_builtin): Likewise.
	(altivec_expand_builtin): Use CALL_EXPR_FN.  Use argument accessor
	macros instead of constructing an arglist.
	(spe_expand_builtin): Likewise.
	(spe_expand_predicate_builtin): Pass entire
	CALL_EXPR instead of arglist; use new accessor macros to extract
	the arguments.  Changed callers.
	(spe_expand_evsel_builtin): Likewise.
	(rs6000_expand_builtin): Use CALL_EXPR_FN.  Use argument accessor
	macros instead of constructing an arglist.

2006-08-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/config/iq2000/iq2000.c (expand_one_builtin): Pass entire
	CALL_EXPR instead of arglist; use new accessor macros to extract
	the arguments.  Changed callers.
	(iq2000_expand_builtin): Use CALL_EXPR_FN.  Use argument accessor
	macros instead of constructing an arglist.

2006-08-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/config/alpha/alpha.c (alpha_expand_builtin): Use new
	CALL_EXPR accessors.
	* gcc/config/frv/frv.c (frv_expand_builtin): Likewise.
	* gcc/config/s390/s390.c (s390_expand_builtin): Likewise.
	* gcc/config/sparc/sparc.c (sparc_expand_builtin): Likewise.
	* gcc/config/sh/sh.c (sh_expand_builtin): Likewise.
	* gcc/config/mips/mips.c (mips_expand_builtin): Likewise.
	* gcc/config/c4x/c4x.c (c4x_expand_builtin): Likewise.

2006-08-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/config/i386/i386.c (ix86_expand_binop_builtin): Pass entire
	CALL_EXPR instead of arglist; use new accessor macros to extract
	the arguments.  Changed callers.
	(ix86_expand_store_builtin): Likewise.
	(ix86_expand_unop_builtin): Likewise.
	(ix86_expand_unop1_builtin): Likewise.
	(ix86_expand_sse_compare): Likewise.
	(ix86_expand_sse_comi): Likewise.
	(ix86_expand_vec_init_builtin): Likewise.
	(ix86_expand_vec_ext_builtin): Likewise.
	(ix86_expand_vec_set_builtin): Likewise.
	(ix86_expand_builtin): Use CALL_EXPR_FN.  Use argument accessor
	macros instead of constructing an arglist.

2006-08-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/gimplify.c (gimplify_call_expr): Use CALL_EXPR_FN.

2006-08-08  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/config/i386/i386.c (ix86_init_mmx_sse_builtins): Use
	build_function_type_list instead of build_function_type.

	* gcc/cgraphunit.c (cgraph_build_static_cdtor): Use
	build_function_type_list instead of build_function_type.
	* gcc/tree-ssa-loop-prefetch.c (tree_ssa_prefetch_arrays):
	Likewise.
	* gcc/tree.c (build_common_builtin_nodes): Likewise.

	* gcc/cp/call.c (build_java_interface_fn_ref): Use
	build_function_type_list instead of build_function_type.
	* gcc/cp/decl.c (cxx_init_decl_processing, get_atexit_node,
	start_cleanup_fn, expand_static_init): Likewise.
	* gcc/cp/decl2.c (start_objects,
	start_static_storage_duration_function): Likewise.
	* gcc/cp/except.c (init_exception_processing,
	do_get_exception_ptr, do_begin_catch, do_allocate_exception,
	build_throw): Likewise.
	* gcc/cp/rtti.c (throw_bad_cast, throw_bad_typeid,
	build_dynamic_cast_1): Likewise.

	* gcc/fortran/f95-lang.c (build_builtin_fntypes,
	gfc_init_builtin_functions): Use build_function_type_list instead
	of build_function_type.

2006-08-07  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/tree.c (copy_type_arg_types_skip): New.
	* gcc/cp/cp-tree.h: Add a prototype for copy_type_arg_types_skip.

	* gcc/fortran/trans-decl.c (create_function_arglist): Use
	num_parm_types and nth_parm_type.

2006-08-07  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.c (substitute_in_expr, substitute_placeholder_in_expr):
	Simplify implementation of tcc_vl_exp case.
	(build3_stat, build_nt): Don't allow these to be used for
	building CALL_EXPRs and other tcc_vl_exps.
	(build_nt_call_list): New function, equivalent to build_nt for
	tcc_vl_exps.
	(process_call_operands): New function used as a helper by other
	new constructors for tcc_vl_exps.
	(build_call_list): New constructor for tcc_vl_exps.
	(build_call_nary): Likewise.
	(build_call_valist): Likewise.
	(build_call_array): Likewise.
	* gcc/tree.h (build_nt_call_list): Declare new function.
	(build_call_list): Likewise.
	(build_call_nary): Likewise.
	(build_call_valist): Likewise.
	(build_call_array): Likewise.
	(fold_build_call_list): Likewise.
	(fold_build_call_list_initializer): Likewise.
	(fold_build_call_expr): Deleted, and replaced with...
	(fold_builtin_call_list, fold_builtin_call_valist): Declare.
	* gcc/builtins.c (fold_builtin_call_list): Replacement for
	fold_build_call_expr.  Renamed for consistency with other new
	CALL_EXPR constructors, and removed the static_chain argument since
	it is never used.  Fixed all callers.
	(build_call_expr): Split up and move much of the code into...
	(fold_builtin_call_valist): New function.
	* gcc/fold-const.c (fold): Add clause for tcc_vl_exp specially.  
	Remove CALL_EXPR handling from ternary operator case.
	(fold_build3_stat):  Don't allow this to build tcc_vl_exps.
	(fold_build_call_list): New function replacing uses of fold_build3
	to build CALL_EXPRs.
	(fold_build_call_list_initializer): Likewise, replacing uses of
	fold_build3_initializer.
	* gcc/c-typeck.c (build_function_call): Use fold_build_call_list
	and fold_build_call_list_initializer.
	* gcc/calls.c (expand_call): Use new CALL_EXPR accessors.
	* gcc/tree-ssa-pre.c (expression_node_pool): Delete, since alloc_pool
	can't be used to manage pools of variably-sized objects.
	(temp_call_expr_obstack): Declare.
	(temp_copy_call_expr): New routine for creating temporary
	tcc_vl_expr objects used in this pass.
	(phi_translate): Rewrite the CALL_EXPR section to be independent
	of the storage representation.  Use temp_copy_call_expr.  Don't
	value number the arglist.
	(valid_in_set): Clean up CALL_EXPR section a little.
	(create_expression_by_pieces): Likewise.
	(create_value_expr_from): Use temp_copy_call_expr.  Don't value
	number the arglist.
	(init_pre): Update initialization of temp memory for CALL_EXPRs.
	(fini_pre): Update deallocation of temp memory for CALL_EXPRs.

	* gcc/java/parse.y (patch_invoke): Use build_call_list/build_call_nary
	instead of build3.
	(build_method_invocation): Likewise.
	(build_new_invocation): Likewise.
	(patch_cast): Likewise.
	(patch_newarray): Likewise.
	(build_assertion): Likewise.
	* gcc/java/expr.c (build_java_athrow): Likewise.
	(build_java_throw_out_of_bounds_exception): Likewise.
	(java_check_reference): Likewise.
	(build_java_arraystore_check): Likewise.
	(build_anewarray): Likewise.
	(expand_java_multinewarray): Likewise.
	(build_java_monitor): Likewise.
	(java_create_object): Likewise.
	(expand_java_NEW): Likewise.
	(build_instanceof): Likewise.
	(expand_java_CHECKCAST): Likewise.
	(build_java_soft_divmod): Likewise.
	(build_java_binop): Likewise.
	(build_field_ref): Likewise.
	(build_class_init): Likewise.
	(build_invokeinterface): Likewise.
	(expand_invoke): Likewise.
	(build_jni_stub): Likewise.
	(force_evaluation_order): Use new CALL_EXPR accessors.
	* gcc/java/parse.h (BUILD_THROW): Use build_call_nary.
	* gcc/java/java-tree.h (BUILD_MONITOR_ENTER, BUILD_MONITOR_EXIT):
	Likewise.
	* gcc/java/jcf-write.c (generate_bytecode_insns): Use new CALL_EXPR
	accessors.

	* gcc/cp/call.c (build_call): Use build_call_list instead of build3.
	(build_over_call): Likewise.
	(build_java_interface_fn_ref): Likewise.
	(build_new_method_call): Use build_min_non_dep_call_list.
	* gcc/cp/tree.c (build_cplus_new): Use build_call_list.
	(build_min_nt, build_min): Can't use these for building tcc_vl_exps.
	(build_min_nt_call_list): New function, equivalent to build_min_nt.
	(build_min_non_dep_call_list): New function, equivalent to
	build_min_non_dep.
	* gcc/cp/tree.h (AGGR_INIT_EXPR_SLOT): New.
	(build_min_nt_call_list, build_min_non_dep_call_list): Declare.
	* gcc/cp/dump.c (cp_dump_tree): Use new AGGR_INIT_EXPR accessors.
	* gcc/cp/cp-gimplify.c (cp_gimplify_init_expr): Likewise.
	* gcc/cp/cxx-pretty-print.c (pp_cxx_postfix_expression): Likewise.
	* gcc/cp/pt.c (tsubst_copy): Use build_nt_call_list.
	* gcc/cp/semantics.c (finish_call_expr): Use build_nt_call_list
	and build_call_list.
	(simplify_aggr_init_expr): Use new AGGR_INIT_EXPR accessors.  Use
	build_call_list.
	* gcc/cp/decl2.c (build_offset_ref_call_from_tree): Use
	build_min_nt_call_list and build_in_non_dep_call_list.
	* gcc/cp/parser.c (cp_parser_postfix_expression): Use
	build_min_nt_call_list.

	* gcc/fortran/trans-expr.c (gfc_conv_function_call): Use
	build_call_list.

2006-08-06  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree.c (build_function_type_list): Use vec_heap2parm_types.

	* gcc/c-decl.c (get_parm_info): Use alloc_parm_types.

	* gcc/c-decl.c (grokparms): Use num_parm_types and its friends.
	Convert arg_info->types to arg_info->parms.

2006-08-05  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl2.c (coerce_new_type, coerce_delete_type): Don't use
	void_list_node in equality comparisons.
	* gcc/cp/pt.c (tsubst, tsubst_copy, tsubst_copy_asm_operands,
	tsubst_copy_and_build): Likewise.
	* gcc/cp/typeck.c (commonparms): Likewise.

	* gcc/cp/decl2.c (coerce_delete_type): Use num_parm_types and its
	friends.

	* gcc/cp/decl2.c (coerce_new_type): Use num_parm_types and its
	friends.

	* gcc/typeck.c (commonparms): Use num_parm_types and its friends.

	* gcc/c-common.c (def_fn_type): Use vec_heap2parm_types.

	* gcc/c-common.c (check_function_sentinel): Use num_parm_types.

2006-08-02  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-typeck.c (composite_type): Use alloc_parm_types and its
	friends.

2006-08-01  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-parser.c (c_parser_parms_declarator): Use
	vec_heap2parm_types.

2006-07-31  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.h (enum tree_code_class): Add tcc_vl_exp, to represent
	CALL_EXPR and similar lang-specific constructs with a variable-length
	operand vector.
	(VL_EXP_CLASS_P): New.
	(TREE_OPERAND_CHECK, TREE_OPERAND_CHECK_CODE, TREE_RTL_OPERAND_CHECK):
	Use TREE_OPERAND_LENGTH.
	(VL_EXP_CHECK): New.
	(TREE_OPERAND_LENGTH): New.  This should be used in preference to
	TREE_CODE_LENGTH except when we're explicitly dealing with objects
	whose size is fixed by their tree code.
	(CALL_EXPR_FN, CALL_EXPR_STATIC_CHAIN, CALL_EXPR_ARGS): Add type
	checking with VL_EXP_CHECK.
	* gcc/tree.def (CALL_EXPR): Change class to tcc_vl_exp.
	* gcc/tree.c (tree_code_class_string): Add tcc_vl_exp.
	(tree_code_size): Add case for tcc_vl_exp.
	(tree_size): Likewise.
	(make_node_stat): Likewise.
	(tree_node_structure): Likewise.
	(contains_placeholder_p): Likewise.
	(substitute_in_expr): Likewise.
	(substitute_placeholder_in_expr): Likewise.
	(stabilize_reference_1): Likewise.
	(iterative_hash_expr): Use TREE_OPERAND_LENGTH.
	(tree_operand_check_failed): Pass tree of offending expression
	instead of its code, and use TREE_OPERAND_LENGTH on it instead
	of TREE_CODE_LENGTH.  Changed declaration and all callers in 
	tree.h as well.
	(walk_tree): Use TREE_OPERAND_LENGTH.

	* gcc/tree-ssa-loop-im.c (outermost_invariant_loop_expr):
	Add case for tcc_vl_exp and use TREE_OPERAND_LENGTH.
	(force_move_till_expr): Likewise.
	* gcc/tree-ssa-loop-ivopts.c (expr_invariant_in_loop_p): Likewise.
	* gcc/tree-ssa-loop-niter.c (simplify_replace_tree): Likewise.
	(expand_simple_operations): Likewise.
	* gcc/tree-ssa-pre.c (phi_translate): Likewise.
	(valid_in_set): Likewise.
	(create_expression_by_pieces): Likewise.
	(create_value_expr_from): Likewise.
	* gcc/tree-ssa-structalias.c (get_constraint_for): Likewise.
	(find_func_alises): Likewise.
	* gcc/tree-ssa-reassoc.c (get_rank): Likewise.
	* gcc/tree-pretty-print.c (do_niy): Likewise.
	* gcc/gengtype.c (adjust_field_tree_exp): Likewise.
	* gcc/optabs.c (expand_widen_pattern_expr): Likewise.
	* gcc/expr.c (safe_from_p): Likewise.
	* gcc/fold-const.c (operand_equal_p): Likewise.
	(make_range): Likewise.
	(extract_muldiv_1): Likewise.
	* gcc/ipa-pure-const.c (scan_function): Likewise.
	* gcc/ipa-reference.c (scan_for_static_refs): Likewise.
	* gcc/ipa-type-escape.c (scan_for_refs): Likewise.
	* gcc/tree-gimple.c (recalculate_side_effects): Likewise.
	* gcc/tree-vectorizer.c (vect_is_simple_reduction): Likewise.
	* gcc/print-tree.c (print_node): Likewise.
	* gcc/tree-vect-transform.c (vect_create_epilog_for-reduction):
	Likewise.
	(vectorizable_reduction): Likewise.
	(vectorizable_live_operation): Likewise.
	* gcc/c-common.c (verify_tree): Likewise.
	* gcc/stmt.c (warn_if_unused_value): Likewise.

	* gcc/tree-browser.c (store_child_info): Use TREE_OPERAND_LENGTH
	and generalize switch to loop over operands.
	(TB_parent_eq): Likewise.
	* gcc/tree-chrec.c (chrec_contains_symbols): Likewise.
	(chrec_contains_undetermined): Likewise.
	(tree_contains_chrecs): Likewise.
	(evolution_function_is_invariant_rec_p): Likewise.
	* gcc/tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):
	Likewise.
	(instantiate_parameters_1): Assert failure for case not handled
	by this code.
	* gcc/c-semantics.c (build_stmt): Add assertion to trap case
	not handled by this code.

	* gcc/cp/cp-tree.def (AGGR_INIT_EXPR): Change class to tcc_vl_exp.
	* gcc/cp/tree.c (cp_tree_equal): Add tcc_vl_exp.  Use
	TREE_OPERAND_LENGTH instead of TREE_CODE_LENGTH.
	* gcc/cp/mangle.c (write_expression): Likewise.
	* gcc/cp/pt.c (value_dependent_expression_p): Likewise.
	* gcc/cp/parse.y (find_expr_with_wfl): Likewise.

	* gcc/java/java-tree.def (NEW_CLASS_EXPR): Change class to tcc_vl_exp.

	* gcc/config/sparc/sparc.c (sparc_gimplify_va_arg):
	Use build_call_expr.
	* gcc/config/i386/i386.c (ix86_function_ok_for_sibcall):
	Use new CALL_EXPR accessors.
	* gcc/config/rs6000/rs6000-c.c (altivec_build_resolved_builtin):
	Use build_call_expr.

2006-07-29  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/config/i386/i386.c (x86_this_parameter): Use num_parm_types
	and nth_parm_type in x86_this_parameter.

	* gcc/cp/pt.c (type_unification_real): Use num_parm_types and
	nth_parm_type.

2006-07-28  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/pt.c (tsubst_arg_types): Do not use recursion.

	* gcc/c-decl.c (store_parm_decls_oldstyle): Use num_parm_types and
	its friends.

2006-07-26  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (grokdeclarator): Use num_parm_types and
	nth_parm_type.

2006-07-25  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/java/parse.y (resolve_qualified_expression_name): use result
	of patch_method_invocation instead of assuming it always works
	destructively.

2006-07-21  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/fortran/trans-expr.c (gfc_conv_power_op): Use build_call_expr.
	(gfc_conv_string_tmp): Likewise.
	(gfc_conv_concat_op): Likewise.
	(gfc_build_compare_string): Likewise.
	(gfc_trans_string_copy): Likewise.

	* gcc/fortran/trans-array.c (gfc_trans_allocate_array_storage):
	Use build_call_expr.
	(gfc_grow_array): Likewise.
	(gfc_trans_array_ctor_element): Likewise.
	(gfc_trans_array_constructor_value): Likewise.
	(gfc_array_allocate): Likewise.
	(gfc_array_deallocate): Likewise.
	(gfc_trans_auto_array_allocation): Likewise.
	(gfc_trans_dummy_array_bias): Likewise.
	(gfc_conv_array_parameter): Likewise.

	* gcc/fortran/trans-openmp.c (gfc_trans_omp_barrier):
	Use build_call_expr.
	(gfc_trans_omp_flush): Likewise.

	* gcc/fortran/trans-stmt.c (gfc_conv_elemental_dependencies):
	Use build_call_expr.
	(gfc_trans_pause): Likewise.
	(gfc_trans_stop): Likewise.
	(gfc_trans_logical_select): Likewise.
	(gfc_do_allocate): Likewise.
	(gfc_trans_assign_need_temp): Likewise.
	(gfc_trans_pointer_assign_need_temp): Likewise.
	(gfc_trans_forall_1): Likewise.
	(gfc_trans_where_2): Likewise.
	(gfc_trans_allocate): Likewise.
	(gfc_trans_deallocate): Likewise.

	* gcc/fortran/trans-io.c (gfc_trans_open): Use build_call_expr.
	(gfc_trans_close): Likewise.
	(build_filepos): Likewise.
	(gfc_trans_inquire): Likewise.
	(transfer_namelist_element): Likewise.
	(build_dt): Likewise.
	(gfc_trans_dt_end): Likewise.
	(transfer_expr): Likewise.
	(transfer_array_desc): Likewise.

	* gcc/fortran/trans-decl.c (gfc_generate_function_code):
	Use build_call_expr.
	(gfc_generate_constructors): Likewise.

	* gcc/fortran/trans-intrinsic.c (gfc_conv_intrinsic_ctime):
	Use build_call_expr.
	(gfc_conv_intrinsic_fdate): Likewise.
	(gfc_conv_intrinsic_ttynam): Likewise.
	(gfc_conv_intrinsic_array_transfer): Likewise.
	(gfc_conv_associated): Likewise.
	(call_builtin_clz): Likewise.
	(gfc_conv_intrinsic_si_kind): Likewise.
	(gfc_conv_intrinsic_trim): Likewise.
	(gfc_conv_intrinsic_iargc): Likewise.

	* gcc/fortran/trans.c (gfc_trans_runtime_check): Use build_call_expr.

2006-07-21  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/cp/error.c (dump_call_expr_args): New.
	(dump_expr): Use new CALL_EXPR accessors.  Use dump_call_expr_args
	instead of dump_expr_list.

	* gcc/cp/tree.c (build_cplus_new): Use new CALL_EXPR accessors.
	(cp_tree_equal): Likewise.
	(stabilize_call): Likewise.

	* gcc/cp/dump.c (cp_dump_tree): Dump CALL_EXPR arguments individually
	instead of as a list.

	* gcc/cp/cp-gimplify.c (cp_gimplify_init_expr): Use new CALL_EXPR
	accessors.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_postfix_expression): Use new
	CALL_EXPR accessors.

	* gcc/cp/pt.c (tsubst_copy): Use new CALL_EXPR accessors.
	(tsubst_copy_and_build): Likewise.
	(value_dependent_expression_p): Likewise.

	* gcc/cp/semantics.c (simplify_aggr_init_expr): Use new CALL_EXPR
	accessors.

2006-07-21  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/objc/objc-act.c (receiver_is_class_object): Use new
	CALL_EXPR accessors.
	(objc_get_callee_fndecl): Likewise.

2006-07-21  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/java/parse.y (nested_field_expanded_access_p):  Use new
	CALL_EXPR accessors.
	(extract_field_decl): Likewise.
	(resolve_qualified_expression_name): Likewise.
	(patch_method_invocation): Likewise.
	(patch_invoke): With the change in CALL_EXPR representation, it's
	no longer possible to replace the entire argument list.  Instead,
	create a new object, transferring the relevant status bits
	from the old call object.
	(java_complete_lhs): Use new CALL_EXPR accessors.
	(complete_function_arguments):  Likewise.

	* gcc/java/class.c (build_static_field_ref): Use build_call_expr.
	(emit_indirect_register_classes): Likewise.
	(emit_register_classes): Likewise.

	* gcc/java/decl.c (finish_method): Use build_call_expr.

	* gcc/java/check-init.c (check_init): Use new CALL_EXPR accessors.

	* gcc/java/resource.c (write_resource_constructor): Use
	build_call_expr.

	* gcc/java/builtins.c (builtin_creator_function): Pass entire
	CALL_EXPR as the second argument, not just the argument list.
	(max_builtin): Extract arguments from CALL_EXPR using new accessors.
	(min_builtin): Likewise.
	(abs_builtin): Likewise.
	(java_build_function_call_expr): Rewrite to use new CALL_EXPR
	constructors.
	(convert_real): Extract arguments from CALL_EXPR using new accessors.
	(check_for_builtin): Pass entire CALL_EXPR as argument to creator,
	rather than just its argument list.

	* gcc/java/lang.c (java_get_callee_fndecl): Use new CALL_EXPR
	accessors.

	* gcc/java/java-tree.h (CALL_THIS_CONSTRUCTOR_P): Use new CALL_EXPR
	accessors.
	(CALL_SUPER_CONSTRUCTOR_P): Likewise.

2006-07-21  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.h (CALL_EXPR_FN, CALL_EXPR_STATIC_CHAIN, CALL_EXPR_ARGS):
	Temporarily remove checking, since CALL_EXPR-like things in the
	Java and C front ends with other TREE_CODEs need to use these, too.
	This can be fixed permanently when the representation change is
	made and there is a new TREE_CODE_CLASS for these things.

2006-07-21  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (decls_match): Use num_parm_types and
	nth_parm_type.

2006-07-20  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree.c (variably_modified_type_p): Use num_parm_types and
	nth_parm_type.

	* gcc/tree.c (walk_type_fields): Use num_parm_types and
	nth_parm_type_ptr.

	* gcc/c-pretty-print.c (pp_c_parameter_type_list): Use
	num_parm_types and nth_parm_type.

	* gcc/calls.c (split_complex_types): Use num_parm_types,
	nth_parm_types, and nth_parm_type_ptr.

	* gcc/cp/decl2.c (check_default_args): Don't check for
	void_list_node.

2006-07-18  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/dbxout.c (dbxout_type_method_1): Use nth_parm_type.

	* gcc/cp/cp-tree.h (FUNCTION_FIRST_USER_PARMTYPE): Remove.

	* gcc/tree.c (nth_parm_type_ptr, alloc_parm_types,
	vec_heap2parm_types): New.
	* gcc/tree.h: Add prototypes to the new functions.

2006-07-16  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-aux-info.c (gen_formal_list_for_type): Use num_parm_types
	and nth_parm_type.

	* gcc/c-common.c (handle_nonnull_attribute): Use num_parm_types
	and nth_parm_type.

	* gcc/c-decl.c (validate_proto_after_old_defn): Use nth_parm_type.

	* gcc/tree-ssa-structalias.c (count_num_arguments): Use
	num_parm_types and nth_parm_type.

	* gcc/c-common.c (sync_resolve_params): Use num_parm_types and
	nth_parm_type.

2006-07-15  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/ipa-type-escape.c (check_call): Use num_parm_types and
	nth_parm_type.

	* gcc/tree.c (type_num_arguments): Use num_parm_types and
	nth_parm_type.

	* gcc/dwarf2out.c (gen_formal_types_die): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/error.c (dump_function_decl): Use
	num_artificial_parms_for and nth_parm_type.

	* gcc/cp/error.c (dump_type_suffix): Don't use TREE_CHAIN on
	TYPE_ARG_TYPES.

2006-07-14  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-decl.c (start_function): Use num_parm_types and
	nth_parm_type.

	* gcc/c-format.c (check_format_string): Use num_parm_types and
	nth_parm_type.

	* gcc/c-common.c (handle_sentinel_attribute): Use nth_parm_type
	and num_parm_types.

	* gcc/c-typeck.c (type_lists_compatible_p): Use num_parm_types and
	nth_parm_type.

	* gcc/c-typeck.c (convert_arguments): Use num_parm_types and
	nth_parm_type.

	* gcc/expr.c (block_move_libcall_safe_for_call_parm): Use
	num_parm_types and nth_parm_type.

	* gcc/ipa-type-escape.c (check_cast): Use num_parm_types and
	nth_parm_type.

2006-07-13  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-decl.c (diagnose_arglist_conflict): Use num_parm_types and
	nth_parm_type.

	* gcc/c-decl.c (match_builtin_function_types): Use num_parm_types
	and nth_parm_type.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-operands.c (add_call_read_ops): Use new CALL_EXPR
	accessors.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-structalias.c (find_func_aliases): Use new
	CALL_EXPR accessors and iterators.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-profile.c (tree_gen_interval_profiler): Use
	build_call_expr.
	(tree_gen_pow2_profiler): Likewise.
	(tree_gen_one_value_profiler): Likewise.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-object-size.c (alloc_object_size):  Use build_call_expr
	and simplify logic to avoid having to iterate over arguments.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-vect-transform.c (vectorizable_load): Use build_call_expr.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-loop-prefetch.c (issue_prefetch_ref): Use
	build_call_expr.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-sra.c (sra_walk_call_expr): Use new CALL_EXPR interface
	for iterating over arguments.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-pre.c (phi_translate): Use new CALL_EXPR accessors.
	(valid_in_set):  Likewise.
	(create_expression_by_pieces): Likewise.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-alias.c (find_used_portions): Use new CALL_EXPR
	accessors.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-stdarg.c (execute_optimize_stdarg):  Use new CALL_EXPR
	accessors.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-ccp.c (ccp_fold, fold_stmt): Use new CALL_EXPR
	accessors and constructor.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-tailcall.c (find_tail_calls, eliminate_tail_call):  Use
	new CALL_EXPR argument iterators.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-pretty-print.c (dump_generic_node, print_call_name):
	Use new CALL_EXPR accessors and iterators.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined):  Use
	FOR_EACH_CALL_EXPR_ARG to iterate over arguments.

2006-07-12  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-vrp.c (stmt_interesting_for_vrp, vrp_visit_stmt):  Use
	new CALL_EXPR accessors.

2006-07-12  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/builtins.c (builtin_mathfn_code): Use num_parm_types and
	nth_parm_type.

2006-07-11  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/calls.c (expand_call): Use num_parm_types.

	* gcc/c-common.c (self_promoting_args_p): Use num_parm_types
	and nth_parm_type.

	* gcc/c-format.c (handle_format_attribute): Use num_parm_types.

	* gcc/dwarf2out.c (decl_class_context): Use nth_parm_type.

	* gcc/tree.c (decl_function_context): Use nth_parm_type.

	* gcc/tree.c (stdarg_p): Use num_parm_types and nth_parm_type.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-inline.c (initialize_inlined_parameters): Pass whole
	CALL_EXPR instead of arglist and static_chain.  Use new abstract 
	accessors to extract the pieces.  Fixed callers.
	(estimate_num_insns_1):  Use abstract CALL_EXPR iterator.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-nested.c (convert_nl_goto_reference): Use build_call_expr.
	(convert_tramp_reference): Likewise.  Iterate over arguments
	directly instead of extracting them as a TREE_LIST.
	(convert_call_expr): Use CALL_EXPR_STATIC_CHAIN.
	(finalize_nesting_tree_1): Use build_call_expr.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-mudflap.c (mf_build_check_statement_for):  Use
	build_call_expr instead of build_function_call_expr.
	(mx_register_decls): Likewise.
	(mudflap_register_call): Likewise.
	(mudflap_finish_file): Likewise.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-data-ref.c (find_data_references_in_loop): Use new
	abstract CALL_EXPR iterators.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/predict.c (expr_expected_value): Use new CALL_EXPR accessors.
	Fix obvious cut-and-paste error.
	(strip_builtin_expect): Use new CALL_EXPR accessors.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-gimple.c (is_gimple_call_addr): Fix comment.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.c (contains_placeholder_p): Use new abstract CALL_EXPR
	accessors and argument iterators.
	(simple_cst_equal): Likewise.
	(get_callee_fndecl): Likewise.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-complex.c (expand_complex_libcall): Use build_call_expr.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree-dump.c (dequeue_and_dump): dump arguments individually
	instead of as a list.

2006-07-11  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/targhooks.c (default_external_stack_protect_fail): Use
	build_call_expr instead of build_function_call_expr.
	(default_hidden_stack_protect_fail): Likewise.

2006-07-10  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/method.c (synthesize_method): Use num_parm_types,
	num_artificial_parms_for, and nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_parameter_declaration_clause):
	Use num_artificial_parms_for and nth_parm_type in
	pp_cxx_parameter_declaration_clause.

	* gcc/cp/error.c (dump_type, dump_type_suffix,
	dump_function_decl): Adjust calls to dump_parameters.
	(dump_parameters): Add a parameter to specify how many parameters
	are to be skipped.

2006-07-08  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (grokdeclarator): Use num_parm_types,
	nth_parm_type, and num_artificial_parms_for.

	* gcc/cp/decl.c (grokparms): Use num_parm_types,
	num_artificial_parms_for, and nth_parm_type.

2006-07-08  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.c (call_expr_argp): New function that returns a pointer
	to the Nth argument, rather than its value.  I'm expecting this
	function to go away again once the low-level conversion of
	CALL_EXPR representation is in place; it only exists to support....
	* gcc/tree.h (CALL_EXPR_ARG): New macro to access the Nth argument as
	an lvalue.

	* gcc/fold-const.c (negate_expr_p): Use new abstract CALL_EXPR
	accessors, constructors, and iterators.
	(negate_expr): Likewise.
	(operand_equal_p): Likewise.
	(fold_mathfn_compare): Likewise.
	(fold_binary): Likewise.
	(tree_expr_nonnegative_p): Likewise.
	* gcc/gimplify.c (build_stack_save_restore): Likewise.
	(gimplify_decl_expr): Likewise.
	(gimplify_call_expr): Likewise.
	(gimplify_cond_expr): Likewise.
	(gimplify_modify_expr_to_memcpy): Likewise.
	(gimplify_modify_expr_to_memset): Likewise.
	(gimplify_variable_sized_compare): Likewise.
	(gimplify_omp_atomic_fetch_op): Likewise.
	(gimplify_omp_atomic_pipeline): Likewise.
	(gimplify_omp_atomic_mutex): Likewise.
	(gimplify_function_tree): Likewise.
	* gcc/ipa-cp.c (ipcp_update_callgraph): Likewise.
	* gcc/ipa-prop.c (ipa_callsite_compute_count): Likewise.
	(ipa_callsite_compute_param): Likewise.
	* gcc/ipa-pure-const.c (check_call): Likewise.
	* gcc/ipa-reference.c (check_call): Likewise.
	* gcc/function.c (gimplify_parameters): Likewise.
	* gcc/ipa-type-escape.c (check_call): Likewise.
	* gcc/omp-low.c (build_omp_barrier): Likewise.
	(lower_rec_input_clauses): Likewise.
	(lower_reduction_clauses): Likewise.
	(expand_parallel_call): Likewise.
	(maybe_catch_exception): Likewise.
	(expand_omp_for_generic): Likewise.
	(expand_omp_for_static_nochunk): Likewise.
	(expand_omp_for_static_chunk): Likewise.
	(expand_omp_sections): Likewise.
	(lower_omp_single_simple): Likewise.
	(lower_omp_single_copy): Likewise.
	(lower_omp_master): Likewise.
	(lower_omp_ordered): Likewise.
	(lower_omp_critical): Likewise.

2006-07-07  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.h (FOR_EACH_CALL_EXPR_ARG):  Define new macro for
	iterating over argument lists.

	* gcc/builtins.c (expand_builtin): Use FOR_EACH_CALL_EXPR_ARG.
	* gcc/cgraphunit.c (cgraph_create_edges): Likewise.
	* gcc/c-pretty-print.c (pp_c_postfix_expression): Likewise.
	* gcc/c-common.c (verify_tree): Likewise.

2006-07-07  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/cgraphunit.c (cgraph_create_edges, update_call_expr): Convert
	to use new abstract CALL_EXPR accessors, iterators, and constructors.
	* gcc/dojump.c (do_jump): Likewise.
	* gcc/expr.c (emit_block_move_via_libcall): Likewise.
	(clear_storage_via_libcall): Likewise.
	(expand_expr_real_1): Likewise.
	* gcc/c-pretty-print.c (pp_c_postfix_expression): Likewise.
	* gcc/calls.c (alloca_call_p, call_expr_flags): Likewise.
	* gcc/coverage.c (create_coverage): Likewise.
	* gcc/c-omp.c (c_finish_omp_barrier, c_finish_omp_flush): Likewise.
	* gcc/c-common.c (verify_tree): Likewise.
	(check_function_arguments_recurse): Likewise.
	* gcc/convert.c (convert_to_real, convert_to_integer): Likewise.

2006-07-07  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/decl.c (add_conv_candidate): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/call.c (add_function_candidate): Use num_parm_types
	and nth_parm_type.

	* gcc/cp/decl.c (duplicate_decls): Use num_parm_types and
	nth_parm_type.

2006-07-06  Sandra Loosemore  <sandra@codesourcery.com>

	* gcc/tree.c (init_call_expr_arg_iterator): Define.
	(first_call_expr_arg): Define.
	(next_call_expr_arg): Define.
	(more_call_expr_args_p): Define.
	(call_expr_nargs): Define.
	(call_expr_arg): Define.
	* gcc/tree.h (CALL_EXPR_FN, CALL_EXPR_STATIC_CHAIN, CALL_EXPR_ARGS):
	Define.
	(CALL_EXPR_ARG0, CALL_EXPR_ARG1, CALL_EXPR_ARG2): Define.
	(call_expr_arg_iterator): Declare.
	(init_call_expr_arg_iterator): Declare.
	(first_call_expr_arg): Declare.
	(next_call_expr_arg): Declare.
	(more_call_expr_args_p): Declare.
	(call_expr_nargs): Declare.
	(call_expr_arg): Declare.
	(fold_call_expr): Declare new function replacing fold_builtin.
	(fold_builtin_next_arg): Add bool argument.
	(fold_build_call_expr): Declare.
	(build_call_expr): Declare.
	* gcc/builtins.c: Doc fixes throughout.  Clean up to use NULL_RTX
	or NULL_TREE instead of constant 0 where appropriate.
	(expand_builtin_setjmp): Change interfaces to all the
	expand_builtin_foo functions pass the whole CALL_EXPR instead
	of just its arglist, while the fold_builtin_foo functions get the
	individual arguments instead.  Use the new argument accessors.
	Update all callers.  
	(expand_builtin_nonlocal_goto): Likewise.
	(expand_builtin_prefetch): Likewise.
	(expand_builtin_classify_type): Likewise.
	(expand_errno_check): Likewise.
	(expand_builtin_mathfn): Likewise.
	(expand_builtin_mathfn_2): Likewise.
	(expand_builtin_mathfn_3): Likewise.
	(expand_builtin_sincos): Likewise.
	(expand_builtin_int_roundingfn): Likewise.
	(expand_builtin_pow): Likewise.
	(expand_builtin_powi): Likewise.
	(expand_builtin_strstr): Likewise.
	(expand_builtin_strchr): Likewise.
	(expand_builtin_strrchr): Likewise.
	(expand_builtin_strpbrk): Likewise.
	(expand_builtin_memcpy): Likewise.
	(expand_builtin_mempcpy): Likewise.
	(expand_builtin_memmove): Likewise, plus split off new helper 
	function expand_builtin_memmove_args.
	(expand_builtin_bcopy): Likewise.
	(expand_builtin_strcpy): Likewise, plus split off new helper
	function expand_builtin_strcpy_args.
	(expand_builtin_stpcpy): Likewise.
	(expand_builtin_strncpy): Likewise.
	(expand_builtin_memset): Likewise, plus split off new helper
	function expand_builtin_memset_args.
	(expand_builtin_bzero): Likewise.
	(expand_builtin_memcmp): Likewise.
	(expand_builtin_strcmp): Likewise.
	(expand_builtin_strncmp): Likewise.
	(expand_builtin_strcat): Likewise.
	(expand_builtin_strncat): Likewise.
	(expand_builtin_strspn): Likewise.
	(expand_builtin_strcspn): Likewise.
	(expand_builtin_args_info): Likewise.
	(expand_builtin_va_start): Likewise.
	(expand_builtin_va_end): Likewise.
	(expand_builtin_va_copy): Likewise.
	(expand_builtin_frame_address): Likewise.
	(expand_builtin_alloca): Likewise.
	(expand_builtin_unop): Likewise.
	(expand_builtin_fputs): Likewise.
	(expand_builtin_expect): Likewise.
	(expand_builtin_expect_jump): Likewise.
	(expand_builtin_fabs): Likewise.
	(expand_builtin_copysign): Likewise.
	(expand_builtin_printf): Likewise.
	(expand_builtin_fprintf): Likewise.
	(expand_builtin_sprintf): Likewise.
	(expand_builtin_init_trampoline): Likewise.
	(expand_builtin_adjust_trampoline): Likewise.
	(expand_builtin_signbit): Likewise.
	(expand_builtin_fork_or_exec): Likewise.
	(expand_builtin_sync_operation): Likewise.
	(expand_builtin_compare_and_swap): Likewise.
	(expand_builtin_lock_test_and_set): Likewise.
	(expand_builtin_lock_release): Likewise.
	(expand_builtin): Likewise.
	(builtin_mathfn_code): Likewise.
	(fold_builtin_constant_p): Likewise.
	(fold_builtin_expect): Likewise.
	(fold_builtin_classify_type): Likewise.
	(fold_builtin_strlen): Likewise.
	(fold_builtin_nan): Likewise.
	(fold_trunc_transparent_mathfn): Likewise.
	(fold_fixed_mathfn): Likewise.
	(fold_builtin_cabs): Likewise.
	(fold_builtin_sqrt): Likewise.
	(fold_builtin_cbrt): Likewise.
	(fold_builtin_sin): Likewise.
	(fold_builtin_cos): Likewise.
	(fold_builtin_tan): Likewise.
	(fold_builtin_atan): Likewise.
	(fold_builtin_trunc): Likewise.
	(fold_builtin_floor): Likewise.
	(fold_builtin_ceil): Likewise.
	(fold_builtin_round): Likewise.
	(fold_builtin_int_roundingfn): Likewise.
	(fold_builtin_bitop): Likewise.
	(fold_builtin_logarithm): Likewise.
	(fold_builtin_pow): Likewise.
	(fold_builtin_powi): Likewise.
	(fold_builtin_exponent): Likewise.
	(fold_builtin_memcpy): Likewise.
	(fold_builtin_mempcpy): Likewise.
	(fold_builtin_memmove): Likewise.
	(fold_builtin_strcpy): Likewise.
	(fold_builtin_strncpy): Likewise.
	(fold_builtin_memcmp): Likewise.
	(fold_builtin_strcmp): Likewise.
	(fold_builtin_strncmp): Likewise.
	(fold_builtin_signbit): Likewise.
	(fold_builtin_copysign): Likewise.
	(fold_builtin_isascii): Likewise.
	(fold_builtin_toascii): Likewise.
	(fold_builtin_isdigit): Likewise.
	(fold_builtin_fabs): Likewise.
	(fold_builtin_abs): Likewise.
	(fold_builtin_classify): Likewise.
	(fold_builtin_unordered_cmp): Likewise.
	(fold_builtin_1): Likewise.  Split into new functions
	fold_builtin_n, fold_builtin_0, fold_builtin_1, fold_builtin_2,
	fold_builtin_3, fold_builtin_4, and fold_builtin_varargs, to dispatch
	based on the number of arguments.
	(fold_call_expr): New function replacing fold_builtin.
	(fold_build_call_expr): New function.
	(build_call_expr): New function.
	(rewrite_call_expr): New function.
	(validate_arg): New function.
	(validate_arglist): Rewrite to use new interfaces, as above.  Change
	return type from int to bool to reflect usage.
	(fold_builtin_strstr): Likewise.
	(fold_builtin_strchr): Likewise.
	(fold_builtin_strrchr): Likewise.
	(fold_builtin_strpbrk): Likewise.
	(fold_builtin_strcat): Likewise.
	(fold_builtin_strncat): Likewise.
	(fold_builtin_strspn): Likewise.
	(fold_builtin_strcspn): Likewise.
	(fold_builtin_fputs): Likewise.
	(fold_builtin_next_arg): Likewise.  Also fix destructive
	modification of argument list, which seems like a Bad Idea.
	(fold_builtin_sprintf): Likewise.
	(expand_builtin_object_size): Likewise.
	(expand_builtin_memory_chk): Likewise.
	(maybe_emit_chk_warning): Likewise.
	(maybe_emit_sprintf_chk_warning): Likewise.
	(fold_builtin_object_size): Likewise.
	(fold_builtin_memory_chk): Likewise.
	(fold_builtin_stxcpy_chk): Likewise.
	(fold_builtin_strncpy_chk): Likewise.
	(fold_builtin_strcat_chk): Likewise.
	(fold_builtin_strncat_chk): Likewise.
	(fold_builtin_sprintf_chk): Likewise.
	(fold_builtin_snprintf_chk): Likewise.
	(fold_builtin_printf): Likewise.
	(fold_builtin_fprintf): Likewise.
	* gcc/fold-const.c (fold_ternary): Remove call to fold_builtin....
	(fold): ...and replace it with a call to fold_call_expr here.
	(fold_build3_stat): Use fold_build_call_expr to fold and construct
	CALL_EXPRs.
	* gcc/tree-ssa-ccp.c (ccp_fold): Use new arglist primitives and
	update calls to the various fold_builtin_foo functions to reflect
	their new interfaces.
	(ccp_fold_builtin): Likewise.
	* gcc/gimplify.c (gimplify_call_expr): Likewise.
	* gcc/except.c (expand_builtin_eh_return_data_regno): Change
	arguments to match other expand_builtin_foo functions.
	* gcc/tree-object-size.c (compute_object_sizes): Replace call to
	fold_builtin with fold_call_expr.

2006-07-05  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/pc/call.c (build_op_delete_call): Use nth_parm_type.

2006-07-03  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/tree.c (varargs_function_p): Use num_parm_types and
	nth_parm_type in varargs_function_p.

	* gcc/cp/pt.c (determine_specialization): Use num_parm_types and
	nth_parm_type in determine_specialization.

	* gcc/cp/typeck.c (merge_types): Use nth_parm_type.

	* gcc/cp/typeck.c (convert_arguments): Use num_parm_types and
	nth_parm_type in convert_arguments.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_parameter_declaration_clause):
	Use DECL_INITIAL instead of TREE_PURPOSE.

	* gcc/cp/decl2.c (check_classfn): Stop using TREE_CHAIN on
	TYPE_ARG_TYPES.

2006-07-02  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/cp-gimplify.c (cxx_omp_clause_apply_fn): Use
	num_parm_types and nth_parm_type.

	* gcc/cp/mangle.c (write_method_parms): Use num_parm_types and
	nth_parm_type in write_method_parms.

	* gcc/cp/class.c (add_method): Use nth_parm_type.

	* gcc/cp/pt.c (push_template_decl_real): Use num_parm_types and
	nth_parm_type in push_template_decl_real.

2006-06-30  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_over_call): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/decl.c (grok_op_properties): Use num_parm_types and
	nth_parm_type.

2006-06-29  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/pt.c (unify): Use nth_parm_type.

	* gcc/cp/tree.c (no_linkage_check): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/parser.c (cp_parser_late_parsing_default_args): Use
	num_parm_types and nth_parm_type.

2006-06-28  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (standard_conversion): Use nth_parm_type.

	* gcc/cp/cp-tree.h (DECL_CONST_MEMFUNC_P,
	DECL_VOLATILE_MEMFUNC_P): Use nth_parm_type.

	* gcc/cp/pt.c (for_each_template_parm_r): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/pt.c (tsubst_default_arguments): Use num_parm_types and
	nth_parm_type in tsubst_default_arguments.

	* gcc/cp/typeck.c (compparms): Use num_parm_types and
	nth_parm_type in compparms.

	* gcc/cp/call.c (add_function_candidate): Turn a redundant check
	into a gcc_assert.

2006-06-26  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/class.c (same_signature_p): Use nth_parm_type.

	* gcc/cp/class.c (type_requires_array_cookie): Use
	num_parm_types and nth_parm_type.

	* gcc/cp/call.c (build_op_delete_call): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_direct_abstract_declarator):
	Use nth_parm_type.

	* gcc/cp/cxx-pretty-print.c (pp_cxx_implicit_parameter_type): Use
	nth_parm_type.

	* gcc/cp/decl2.c (check_java_method): Use num_parm_types and
	nth_parm_type in check_java_method.

	* gcc/cp/decl.c (grokdeclarator): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/mangle.c (write_function_type): Use nth_parm_type.

2006-06-25  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_operator_new_call): Use num_parm_types
	and nth_parm_type.

2006-06-24  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/name-lookup.c (arg_assoc_args): Use num_parm_types
	and nth_parm_type.

	* gcc/cp/pt.c (dependent_type_p_r): Use num_parm_types and
	nth_parm_type.

	* gcc/cp/method.c (locate_copy): Use num_parm_types,
	nth_parm_type, and num_artificial_parms_for.

2006-06-23  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/method.c (num_artificial_parms_for): New.
	* gcc/cp/cp-tree.h: Add a prototype for
	num_artificial_parms_for.

	* gcc/cp/call.c (standard_conversion, build_op_delete_call):
	Update the calls to compparms.
	* gcc/cp/class.c (add_method, same_signature_p): Likewise.
	* gcc/cp/decl.c (decls_match, duplicate_decls): Likewise.
	* gcc/cp/decl2.c (check_classfn): Likewise.
	* gcc/cp/name-lookup.c (push_overloaded_decl,
	do_nonmember_using_decl): Likewise.
	* gcc/cp/pt.c (is_specialization_of_friend,
	determine_specialization): Likewise.
	* gcc/cp/search.c (look_for_overrides_here): Likewise.
	* gcc/cp/typeck.c (comptypes): Likewise.
	(compparms): Add two parameters to specify the number of
	elements to be skipped.
	* gcc/cp/cp-tree.h: Update the prototype for compparms.

	* gcc/tree.c (num_parm_types, nth_parm_type): New.
	* gcc/tree.h: Add prototypes for the two new functions.

	* gcc/cp/call.c (add_template_candidate_real): Stop using
	TREE_CHAIN on TYPE_ARG_TYPES.

2006-06-16  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/call.c (build_op_delete_call): Use compparms.

2006-06-14  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/cp/cp-tree.h (FUNCTION_ARG_CHAIN): Remove.

	* gcc/c-aux-info.c (deserves_ellipsis): Remove.
	(gen_formal_list_for_func_def): Call stdarg_p instead of
	deserves_ellipsis.

2006-06-13  Sandra Loosemore <sandra@codesourcery.com>

	* gcc/cp/cp-tree.h (TYPE_LANG_SLOT_1): No longer used for
	ENUM_TEMPLATE_INFO, since template info is no longer a tree type.
	(enum lang_type_tag): New.
	(struct lang_type_header): Change is_lang_type_class -> type_tag;
	updated all references.
	(struct lang_type_class): Use struct template_info * here.
	(struct lang_type_enum): New.
	(struct lang_type): Add struct lang_type_enum to union.
	(LANG_TYPE_ENUM_CHECK): New.
	(struct lang_decl_flags): Split alias from template_info; update
	all references.
	(ENUM_TEMPLATE_INFO): Rewrite for new location of enum info.
	(SET_ENUM_TEMPLATE_INFO): New, for lazy allocation of lang_type.
	(SET_TYPE_TEMPLATE_INFO): Rewrite for new location of enum info.
	(struct template_info): New.
	(TI_TEMPLATE, TI_ARGS, TI_PENDING_TEMPLATE_FLAG): Use
	struct template_info * here.
	(build_template_info, copy_template_info): Declare new functions.
	* gcc/cp/class.c (build_clone): Change copy_node -> copy_template_info.
	* gcc/cp/decl.c (grokfndecl): Change tree_cons -> build_template_info.
	(grokdeclarator): Do not assume TYPE_LANG_SPECIFIC always
	represents a class.
	* gcc/cp/call.c (struct z_candidate): Use struct template_info * here.
	(add_template_candidate_real): Change tree_cons -> build_template_info.
	* gcc/cp/error.c (dump_template_parms): Use struct template_info *.
	* gcc/cp/tree.c (bind_template_template_parm): Change tree_cons ->
	build_template_info.
	* gcc/cp/mangle.c (decl_is_template_id): Use struct template_info *
	here; update all callers.
	* gcc/cp/pt.c (check_explicit_specialization): Change tree_cons ->
	build_template_info.
	(push_template_decl_real): Use struct template_info * here; change
	tree_cons -> build_template_info.
	(classtype_mangled_name): Use struct template_info * here.
	(lookup_template_class): Change tree_cons -> build_template_info.
	(for_each_template_parm_r): Change TREE_VALUE -> TI_ARGS.
	(tsubst_friend_function): Use struct template_info * here.
	(tsubst_friend_class): Use struct template_info * here.
	(tsubst_decl): Use struct template_info * here; change build_tree_list
	-> build_template_info, tree_cons -> build_template_info.
	(tsubst): Change tree_cons -> build_template_info.
	(build_template_info, copy_template_info): New.
	* gcc/cp/lex.c (copy_lang_type): Make it know about lang_type_enum. 

2006-06-12  Mark Mitchell  <mark@codesourcery.com>
	    Kazu Hirata  <kazu@codesourcery.com>

	* gcc/testsuite/g++.dg/parse/ctor6.C,
	gcc/testsuite/g++.dg/parse/defarg11.C,
	gcc/testsuite/g++.dg/template/friend42.C,
	gcc/testsuite/g++.dg/template/spec30.C: New.

	Put default arguments in DECL_INITIAL of a PARM_DECL instead
	of TREE_PURPOSE of a type.
	* gcc/cp/call.c (sufficient_parms_p): Take a list of
	PARM_DECLs instead of a list of types.
	(add_function_candidate): Adjust the call to
	sufficient_parms_p.
	(add_conv_candidate): Set viable to 0 if parameters are still
	left after the "for"loop.
	sufficient_parms_p.
	(build_over_call): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.
	* gcc/cp/class.c (build_clone): Push PARM_DECLs with
	DEFAULT_ARG to DEFARG_INSTANTIATIONS.
	(adjust_clone_args): Remove.
	* gcc/cp/cp-gimplify.c (cxx_omp_clause_apply_fn): Use
	DECL_INITIAL instead of TREE_PURPOSE for default arguments.
	* gcc/cp/cp-tree.h (FUNCTION_FIRST_USER_PARM): Use
	DECL_TEMPLATE_RESULT if NODE is a function template.
	Remove the prototype for adjust_clone_args.
	Add a prototype for update_cloned_parms.
	* gcc/cp/decl.c (merge_default_arguments): New.
	(duplicate_decls): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.  Call merge_default_arguments.  Call
	update_cloned_parms.
	(grokfndecl): Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	(grokparms): Put a default argument in DECL_INITIAL instead of
	TREE_PURPOSE of a type.
	(copy_fn_p, grok_op_properties): Use DECL_INITIAL instead of
	TREE_PURPOSE for default arguments.
	(start_preparsed_function): Don't call adjust_clone_args.
	* gcc/cp/decl2.c (Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	* gcc/cp/error.c (dump_type, dump_type_suffix,
	dump_function_decl): Adjust the call dump_parameters.
	(dump_parameters): Take parmdecls as an additional parameter.
	Use DECL_INITIAL instead of TREE_PURPOSE for default
	arguments.
	* gcc/cp/method.c (locate_ctor): Adjust the call to
	sufficient_parms_p.
	(locate_copy): Adjust the call to sufficient_parms_p.
	* gcc/cp/optimize.c (update_cloned_parms): New.
	(maybe_clone_body): Call update_cloned_parms.
	* gcc/cp/parser.c (cp_parser_save_default_args,
	cp_parser_late_parsing_default_args): Use DECL_INITIAL instead
	of TREE_PURPOSE for default arguments.
	* gcc/cp/pt.c (copy_default_args_to_explicit_spec_1): Remove.
	(copy_default_args_to_explicit_spec): Copy default arguments.
	(check_explicit_specialization, tsubst_default_arguments,
	tsubst_decl): Use DECL_INITIAL instead of TREE_PURPOSE for
	default arguments.
	(tsubst_arg_types): Don't touch DEFARG_INSTANTIATIONS.
	(fn_type_unification, unify): Adjust the call to
	type_unification_real.
	(type_unification_real): Take fn as an additional parameter.
	Use DECL_INITIAL instead of TREE_PURPOSE for default
	arguments.
	* gcc/cp/typeck.c (commonparms): Don't merge default
	arguments.
	(convert_arguments): Use DECL_INITIAL instead of TREE_PURPOSE
	for default arguments.

2006-06-12  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-decl.c (store_parm_decls_oldstyle): Simplify the
	construction of a linked list.

	* gcc/c-format.c (handle_format_attribute): Simplify using
	list_length.

2006-06-11  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-mudflap.c (build_function_type_0,
	build_function_type_1, build_function_type_3,
	build_function_type_4): Remove.
	(mudflap_init): Use build_function_type_list.

	* gcc/config/gcc/i386.c (init_cumulative_args): Simplify using
	stdarg_p.

	* gcc/config/gcc/i386.c (init_cumulative_args): Simplify using
	tree_last.

2006-06-10  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (sync_resolve_params): Remove an effectively
	write-only variable.

	* gcc/tree.c (build_function_type_list): Simplify by building
	the type list in the forward order in the first run.

2006-06-09  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (handle_sentinel_attribute): Use tree_last
	instead of rolling one on our own.

	* gcc/tree.c (stdarg_p): New.
	* gcc/tree.h: Add a prototype for stdarg_p.
	* gcc/builtins.c (fold_builtin_next_arg): Call stdarg_p.
	* gcc/config/i386/i386.c (ix86_return_pops_args,
	ix86_setup_incoming_varargs): Likewise.
	* gcc/dwarf2out.c (gen_subprogram_die): Likewise.
	* gcc/function.c (allocate_struct_function): Likewise.

2006-06-06  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-ssa.c (ssa_redirect_edge): Store TREE_VEC in
	PENDING_STMT.
	(reinstall_phi_args): Adjust the uses of PENDING_STMT.
	* gcc/tree-cfgcleanup.c (remove_forwarder_block_with_phi):
	Likewise.

2006-06-05  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/c-common.c (registered_builtin_types): Change the type
	to VEC(tree,gc) *.
	(c_common_type_for_mode, c_register_builtin_type): Update the
	uses of registered_builtin_types.

	* gcc/c-pragma.c (pending_weak_d, pending_weak): New.
	(pending_weaks): Change the type to VEC((pending_weak,gc) *.
	(maybe_apply_pragma_weak, maybe_apply_pending_pragma_weaks,
	handle_pragma_weak): Update the uses of pending_weaks.

	* gcc/tree.h (DECL_ARG_TYPE): Use parm_decl.arg_type.
	(tree_parm_decl): Add arg_type.
	* gcc/testsuite/gcc.dg/Wshadow-1.c,
	gcc/testsuite/gcc.dg/decl-4.c,
	gcc/testsuite/gcc.dg/parm-forwdecl-1.c: Look for "declaration"
	instead of "definition".

	* gcc/coverage.c (build_fn_info_value): Call build_constructor
	instead of build_constructor_from_list.

	* gcc/coverage.c (build_gcov_info): Call build_constructor
	instead of build_constructor_from_list.

	* gcc/varasm.c (weak_decls): Change the type to VEC(tree,gc) *.
	(merge_weak, declare_weak, weak_finish, globalize_decl):
	Adjust uses of weak_decls.

2006-06-03  Kazu Hirata  <kazu@codesourcery.com>

	* c-common.c (saved_function_name_decl_d,
	saved_function_name_decl): New.
	(saved_function_name_decls): Change the type to
	VEC(saved_function_name_decl,gc) *.
	(start_fname_decls, finish_fname_decls, fname_decl): Adjust
	the uses of saved_function_name_decls.
	* c-common.h (CTI_SAVED_FUNCTION_NAME_DECLS,
	saved_function_name_decls): Remove.

2006-06-01  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/tree-vect-transform.c (vect_get_vec_def_for_operand):
	Call build_constructor instead of build_constructor_from_list.

2006-05-31  Kazu Hirata  <kazu@codesourcery.com>

	* gcc/stor-layout.c (pending_sizes): Change the type to
	VEC(tree,gc) *.
	(get_pending_sizes, put_pending_size, put_pending_sizes):
	Update the uses of pending_sizes.
	* gcc/c-decl.c (store_parm_decls): Likewise.
	* gcc/tree.h: Update the prototype for get_pending_sizes and
	put_pending_sizes.

	* gcc/tree-cfg.c (reinstall_phi_args): Move to ...
	* gcc/tree-ssa.c: ... here.
	(flush_pending_stmts): Use reinstall_phi_args.
	* gcc/tree-flow.h: Add a prototype for reinstall_phi_args.

	* gcc/coverage.c (build_ctr_info_value): Call
	build_constructor instead of build_constructor_from_list.
