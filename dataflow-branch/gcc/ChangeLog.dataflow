2006-04-19  Kenneth Zadeck <zadeck@naturalbridge.com>
	* ifcvt.c (rest_of_handle_if_after_combine): Removed flow
	scaffolding.
	* passes.c (init_optimization_passes): Moved clear_df to after
	combine and changed two expensive dce passes into a dse and fast
	dce pass.
	
2006-04-18  Kenneth Zadeck <zadeck@naturalbridge.com>
	* mode-switching.c (optimize_mode_switching): Created local
	instance of df and removed references to flow.
	* regmove.c (mark_flags_life_zones, regmove_optimize): Ditto.
	* global.c (global_alloc, rest_of_handle_global_alloc): Reused 
	instance of df created in local alloc.
	* local-alloc.c (rest_of_handle_local_alloc): Create instance of 
	ra_df used by all register allocation.
	* bb-reorder.c (fix_crossing_conditional_branches): Removed code
	to keep dataflow up to date.
	* Makefile.in (bb-reorder.o): Removed ref to DF_H.
	* passes.c (init_optimization_passes): Meved clear_df to before
	partition_blocks.
		

2006-04-17  Kenneth Zadeck <zadeck@naturalbridge.com>
	* tree-pass.h (pass_recompute_reg_usage): Deleted.  flow.c
	(pass_recompute_reg_usage, recompute_reg_usage): Deleted.  *
	sched-ebb.c (begin_schedule_ready, schedule_ebb,
	begin_schedule_ready, schedule_ebb, schedule_block): Threaded
	local instance of df.
	(schedule_ebbs): Created local instance of df.  
	* haifa-sched.c (schedule_block, sched_init, sched_finish,
	generate_recovery_code, begin_speculative_block,
	add_to_speculative_block, init_before_recovery,
	create_recovery_block, create_check_block_twin, init_glat,
	init_glat1): Threaded local instance of df.
	* modulo-sched.c (sms_schedule): Ditto.
	(rest_of_handle_sms): Removed unnecessary update of flow info.
	* sched-int.h (df.h): Now includes this.
	(schedule_block, sched_init, sched_finish, add_block): Added df
	parm.
	* sched-rgn.c (begin_schedule_ready, schedule_region,
	schedule_insns): Threaded local instance of df.
	(schedule_insns): Removed unnecessary update of flow info.
	* Makefile.in (SCHED_INT_H): Added DF_H.
	(ddg.o, modulo-sched.o, haifa-sched.o, sched-deps.o, sched-rgn.o, 
	sched-ebb.o): Removed DF_H.
	* ddg.c (build_inter_loop_deps): Swapped parms.
	(create_ddg): Swapped parms for call.
	* passes.c (init_optimization_passes): Removed dce and
	recompute_reg_use pass and moved clear_df to before first
	schedulers.
	
2006-04-16  Kenneth Zadeck <zadeck@naturalbridge.com>
	* df.h (shared_df): Removed.
	(ra_df): New.
	* core.c (shared_df): Removed.
	(ra_df): New.
	* postreload.c (reload_combine): Changed to use ra_df.
	* reload.c (push_reload, find_dummy_reload): Ditto.
	* global.c (global_alloc, global_conflicts, mark_elimination, 
	build_insn_chain, rest_of_handle_global_alloc): Ditto.
	* reload1.c (compute_use_by_pseudos, reload): Ditto.
	* local-alloc.c (local_alloc, block_alloc): Created local instance
	of df.
	* passes.c (init_optimization_passes): Moved clear_df to before
	register allocators.
	* tree-pass.h (pass_partition_blocks): Removed redundant 
	copy.
	
2006-04-16  Kenneth Zadeck <zadeck@naturalbridge.com>
	* tree-pass.h (pass_reset_df_after_reload): Removed.
	* df-core.c (reset_df_after_reload, pass_reset_df_after_reload): 
	Removed.
	* function.c (prologue_epilogue_df): New global.
	(rtx keep_stack_depressed, thread_prologue_and_epilogue_insns):
	Unthreaded local version of df and replaced with
	prologue_epilogue_df.
	* rtl.h (prologue_epilogue_df): New.
	* passes.c (init_optimization_passes): Removed all uses of flow
	after register allocation.
	* config/i386/i386.c (ix86_eax_live_at_start_p): Replaced use of
	flow with prologue_epilogue_df.
	
2006-04-15  Kenneth Zadeck <zadeck@naturalbridge.com>
	* tree-pass.h (pass_flow2): Renamed to
	pass_thread_prologue_and_epilogue.
	* passes.c (pass_flow2): Ditto.
	* final.c (rest_of_clean_state): Removed flow2_completed.
	* config/i386/i386.md: Ditto.
	* config/sh/sh.md: Ditto.
	* config/mips/mips.md: Ditto.
	* config/h8300/h8300.md: Ditto.
	* flow.c: Ditto.
	(rest_of_handle_flow2): Moved to function.c as 
	rest_of_handle_thread_prologue_and_epilogue.
	* timevar.def (TV_FLOW2): Renamed to
	TV_THREAD_PROLOGUE_AND_EPILOGUE.
	* function.c (keep_stack_depressed): Added df parameter.
	(thread_prologue_and_epilogue_insns): Made local function and
	removed unused parameter.  Added local instance of df.
	(rest_of_handle_thread_prologue_and_epilogue): New function
	renamed from flow.c.
	(pass_thread_prologue_and_epilogue): New pass.  
	* rtl.h	(flow2_completed, thread_prologue_and_epilogue_insns): 
	Removed.
	* df-problems.c (df_ru_get_bb_info, df_rd_get_bb_info,
	df_lr_get_bb_info, df_ur_get_bb_info, df_urec_get_bb_info): Added
	check.
	* Makefile.in (function.o): Added timevar.h.
	
2006-04-13  Kenneth Zadeck <zadeck@naturalbridge.com>
	* rtl-factoring (collect_pattern_seqs, clear_regs_live_in_seq,
	recompute_gain_for_pattern_seq, clear_regs_live_in_seq,
	recompute_gain, split_blocks_after_seqs, split_pattern_seq, 
	erase_matching_seqs, abstract_best_seq, rtl_seqabstr): Threaded
	local instance of df to replace all references to flow.
	(gate_rtl_seqabstr): Removed unnecessary calls. 
	* passes.c (init_optimization_passes): Moved clear_df before
	rtl_seqabstr.  Removed some expensive calls to dce.
	* tree-pass.h (pass_fast_rtl_dce): New.
	* regrename.c (gate_handle_regrename): Update call to pass.
	* sched-rgn.c (rest_of_handle_sched2): Remove outdated calls.
	
2006-04-13  Kenneth Zadeck <zadeck@naturalbridge.com>
	* regmove.c (rest_of_handle_stack_adjustments): Removed all
	references to flow.c and replaced with df.
	* passes.c (init_optimization_passes): Moved clear_df before 
	pass_stack_adjustments.

2006-04-12  Kenneth Zadeck <zadeck@naturalbridge.com>
	* recog.c (delete_insn_chain_and_dflow): New function.
	(peephole2_optimize): Replaced all flow references with df.  Added
	local instance of df.
	* passes.c (init_optimization_passes): Moved clear_df before peephole2.
	
2006-04-11  Kenneth Zadeck <zadeck@naturalbridge.com>
	* ifcvt.c (cond_exec_process_if_block, merge_if_block,
	noce_process_if_block, cond_move_process_if_block,
	process_if_block, find_if_header, find_cond_trap, find_if_case_1,
	find_if_case_2, dead_or_predicable): Threaded local copy of df
	thru the call stack.
	(merge_if_block, find_cond_trap, find_if_case_1, find_if_case_2,
	dead_or_predicable): Added code to update df in place.
	(if_convert): Removed parameter concerned with correct dataflow
	info, it now always is. Created instance of df.  Removed code to
	update old flow info.
	(rest_of_handle_if_after_reload): Removed unnecessary calls to
	cleanup_cfg.
	* passes.c (init_optimization_passes): Moved clear_df to before
	last ifconvert.  Renamed pass_cprop to pass_cprop_hardreg.
	* regrename.c (rest_of_handle_cprop): Renamed pass_cprop to
	pass_cprop_hardreg.
	* tree-pass.h: Renamed cprop to cprop_hardreg.
	
2006-04-11  Kenneth Zadeck <zadeck@naturalbridge.com>
	* sched-ebb.c (schedule_ebbs): Removed code to update dataflow
	after scheduling and removed unused parm from 
	reposition_prologue_and_epilogue_notes.
	* sched-rgn.c (schedule_insns): Ditto.
	(rest_of_handle_sched): Added temp hack to rebuild flow based dataflow
	until flow is permanently removed.
	* haifa-sched.c (init_glat): Modified to create glat from df info.
	(attach_life_info, attach_life_info1, check_reg_live): Removed.
	(free_glat): Now cleans up df.
	* modulo-sched.c (compute_jump_reg_dependencies): Removed df parm.
	* ifcvt.c (rest_of_handle_if_conversion): Added code to clean up
	flow based reg_deaths after first call to ifconvert.
	* function.c (reposition_prologue_and_epilogue_notes): Removed
	unused parm.
	* rtl.h (reposition_prologue_and_epilogue_notes): Ditto.
	* sched-int.h (check_reg_live): Removed.

2006-04-10  Kenneth Zadeck <zadeck@naturalbridge.com>
	* df-core.c (reset_df_after_reload, clear_df): Added return to
	make compatible with pass manager.
	* dce.c (rest_of_handle_dce, rest_of_handle_fast_dce,
	rest_of_handle_dse): Ditto.

2006-04-09 Kenneth Zadeck <zadeck@naturalbridge.com>
	* regrename.c (merge_overlapping_regs, regrename_optimize):
	Threaded private instance of df.
	(regrename_optimize): Created private instance of df, removed
	all references or flow.
	(copyprop_hardreg_forward): Removed all references to flow.
	(gate_handle_regrename): Split reg rename and cprop into separate 
	passes.
	(gate_handle_cprop): New function.
	(pass_cprop): New pass structure.
	* tree-pass.h (pass_cprop): New pass structure.
	* passes.c (init_optimization_passes): Added cprop pass and 
	moved clear_df pass closer to beginning.	

2006-04-08  Kenneth Zadeck <zadeck@naturalbridge.com>
	* tree-pass.h (pass_split_after_reload, pass_branch_target_load_optimize1
	pass_branch_target_load_optimize2): Added.
	(pass_branch_target_load_optimize): Deleted.
	* flow.c (rest_of_handle_flow2): Split the calls to split_all_insns and 
	branch_target_load_optimize into their own passes.
	* passes.c (init_optimization_passes): Ditto.
	(init_optimization_passes): Moved clear_df pass to before 
	second branch_target_load_optimize pass.
	* bt-load (compute_defs_uses_and_gen, build_btr_def_use_webs, 
	migrate_btr_defs): Threaded private copy of df into these functions.
	(branch_target_load_optimize): Made private and add local
	instance of df.  Removed all references to flow.
	(rest_of_handle_branch_target_load_optimize1): New function.
	(rest_of_handle_branch_target_load_optimize): Renamed to 
	rest_of_handle_branch_target_load_optimize2.
	rtl.h (branch_target_load_optimize): Removed.

2006-04-08  Kenneth Zadeck <zadeck@naturalbridge.com>
	* sched-ebb.c (init_ready_list, can_schedule_ready_p, new_ready,
	compute_jump_reg_dependencies, schedule_ebb, sched_analyze,
	schedule_block): Changed to pass instance of df.
	(compute_jump_reg_dependencies): Changed to use local instance
	of dataflow.
	* ddg.c (build_intra_loop_deps, sched_analyze,
	build_intra_loop_deps): Changed to pass instance of df.
	* ddg.h: added forward reference to struct df.
	* haifa-sched.c (schedule_insns, schedule_insn,
	schedule_block): Changed to pass instance of df.
	* modulo-sched (compute_jump_reg_dependencies): Ditto.
	(sms_schedule): Added call to do dce when stated.
	* sched-deps.c (sched_analyze_insn, sched_analyze):
	Changed to pass instance of df.
	* rtl.h (schedule_insns, schedule_ebbs): Ditto.
	* sched-int.h (init_ready_list, can_schedule_ready_p, new_ready, 
	compute_jump_reg_dependencies, sched_analyze, schedule_block):
	Ditto.
	* sched-rgn.c (check_live_1, update_live_1, check_live, 
	update_live, init_ready_list, can_schedule_ready_p, new_ready,
	compute_jump_reg_dependencies, compute_block_backward_dependences,
	schedule_region, schedule_insns): Ditto.
	(schedule_insns): Removed call to update_life_info when finished.
 	(rest_of_handle_sched, rest_of_handle_sched2): Creates local
 	instance of df.
	* passes.c (init_optimization_passes): moved clear_df pass
	earlier.
	* Makefile.in (df-core.o): Added except.h and dce.h
	(modulo-sched.o): Added DF_H.
	* recog.c (split_all_insns): Removed old code that was used to 
	update dataflow.
	* reg-stack.c (rest_of_handle_stack_regs): Removed ifdefed out code.

2006-04-07  Kenneth Zadeck <zadeck@naturalbridge.com>
	* recog.c (split_all_insns): Removed parameter and code to
	update dataflow.
	* sched-rgn.c (rest_of_handle_sched2): Removed parm to 
	split_all_insns.
	* flow.c (rest_of_handle_flow2): Ditto.
	(rest_of_handle_split_all_insns): Added call to update old
	dataflow after this pass.
	(rest_of_handle_split_after_reload,
	rest_of_handle_split_before_regstack): New function.
	(pass_split_after_reload): New structure.
	* rtl.h (split_all_insns): Removed param.
	* bb-reorder.c (rest_of_handle_reorder_blocks): Removed 
	references to flow.
	* reg-stack.c (subst_stack_regs_pat): Removed unnecessary 
	assertion.

2006-04-07  Daniel Berlin  <dberlin@dberlin.org>
	    Kenneth Zadeck <zadeck@naturalbridge.com>
	* regoc.c (dbr_schedule): Added parm to call to df_lr_add_problem.
	* ifcvt.c (if_convert): Ditto.
	* modulo-sched.c (sms_schedule): Ditto.
	* reg-stack.c (reg_to_stack): Ditto.
	* global.c (global_alloc, rest_of_handle_global_alloc): Ditto.
	(rest_of_handle_global_alloc): Removed call to df_set_state.
	* basic_block.h (clear_reg_deaths): New function.
	* flow.c: (clear_reg_deaths): New function.
	(rest_of_handle_life): Added parm to call to df_lr_add_problem and
	df_ur_add_problem.
	* df-scan.c (df_scan_free_internal): Added code to clear new
	bit vectors.
	(df_scan_alloc): Added extra parameter and code to initialize
	new bit vectors.
	(df_scan_dump): Added code to dump new bit vectors.
	(df_problem problem_SCAN): Added extra field.
	(df_scan_add_problem): Added flags parameter.
	(df_rescan_blocks): Added code to remove deleted blocks from
	bitmap and extra parm to call to df_scan_alloc.
	(df_insn_create_insn_record): Removed return value.
	(df_set_state): Removed function.
	(df_ref_record, df_bb_refs_record, df_record_entry_block_defs,
	df_record_exit_block_uses): Changed the way flags are processed.
	(df_bb_refs_record, df_refs_record, df_record_exit_block_uses): 
	Restructured scanning to fixed hard regs so bitmaps could be
	recorded for later use.
	(df_has_eh_preds): Now public.
	* df-core.c (df_mvs_dump, df_set_flags, df_clear_flags,
	df_delete_basic_block): New function.
	(df_init): Changed location of flags.
	(df_add_problem): Added flags parameter and the way flags are
	processed.
	(df_insn_uid_debug, df_ref_debug, debug_df_defno, debug_df_ref,
	debug_df_chain): Improved debugging output.
	(clear_df): Added call to clear_reg_deaths.
	* df.h: Some reordering to remove forward references.
	(dataflow.flags): New field.
	(df.flag): Deleted field.
	(df_alloc_function): Added additional bitmap parameter.
	(df_dependent_problem_function): New type.
	(df_problem.changeable_flags): New field.
	(df_ref_flags.DF_SCAN_INITIAL,
	DF_SCAN_GLOBAL, DF_SCAN_POST_ALLOC, df_state): Removed.
	(df_refs_chain_dump, df_ref_debug, df_chain_dump): Removed df
	parameter.
	(df_add_problem, df_ru_add_problem, df_rd_add_problem,
	df_lr_add_problem, df_ur_add_problem, df_urec_add_problem, 
	df_ri_add_problem, df_scan_add_problem): Added flags parameter.
	(df_set_state): Removed function.
	(df_set_flags, df_clear_flags, df_delete_basic_block, df_has_eh_preds) New functions.
	* df-problems.c (df_get_dependent_problem): Deleted function.
	(df_ru_alloc, df_rd_alloc, df_lr_alloc, df_ur_alloc,
	df_urec_alloc, df_chain_alloc, df_ri_alloc): Added all blocks
	parameter.
	(df_ru_alloc, df_rd_alloc): Now resets all blocks.
	(df_ru_dump, df_rd_dump, df_lr_dump, df_ur_dump, df_urec_dump,
	df_chains_dump): Fixed crash if problem was never run.
	(df_ru_add_problem, df_rd_add_problem, df_lr_add_problem, 
	df_ur_add_problem, df_urec_add_problem, df_chain_add_problem,
	df_ri_add_problem): Processes flags in uniform manner.
	(df_lr_bb_local_compute): Fixed case to account for return value
	correctly.
	(df_lr_bb_local_compute): Changed processing of exit block.
	(df_lr_transfer_function): Added hook to call dce.
	(df_lr_free): Added lr problem data.
	(df_set_notes_for_mw, df_reg_lifetime): Removed function.
	(df_lr_simulate_artificial_refs_at_end, df_lr_simulate_one_insn,
	df_kill_notes, df_set_unused_notes_for_mw, df_set_dead_notes_for_mw):
	New function.
	(df_ri_alloc, df_ri_bb_compute, df_create_unused_note, 
	df_ri_bb_compute, df_ri_compute, df_ri_free, df_ri_add_problem):
	Added functionality to compute register information. 
	dce.c (deletable_insn_p): Cannot delete PREFETCHes.
	(delete_unmarked_insns): Also delete noop moves as well as support for
	calling dce from df.
	(prescan_insns_for_dce, rest_of_handle_dce, end_fast_dce, 
	dce_process_block, rest_of_handle_fast_dce,
	rest_of_handle_dse): Restructured to handle being directly called from
	df.


2006-03-14  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h: Added pass to clear other dataflow infomation out.
	* final.c (rest_of_handle_final, rest_of_clean_state): Cleared out
	references to df.
	(rest_of_clean_state) Added regstack_completed.
	* reorg.c (fill_simple_delay_slots, fill_slots_from_thread,
	fill_eager_delay_slots, make_return_insns): Added df parameter to function.
	(make_return_insns, dbr_schedule) Added df parameter to calls.
	* flow.c (update_life_info): Added glue code to df calls.
	* df-scan.c (df_scan_free_internal, df_insn_refs_delete, df_ref_record): Added
	code to properly handle multiword hard registers.
	(df_ref_create_structure, df_ref_record): Added code to properly handle subregs.
	(df_ref_create_structure): Changed switching structure. 
	(df_bb_refs_record): Fixed case where duplicate artificial refs
	were created.
	(df_record_entry_block_defs): Added code to make stack pointer
	live in entry block.  Refined cases where frame pointer is needed.
	* df-core.c (df_mvs_dump, clear_df): New function.
	(pass_clear_df): New pass structure.
	(df_insn_uid_debug, df_ref_debug, debug_df_defno, debug_df_ref,
	debug_df_chain): Improved debugging output.
	* df.h: Some reordering to remove forward reference.
	(df_ref_flags.DF_REF_MW_HARDREG, DF_REF_PARTIAL): New fields.
	(df_ref_flags.DF_REF_DIES_AFTER_THIS_USE): Removed.
	(df_mw_hardreg): New struct.
	(DF_INSN_UID_MWS): New macro.
	(df_refs_chain_dump, df_ref_debug, df_chain_dump): Removed df
	parameter.
	* rtl.h (regstack_completed): New global var.
	* resource.c (mark_target_live_regs): Added passed in instance of
	df.
	* resource.h (mark_target_live_regs): Ditto.
	* df-problems.c (df_chain_dump): Removed df parameter.
        (df_ru_bb_local_compute_process_def,
	df_rd_bb_local_compute_process_def, df_lr_bb_local_compute,
	df_lr_bb_local_compute, df_chain_create_bb): Made subreg aware.
	(df_ru_bb_local_compute, df_rd_bb_local_compute,
	df_lr_bb_local_compute, df_lr_bb_local_compute,
	df_chain_create_bb): Cleanup to use proper macros.
	(df_ur_local_finalize, df_ur_local_finalize): Removed unnecessary
	code to fixup bitvectors.
	(df_ri_alloc): Cleared lifetime.
	(df_ignore_stack_reg, df_kill_notes, df_set_notes_for_mw,
	df_create_unused_note): New function.
	(df_ri_bb_compute, df_ri_compute): Added code to create/update
	REG_DEAD and REG_UNUSED notes.
	* reg-stack.c (regstack_completed): New variable.
	(reg_to_stack): Modified to use it's own instance of df.
	(rest_of_handle_stack_regs): Removed most cleanup code.
	* Makefile.in (reorg.o, RESOURCE_H): Added dependancy to df.h.
	(final.o): Removed dependency to df.h
	* passes.c (pass_magic_life): Removed.
	(pass_clear_df): Added.
	* dce.c (prescan_insns_for_dce, end_fast_dce): Now works if no instance of
	df is available.
	(dce_process_block): Made subreg aware.
	(rest_of_handle_fast_dce): Reset bitvectors when iterating.
	(prescan_insns_for_dse): Removed useless code.

2006-02-06  Daniel Berlin  <dberlin@dberlin.org>
	
	* doc/rtl.texi: Document REG_LIBCALL_ID.
	* optabs.c (libcall_id): New variable.
	(emit_no_conflict_block): Use it to emit
	REG_LIBCALL_ID.
	(emit_libcall_block): Ditto.
	* combine.c (distribute_notes): Deal with
	REG_LIBCALL_ID.
	* reg-notes.def (LIBCALL_ID): New note.
	* dce.c (marked_libcalls): New variable.
	(in_libcall): Removed.
	(mark_insn): Mark which libcalls we need to fully mark.
	(mark_libcall_insns): New function.
	(end_dce): Free marked_libcalls.
	(init_dce): Allocate marked_libcalls.
	Call mark_libcall_insns.
	
2006-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>
	* df-core.c (df_iterative_dataflow): Added debugging assert.
	(df_insn_uid_debug): New debugging function.
	(df_insn_debug): Changed to used df_insn_uid_debug.
	(df_analyze_problem): Made public.
	* df.h (df_analyze_problem): Ditto.
	* cfgcleanup.c (cleanup_cfg): Now calls run_fsst_dce.
	* flow.c (update_life_info): Ditto.  
	* dce.c (init_dce, mark_insn,
	mark_nonreg_stores, prescan_insns_for_dce): Added parameter so
	that they could be called from both handle_rest_of_dce and
	handle_rest_of_fast_dce.
	(marked_insn_p): Added code to be tolerant of artifical defs,
	which do not have insns.
	(mark_nonreg_stores_2): New function.
	(mark_artificial_uses, mark_reg_dependencies, store_base_local,
	mark_escaping_stores, mark_dependent_stores,
	prescan_insns_for_dse): Added parameter to mark_insn.
	(rest_of_handle_dce): Added parameter to prescan_insns_for_dce.
	(record_stores): Added parameter to mark_non_reg_stores.
	(dce_process_block, rest_of_handle_fast_dce, gate_fast_dce,
	run_fast_dce): New functions to do dce faster.
	(rest_of_handle_dse) Added parameter to init_dce.
	* dce.h (run_fast_dce): Added declaration.
	
2006-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_hard_reg_init): Moved declaration of i outside macro.

2006-01-17  Ian Lance Taylor <ian@airs.com>
	
	* combine.c (combine_instructions): Pass instruction
        to note_stores and set_nonzero_bits_and_sign_copies.
	(set_nonzero_bits_and_sign_copies): We can't assume
        anything about non-zero bits for registers initialized with
	themselves if the register is not live on entry to the block.


2005-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	PR dataflow/25799
	* df-problems.c (df_ru_confluence_n, df_rd_confluence_n):
	Corrected confluence operator to remove bits from op2 before oring
	with op1 rather than removing bits from op1.
	* (df_ru_transfer_function): Corrected test on wrong bitmap which
	caused infinite loop.    


2005-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_scan_free_bb_info): Added basic block parameter to
	be able to clean out basic block when not necessary.
	(df_scan_free): Fixed to properly delete information if df is
	unused before calling df_finish.
	(df_scan_alloc, df_rescan_blocks, df_reg_chain_unlink,
	df_insn_create_insn_record, df_bb_refs_record): Fixed formatting
	or comment typos.
	(df_bb_refs_delete): New function.
	(df_refs_delete): Moved per block code to df_bb_refs_delete.
	* df-core.c (df_set_blocks): Added code to properly clean out
	unused blocks if they are not part of the blocks to consider.
	(df_compact_blocks): Added basic block parameter to free_bb_fun to
	be able to clean out basic block when not necessary
	* df.h (df_free_bb_function): Ditto.
	(df_bb_refs_delete): New function.
	* df-problems.c (df_ru_free_bb_info, df_rd_set_bb_info,
	df_lr_set_bb_info, df_ur_free_bb_info, df_urec_free_bb_info):Added
	basic block parameter to be able to clean out basic block when not
	necessary.
	(df_ru_alloc, df_rd_alloc): Fixed dyslexic overflow test.
	(df_ru_free, df_rd_free, df_lr_free, df_ur_free, df_urec_free):
	Fixed to properly delete information if df is unused before
	calling df_finish.

2006-01-06  Daniel Berlin  <dberlin@dberlin.org>
  	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_reg_use_gen, df_reg_def_gen): Removed.
	(df_insn_contains_asm_1): New function.
	(df_insn_contains_asm): Rewritten to use for_each_rtx.
	(df_insn_refs_record): Fixed call to df_insn_contains_asm and
	the way calls are processed.
	(df_insn_refs_record, df_bb_refs_record): Changed calls to not
	need df_reg_use_gen or df_reg_def_gen.
	* loop-invariant.c (free_inv_motion_data): Removed duplicated code typo.

2005-12-30  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-core.c (df_find_def, df_find_use):  Added subreg aware code.
	(df_reg_defined, df_reg_used): New function.
	* df.h (df_reg_defined, df_reg_used): New function.
	* loop-invariant.c (struct invariant, hash_invariant_expr, 
	eq_invariant_expr, find_or_insert_inv, find_or_insert_inv,
	find_identical_invariants, merge_identical_invariants, 
	find_defs, create_new_invariant, check_dependencies,
	find_invariant_insn, find_invariants, get_inv_cost,
	best_gain_for_invariant, set_move_mark, move_invariants, 
	free_inv_motion_data): Functions added from mainline patch.
	(invariant_for_use, hash_invariant_expr_1, invariant_expr_equal_p,
	check_dependencies, create_new_invariant, find_invariant_insn 
	move_invariant_reg): Functions modified from mainline patch to be 
	consistent with latest df.

2005-12-22  Paolo Bonzini  <bonzini@gnu.org>

	* df-scan.c (df_ref_unlink): Fix thinko when REF == CHAIN. 

2005-12-22  Danny Berlin <dberlin@dberlin.org>
    	    Richard Sandiford  <richard@codesourcery.com>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h: Added passes for new dce and dse.
	* flow.c (update_life_info, propagate_block): Added hooks to
	call new dead code elimination.
	* common.opt (flag_flow_dce, flag_new_dce): Ditto.
	* passes.c (init_optimization_passes): Ditto.
	* cfgcleanup.c (cleanup_cfg): Ditto.
	* timevar.def: New time vars for dce and dse.
	(propagate_block_delete_insn): Added debugging.
	* dce.c: New File containing dead code elimination and dead
	store elimination based on df.

2005-12-19  Kenneth Zadeck <zadeck@naturalbridge.com>
	
        * flow.c (update_life_info, count_or_remove_death_notes): Fixed
	latent bug that could happen if update_life_info was called with a
	blocks parameter and the call to cleanup_cfg actually deleted one
	of those blocks. 
	* loop-invariant.c (move_loop_invariants): Fixed df
	initialization.
	* struct-equiv.c (struct_equiv_init): Made dataflow compatible with
	df.

	
2005-12-18  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>

	* fwprop.c (local_ref_killed_between_p): New Function.
	(use_killed_between, varying_mem_p, all_uses_available_at,
	update_df, subst, forward_propagate_subreg,
	forward_propagate_and_simplify, forward_propagate_into, fwprop,
	fwprop_addr): Changes to support modifications to df datastructures.
	ddg.c (add_deps_for_def, add_deps_for_use, build_inter_loop_deps):
	Ditto.
	* flow.c (verify_local_live_at_start, update_life_info,
	update_life_info, initialize_uninitialized_subregs,
	propagate_one_insn, init_propagate_block_info,
	init_propagate_block_info, regno_clobbered_at_setjmp, 
	rest_of_handle_life): Ditto.
	* modulo-sched.c (sms_schedule): Ditto.
	* web.c (union_defs, entry_register, web_main): Ditto.
	* global.c (global_alloc, global_conflicts, mark_elimination,
	build_insn_chain, rest_of_handle_global_alloc): Ditto.
	* ifcvt.c (find_if_case_1, if_convert): Ditto.
	* loop_invariant.c (find_defs, record_use, find_invariant_insn,
	find_invariants_to_move, move_invariant_reg, move_invariant_reg,
	free_inv_motion_data, move_loop_invariants):
     	* bb-reorder.c (rest_of_handle_reorder_blocks): Ditto. 
	* reg-stack.c (reg_to_stack): Ditto.
	* postreload.c (reload_combine): Changed set reference to
	reflect different dataflow problem.
	* reload.c (push_reload, find_dummy_reload): Ditto.
	* postreload.c (rest_of_handle_postreload): Fixed typo in comment.
	* tree-pass.h: Added pass_reset_df_after_reload.
	* df.c: Removed, rewritten as df-core.c, df-problems.c and df-scan.c.
	* df-scan.c: The scanning fuctions, once in df.c, completely
	rewritten so that they now fully model the functionality of
	register usage at the backend.
	* cfgrtl.c (dump_regset_in, dump_regset_out): New dataflow
	* print functions.
	(rtl_dump_bb, print_rtl_with_bb): Changed to use
	dump_regset_in, dump_regset_out).
	* sched_deps (sched_analyze_1): Changed to used renamed
	df_read_modify_subreg_p (was read_modify_subreg_p).
	(df_scan_free_internal, df_scan_get_bb_info,
	df_scan_set_bb_info, df_scan_free_bb_info, df_scan_alloc,
	df_scan_free, df_scan_dump, df_scan_add_problem,
	df_grow_reg_info, df_grow_ref_info, df_grow_insn_info,
	df_rescan_blocks, df_ref_create, df_get_artificial_defs,
	df_get_artificial_uses, df_reg_chain_create, df_ref_unlink,
	df_reg_chain_unlink, df_ref_remove,
	df_insn_create_insn_record, df_insn_refs_delete,
	df_refs_delete, df_reorganize_refs, df_reg_use_gen,
	df_reg_def_gen, df_set_state, df_ref_create_structure,
	df_ref_record, df_read_modify_subreg_p, df_def_record_1,
	df_defs_record, df_uses_record, df_insn_contains_asm,
	df_insn_refs_record, df_bb_refs_record, df_refs_record,
	df_mark_reg, df_record_exit_block_uses, df_hard_reg_init): New functions.
	* df-core.c: The core dataflow solver and glue routines for
        rtl dataflow.
	(df_init, df_add_problem, df_set_blocks, df_finish,
	df_hybrid_search_forward, df_hybrid_search_backward,
	df_iterative_dataflow, df_prune_to_subcfg,
	df_analyze_problem, df_analyze, df_get_bb_info,
	df_set_bb_info, df_analyze_simple_change_some_blocks,
	df_analyze_simple_change_one_block, df_compact_blocks,
	df_bb_replace, df_bb_regno_last_use_find,
	df_bb_regno_first_def_find, df_bb_regno_last_def_find,
	df_insn_regno_def_p, df_find_def, df_find_use, df_dump,
	df_refs_chain_dump, df_regs_chain_dump, df_insn_debug,
	df_insn_debug_regno, df_regno_debug, df_ref_debug,
	debug_df_insn, debug_df_reg, debug_df_regno, debug_df_ref
	debug_df_defno, debug_df_useno, reset_df_after_reload): New functions.
	* df-problems.c: Seven concrete dataflow problems that use the scanning 
	in df-scan.c and are solved by the engine in df-core.c.
	(df_get_dependent_problem, df_chain_create,
	df_chain_unlink, df_chain_copy, df_get_live_in,
	df_get_live_out, df_grow_bb_info, df_chain_dump,
	df_print_bb_index, df_ref_bitmap, df_set_seen,
	df_unset_seen, df_ru_get_bb_info, df_ru_set_bb_info,
	df_ru_free_bb_info, df_ru_alloc,
	df_ru_bb_local_compute_process_def,
	df_ru_bb_local_compute_process_use, df_ru_bb_local_compute,
	df_ru_local_compute, df_ru_init_solution,
	df_ru_confluence_n, df_ru_transfer_function, df_ru_free,
	df_ru_dump, df_ru_add_problem, df_rd_get_bb_info,
	df_rd_set_bb_info, df_rd_free_bb_info, df_rd_alloc,
	df_rd_bb_local_compute_process_def, df_rd_bb_local_compute,
	df_rd_local_compute, df_rd_init_solution,
	df_rd_confluence_n, df_rd_transfer_function, df_rd_free,
	df_rd_dump, df_rd_add_problem, df_lr_get_bb_info,
	df_lr_set_bb_info, df_lr_free_bb_info, df_lr_alloc,
	df_lr_bb_local_compute, df_lr_local_compute, df_lr_init,
	df_lr_confluence_0, df_lr_confluence_n,
	df_lr_transfer_function, df_lr_free, df_lr_dump,
	df_lr_add_problem, df_ur_get_bb_info, df_ur_set_bb_info,
	df_ur_free_bb_info, df_ur_alloc, df_ur_bb_local_compute,
	df_ur_local_compute, df_ur_init, df_ur_local_finalize,
	df_ur_confluence_n, df_ur_transfer_function, df_ur_free,
	df_ur_dump, df_ur_add_problem, df_urec_get_bb_info,
	df_urec_set_bb_info, df_urec_free_bb_info, df_urec_alloc,
	df_urec_mark_reg_change, df_urec_check_earlyclobber,
	df_urec_mark_reg_use_for_earlyclobber,
	df_urec_mark_reg_use_for_earlyclobber_1,
	df_urec_bb_local_compute, df_urec_local_compute,
	df_urec_init, df_urec_local_finalize, df_urec_confluence_n,
	df_urec_transfer_function, df_urec_free, df_urec_dump,
	df_urec_add_problem, df_chain_alloc,
	df_chain_create_bb_process_use, df_chain_create_bb,
	df_chain_finalize, df_chain_free, df_chains_dump,
	df_chain_add_problem, df_ri_alloc, df_ri_bb_compute,
	df_ri_compute, df_ri_free, df_ri_dump, df_ri_add_problem,
	df_reg_lifetime) New functions.
	df.h: Complete rewrite to support new df-problems.c, df-scan.c and 
	df-core.c.

2005-12-14  Kenneth Zadeck <zadeck@naturalbridge.com>
	* bitmap.c (bitmap_clear_range): Removed extra debugging. 

2005-12-12  Paolo Bonzini  <bonzini@gnu.org>

	* rtl.h (find_occurrence): Declare.
	* rtlanal.c (find_occurrence): New.
	(loc_mentioned_in_p): Accept a NULL value for IN.
	* common.opt (-fforward-propagate): New.
	* tree-pass.h: Add forward propagation passes.
	* passes.c: Ditto.
	* timevar.def: Add forward propagation timevar.
	* fwprop.c: New file.
	* Makefile.in: Add fwprop.o dependencies.

2005-11-28  Paolo Bonzini  <bonzini@gnu.org>

	* config/sh/sh.c (sh_output_mi_thunk): Use df_finish.

2005-11-17  Paolo Bonzini  <bonzini@gnu.org>

        * df.h (struct df_reach): Add size field.
        * df.c (df_realloc_reach_bitmaps, df_renumber_refs): New.
        (df_reg_use_chain_create, df_reg_def_chain_create): Use them.
        Fix GNU coding standards compliancy.

2005-11-11  Richard Earnshaw  <richard.earnshaw@arm.com>

	* df.c (df_chain_create): Move declaration of bb outside define
	for ENABLE_CHECKING.

2005-11-08  Paolo Bonzini  <bonzini@gnu.org>

	* df.c (df_local_ref_killed_between_p): Reinstate.

2005-11-08  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>

	* bitmap.c (bitmap_element_free, bitmap_element_link, bitmap_and,
	bitmap_and_compl, bitmap_ior, bitmap_ior_into, bitmap_xor, 
	bitmap_xor_into): Fixed latent performance issue where current
	was being properly kept up to date.
	(bitmap_clear_range, bitmap_compl_and_into): New functions to support 
	dataflow analysis.
	* df.c (df_rd_confluence_n, df_alloc_reach_bitmaps, df_free_reach_bitmaps, 
	df_clear_reach_bitmaps, df_ru_confluence_n, df_lr_confluence_0, 
	df_lr_confluence_n, df_init, df_dump): Changed the way EH_USES is processed.
       	(df_bitmaps_alloc, df_bitmaps_free,
	df_bb_reg_def_chain_create, df_bb_reg_def_chain_create,
	df_reg_use_chain_create, df_rd_transfer_function,
	df_alloc_reach_bitmaps, df_ref_bitmap, df_bb_rd_local_compute,
	df_rd_local_compute, df_bb_ru_local_compute, df_analyze, 
	df_analyze_subcfg, df_analyze_simple_change_some_blocks): Fixed
	performance problems by grouping all defs and uses
	for the same pseudo into contigious ranges.
	(df_bb_du_chain_create, df_bb_ud_chain_create): Combined in
	new function df_bb_chain_create.
	(df_chain_create, df_alloc_reach_bitmaps, df_free_reach_bitmaps, 
	df_clear_reach_bitmaps, df_ref_bitmap): New function.
	(df_rd_init, df_rd_confluence_n, df_rd_transfer_function,
	df_rd_set_dflow, df_ru_transfer_function, df_ru_confluence_n, 
	df_ru_transfer_function, df_ru_set_dflow, df_lr_transfer_function, 
	df_lr_set_dflow, df_lr_confluence_n, df_ur_transfer_function, 
	df_ur_set_dflow, df_ur_init, df_ur_transfer_function, df_ur_set_dflow
	df_ur_confluence_n, hybrid_search_forward, hybrid_search_backward
	iterative_dataflow): Changed interface for dataflow callback
	functions to hide where the source of bitmaps.
       	(df_rd_set_bitmaps, df_ru_set_bitmaps, df_lr_set_bitmaps, 
	df_ur_set_bitmaps, df_bitmap_ior_edge):	Removed as part of
	changing dataflow callback interface.
	(df_free, df_ref_create, df_ref_record_1,
	df_record_exit_block_uses, df_refs_record, df_exit_lr_local_compute,
	df_insn_move_before, df_local_ref_killed_between_p, 
	df_bb_regno_last_def_find, df_chain_dump, df_dump): 
	Added chains that go to artifical uses in exit block.
	(df_exit_bb_reg_use_chain_create, df_exit_bb_chain_create):
	New functions to support artifical uses in exit block.
	(df_insn_refs_record): Added new DF_REF_CLOBBER ref type to
	avoid creation of artifical chains for clobbers at call sites.

2005-11-03  Paolo Bonzini  <bonzini@gnu.org>
	    Steven Bosscher  <stevenb@suse.de>

	* df.c (df_free): Fix call to df_bitmaps_free.
	(df_bb_regno_last_def_find): Make it return what it is supposed
	to return.
	(df_local_ref_killed_between_p): New.

2005-11-01  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>
	* flow.c (update_life_info): Added debugging.
	(init_propagate_block_info): Fixed typo.
	* df.c (df_refs_unlink, df_ref_record_1, df_ref_record,
	read_modify_subreg_p, df_def_record_1, df_insn_refs_record):
	Fixed control of when regs_ever_live is modified.
	* combine.c: Documentation rot.
	* reload1.c: Used wrong type of comment.

2005-10-31  Jan Hubicka  <jh@suse.cz>

	* reg-stack.c (subst_stack_regs_pat): Expect USEs to be ignored for
	liveness.
	(change_stack): Initialize partially dead registers.
	(convert_regs_1): Handle dead return values.
	(reg_to_stack): Switch to partial liveness. 
	(propagate_stack): Push in partially live stuff.

2005-10-25  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>

	* cfgrtl.c (print_rtl_with_bb): Fixed problem with debugging
	output of bitmaps.
	* df.c (mark_reg_change): Fixed problem computing sizes of hard regs.
	* reload1.c (reload): Fixed over agressive updating of bitmaps.
	* sched-rgn.c (schedule_insns): Cleaned away some useless verification 
	code.
	(rest_of_handle_sched2): Removed debugging.


2005-10-24  Kenneth Zadeck <zadeck@naturalbridge.com>

	* sched-rgn.c (check_live_1, update_live_1, rest_of_handle_sched): 
	Converted to use partially available liveness.
	(init_regions, schedule_insns, rest_of_handle_sched): 
	Removed assertion checking based on death notes.


2005-10-23  Daniel Berlin  <dberlin@dberlin.org>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* df.c (df_bitmaps_alloc, df_lr_local_compute, df_compute_all_blocks): 
	Removed df->all_blocks.
	(df_lr_local_compute): Added flag to indicate that 
	blocks was really the whole function.
	(df_ref_record): Fixed missing case for memory refs.
	(df_insn_refs_record): Fixed regs ever live processing.
	(df_bb_refs_record): Removed debugging code.
	(df_bb_lr_local_compute, notice_stack_pointer_modification, 
	df_bb_lr_local_compute): Moved stack pointer modification 
	detection code back to flow.c.
	(df_bb_lr_local_compute, hybrid_search_forward, 
	hybrid_search_backward): Formatting cleanup.
	(df_compute_all_blocks, notice_stack_pointer_modification):
	Removed.
	(df_analyze):  Changed the definition of whole program to be all 
	reachable blocks rather than all blocks.
	(df_analyze_subcfg, df_analyze_simple_change_some_blocks): Added 
	parameter to df_lr_local_compute. 
	(df_rtx_reg_replace): Fixed way it decided it was processing 
	entire function.
	* df.h: Removed all_blocks from struct df definition.
	* flow.c (notice_stack_pointer_modification_1, 
	notice_stack_pointer_modification): Added back.
	(life_analysis): Added back call to 
	notice_stack_pointer_modification.
	(struct tree_opt_pass pass_life, rest_of_handle_flow2): 
	Added debugging.
	* gcse.c (gcse_main, bypass_jumps): Additional places where we had missed 
	in renumbering entry and exit blocks.
	* global.c (global_alloc): Additional debugging code.


2005-10-19  Daniel Berlin  <dberlin@dberlin.org>

	* df.c (df_lr_local_compute): Fix thinko regarding pseudos and call
	defs.

2005-10-19  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df.c (df_bitmap_ior_edge, df_lr_confluence_0
	df_lr_confluence_n, df_ur_confluence_n, df_ur_set_bitmaps): New 
	functions.
	(df_exit_lr_local_compute, dataflow_set_a_op_b): Removed 
	functions.
	(df_ur_set_bitmaps, mark_reg_change, df_ur_local_finalize,
	mark_reg_use_for_earlyclobber, df_ur_local_compute, 
	df_bb_reg_live_start, df_bb_reg_live_end, df_bb_reg_live_start_p,
	df_bb_reg_live_end_p): Renamed "reaching registers" 
	problem (rr) to "uninitialized registers" problem. 
	(df_free): Changed variables freed.
	(df_ref_record): Added more sophisticated hard register scan.
	(df_insn_refs_record): Changed way invalidated_by_call is 
	processed.
	(df_bb_refs_record, df_exit_lr_local_compute, 
	df_bb_lr_local_compute): Removed bad way to simulate edge functions.  
	There are now real confluence functions.
	(notice_stack_pointer_modification): Disabled.
	(df_bb_lr_local_compute): Disabled call to 
	notice_stack_pointer_modification. Added code to properly handle hard 
	regs at call site.
	(df_lr_local_compute): Added more hard reg processing. 
	Changed order exit block is processed.
	(df_init): Added some invariant hard regs initialization.
	(df_refs_process): Removed artifical special case. 
	(df_print_bb_index, df_dump): Removed parameter to df_dump.
	(hybrid_search_forward, hybrid_search_backward): Added 
	confluence function calls.
	(iterative_dataflow): Added hack to initialize in and out sets 
	with hard registers.  This will be removed later.  
	* df.h: Removed DF_ARTIFICIAL_DEFS.  Renamed "reaching registers". 
	problem (rr) to "uninitialized registers" problem. Changed confluence 
	operator to general confluence functions.
	* flow.c (verify_wide_reg, verify_local_live_at_start): Removed 
	parameter to df_dump. 
	* reg_stack.c (reg_to_stack): Ditto.
	* sched_rgn.c (init_regions, schedule_insns): Ditto.
	* web.c (web_main): Ditto.
	* flow.c: (update_life_info): Removed DF_ARTIFICIAL_DEFS.
	* global.c (global_alloc): Ditto.
