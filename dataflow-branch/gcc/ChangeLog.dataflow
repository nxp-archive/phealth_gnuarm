2006-11-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	* fwprop.c Removed bad version.
	* tree-ssa-pre.c (init_pre): Added parameter to post_order_compute.

2006-11-15  Seongbae Park <seongbae.park@gmail.com>

	* df-scan.c (df_insn_refs_collect): Code cleanup
	for COND_EXEC handling.
	(df_need_static_chain_reg): New function.
	(df_get_entry_block_def_set): Check and add the static chain register.
	* ifcvt.c (if_convert): Don't ignore the return value
	of find_if_header.


2006-11-14  Seongbae Park <seongbae.park@gmail.com>

	* function.c (thread_prologue_and_epilogue_insns):
	Update regs_ever_live during df scanning.

2006-11-14  Seongbae Park <seongbae.park@gmail.com>

 	* dbgcnt.c, dbgcnt.h: Added missing copyright notice. Now uses
	dbgcnt.def for the list of counters.
	* Makefile.in: Add missing dbgcnt.h header file dependencies.
	* dbgcnt.def: New file.

2006-11-14  Seongbae Park <seongbae.park@gmail.com>
	
	* tree-tailcall.c (execute_tail_recursion): Added dbg_cnt().
	* df-scan.c (df_mw_hardreg_find_hardreg, df_get_conditional_uses,
	df_get_call_refs):
	New function.
	(df_refs_add_to_chains): Don't add duplicate mw_hardreg.
	(df_ins_refs_collect): Refactored to use df_get_conditional_uses
	and df_get_call_refs.
	(df_insn_refs_verify): Find the matching mw_hardreg.
	* dbgcnt.c (dbg_cnt_process_opt): Fix a bug handling multiple
	counters. Add a new debug counter tail_call.
	* dbgcnt.h (enum debug_counter): Added a new counter tail_call.
	* calls.c (expand_call): Check dbg_cnt(tail_call).
	* df_problems.c (df_create_unused_note, df_ri_bb_compute):
	Handle NULL LOC case.
	* dce.c (init_dce): Add a debug dump.


2006-11-14  Paolo Bonzini  <bonzini@gnu.org>
	
	Merge from mainline:

	2006-11-14  Paolo Bonzini  <bonzini@gnu.org>

	PR rtl-optimization/29798

	* fwprop.c (use_killed_between): Check that DEF_INSN dominates
	TARGET_INSN before any other check.
	(fwprop_init): Always calculate dominators.
	(fwprop_done): Always free them.

2006-11-13  Seongbae Park <seongbae.park@gmail.com>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (TODO_df_verify_scan): New flag.
	* auto-inc-def.c (find_inc): Added code to check for case where
	output of inc is not overwritten by mem to be combined.
	* df-scan.c (df_scan_set_bb_info): Now increases the size of the
	array if necessary. 
	(df_scan_blocks): Added flag to avoid recomputing regs_ever_live.
	(df_insn_rescan): Fixed missing case for rescanning.
	(df_insn_refs_collect): Special case for sibling calls.  Changed
	to not set up loc field with address of regno_reg_rtx element.
	(df_entry_block_defs_collect, df_exit_block_uses_collect,
	df_bb_refs_collect): Changed to not set up loc field with address 
	of regno_reg_rtx element.
	(df_bb_refs_record): Removed dflow parameter and added scan_insn 
	parameter. Changed call to df_bb_refs_record.
	(df_compute_regs_ever_live): New function.
	(df_reg_chain_unmark): Made to accept NULL blocks parameter.
	(df_ref_chain_unmark): New function.
	(df_ref_verify):  Added abort_if_fail parameter.
	(df_insn_refs_verify): Added abort_if_fail and return_refs
	parameter and changed function to return bool.  Added code to
	unmark chains.
	(df_bb_refs_verify): Added abort_if_fail parameter and now returns
	nothing. 
	(df_bb_verify): Changed to expect subroutines to abort.
	(df_verify_blocks): Now accepts NULL blocks parameter.
	* ifcvt.c (if_convert): Added more to dump_files.
	* (pass_rtl_ifcvt, pass_if_after_combine, pass_if_after_reload):
	added TODO_df_verify_scan.
	* opts.c (command_handle_option): New flag OPT_fdbg_cnt_
	* recog.c (confirm_change_group): Fixed updating of df scanning.
	* function.c (thread_prologue_and_epilogue_insns):
	Pass DF_NO_REGS_EVER_LIVE in df_init, and
	call df_compute_regs_ever_live after prologue is generated.
        * df.h (enum df_ref_flags): Added DF_REF_ARTIFICIAL.
	(enum df_changeable_flags): Added DF_NO_REGS_EVER_LIVE.
	(DF_REF_IS_ARTIFICIAL): Added checking for the flag DF_REF_ARTIFICIAL.
	* cfgcleanup.c: Fixed typo in comment.
     	* common.opt: New flag -fdbg-cnt=
	* combine.c (try_combine): Added calls to keep df_scanning up to
	date.
	(pass_combine): Added TODO_df_verify_scan.
	* Makefile.in: New gcc object file dbgcnt.o
	* passes.c (execute_todo): Added support for TODO_df_verify_scan.
	* config/ia64/ia64.c (ia64_split_return_addr_rtx): Finalize
	the frame layout early.
	(ia64_expand_prologue): Pass DF_NO_REGS_EVER_LIVE to df_init().
	* cfgrtl.c (rtl_delete_block, rtl_merge_blocks,
	cfg_layout_merge_blocks): Added debugging.
	* dbgcnt.c, dbgcnt.h: New files
	* dce.c (delete_unmarked_insns): Use dbg_cnt. 

2006-11-10  Seongbae Park <seongbae.park@gmail.com>

	* fwprop.c (forward_propagate_into): Use DF_REF_IS_ARTIFICIAL()
	instead of DF_REF_ARTIFICIAL flag.
	* df-scan.c (df_ref_record, df_def_record_1): Remove record_live
	(df_get_exit_block_use_set, df_get_entry_block_def_set):
	Renamed from df_get_{exit_block_uses,entry_block_defs}.
	(df_compute_regs_ever_live, df_ref_chain_change_bb,
	df_ref_is_record_live, df_reg_chain_unmark, df_ref_chain_free): 
	New functions.
	(df_reg_chains): New structure
	(df_ref_add_to_chains):
	(df_scan_blocks): Add call to df_compute_regs_ever_live().
	(df_ref_create): Remove record_live, and replace DF_REF_ARTIFICIAL
	flag use with DF_REF_IS_ARTIFICIAL () macro.
	(df_insn_rescan): Avoid marking blocks dirty if nothing changed.
	(df_insn_change_bb): Refactored to use df_ref_change_bb.
	(df_ref_is_equal): Now ignores DF_REF_MARKER flag.
	(df_ref_chain_find_ref, df_reg_chain_find_reg): Fix the order of
	parameters to the evaluation function.
	(df_ref_find_chains): Avoid early evaluation of certain fields.
	(df_ref_add_to_chains): Remove update to regs_ever_live.
	(df_refs_add_to_chains): Use DF_REF_NEXT_REF macro.
	(df_ref_record): Remove DF_REF_RECORD_LIVE.
	(df_insn_refs_record): Now takes the reference list to be added as
	an argument.
	(df_bb_refs_record): Handles entry and exit block cases.
	(df_bb_refs_collect): Removed DF_REF_ARTIFICIAL.
	(df_refs_record): Scan entry and exit blocks first.
	(df_ref_verify): Takes reg_chain cache as an argument, 
	verifies hardreg chain.
	(df_exit_block_bitmap_verify): Renamed from df_exit_block_verify
	(df_entry-block_bitmap_verify): Renamed from df_entry_block_verify
	(df_verify_blocks): Implement regchain cache. Assert immediately
	when verification fails in any subfunctions.
	* df.h (enum df_ref_flags): Remove DF_REF_ARTIFICIAL and renumber the
	enum.
	(DF_REF_IS_ARTIFICIAL, DF_REF_MARK, DF_REF_UNMARK, DF_REF_IS_MARKED,
	DF_INSN_UID_SAFE_GET): New macros:


2006-11-08  Kenneth Zadeck <zadeck@naturalbridge.com>

	* auto-inc-dec.c (attempt_change): Added code to properly maintain
	reg_next_inc_use when inc insns are deleted.
	(merge_in_block): Added debugging and changed to skip deleted
	instructions.
	(scan_dflow): Removed variable.	
	* df-scan.c (df_scan_alloc): Always processes entire function.
	(df_scan_free): Removed df->blocks_to_scan.
	(df_scan_blocks): Removed blocks_parameter.  Now scan entire
	function.
	(df_insn_rescan, df_insn_change_bb): Renamed df_mark_bb_dirty to
	df_set_bb_dirty.
	* df.h (blocks_to_scan): Removed variable.
	* df-core.c (df_analyze): Add call to df_scan_alloc.  Removed
	df->blocks_to_scan.
	(df_get_bb_dirty): New function.
	(df_mark_bb_dirty): Renamed to df_set_bb_dirty.
	(df_compact_blocks): Removed df->blocks_to_scan.
	(df_bb_replace): Added check to make sure there was no block at
	old_index and fixed updating bugs.
	* ifcvt.c (cond_exec_process_if_block,
	noce_process_if_block, cond_move_process_if_block,
	process_if_block, merge_if_block, find_if_header, 
	find_cond_trap, find_if_case_1, find_if_case_2, if_convert):
	Removed modified variable.
	(find_if_header, find_cond_trap, find_if_case_1, find_if_case_2,
	if_convert): Replaced BB_DIRTY with df_set_bb_dirty and 
	df_get_bb_dirty.
	* recog.c (confirm_change_group): Ditto.
	* emit_rtl (remove_insn,, reorder_insns, emit_insn_after_1): Ditto.
	* cfgcleanup.c (try_forward_edges, try_crossjump_to_edge,
	merge_blocks_move_predecessor_nojumps, try_crossjump_bb): Ditto.
      	* modulo-sched.c (sms_schedule): Ditto.
	* cfgrtl.c (rtl_split_block, rtl_redirect_edge_and_branch,
	rtl_redirect_edge_and_branch_force, purge_dead_edges, 
	cfg_layout_redirect_edge_and_branch): Ditto.
	* basic_block.h (BB_DIRTY): Removed.

	
2006-11-07  Kenneth Zadeck <zadeck@naturalbridge.com>

	* cfg.c (compact_blocks): Make df aware when blocks are moved around. 
	* auto-inc-dec.c (attempt_change): Removed explicit df updating.
	* ifcvt.c (cond_exec_process_if_block,
	noce_mem_write_may_trap_or_fault_p, noce_process_if_block,
	cond_move_process_if_block, process_if_block, find_if_header):
	Removed unused df parameter.
	(merge_if_block, find_cond_trap, find_if_case_1, find_if_case_2):
	Removed explicit df updating.
	(if_convert): Rearranged calls to df.
	(struct tree_opt_pass pass_rtl_ifcvt, pass_if_after_combine,
	pass_if_after_reload): Added TODO_verify_flow.
	* recog.c (delete_insn_chain_and_flow): Deleted function.
	(peephole2_optimize): Removed unused dataflow problem and variable
	and delete explicit df updating calls.
	(pass_split_before_sched2): Added TODO_verify_flow.
	* emit_rtl (add_insn_after, add_insn_before, remove_insn,
	reorder_insns, emit_insn_after_1): Added explicit updating of df.
	(set_insn_deleted): New function.
	* loop_invariant.c (invariant_table_size, invariant_table): New
	variables.
	(check_invariant_table_size): New function.
	(invariant_for_use, find_defs, check_dependency,
	find_invariant_insn, free_inv_motion_data, move_loop_invariants):
	Replaced DF_REF_DATA with invariant_table.
	* loop-iv.c (clean_slate, iv_ref_table_size, iv_ref_table): New
	variables.
	(check_iv_ref_table_size): New function.
	(clear_iv_info, iv_analysis_loop_init, record_iv, iv_analyze_def,
	iv_analysis_done): Replaced DF_REF_DATA with iv_ref_table.
	* cfglayout.c (fixup_reorder_chain): Now uses compact_blocks.
	* rtl.h (SET_INSN_DELETED): now calls set_insn_deleted.
	* Makefile.in: (emit-rtl.o): Now dependent on df.h.
	* sched-rgn.c (pass_sched, pass_sched2): Added TODO_verify_flow.
	* cfgrtl.c (rtl_delete_block, update_bb_for_insn,
	rtl_merge_blocks, try_redirect_by_replacing_jump,
	cfg_layout_merge_blocks): Added explicit updating of df.
	* dce.c (delete_unmarked_insns): Removed df_delete parameter and
	explicit updating of df info.
	(rest_of_handle_dce, rest_of_handle_dse): Added call to
	df_remove_problem.
	(fast_dce, fast_dce, rest_of_handle_fast_dce, run_fast_df_dce):
	Removed df_delete parameter.
	* df-scan.c (df_scan_free_bb_info): Changed call.
	(df_scan_alloc, df_scan_free): Added setting of out_of_date_transfer_functions.
	(df_problem problem_SCAN): Added problem removal function.
	(df_scan_blocks): Added calls to df_refs_delete and df_bb_delete.
	(df_insn_create_insn_record): Added call to df_grow_insn_info.
	(df_insn_refs_delete): Renamed to df_insn_delete and removed dflow
	parameter.
	(df_bb_refs_delete): Renamed to df_bb_delete and removed dflow
	parameter.
	(df_refs_delete): Deleted.
	(df_insn_rescan, df_insn_change_bb): New function.
	(df_ref_create_structure): Removed DF_REF_DATA.
	* df-core.c (df_add_problem): Changed to use new form of problem
	dependency.
	(df_remove_problem): New function.
	(df_set_blocks): Does a better job of updating the proper blocks.
	(df_delete_basic_block): Removed df parameter and checks to see if
	block already had infomation.
	(df_get_bb_info): Returns NULL if no info was there.
	(df_set_bb_info): Checks to make sure problem block information.
	(df_mark_solutions_dirty, df_mark_bb_dirty, df_compact_blocks, 
	df_bb_replace): New functions.
	* df.h (df_remove_problem_function): New typedef.
	(df_dependent_problem_function): Deleted typedef.
	(df_problem): Added remove_problem_fun and dependent_problem and
	deleted dependent_problem_fun.
	(df_ref.data): Removed.
	(df.out_of_date_transfer_functions, df.solutions_dirty): New
	variables.
	(DF_REF_DATA): Deleted macro.  
	* df-problems.c (problem_RU, problem_RD, problem_LR, problem_UR,
	problem_LIVE, problem_UREC, problem_CHAIN, problem_RI): Added
	problem removal function and changed dependent_function.
	
2006-11-04  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_scan_start_dump): Changed print routine to print
	hard register names.
	* df-core.c (df_print_regset): New function.
	* global.c (global_alloc): Do not recompute register infomation
	when recomputing dataflow.
	* df.h (DF_RI_NO_UPDATE): New flag.  
	* df-problems.c (df_lr_top_dump, df_lr_bottom_dump,
	df_ur_top_dump, df_ur_bottom_dump, df_live_top_dump,
	df_live_bottom_dump, df_urec_top_dump, df_urec_bottom_dump): 
	Changed to use df_print_regset.
	(df_ri_alloc, df_ri_compute): Changed to not update if
	DF_RI_NO_UPDATE flag.
	* cfgrtl.c (print_rtl_with_bb): Changed to print preds and
	successor blocks in dump file.
	
2006-11-03  Seongbae Park <seongbae.park@gmail.com>

	* global.c (global_conflicts): Use df_urec_get_live_at_top ()
	instead of DF_RA_LIVE_IN ().
	* function.h: Add a declaration for current_function_assembler_name().
	* function.c (current_function_assembler_name):  New function.
	(thread_prologue_and_epilogue_insns): Insert rtx_USE when profiling.
	* df.h (DF_REF_FLAGS_CLEAR): New macro.
	(df_urec_get_live_at_top): New function declaration.
	* df-problems.c (df_urec_get_live_at_top): New function.

2006-10-28  Seongbae Park <seongbae.park@gmail.com>

	* df.h (df_rescan_blocks): Renamed to df_scan_blocks.
	* df-core.c (df_analyze): Use df_scan_blocks() instead.
	* ifcvt.c (if_convert): Use df_scan_blocks() instead.
	* df-scan.c 
	(df_ref_record, df_def_record_1, df_defs_record, df_uses_record):
	They are made side-effect free.
	(df_ref_find_chains, df_ref_add_to_chains, df_refs_add_to_chains,
	df_ref_is_equal, df_ref_chain_find_ref, df_reg_chain_find_ref,
	df_scan_start_block, df_check_and_grow_ref_info,
	df_insn_refs_collect, df_bb_refs_collect,
	df_get_entry_block_defs, df_get_exit_block_uses,
	df_ref_verify, df_refs_verified, df_ref_chain_verify,
	df_reg_chain_clear_verified, df_bb_refs_verify, 
	df_exit_block_verify, df_entry_block_verify, df_verify_blocks):
	New functions.
	(df_ref_create_structure): Initializes the fields
	of df_ref and does not connect it to various chains.
	(df_insn_refs_record, df_bb_refs_record, df_record_entry_block_defs,
	 df_record_exit_block_uses, df_refs_record):
	Separate side-effects (adding chains and updating regs_ever_live)
	from traversing and finding the refs in the insn/basic block.
	(df_ref_create): Separate calls for creating the ref and add it
	to the chains.

2006-10-24  Paolo Bonzini  <bonzinI@gnu.rg>

	* ddg.c (add_deps_for_def, add_deps_for_use): Use accessor macros.
	* df.h (DF_REF_STRIPPED, DF_SUBREGS): Remove.
	* df-core.c: Don't document scanning flags.
	* df-scan.c (df_ref_record): Always behave as if DF_SUBREGS was set.
	* df-problems.c (df_lr_bb_local_compute): Strip SUBREGs with
	DF_REF_REAL_REG.
	(df_chain_start_dump): Don't dump DF_REF_STRIPPED.
	(df_create_unused_note, df_ri_bb_compute): Don't "inline"
	DF_REF_REAL_LOC.
	* fwprop.c (fwprop_init): Do not pass DF_SUBREGS.
	* loop-invariant.c (record_use): Don't strip SUBREGs.
	(record_uses): Do it here with DF_REF_REAL_LOC.
	* loop-iv.c (iv_analyze_def): Only allow REGs.  Replace previous
	way to check for SUBREGs with an assertion.

2006-10-19  Kenneth Zadeck <zadeck@naturalbridge.com>

	* sched-ebb.c (schedule_ebbs): Changed flags to df_init.
	* fwprop.c (use_killed_between): Changed to use proper macros.
	(All_uses_available_at, try_fwprop_subst): Added support for
	separated reg_equiv/equal df_refs.
	(fwprop_init): Changed flags to df_init.
	(fwprop, fwprop_addr): Changed call to df_reorganize_refs to
	df_maybe_reorganize_use_refs.
	* see.c (see_initialize_data_structures): Changed flags to
	df_init.
	* ddg.c (build_inter_loop_deps): Now skips refs with
	reg_equal/equiv notes.
	* modulo-sched.c (sms_schedule): Changed flags to df_init.
	* web.c (union_defs): Added support for separated reg_equiv/equal
	df_refs.
	(web_main): Changed flags to df_init and changed call to
	df_reorganize_refs to df_maybe_reorganize_(use|def)_refs.
	* loop_invariant.c (check_dependency): New function split out from
	check_dependencies.
	(record_uses): Added support for separated reg_equiv/equal
	df_refs.
	(move_loop_invariants): Changed flags to df_init.
	* loop-iv.c (iv_analysis_loop_init): Changed flags to df_init.
	(latch_dominating_def): Changed to use proper macros.
	* combine.c (create_log_links): Ditto.
	* sched-rgn.c (schedule_insns): Changed flags to df_init.
	* dce.c (dce_process_block): Changed to use proper macros.
	* df.h (df_insn_info.eq_uses): New field.
	(DF_EQUIV_NOTES): Deleted permanent_flag.
	(DF_EQ_NOTES): New changeable_flag.
	(df_ref_info.regs_size, df_ref_info.regs_inited): Moved to df
	structure.
	(df.def_regs, df.use_regs, df.eq_use_regs): New fields.
	(df_ref_info.begin): Moved from df_reg_info.
	(DF_DEFS_COUNT, DF_DEFS_BEGIN, DF_DEFS_COUNT, DF_DEFS_BEGIN,
	DF_REG_EQ_USE_GET, DF_REG_EQ_USE_CHAIN, DF_REG_EQ_USE_COUNT): New
	macros.
	(DF_REG_SIZE, DF_REG_DEF_GET, DF_REG_DEF_CHAIN, DF_REG_DEF_COUNT,
	DF_REG_USE_GET, DF_REG_USE_CHAIN, DF_REG_USE_COUNT): Redefined.
	(df_reorganize_refs): Split into df_maybe_reorganize_use_refs and
	df_maybe_reorganize_def_refs.  
	(df_ref_info.refs_organized): Split into refs_organized_alone and 
	refs_organized_with_eq_uses.
	* df-problems.c (df_ru_bb_local_compute_process_def,
	df_ru_local_compute, df_ru_confluence_n, df_ru_transfer_function,
	df_ru_start_dump, df_rd_bb_local_compute_process_def,
	df_rd_local_compute, df_rd_confluence_n, df_rd_transfer_function,
	df_rd_start_dump, df_chain_alloc, df_chain_insn_reset,
	df_chain_create_bb_process_use, df_chain_create_bb,
	df_chain_start_dump): Changed to use proper macros.
	(df_ru_bb_local_compute, df_chain_insn_reset, df_chain_create_bb):
	Added support for separated reg_equiv/equal df_refs.
	(df_ru_local_compute, df_rd_local_compute, df_chain_alloc): Split
	into df_maybe_reorganize_use_refs and
	df_maybe_reorganize_def_refs.
	* df-scan.c (df_grow_reg_info, df_rescan_blocks, df_ref_create):
	Changed to process all data structures dependent on number of
	registers at once.
	(df_scan_free_internal, df_scan_alloc): Changed to process new
	data structures properly.
	(df_rescan_blocks): Split into refs_organized_alone and
	refs_organized_with_eq_uses.
	(df_reg_chain_unlink): Remove decrement of bitmap_size fields.
	(df_reg_chain_unlink, df_insn_refs_delete,
	df_ref_create_structure): Changed to use proper macros.
	(df_reg_chain_unlink, df_ref_remove, df_insn_refs_delete,
	df_reorganize_refs, df_ref_create_structure, df_insn_refs_record):
	Added support for separated reg_equiv/equal df_refs.
	(df_maybe_reorganize_use_refs, df_maybe_reorganize_def_refs): New
	functions.
	* df-core.c (df_bb_regno_last_use_find,
	df_bb_regno_first_def_find, df_bb_regno_last_def_find,
	df_insn_regno_def_p, df_find_def, df_find_use, df_dump_start,
	df_regno_debug): Changed to use proper macros.
	(df_find_use, df_insn_uid_debug, df_insn_uid_debug,
	df_insn_debug_regno, df_insn_debug_regno): Added support for
	separated reg_equiv/equal df_refs.

	
2006-10-18  Paolo Bonzini  <bonzini@gnu.org>

	* stack-ptr-mod.c (pass_stack_ptr_mod): Don't set pass name.
	* final.c (pass_no_new_pseudos): Don't set pass name.

	* fwprop.c (all_uses_available_at): Use DF_REF_REG.
	(forward_propagate_into): Discard artificial defs/uses.
	(pass_rtl_fwprop_addr): Add TODO_df_finish.

2006-10-03  Richard Sandiford  <richard@codesourcery.com>

	* cselib.h (cselib_discard_hook): Declare.
	* cselib.c (cselib_discard_hook): New variable.
	(remove_useless_values): Call it before freeing useless values.
	* dce.c (base_address): New union.
	(store_base_info): Change the type of the base field from "rtx"
	to "union base_address".
	(local_invariant_stores, local_value_stores): New variables.
	(store_base_eq): Split into...
	(invariant_store_base_eq, value_store_base_eq): ...these new functions.
	(store_base_hash): Split into...
	(invariant_store_base_hash, value_store_base_hash): ...these
	new functions.
	(store_base_del): Fix formatting.
	(init_store_group): Split into...
	(init_invariant_store_group, init_value_store_group): ...these
	new functions.
	(init_dse): Use init_invariant_store_group instead of init_store_group.
	(get_canonical_address): Delete.
	(add_store_offset): Change the type of BASE from "rtx" to "union
	base_address *".
	(record_store): Remove the GROUP parameter.  Don't call
	get_canonical_address.  Store the base in a "union base_address" and
	add stores to either local_invariant_stores or local_value_stores.
	(record_stores): Remove the GROUP parameter and adjust the calls
	to record_store.
	(store_base_local): Add a parameter that indicates whether stores
	are invariant or cselib_vals.
	(invariant_store_base_local): New function.
	(value_store_base_local): Likewise.
	(value_store_base_useless): Likewise.
	(remove_useless_values): Likewise.
	(store_base_prune_needed): Adjust for store_base_info changes.
	(prescan_insns_for_dse): Remove the local group variable and use
	local_invariant_stores and local_value_stores instead.  Adjust the
	call to record_stores.  Use remove_useless_values as the
	cselib_discard_hook while processing a basic block.

2006-10-03  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>

 	* sched-ebb.c (ebb_head, ebb_tail, ebb_head_or_leaf_p): Removed.
	(begin_schedule_ready, schedule_ebb, ebb_head_or_leaf_p): Remove
	unnecessary argument, update all callers.
	(ebb_sched_info): Update initializer.
	(df): New static variable to keep dataflow info.
	(compute_jump_reg_dependencies): Use it instead of glat.
 	* haifa-sched.c (glat_start, glat_end, glat_size, init_glat,
	init_glat1, free_glat): Removed.
	(generate_recovery_code, begin_speculative_block,
	add_to_speculative_block, init_before_recovery, 
	create_recovery_block, create_check_block_twin, 
	schedule_block, sched_init, add_block): Remove
	unnecessary argument, update all callers.
 	* modulo-sched.c (sms_sched_info): Update initializer.
	(sms_schedule): Update call to sched_init ().
 	* sched-int.h (struct sched_info): Remove unnecessary argument and
	update all callers of field 'begin_schedule_ready'.  Remove field
	'region_head_or_leaf_p'.
	(glat_start, glat_end): Remove prototypes.
	(enum SCHED_FLAGS): Remove USE_GLAT, DETACH_LIFE_INFO.  Use NEW_BBS
	instead.
	(schedule_block, sched_init, add_block, schedule_region): Update
	prototypes.
	* sched-rgn.c (df, not_in_df): New static variables.
	(check_live_1, update_live_1, add_block1): Use them instead of glat.
	(begin_schedule_read, schedule_region): Remove unnecessary argument,
	update all callers.
	(region_head_or_leaf_p): Remove.
	(region_sched_info): Update initializer.
 	* config/ia64/ia64.c (set_sched_flags): Use NEW_BBS instead of
	DETACH_LIFE_INFO.

2006-10-01  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_ref_record, df_insn_refs_record,
	df_bb_refs_record, df_refs_record, df_record_entry_block_defs):
	Removed DF_HARD_REGS flag.
	* df-core.c (comments): Ditto.
	* df.h (permanent_flags.DF_HARD_REFS): Removed.
	(changeable_flags.DF_NO_HARD_REGS): Added.
	* df-problems.c (df_rd_bb_local_compute_process_def,
	df_rd_bb_local_compute, df_chain_create_bb_process_use,
	df_chain_create_bb): Added support for DF_NO_HARD_REGS flag.
	* dce.c (init_dce): Removed DF_HARD_REFS flag.
	* reg_stack.c (reg_to_stack): Ditto.
	* sched_rgn.c (sched_insns): Ditto.
	* regrename.c (regrename_optimize): Ditto.
	* sched_ebb.c (schedule_ebbs): Ditto.
	* fwprop.c (fwprop_init): Ditto.
	* see.c (see_initialize_data_structures): Ditto.
	* auto_inc_dec.c (rest_of_handle_auto_inc_dec): Ditto.
	* mode-switching.c (optimize_mode_switching): Ditto.
	* modulo-sched.c (sms_schedule): Ditto.
	* ifcvt.c (if_convert): Ditto.
	* recog.c (peephole2_optimize): Ditto.
	* regmove.c (regmove_optimize, rest_of_handle_stack_adjustments):
	Ditto.
	* local_alloc.c (rest_of_handle_local_alloc): Ditto.
	* function.c (thread_prologue_and_epilogue_insns): Ditto.
	* rtl_factoring.c (rtl_sequabstr): Ditto.
	* bt_load.c (branch_target_load_optimize): Ditto.
	* loop_invariant.c (move_loop_invariants): Ditto.
	* subregs-init.c (initialize_uninitialized_subregs): Ditto.
	* loop-iv.c (iv_analysis_loop_init): Ditto.
	* combine.c (rest_of_handle_combine): Ditto.
	* web.c (web_main): Added DF_NO_HARD_REGS flag and changed loops
	to skip over hard regs.
	* reorg.c (dbr_schedule): Removed extra flags from
	df_*_add_problems calls.
	
2006-09-30  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (problem_SCAN): Removed flags.
	(df_scan_add_problem): Ditto.
	(df_ref_record, df_insn_refs_record, df_bb_refs_record,
	df_refs_record, df_record_entry_block_defs,
	df_record_exit_block_uses ): Moved flags to df structure.
	* df-core.c (df_init): Added permanent_flags and changeable_flags.
	(df_add_problem): Removed flags parameter.
	(df_set_flags, df_clear_flags): Changed processing of flags.  *
	df.h (df_dependent_problem_function, struct df_problem): Removed
	flags.
	(DF_HARD_REGS, DF_EQUIV_NOTES, DF_SUBREGS, DF_DU_CHAIN,
	DF_UD_CHAIN, DF_RI_LIFE, DF_RI_SETJMP): Changed to be fields in
	df_permanent_flags.
	(DF_LR_RUN_DCE): Changed to be fields in df_changeable_flags.
	(df_init, df_add_problem, df_set_flags, df_clear_flags,
	df_ru_add_problem, df_rd_add_problem, df_lr_add_problem,
	df_ur_add_problem, df_live_add_problem, df_urec_add_problem,
	df_chain_add_problem, df_ri_add_problem, df_scan_add_problem):
	Changed flag parameters.
	* df-problems.c (problem_RU, problem_RD, problem_LR, problem_UR,
	problem_LIVE, problem_UREC, problem_CHAIN, problem_RI): Removed
	changeable flags field.
	(df_ru_add_problem, df_rd_add_problem, df_lr_add_problem,
	df_ur_add_problem, df_live_add_problem, df_urec_add_problem,
	df_chain_add_problem, df_ri_add_problem): Removed flags parameter.
	(df_lr_local_finalize, df_chain_alloc, df_chain_insn_reset,
	df_chain_bb_reset, df_chain_create_bb_process_use,
	df_chain_start_dump, df_ri_alloc, df_ri_bb_compute, df_ri_compute,
	df_ri_free): Changed location of flags.
	* dce.c (init_dce): Moved flags from df_*_add_problem to df_init.
	(fast_dce): Changed parameters to df_set_flags and df_clear_flags.
	* reg_stack.c (reg_to_stack): Moved flags from df_*_add_problem to df_init.
	* sched_rgn.c (sched_insns): Ditto.
	* regrename.c (regrename_optimize): Ditto.
	* sched_ebb.c (schedule_ebbs): Ditto.
	* fwprop.c (fwprop_init): Ditto.
	* see.c (see_initialize_data_structures): Ditto.
	* auto_inc_dec.c (rest_of_handle_auto_inc_dec): Ditto.
	* mode-switching.c (optimize_mode_switching): Ditto.
	* modulo-sched.c (sms_schedule): Ditto.
	* web.c (web_main): Ditto.
	* ifcvt.c (if_convert): Ditto.
	* recog.c (peephole2_optimize): Ditto.
	* regmove.c (regmove_optimize, rest_of_handle_stack_adjustments):
	Ditto.
	* local_alloc.c (rest_of_handle_local_alloc): Ditto.
	* function.c (thread_prologue_and_epilogue_insns): Ditto.
	* rtl_factoring.c (rtl_sequabstr): Ditto.
	* bt_load.c (branch_target_load_optimize): Ditto.
	* loop_invariant.c (move_loop_invariants): Ditto.
	* subregs-init.c (initialize_uninitialized_subregs): Ditto.
	* loop-iv.c (iv_analysis_loop_init): Ditto.
	* combine.c (rest_of_handle_combine): Ditto.
	
2006-08-04  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (pass_rtl_dse): Split into pass_rtl_dse1,
	pass_rtl_dse2, pass_rtl_dse3.
	* passes.c (init_optimization_passes): Ditto.  
	* timevar.def (TV_DSE): Split into TV_DSE1, TV_DSE2, and TV_DSE3.
	(TV_THREAD_PROLOGUE_AND_EPILOGUE): Made text shorter to improve
	readability.
	* df.core.c (df_init, df_finish1, df_analyze_problem, df_analyze):
	Made postorder and instance variable of df.  
	(df_finish1): Made tolerant of being passed NULL instance.
	(df_get_n_blocks, df_get_postorder): New functions.
	* cfganal (post_order_compute): Added delete_unreachable
	parameter and code to delete unreachable blocks.
	* local_alloc (rest_of_handle_local_alloc): Removed unnecessary
	call to delete_unreachable_blocks.
	* df.h (postorder, n_blocks): New instance variables.
	(df_get_n_blocks, df_get_postorder): New functions.
	* sched-rgn.c (extend_rgns): Added extra parameter to
	post_order_compute.
	* basic-block.h (post_order_compute): Ditto.
	* dce.c (fast_dce, init_rs_dflow): Now uses postorder and n_blocks from df.
	(pass_rtl_dse): Split into pass_rtl_dse1,
	pass_rtl_dse2, pass_rtl_dse3.
	* sched-ebb.c (schedule-ebbs): Added return value.
	* haifa-sched.c (add_block): Made df parameter unused and fixed
	incorrect assert.  

2006-08-01  Kenneth Zadeck <zadeck@naturalbridge.com>

	* sched-ebb.c (sched_ebbs): Now returns the df instance created.
	* rtl.h (sched_ebbs): Ditto.
	* recog.c (split_all_insns): Made public again so it can be called
	from ia64.c
	* rtl.h (split_all_insns): Ditto.
	* df-problems.c (df_ri_compute): Removed call to non existent
	function.
	* config/ia64/ia64.c (emit_predicate_relation_info): Added df
	parameter and removed rotten ref to global instance.
	(ia64_reorg): Added local instance of df and removed calls to non
	existent flow.c.

2006-07-26  Kenneth Zadeck <zadeck@naturalbridge.com>

	* regrename.c (regrename_optimize): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_regrename): Added TODO_df_finish flag.
	* sched-ebb.c (schedule_ebbs): Renamed df_clrur to df_live
	and removed df_finish call.
	* fwprop.c (fwprop_done): Removed df_finish call.
	(pass_rtl_fwprop): Added TODO_df_finish flag.
	* see.c (see_commit_changes): Removed unnecessary set to df.
	* postreload.c (rest_of_handle_postreload): Removed df_finish call.
	(pass_postreload_cse): Added TODO_df_finish flag.
	* tree-pass.h (TODO_df_finish): Added.
	* cfg.c (dump_bb_info): Added flow info to dumps
	(dump_reg_info): New function.
	(dump_flow_info): Moved reg info printing to dump_reg_info.
	* auto-inc-dec.c (rest_of_handle_auto_inc_dec): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_inc_dec): Added TODO_df_finish flag.
	* reorg.c (dbr_schedule): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_delay_slots): Added TODO_df_finish flag.
	* df-scan.c (df_scan_alloc): Added set to dflow->computed.
	(df_scan_dump): Renamed to df_scan_start_dump.
	(problem_SCAN): Updated for new dumpers.
	* haifa-sched.c (sched_finish): Removed df parameter and deleted
	call to df_finish.
	* df-core.c (ddf): Renamed to df_current_instance and made public.
	(df_init): Ditto and added check to make sure only one instance of
	df is alive at any point.
	(df_add_problem): Initialized dflow->computed.
	(df_analyze_problem): Set dflow->computed.
	(df_dump): Now calls new dumpers.
	(df_dump_start, df_dump_top, df_dump_bottom): New functions.
	(debug_df_insn, debug_df_reg, debug_df_regno, debug_df_defno,
	debug_df_useno): Renamed ddf to df_current_instance.
	* mode_switching (optimize_mode_switching): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_mode_switching): Added TODO_df_finish flag.
	* modulo-sched.c (sms_schedule): Removed calls to df_dump and df
	parameter from sched_finish.
	(pass_sms): Added TODO_df_finish flag.
	* web.c (web_main): Removed call to df_dump and df_finish.
	(pass_web): Added TODO_df_finish flag.
	* loop-init.c (pass_rtl_move_loop_init): Added TODO_df_finish
	flag.
	* global.c (global_alloc): Removed call to df_dump and debugging
	code.
	* ifcvt.c (if_convert):  Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_rtl_ifcvt, pass_if_after_combine, pass_if_after_reload): 
	Added TODO_df_finish flag.
	* recog.c (peephole2_optimize): Renamed df_clrur to df_live and
	removed df_finish call.
	(pass_peephole2): Added TODO_df_finish flag.
	* regmove.c (regmove_optimize, rest_of_handle_stack_adjustments): 
	Renamed df_clrur to df_live and removed df_finish call.
	(pass_regmove, pass_stack_adjustments): Added TODO_df_finish flag.
	* function.c (epilogue_done): Removed df_finish call.
	(pass_thread_prologue): Added TODO_df_finish flag.
	* df.h (DF_CLRUR): Renamed to DF_LIVE.
	(df_dump_bb_problem_function): New function type.
	(df_problem.dump_fun): Deleted.
	(df_problem.dump_fun_start, df_problem.dump_fun_top,
	df_problem.dump_fun_bottom, problem_data.computed,
	df_current_instance): New fields.
	(DF_CLRUR_BB_INFO): Renamed to DF_LIVE_BB_INFO.
	(df_clrur_bb_info): Renamed to df_live_bb_info.
	(df_dump_start, df_dump_top, df_dump_bottom): New functions.
	* rtl-factoring (rtl_seqabstr): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_rtl_seqabstr):  Added TODO_df_finish flag.
	* bt-load (branch_target_load_optimize): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_branch_target_load_optimize1,
	pass_branch_target_load_optimize2): Added TODO_df_finish flag.
	* loop-invariant.c (move_loop_invariants): Removed call to
	df_finish.
	* subregs-init.c (initialize_uninitialized_subregs): Renamed
	df_clrur to df_live and changed call to dg_get_live_in to
	DF_LIVE_IN.
	* rtl.h (dump_reg_info): New function.
	* sched-int.h (sched_finish): Removed df parameter.
	* combine.c (rest_of_handle_combine): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_combine): Added TODO_df_finish flag.
	* df-problems.c (df_get_live_in, df_get_live_out): Renamed
	DF_CLRUR to DF_LIVE.
	(df_ru_dump, df_rd_dump, df_lr_dump, df_ur_dump, df_clrur_dump, 
	df_urec_dump, df_ri_dump): Deleted function.
	(df_ru_start_dump, df_ru_top_dump, df_ru_bottom_dump,
	df_rd_start_dump, df_rd_top_dump, df_rd_bottom_dump,
	df_lr_start_dump, df_lr_top_dump, df_lr_bottom_dump,
	df_ur_start_dump, df_ur_top_dump, df_ur_bottom_dump,
	df_live_top_dump, df_live_bottom_dump, df_ri_start_dump,
	df_urec_top_dump, df_urec_bottom_dump): New function.
	(problem_RU, problem_RD, problem_LR, problem_UR, problem_UREC,
	problem_CHAIN, problem_RI): Replaced dump functions.
	(df_clrur_get_bb_info): Renamed to df_live_get_bb_info.
	(df_clrur_set_bb_info): Renamed to df_live_set_bb_info.
	(df_clrur_free_bb_info): Renamed to df_live_free_bb_info.
	(df_clrur_alloc): Renamed to df_live_alloc.
	(df_clrur_local_finalize): Renamed to df_live_local_finalize.
	(df_clrur_free): Renamed to df_clrur_free.
	(problem_CLRUR): Renamed to problem_LIVE and dump functions
	changed.
	(df_clrur_add_problem): Renamed to df_live_add_problem.
	(df_chains_dump): Renamed to df_chain_start_dump.
	(df_chain_add_problem, df_ri_alloc, df_ri_compute): Removed
	problem_data->computed.	
	* Makefile.in (passes.o): Added DF_H.
	* sched-rgn.c (schedule_insns): Renamed df_clrur to df_live
	and removed df_finish call.
	(pass_sched, pass_sched2): Added TODO_df_finish flag.
	* passes.c (execute_todo): Added call to df_finish for
	TODO_df_finish flag.
	* cfgrtl.c (dump_regset_in, dump_regset_out): Deleted.
	(rtl_dump_bb, print_rtl_with_bb): Fixed to find and print df info.
	* dce.c (init_dce): Removed call to df_dump.
	(end_dce, end_fast_dce): Removed call df_finish and null out local
	df instance variable.
	(pass_rtl_dce, pass_fast_rtl_dce, pass_rtl_dse): Added
	TODO_df_finish flag.


2006-07-23  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (pass_regclass_init, pass_no_new_pseudos,
	pass_split_before_sched2): Added.
	(pass_life, pass_remove_death_notes): Deleted.
	* rtlanal.c: Documentation.
	* stack-ptr-mod.c: Ditto.
	* output.h: Ditto.
	* function.c: Ditto.
	* caller-save.c: Ditto.
	* sched-deps.c: Ditto.
	* jump.c: Ditto.
	* alias.c: Ditto.
	* calls.c: Ditto.
	* cfgloop.c: Ditto. 
	(establish_preds, flow_loops_find): Removed ref to cfun->max_loop_depth.
	* final.c: (rest_of_no_new_pseudos, pass_no_new_pseudos): Added.
	* cfg.c (dump_regset, debug_regset): Moved from flow.c.
	* regs.h (regs_may_share): Deleted.
	(allocate_reg_life_data): Added.
	* flow.c: Deleted.
	* global.c (reg_may_share): Deleted.
	(global_alloc): Removed support for regs_may_share.
	* ifcvt.c (rest_or_handel_if_conversion): Removed ref to
	clear_reg_deaths.
	* timevar.def (TV_FLOW): Removed.
	* recog.c (find_single_use, find_single_use_1): Moved to combine
	and made static.
	(split_all_insns, split_all_insns_noflow): Made static.
	(pass_split_before_regclass): Fixed tv_id.
	(gate_handle_split_before_sched2,
	rest_of_handle_split_before_sched2, pass_split_before_sched2): New.
	(pass_split_for_shorten_branches): Renamed and fixed tv_id.
	* recog.h (find_single_use): Removed.
	* regmove.c (find_use_as_address): Moved from flow and made
	static.
	* function.h (max_loop_depth): Removed.
	* cfgcleanup.c (delete_dead_jumptables): Moved from flow.c.
	* subregs-init.c (initialize_uninitialized_subregs): Added call to
	allocate_reg_life_data if new regs were added.  
	* regclass.c (max_regno, reg_set_to_hard_reg_set, 
	allocate_reg_life_data): Moved from flow.c.
	(regclass_init): Now static and returns unsigned int.
	(pass_regclass_init, find_subregs_of_mode): New.
	(init_subregs_of_mode): Now fills the hash table.
	* rtl.h (find_use_as_address, split_all_insns, 
	split_all_insns_noflow, regclass_init): Deleted.
	* combine.c (find_single_use_1, find_single_use): Moved from recog
	and made static.
	(delete_noop_moves): Moved from flow.c and made static.
	(rest_of_handle_combine): Now runs dce as part of df_init.
	* df-problems.c (reg_n_info): Moved from flow.c.
	(df_ri_problem_data.computed): Added field.
	(print_note, df_set_unused_notes_for_mw, df_set_dead_notes_for_mw,
	df_create_unused_note, df_ri_bb_compute, df_ri_compute): Changed
	note printing to go to dump_file.
	(df_ri_alloc, df_ri_compute, df_ri_free, df_ri_dump): Added
	support for computed flag.
	* Makefile.in: (flow.c flow.o): Removed.
	* sched-rgn.c (check_dead_notes1, deaths_in_region): Removed. 
	(init_regions, add_block1): Removed last of note counting code.
	(rest_of_handle_sched2): Moved call to split_all_insns to separate
	pass.
	* basic_block.h (first_insn_after_basic_block_note, 
	update_life_extent, PROP_* flags, life_analysis, update_life_info
	update_life_info_in_dirty_blocks, count_or_remove_death_notes,
	propagate_block, clear_reg_deaths, propagate_block_info, 
	propagate_one_insn, init_propagate_block_info, 
	free_propagate_block_info): Removed.
	(CLEANUP_*): Renumbered.
	sched_vis.c: (print_exp): Added proper printing for PRE and
	POST_MODIFY.
	* passes.c (init_optimization_passes): Added pass_regclass_init,
	pass_no_new_pseudos, and pass_split_before_sched2.  Deleted
	pass_life.
	* struct-equiv.c (struct_equiv_init): Removed dead conditional.
	* config/rs6000/rs6000.c (print_operand): More fixes for
	PRE_MODIFY.
	* config/rs6000/rs6000.md ("*movdf_hardfloat32",
	"*movdf_softfloat32"): Ditto.
	* cfgrtl (first_insn_after_basic_block_note): Moved from flow.c
	and made static.	


2006-07-16  Zdenek Dvorak <dvorakz@suse.cz>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* regrename.c: Fixed comments.
	* see.c (rest_of_handle_see): Removed call to
	update_life_info_in_dirty_blocks.
	* tree-pass.h: (pass_clear_df, pass_reset_df): Removed.
	* passes.c (init_optimization_passes): Ditto.
	* cfghooks.c (split_block): Remove call to split_block_end.
	(merge_blocks): Removed call to merge_blocks_end.
	(duplicate_block): Removed call to duplicate_block_end.
	* cfghooks.h (split_block_end, merge_blocks_end,
	duplicate_block_end): Removed.
	* cfgrtl.c (rtl_split_block_end, rtl_merge_blocks_end): Removed.
	(rtl_create_basic_block, force_nonfallthru_and_redirect,
	rtl_split_edge, cfg_layout_merge_blocks, cfg_layout_split_edge): 
	Removed old calls to incremental dataflow.
	(dump_regset_in, dump_regset_out): Removed call to dump_regset.
	(rtl_dump_bb, print_rtl_with_bb): Rearranged dataflow printing.
	* cfg.c (compact_blocks): Removed code to keep dataflow up to
	date.
	* flow.c (clear_log_links): Deleted
	(life_analysis, init_propagate_block_info): Removed PROP_LOG_LINKS.
	(update_life_info): Removed call to clear_log_links.
	(mark_set_1): Removed code to build log links.
	(clear_log_links): Deleted.
	* df-scan.c (df_uses_record): Added code to set
	DF_REF_PRE_POST_MODIFY.
	(df_insn_refs_record): Added code to set DF_REF_CALL_STACK_FRAME.
	* df-core.c (df_analyze_simple_change_some_blocks,
	df_analyze_simple_change_one_block, df_compact_blocks,
	df_bb_replace, reset_df, pass_reset_df, clear_df, pass_clear_df): 
	Deleted.
	* recog.c (peephole2_optimize): Deleted some rotted code.
	* df.h (DF_REF_PRE_POST_MODIFY, DF_REF_CALL_STACK_USAGE): New
	Flags.
	(df_analyze_simple_change_some_blocks,
	df_analyze_simple_change_one_block, df_compact_blocks,
	df_bb_replace): Deleted.
	* bt-load (branch_target_load_optimize): Removed call to
	update_life_info.
	* cfgcleanup.c (thread_jump, try_forward_edges): Deleted mode
	parameter to thread_jump.
	(try_optimize_cfg, cleanup_cfg): Removed CLEANUP_UPDATE_LIFE.
	* cfglayout.c (cfg_layout_duplicate_bb_end): Deleted.
	* combine.c (combine_instructions): Removed call to
	update_life_info.
	(set_nonzero_bits_and_sign_copies, reg_nonzero_bits_for_combine, 
	reg_num_sign_bit_copies_for_combine, get_last_value_validate,
	get_last_value, reg_dead_at_p): Changed to use local df instance.
	(create_log_links, clear_log_links): New function.
	(rest_of_handle_combine): Added new version of df, create and
	destroy log links locally.
	* bb-reorder.c (rest_of_handle_partition_blocks): Removed call to 
	update_life_info.
	* basic-block.h (PROP_LOG_LINKS): Removed and renumbered other
	PROP_*.
	(CLEANUP_UPDATE_LIFE, CLEANUP_LOG_LINKS): Removed and renumbered
	other CLEANUP_*.
	* tree-cfg.c (tree_cfg_hooks): Removed fields.
	* struct-equiv.c (struct_equiv_init): Removed call to
	update_life_in_dirty_blocks.
	* dce.c (init_dce, end_dce, end_fast_dce): Removed code to service
	rtl_df.
	
2006-07-12  Kenneth Zadeck <zadeck@naturalbridge.com>

	* auto-inc-dec.c (parse_add_or_inc): Moved test to merge_in_block.
	(find_inc): Now returns success flag if transformation was made.
	(find_mem): Ditto.
	(merge_in_block): Restructed to loop if any merges were made.
	Added max_reg parameter.  Added test from parse_add_or_inc.
	
2006-07-11  Kenneth Zadeck <zadeck@naturalbridge.com>

	* regrename.c (regrename_optimize): Changed df problem
	initialization.
	* sched-ebb.c (schedule_ebbs): Ditto.
	* reorg.c (dbr_schedule): Ditto.
	* mode-switching.c (optimize_mode_switching): Ditto.
	* ifcvt.c (if_convert): Ditto.
	* reorg.c (peephole2_optimize): Ditto.
	* regmove.c (regmove_optimize, rest_of_handle_stack_adjustments):
	Ditto.
	* sched-rgn.c (schedule_insns): Ditto.
	* rtl-factoring.c (rtl_seqabstr): Ditto.
	* bt-load.c (branch_target_load_optimize): Ditto.
	* subregs-init.c (initialize_uninitialized_subregs): Ditto.
	* df-core.c (reset_df): Ditto.
	* flow.c (update_life_info, propagate_one_insn): Renamed UPWARD_LIVE
	to LR.
	(rest_of_handle_life): Changed df problem
	initialization.
	* function.c (keep_stack_depressed): Renamed UPWARD_LIVE to LR.
	* combine.c (set_nonzero_bits_and_sign_copies): Changed DF_LIVE_IN
	to DF_UR_IN or DF_LR_IN.
	(reg_nonzero_bits_for_combine,
	reg_num_sign_bit_copies_for_combine, get_last_value): Changed
	DF_LIVE_IN to DF_UR_IN.
	* reg-stack.c (reg_to_stack): Changed df problem
	initialization. Changed DF_LIVE_IN to DF_LR_IN. str
	* struct-equiv.c (struct_equiv_init): Renamed UPWARD_LIVE
	to LR. 
	* dce.c (dce_process_block): Changed DF_UPWARD_LIVE_* to DF_LR_*.
	* df.h: (DF_CLRUR) Added symbol and renamed others in block.
	(DF_CLRUR_BB_INFO): New macro.
	(DF_LIVE_IN, DF_LIVE_OUT): Changed to use output of clrur problem.
	(DF_UPWARD_LIVE_IN): Renamed to DF_LR_IN.
	(DF_UPWARD_LIVE_OUT): Renamed to DF_LR_OUT.
	(df_clrur_bb_info): New structure.
	(df_clrur_add_problem, df_clrur_get_bb_info): New functions.
	* df-problems: (df_get_live_in, df_get_live_out, 
	df_lr_simulate_artificial_refs_at_end): Reworked to
	to be consistent with new dataflow problems and naming.
	(df_ur_local_finalize): Deleted function.
	(df_problem problem_UR): Removed ref to df_ur_local_finalize.
	(df_clrur_get_bb_info, df_clrur_set_bb_info,
	df_clrur_free_bb_info, df_clrur_alloc, df_clrur_free,
	df_clrur_dump, df_clrur_add_problem): New functions.
	(df_problem problem_CLRUR): New datastructure.
	* auto-inc-dec.c (reg_next_inc_use): New Array.
	(attempt_change): Added inc_reg parm and boolean result.  Move
	some tests to try_merge.  Added processing for reg_next_inc_use.
	(try_merge): Added boolean result and some test moved from
	attempt_change and parse_add_or_inc.
	(parse_add_or_inc): Move test to try_merge.  Improved debugging,
	and added code to support reg_next_inc_use.  Added more
	correctness tests.
	(rest_of_handle_auto_inc_dec): Changed df problem initialization
	and added code to support reg_next_inc_use.
	
2006-07-05  Richard Sandiford  <richard@codesourcery.com>

	* passes.c (init_optimization_passes): Move the final RTL DSE pass
	after thread_prologue_and_epilogue.

2006-07-01  Daniel Berlin  <dberlin@dberlin.org>
	    David Edelsohn  <edelsohn@gnu.org>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	tree-pass.h (pass_inc_dec): New pass variable.
	auto-inc-dec.c: New file that contains pass to find auto-inc/dec
	instruction combinations.
	flow.c: Removed unused includes for execinfo.h and stdio.h.
	(init_propagate_block_info): Fixed missing comma typo.
	(attempt_auto_inc, try_pre_increment): Added code to abort if any
	auto-inc/dec insns are found by this pass.
	df-scan.c (df_defs_record): Added flags parameter.
	(df_insn_refs_record): Added code to check for conditional def.
	(df_recompute_luids): New function.
	df-core.c: Fixed comment.
	global.c (global_alloc): Moved misplaced debugging code.
	(global_conflicts): Added patch to fix the way auto-incs are
	accounted for in conflicts graph.
	timevar.def (TV_AUTO_INC_DEC): New variable.
	recog.c: Fixed comment.
	function.c: Fixed comment.
	df.h (DF_REF_CONDITIONAL): New flag.
	(df_recompute_luids): New function.
	gcse.c (extract_mentioned_regs_helper): Added PRE/POST_MODIFY
	cases.
	common.opt (fauto-inc-dec): New flag.
	rtl.h (AUTO_INC_DEC): Made this symbol dependent on 
	HAVE_(PRE/POST)_MODIFY_(REG/DISP).  Made other symbols dependent
	on AUTO_INC_DEC rather than components that defined AUTO_INC_DEC.
	df-problems.c (df_ru_bb_local_compute_process_def,
	df_lr_bb_local_compute, df_lr_simulate_artificial_refs_at_end,
	df_lr_simulate_one_insn, df_chain_create_bb,
	df_create_unused_note): Added DF_REF_CONDITIONAL to keep
	conditional defs from being added to kill sets.
	dce.c (dce_process_block): Ditto.
	Makefile.in (auto-inc-dec.c): New file.
	basic-block.h: Preparation to get rid of PROP_AUTO_INC flag.
	passes.c (init_optimization_passes): Added pass_inc_dec.
	config/rs6000/rs6000.c (rs6000_legitimate_address): Added code for
	PRE_MODIFY.
	(rs6000_mode_dependent_address, print_operand): Added case for pre_modify.
	config/rs6000/rs6000.h (HAVE_PRE_MODIFY_DISP,
	HAVE_PRE_MODIFY_REG): Added flags.
	reload1 (eliminate_regs_1, elimination_effects): Added cases for
	PRE/POST_MODIFY.
	
	
	
2006-05-27  Steven Bosscher  <steven@gcc.gnu.org>

	* reorg.c (dbr_schedule): Fix df_ur_add_problem calls.

2006-05-24  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_scan_free_internal, df_grow_reg_info,
	df_reg_chain_unlink, df_ref_remove,
	df_insn_create_insn_record, df_insn_refs_delete,
	df_ref_create_structure, df_ref_record, df_mark_reg, 
	df_record_entry_block_defs, df_record_exit_block_uses): 
	Formatting fixes.
	(df_get_artificial_defs): Spelling fixes.
	(df_ref_record, df_def_record_1, df_uses_record): 
	Fix the way that subregs are processed.
	(df_defs_record, df_def_record_1, df_insn_refs_record): 
	Split DF_REF_CLOBBER into two cases.
	* df-core.c (df_analyze): Added comments
	(df_simple_iterative_dataflow): New function.
	(df_dump): Formatting fixes.
	* df.h (DF_REF_CLOBBER): Deleted.
	(DF_REF_MUST_CLOBBER, DF_REF_MAY_CLOBBER): New enums.
	(df_ru_bb_info, df_rd_bb_info, df_lr_bb_info, df_ur_bb_info,
	df_urec_bb_info): Added comments.
	(df_simple_iterative_dataflow): New function.
	* df-problems.c (df_print_bb_index, df_set_dead_notes_for_mw):
	Added comments.
	(df_ru_alloc, df_ru_local_compute, df_ru_confluence_n,
	df_ru_free, df_ru_dump, df_rd_alloc,
	df_rd_bb_local_compute_process_def, df_rd_bb_local_compute,
	df_rd_local_compute, df_rd_confluence_n, df_rd_free, 
	df_rd_dump, df_lr_bb_local_compute, df_lr_bb_local_compute, 
	df_lr_local_compute, df_ur_alloc, df_ur_dump, df_urec_alloc,
	df_urec_bb_local_compute, df_urec_local_compute,
	df_urec_local_finalize, df_urec_dump, df_chain_create_bb,
	df_create_unused_note,  df_ri_bb_compute): Formatting fixes.
	(df_ru_bb_local_compute_process_def): Do not clear gen set.
	(df_ru_bb_local_compute): Reorder processing insn.
	(df_ru_transfer_function): Fixed incorrect use of bitmaps.
	(df_ru_dump, df_rd_dump, df_chains_dump): Added debugging code.
	(df_lr_bb_local_compute, df_lr_simulate_one_insn, 
	df_ur_bb_local_compute, df_chain_create_bb, 
	df_create_unused_note, df_ri_bb_compute): Split 
	DF_REF_CLOBBER into two cases.
	* ddg.c (add_deps_for_def): Changed to use ru info.
	* modulo-sched.c (sms_schedule): Added debugging.
	* dce.c (rs_dflow, df_problem reaching_stores_problem): Deleted.
	(init_rs_dflow, calculate_reaching_stores): Move dataflow to new 
	df function.

2006-05-23  Kenneth Zadeck <zadeck@naturalbridge.com>

	* fwprop.c (local_ref_killed_between_p): Rearranged definition.

2006-05-23  Steven Bosscher  <stevenb.gcc@gmail.com>

	* rtlanal.c (find_occurrence): Move to fwprop.c.
	* rtl.h (find_occurrence): Remove prototype.
	* fwprop.c (can_simplify_addr): Fix check for frame based addresses.
	(should_replace_address): Update comment before this function.
	(local_ref_killed_between_p): Don't choque on NOTEs.
	(use_killed_between): Handle the exceptional case that a DEF does
	not dominate one of its uses.
	(varying_mem_p): Simplify return type.
	(all_uses_available_at): Clean up unnecessary single_set calls.
	(find_occurrence_callback, find_occurrence): New.
	(subst): Rename to try_fwprop_subst.
	(forward_propagate_subreg): Update caller.
	(forward_propagate_and_simplify): Likewise.
	(fwprop_init): Find loops before computing data flow info.
	(fwprop_done): Call cleanup_cfg without CLEANUP_PRE_LOOP.  Free
	loop tree before cleanup_cfg.

2006-05-14  Kenneth Zadeck <zadeck@naturalbridge.com>

	* regclass.c (init_subregs_of_mode): Created dummy version 
	when CANNOT_CHANGE_MODE_CLASS is undefined.

2006-05-13  Steven Bosscher  <stevenb.gcc@gmail.com>

	* df-core.c (df_bb_regno_last_use_find): Do not look for dataflow
	information attached to non-INSNs such as NOTEs.
	(df_bb_regno_first_def_find, df_bb_regno_last_def_find): Likewise.

2006-05-05  Kenneth Zadeck <zadeck@naturalbridge.com>

	* haifa-sched.c (glat_size): New variable.
        (sched-init, extend_bb): Properly initialized glat_start and
        glat_end.
	(free_glat): Fixed double free of bitmaps.
	* df-scan.c (df_scan_get_bb_info, df_scan_set_bb_info): Added
	assertions.
	* df-problems.c (df_ru_get_bb_info, df_ru_set_bb_info, 
	df_rd_get_bb_info, df_rd_set_bb_info, df_lr_get_bb_info, 
	df_lr_set_bb_info, df_ur_get_bb_info, df_ur_set_bb_info, 
	df_urec_get_bb_info, df_urec_set_bb_info): Ditto. 

2006-04-25  Kenneth Zadeck <zadeck@naturalbridge.com>

	* flow.c (rest_of_handle_life): Removed unnecessary code.
	* df-scan.c (df_scan_free_internal, df_scan_free): Fixed
	storage leak.
	* df-core.c (df_delete_basic_block): Removed dangling pointer.
	* mode-switching.c (optimize_move_switching): Moved creation of df
	instance to avoid storage leak.
	* ifcvt.c (if_convert): Fixed storage leak.  
	* dce.c (mark_insn,
	rest_of_handle_dce): Removed old way of processing libcalls.
	(libcall_matches_p, mark_libcall_insns): Removed.
	(mark_libcall): New function.
	(mark_reg_dependencies, dce_process_block): New code to check for
	libcalls.
	(fast_dce): Fixed storage leak.
	
2006-04-24  Kenneth Zadeck <zadeck@naturalbridge.com>

	* sched-ebb.c (schedule_ebbs): Updated register lifetime info.
	* modulo-sched.c (sms_schedule): Ditto.
	* sched-reg.c (schedule_insns): Ditto.
	* regmove.c (regmove-optimize): Ditto.
	* tree.h (setjmp_vars_warning, setjmp_args_warning): Removed.
	(generate_setjmp_warning): Added.
	* tree-pass.h (pass_subregs_of_mode_init): Added.
	* flow.c (life_analysis): Moved parts to other passes.
	(regno_clobbered_at_setjmp):Moved setjmp warning to local-alloc.
	(rest_of_handle_life): Ditto.
	* df-scan.c (df_ref_record): Reformatted comment.
	* ifcvt.c (rest_of_handle_if_conversion): Removed last bit of
	rtl_df scafolding.  
	* local-alloc.c (local_alloc, no_equiv, block_alloc): Changed to
	use same instance of df as global_alloc,
	(rest_of_handle_local_alloc): Now also produces setjmp warnings.
	* function.c (regno_clobbered_at_setjmp): Moved from flow.
	(setjmp_vars_warning, setjmp_args_warning): Added parms to use 
	passed in df instance.
	(generate_setjmp_warnings): New function.
	* df.h (DF_RI_SETJMP): New constant.
	(df_ri_get_setjmp_crosses): New function.
	* df-problems.c (df_ri_problem_data, setjmp_crosses): New
	variables.
	(df_ri_alloc, df_ri_bb_compute, df_ri_bb_compute, df_ri_compute):
	Changed variables live across setjmp computation.
	(df_ri_get_setjmp_crosses): New function.
	* regclass.c (init_subregs_of_mode): Changed return.
	(gate_subregs_of_mode_init, pass_subregs_of_mode_init): New.
	* rtl.h (init_subregs_of_mode): Removed.
	* integrate.c (allocate_initial_values): Removed incorrect parm
	attribute and changed instance of df used.
	* output.h (regno_clobbered_at_setjmp): Removed.
	* stack-ptr-mod.c: Fixed comment.
	* Makefile.in (regclass.o): Added tree-pass.h.
	* basic-block.h (safe_insert_insn_on_edge): Deleted.
	* passes.c (init_optimization_passes): Added
	pass_subregs_of_mode_init.
	* cfgrtl.c (mark_killed_regs, safe_insert_insn_on_edge): Deleted.
	* rtl-profile.c: Removed.
	
2006-04-21  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (pass_stack_ptr_mod, pass_initialize_subregs,
	pass_reset_df): New.  
	* flow.c (notice_stack_pointer_modification_1,
	notice_stack_pointer_modification, find_regno_partial_param,
	find_regno_partial, initialize_uninitialized_subregs): Moved to
	separate passes in separate files.
	(life_analysis): Removed call to notice_stack_pointer_modification.
	(rest_of_handle_life): Removed call to initialize_uninitialized_subargs.
	* df-core.c (reset_df, pass_reset_df): New.
	* Makefile.in (stack-ptr-mod.o, subregs-init.o): New.
	* passes.c (pass_stack_ptr_mod, pass_initialize_subregs, 
	pass_reset_df): New passes.
	* subregs-init.c: New file that contains separate pass for
	initialize_uninitialized_subargs.   
	* stack-pointer-mod.c: New file that contains separate pass for 
	notice_stack_pointer_modification.
		
2006-04-19  Kenneth Zadeck <zadeck@naturalbridge.com>

	* ifcvt.c (rest_of_handle_if_after_combine): Removed flow
	scaffolding.
	* passes.c (init_optimization_passes): Moved clear_df to after
	combine and changed two expensive dce passes into a dse and fast
	dce pass.
	
2006-04-18  Kenneth Zadeck <zadeck@naturalbridge.com>

	* mode-switching.c (optimize_mode_switching): Created local
	instance of df and removed references to flow.
	* regmove.c (mark_flags_life_zones, regmove_optimize): Ditto.
	* global.c (global_alloc, rest_of_handle_global_alloc): Reused 
	instance of df created in local alloc.
	* local-alloc.c (rest_of_handle_local_alloc): Create instance of 
	ra_df used by all register allocation.
	* bb-reorder.c (fix_crossing_conditional_branches): Removed code
	to keep dataflow up to date.
	* Makefile.in (bb-reorder.o): Removed ref to DF_H.
	* passes.c (init_optimization_passes): Meved clear_df to before
	partition_blocks.
		
2006-04-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (pass_recompute_reg_usage): Deleted.  flow.c
	(pass_recompute_reg_usage, recompute_reg_usage): Deleted.  *
	sched-ebb.c (begin_schedule_ready, schedule_ebb,
	begin_schedule_ready, schedule_ebb, schedule_block): Threaded
	local instance of df.
	(schedule_ebbs): Created local instance of df.  
	* haifa-sched.c (schedule_block, sched_init, sched_finish,
	generate_recovery_code, begin_speculative_block,
	add_to_speculative_block, init_before_recovery,
	create_recovery_block, create_check_block_twin, init_glat,
	init_glat1): Threaded local instance of df.
	* modulo-sched.c (sms_schedule): Ditto.
	(rest_of_handle_sms): Removed unnecessary update of flow info.
	* sched-int.h (df.h): Now includes this.
	(schedule_block, sched_init, sched_finish, add_block): Added df
	parm.
	* sched-rgn.c (begin_schedule_ready, schedule_region,
	schedule_insns): Threaded local instance of df.
	(schedule_insns): Removed unnecessary update of flow info.
	* Makefile.in (SCHED_INT_H): Added DF_H.
	(ddg.o, modulo-sched.o, haifa-sched.o, sched-deps.o, sched-rgn.o, 
	sched-ebb.o): Removed DF_H.
	* ddg.c (build_inter_loop_deps): Swapped parms.
	(create_ddg): Swapped parms for call.
	* passes.c (init_optimization_passes): Removed dce and
	recompute_reg_use pass and moved clear_df to before first
	schedulers.
	
2006-04-16  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df.h (shared_df): Removed.
	(ra_df): New.
	* core.c (shared_df): Removed.
	(ra_df): New.
	* postreload.c (reload_combine): Changed to use ra_df.
	* reload.c (push_reload, find_dummy_reload): Ditto.
	* global.c (global_alloc, global_conflicts, mark_elimination, 
	build_insn_chain, rest_of_handle_global_alloc): Ditto.
	* reload1.c (compute_use_by_pseudos, reload): Ditto.
	* local-alloc.c (local_alloc, block_alloc): Created local instance
	of df.
	* passes.c (init_optimization_passes): Moved clear_df to before
	register allocators.
	* tree-pass.h (pass_partition_blocks): Removed redundant 
	copy.
	
2006-04-16  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (pass_reset_df_after_reload): Removed.
	* df-core.c (reset_df_after_reload, pass_reset_df_after_reload): 
	Removed.
	* function.c (prologue_epilogue_df): New global.
	(rtx keep_stack_depressed, thread_prologue_and_epilogue_insns):
	Unthreaded local version of df and replaced with
	prologue_epilogue_df.
	* rtl.h (prologue_epilogue_df): New.
	* passes.c (init_optimization_passes): Removed all uses of flow
	after register allocation.
	* config/i386/i386.c (ix86_eax_live_at_start_p): Replaced use of
	flow with prologue_epilogue_df.
	
2006-04-15  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (pass_flow2): Renamed to
	pass_thread_prologue_and_epilogue.
	* passes.c (pass_flow2): Ditto.
	* final.c (rest_of_clean_state): Removed flow2_completed.
	* config/i386/i386.md: Ditto.
	* config/sh/sh.md: Ditto.
	* config/mips/mips.md: Ditto.
	* config/h8300/h8300.md: Ditto.
	* flow.c: Ditto.
	(rest_of_handle_flow2): Moved to function.c as 
	rest_of_handle_thread_prologue_and_epilogue.
	* timevar.def (TV_FLOW2): Renamed to
	TV_THREAD_PROLOGUE_AND_EPILOGUE.
	* function.c (keep_stack_depressed): Added df parameter.
	(thread_prologue_and_epilogue_insns): Made local function and
	removed unused parameter.  Added local instance of df.
	(rest_of_handle_thread_prologue_and_epilogue): New function
	renamed from flow.c.
	(pass_thread_prologue_and_epilogue): New pass.  
	* rtl.h	(flow2_completed, thread_prologue_and_epilogue_insns): 
	Removed.
	* df-problems.c (df_ru_get_bb_info, df_rd_get_bb_info,
	df_lr_get_bb_info, df_ur_get_bb_info, df_urec_get_bb_info): Added
	check.
	* Makefile.in (function.o): Added timevar.h.
	
2006-04-13  Kenneth Zadeck <zadeck@naturalbridge.com>

	* rtl-factoring (collect_pattern_seqs, clear_regs_live_in_seq,
	recompute_gain_for_pattern_seq, clear_regs_live_in_seq,
	recompute_gain, split_blocks_after_seqs, split_pattern_seq, 
	erase_matching_seqs, abstract_best_seq, rtl_seqabstr): Threaded
	local instance of df to replace all references to flow.
	(gate_rtl_seqabstr): Removed unnecessary calls. 
	* passes.c (init_optimization_passes): Moved clear_df before
	rtl_seqabstr.  Removed some expensive calls to dce.
	* tree-pass.h (pass_fast_rtl_dce): New.
	* regrename.c (gate_handle_regrename): Update call to pass.
	* sched-rgn.c (rest_of_handle_sched2): Remove outdated calls.
	
2006-04-13  Kenneth Zadeck <zadeck@naturalbridge.com>

	* regmove.c (rest_of_handle_stack_adjustments): Removed all
	references to flow.c and replaced with df.
	* passes.c (init_optimization_passes): Moved clear_df before 
	pass_stack_adjustments.

2006-04-12  Kenneth Zadeck <zadeck@naturalbridge.com>

	* recog.c (delete_insn_chain_and_dflow): New function.
	(peephole2_optimize): Replaced all flow references with df.  Added
	local instance of df.
	* passes.c (init_optimization_passes): Moved clear_df before peephole2.
	
2006-04-11  Kenneth Zadeck <zadeck@naturalbridge.com>

	* ifcvt.c (cond_exec_process_if_block, merge_if_block,
	noce_process_if_block, cond_move_process_if_block,
	process_if_block, find_if_header, find_cond_trap, find_if_case_1,
	find_if_case_2, dead_or_predicable): Threaded local copy of df
	thru the call stack.
	(merge_if_block, find_cond_trap, find_if_case_1, find_if_case_2,
	dead_or_predicable): Added code to update df in place.
	(if_convert): Removed parameter concerned with correct dataflow
	info, it now always is. Created instance of df.  Removed code to
	update old flow info.
	(rest_of_handle_if_after_reload): Removed unnecessary calls to
	cleanup_cfg.
	* passes.c (init_optimization_passes): Moved clear_df to before
	last ifconvert.  Renamed pass_cprop to pass_cprop_hardreg.
	* regrename.c (rest_of_handle_cprop): Renamed pass_cprop to
	pass_cprop_hardreg.
	* tree-pass.h: Renamed cprop to cprop_hardreg.
	
2006-04-11  Kenneth Zadeck <zadeck@naturalbridge.com>

	* sched-ebb.c (schedule_ebbs): Removed code to update dataflow
	after scheduling and removed unused parm from 
	reposition_prologue_and_epilogue_notes.
	* sched-rgn.c (schedule_insns): Ditto.
	(rest_of_handle_sched): Added temp hack to rebuild flow based dataflow
	until flow is permanently removed.
	* haifa-sched.c (init_glat): Modified to create glat from df info.
	(attach_life_info, attach_life_info1, check_reg_live): Removed.
	(free_glat): Now cleans up df.
	* modulo-sched.c (compute_jump_reg_dependencies): Removed df parm.
	* ifcvt.c (rest_of_handle_if_conversion): Added code to clean up
	flow based reg_deaths after first call to ifconvert.
	* function.c (reposition_prologue_and_epilogue_notes): Removed
	unused parm.
	* rtl.h (reposition_prologue_and_epilogue_notes): Ditto.
	* sched-int.h (check_reg_live): Removed.

2006-04-10  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-core.c (reset_df_after_reload, clear_df): Added return to
	make compatible with pass manager.
	* dce.c (rest_of_handle_dce, rest_of_handle_fast_dce,
	rest_of_handle_dse): Ditto.

2006-04-09 Kenneth Zadeck <zadeck@naturalbridge.com>

	* regrename.c (merge_overlapping_regs, regrename_optimize):
	Threaded private instance of df.
	(regrename_optimize): Created private instance of df, removed
	all references or flow.
	(copyprop_hardreg_forward): Removed all references to flow.
	(gate_handle_regrename): Split reg rename and cprop into separate 
	passes.
	(gate_handle_cprop): New function.
	(pass_cprop): New pass structure.
	* tree-pass.h (pass_cprop): New pass structure.
	* passes.c (init_optimization_passes): Added cprop pass and 
	moved clear_df pass closer to beginning.	

2006-04-08  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h (pass_split_after_reload, pass_branch_target_load_optimize1
	pass_branch_target_load_optimize2): Added.
	(pass_branch_target_load_optimize): Deleted.
	* flow.c (rest_of_handle_flow2): Split the calls to split_all_insns and 
	branch_target_load_optimize into their own passes.
	* passes.c (init_optimization_passes): Ditto.
	(init_optimization_passes): Moved clear_df pass to before 
	second branch_target_load_optimize pass.
	* bt-load (compute_defs_uses_and_gen, build_btr_def_use_webs, 
	migrate_btr_defs): Threaded private copy of df into these functions.
	(branch_target_load_optimize): Made private and add local
	instance of df.  Removed all references to flow.
	(rest_of_handle_branch_target_load_optimize1): New function.
	(rest_of_handle_branch_target_load_optimize): Renamed to 
	rest_of_handle_branch_target_load_optimize2.
	rtl.h (branch_target_load_optimize): Removed.

2006-04-08  Kenneth Zadeck <zadeck@naturalbridge.com>

	* sched-ebb.c (init_ready_list, can_schedule_ready_p, new_ready,
	compute_jump_reg_dependencies, schedule_ebb, sched_analyze,
	schedule_block): Changed to pass instance of df.
	(compute_jump_reg_dependencies): Changed to use local instance
	of dataflow.
	* ddg.c (build_intra_loop_deps, sched_analyze,
	build_intra_loop_deps): Changed to pass instance of df.
	* ddg.h: added forward reference to struct df.
	* haifa-sched.c (schedule_insns, schedule_insn,
	schedule_block): Changed to pass instance of df.
	* modulo-sched (compute_jump_reg_dependencies): Ditto.
	(sms_schedule): Added call to do dce when stated.
	* sched-deps.c (sched_analyze_insn, sched_analyze):
	Changed to pass instance of df.
	* rtl.h (schedule_insns, schedule_ebbs): Ditto.
	* sched-int.h (init_ready_list, can_schedule_ready_p, new_ready, 
	compute_jump_reg_dependencies, sched_analyze, schedule_block):
	Ditto.
	* sched-rgn.c (check_live_1, update_live_1, check_live, 
	update_live, init_ready_list, can_schedule_ready_p, new_ready,
	compute_jump_reg_dependencies, compute_block_backward_dependences,
	schedule_region, schedule_insns): Ditto.
	(schedule_insns): Removed call to update_life_info when finished.
 	(rest_of_handle_sched, rest_of_handle_sched2): Creates local
 	instance of df.
	* passes.c (init_optimization_passes): moved clear_df pass
	earlier.
	* Makefile.in (df-core.o): Added except.h and dce.h
	(modulo-sched.o): Added DF_H.
	* recog.c (split_all_insns): Removed old code that was used to 
	update dataflow.
	* reg-stack.c (rest_of_handle_stack_regs): Removed ifdefed out code.

2006-04-07  Kenneth Zadeck <zadeck@naturalbridge.com>

	* recog.c (split_all_insns): Removed parameter and code to
	update dataflow.
	* sched-rgn.c (rest_of_handle_sched2): Removed parm to 
	split_all_insns.
	* flow.c (rest_of_handle_flow2): Ditto.
	(rest_of_handle_split_all_insns): Added call to update old
	dataflow after this pass.
	(rest_of_handle_split_after_reload,
	rest_of_handle_split_before_regstack): New function.
	(pass_split_after_reload): New structure.
	* rtl.h (split_all_insns): Removed param.
	* bb-reorder.c (rest_of_handle_reorder_blocks): Removed 
	references to flow.
	* reg-stack.c (subst_stack_regs_pat): Removed unnecessary 
	assertion.

2006-04-07  Daniel Berlin  <dberlin@dberlin.org>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* regoc.c (dbr_schedule): Added parm to call to df_lr_add_problem.
	* ifcvt.c (if_convert): Ditto.
	* modulo-sched.c (sms_schedule): Ditto.
	* reg-stack.c (reg_to_stack): Ditto.
	* global.c (global_alloc, rest_of_handle_global_alloc): Ditto.
	(rest_of_handle_global_alloc): Removed call to df_set_state.
	* basic_block.h (clear_reg_deaths): New function.
	* flow.c: (clear_reg_deaths): New function.
	(rest_of_handle_life): Added parm to call to df_lr_add_problem and
	df_ur_add_problem.
	* df-scan.c (df_scan_free_internal): Added code to clear new
	bit vectors.
	(df_scan_alloc): Added extra parameter and code to initialize
	new bit vectors.
	(df_scan_dump): Added code to dump new bit vectors.
	(df_problem problem_SCAN): Added extra field.
	(df_scan_add_problem): Added flags parameter.
	(df_rescan_blocks): Added code to remove deleted blocks from
	bitmap and extra parm to call to df_scan_alloc.
	(df_insn_create_insn_record): Removed return value.
	(df_set_state): Removed function.
	(df_ref_record, df_bb_refs_record, df_record_entry_block_defs,
	df_record_exit_block_uses): Changed the way flags are processed.
	(df_bb_refs_record, df_refs_record, df_record_exit_block_uses): 
	Restructured scanning to fixed hard regs so bitmaps could be
	recorded for later use.
	(df_has_eh_preds): Now public.
	* df-core.c (df_mvs_dump, df_set_flags, df_clear_flags,
	df_delete_basic_block): New function.
	(df_init): Changed location of flags.
	(df_add_problem): Added flags parameter and the way flags are
	processed.
	(df_insn_uid_debug, df_ref_debug, debug_df_defno, debug_df_ref,
	debug_df_chain): Improved debugging output.
	(clear_df): Added call to clear_reg_deaths.
	* df.h: Some reordering to remove forward references.
	(dataflow.flags): New field.
	(df.flag): Deleted field.
	(df_alloc_function): Added additional bitmap parameter.
	(df_dependent_problem_function): New type.
	(df_problem.changeable_flags): New field.
	(df_ref_flags.DF_SCAN_INITIAL,
	DF_SCAN_GLOBAL, DF_SCAN_POST_ALLOC, df_state): Removed.
	(df_refs_chain_dump, df_ref_debug, df_chain_dump): Removed df
	parameter.
	(df_add_problem, df_ru_add_problem, df_rd_add_problem,
	df_lr_add_problem, df_ur_add_problem, df_urec_add_problem, 
	df_ri_add_problem, df_scan_add_problem): Added flags parameter.
	(df_set_state): Removed function.
	(df_set_flags, df_clear_flags, df_delete_basic_block, df_has_eh_preds) New functions.
	* df-problems.c (df_get_dependent_problem): Deleted function.
	(df_ru_alloc, df_rd_alloc, df_lr_alloc, df_ur_alloc,
	df_urec_alloc, df_chain_alloc, df_ri_alloc): Added all blocks
	parameter.
	(df_ru_alloc, df_rd_alloc): Now resets all blocks.
	(df_ru_dump, df_rd_dump, df_lr_dump, df_ur_dump, df_urec_dump,
	df_chains_dump): Fixed crash if problem was never run.
	(df_ru_add_problem, df_rd_add_problem, df_lr_add_problem, 
	df_ur_add_problem, df_urec_add_problem, df_chain_add_problem,
	df_ri_add_problem): Processes flags in uniform manner.
	(df_lr_bb_local_compute): Fixed case to account for return value
	correctly.
	(df_lr_bb_local_compute): Changed processing of exit block.
	(df_lr_transfer_function): Added hook to call dce.
	(df_lr_free): Added lr problem data.
	(df_set_notes_for_mw, df_reg_lifetime): Removed function.
	(df_lr_simulate_artificial_refs_at_end, df_lr_simulate_one_insn,
	df_kill_notes, df_set_unused_notes_for_mw, df_set_dead_notes_for_mw):
	New function.
	(df_ri_alloc, df_ri_bb_compute, df_create_unused_note, 
	df_ri_bb_compute, df_ri_compute, df_ri_free, df_ri_add_problem):
	Added functionality to compute register information. 
	dce.c (deletable_insn_p): Cannot delete PREFETCHes.
	(delete_unmarked_insns): Also delete noop moves as well as support for
	calling dce from df.
	(prescan_insns_for_dce, rest_of_handle_dce, end_fast_dce, 
	dce_process_block, rest_of_handle_fast_dce,
	rest_of_handle_dse): Restructured to handle being directly called from
	df.


2006-03-14  Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h: Added pass to clear other dataflow infomation out.
	* final.c (rest_of_handle_final, rest_of_clean_state): Cleared out
	references to df.
	(rest_of_clean_state) Added regstack_completed.
	* reorg.c (fill_simple_delay_slots, fill_slots_from_thread,
	fill_eager_delay_slots, make_return_insns): Added df parameter to function.
	(make_return_insns, dbr_schedule) Added df parameter to calls.
	* flow.c (update_life_info): Added glue code to df calls.
	* df-scan.c (df_scan_free_internal, df_insn_refs_delete, df_ref_record): Added
	code to properly handle multiword hard registers.
	(df_ref_create_structure, df_ref_record): Added code to properly handle subregs.
	(df_ref_create_structure): Changed switching structure. 
	(df_bb_refs_record): Fixed case where duplicate artificial refs
	were created.
	(df_record_entry_block_defs): Added code to make stack pointer
	live in entry block.  Refined cases where frame pointer is needed.
	* df-core.c (df_mvs_dump, clear_df): New function.
	(pass_clear_df): New pass structure.
	(df_insn_uid_debug, df_ref_debug, debug_df_defno, debug_df_ref,
	debug_df_chain): Improved debugging output.
	* df.h: Some reordering to remove forward reference.
	(df_ref_flags.DF_REF_MW_HARDREG, DF_REF_PARTIAL): New fields.
	(df_ref_flags.DF_REF_DIES_AFTER_THIS_USE): Removed.
	(df_mw_hardreg): New struct.
	(DF_INSN_UID_MWS): New macro.
	(df_refs_chain_dump, df_ref_debug, df_chain_dump): Removed df
	parameter.
	* rtl.h (regstack_completed): New global var.
	* resource.c (mark_target_live_regs): Added passed in instance of
	df.
	* resource.h (mark_target_live_regs): Ditto.
	* df-problems.c (df_chain_dump): Removed df parameter.
        (df_ru_bb_local_compute_process_def,
	df_rd_bb_local_compute_process_def, df_lr_bb_local_compute,
	df_lr_bb_local_compute, df_chain_create_bb): Made subreg aware.
	(df_ru_bb_local_compute, df_rd_bb_local_compute,
	df_lr_bb_local_compute, df_lr_bb_local_compute,
	df_chain_create_bb): Cleanup to use proper macros.
	(df_ur_local_finalize, df_ur_local_finalize): Removed unnecessary
	code to fixup bitvectors.
	(df_ri_alloc): Cleared lifetime.
	(df_ignore_stack_reg, df_kill_notes, df_set_notes_for_mw,
	df_create_unused_note): New function.
	(df_ri_bb_compute, df_ri_compute): Added code to create/update
	REG_DEAD and REG_UNUSED notes.
	* reg-stack.c (regstack_completed): New variable.
	(reg_to_stack): Modified to use it's own instance of df.
	(rest_of_handle_stack_regs): Removed most cleanup code.
	* Makefile.in (reorg.o, RESOURCE_H): Added dependancy to df.h.
	(final.o): Removed dependency to df.h
	* passes.c (pass_magic_life): Removed.
	(pass_clear_df): Added.
	* dce.c (prescan_insns_for_dce, end_fast_dce): Now works if no instance of
	df is available.
	(dce_process_block): Made subreg aware.
	(rest_of_handle_fast_dce): Reset bitvectors when iterating.
	(prescan_insns_for_dse): Removed useless code.

2006-02-06  Daniel Berlin  <dberlin@dberlin.org>
	
	* doc/rtl.texi: Document REG_LIBCALL_ID.
	* optabs.c (libcall_id): New variable.
	(emit_no_conflict_block): Use it to emit
	REG_LIBCALL_ID.
	(emit_libcall_block): Ditto.
	* combine.c (distribute_notes): Deal with
	REG_LIBCALL_ID.
	* reg-notes.def (LIBCALL_ID): New note.
	* dce.c (marked_libcalls): New variable.
	(in_libcall): Removed.
	(mark_insn): Mark which libcalls we need to fully mark.
	(mark_libcall_insns): New function.
	(end_dce): Free marked_libcalls.
	(init_dce): Allocate marked_libcalls.
	Call mark_libcall_insns.
	
2006-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>
	* df-core.c (df_iterative_dataflow): Added debugging assert.
	(df_insn_uid_debug): New debugging function.
	(df_insn_debug): Changed to used df_insn_uid_debug.
	(df_analyze_problem): Made public.
	* df.h (df_analyze_problem): Ditto.
	* cfgcleanup.c (cleanup_cfg): Now calls run_fsst_dce.
	* flow.c (update_life_info): Ditto.  
	* dce.c (init_dce, mark_insn,
	mark_nonreg_stores, prescan_insns_for_dce): Added parameter so
	that they could be called from both handle_rest_of_dce and
	handle_rest_of_fast_dce.
	(marked_insn_p): Added code to be tolerant of artifical defs,
	which do not have insns.
	(mark_nonreg_stores_2): New function.
	(mark_artificial_uses, mark_reg_dependencies, store_base_local,
	mark_escaping_stores, mark_dependent_stores,
	prescan_insns_for_dse): Added parameter to mark_insn.
	(rest_of_handle_dce): Added parameter to prescan_insns_for_dce.
	(record_stores): Added parameter to mark_non_reg_stores.
	(dce_process_block, rest_of_handle_fast_dce, gate_fast_dce,
	run_fast_dce): New functions to do dce faster.
	(rest_of_handle_dse) Added parameter to init_dce.
	* dce.h (run_fast_dce): Added declaration.
	
2006-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_hard_reg_init): Moved declaration of i outside macro.

2006-01-17  Ian Lance Taylor <ian@airs.com>
	
	* combine.c (combine_instructions): Pass instruction
        to note_stores and set_nonzero_bits_and_sign_copies.
	(set_nonzero_bits_and_sign_copies): We can't assume
        anything about non-zero bits for registers initialized with
	themselves if the register is not live on entry to the block.


2005-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	PR dataflow/25799
	* df-problems.c (df_ru_confluence_n, df_rd_confluence_n):
	Corrected confluence operator to remove bits from op2 before oring
	with op1 rather than removing bits from op1.
	* (df_ru_transfer_function): Corrected test on wrong bitmap which
	caused infinite loop.    


2005-01-17  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_scan_free_bb_info): Added basic block parameter to
	be able to clean out basic block when not necessary.
	(df_scan_free): Fixed to properly delete information if df is
	unused before calling df_finish.
	(df_scan_alloc, df_rescan_blocks, df_reg_chain_unlink,
	df_insn_create_insn_record, df_bb_refs_record): Fixed formatting
	or comment typos.
	(df_bb_refs_delete): New function.
	(df_refs_delete): Moved per block code to df_bb_refs_delete.
	* df-core.c (df_set_blocks): Added code to properly clean out
	unused blocks if they are not part of the blocks to consider.
	(df_compact_blocks): Added basic block parameter to free_bb_fun to
	be able to clean out basic block when not necessary
	* df.h (df_free_bb_function): Ditto.
	(df_bb_refs_delete): New function.
	* df-problems.c (df_ru_free_bb_info, df_rd_set_bb_info,
	df_lr_set_bb_info, df_ur_free_bb_info, df_urec_free_bb_info):Added
	basic block parameter to be able to clean out basic block when not
	necessary.
	(df_ru_alloc, df_rd_alloc): Fixed dyslexic overflow test.
	(df_ru_free, df_rd_free, df_lr_free, df_ur_free, df_urec_free):
	Fixed to properly delete information if df is unused before
	calling df_finish.

2006-01-06  Daniel Berlin  <dberlin@dberlin.org>
  	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-scan.c (df_reg_use_gen, df_reg_def_gen): Removed.
	(df_insn_contains_asm_1): New function.
	(df_insn_contains_asm): Rewritten to use for_each_rtx.
	(df_insn_refs_record): Fixed call to df_insn_contains_asm and
	the way calls are processed.
	(df_insn_refs_record, df_bb_refs_record): Changed calls to not
	need df_reg_use_gen or df_reg_def_gen.
	* loop-invariant.c (free_inv_motion_data): Removed duplicated code typo.

2005-12-30  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df-core.c (df_find_def, df_find_use):  Added subreg aware code.
	(df_reg_defined, df_reg_used): New function.
	* df.h (df_reg_defined, df_reg_used): New function.
	* loop-invariant.c (struct invariant, hash_invariant_expr, 
	eq_invariant_expr, find_or_insert_inv, find_or_insert_inv,
	find_identical_invariants, merge_identical_invariants, 
	find_defs, create_new_invariant, check_dependencies,
	find_invariant_insn, find_invariants, get_inv_cost,
	best_gain_for_invariant, set_move_mark, move_invariants, 
	free_inv_motion_data): Functions added from mainline patch.
	(invariant_for_use, hash_invariant_expr_1, invariant_expr_equal_p,
	check_dependencies, create_new_invariant, find_invariant_insn 
	move_invariant_reg): Functions modified from mainline patch to be 
	consistent with latest df.

2005-12-22  Paolo Bonzini  <bonzini@gnu.org>

	* df-scan.c (df_ref_unlink): Fix thinko when REF == CHAIN. 

2005-12-22  Danny Berlin <dberlin@dberlin.org>
    	    Richard Sandiford  <richard@codesourcery.com>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* tree-pass.h: Added passes for new dce and dse.
	* flow.c (update_life_info, propagate_block): Added hooks to
	call new dead code elimination.
	* common.opt (flag_flow_dce, flag_new_dce): Ditto.
	* passes.c (init_optimization_passes): Ditto.
	* cfgcleanup.c (cleanup_cfg): Ditto.
	* timevar.def: New time vars for dce and dse.
	(propagate_block_delete_insn): Added debugging.
	* dce.c: New File containing dead code elimination and dead
	store elimination based on df.

2005-12-19  Kenneth Zadeck <zadeck@naturalbridge.com>
	
        * flow.c (update_life_info, count_or_remove_death_notes): Fixed
	latent bug that could happen if update_life_info was called with a
	blocks parameter and the call to cleanup_cfg actually deleted one
	of those blocks. 
	* loop-invariant.c (move_loop_invariants): Fixed df
	initialization.
	* struct-equiv.c (struct_equiv_init): Made dataflow compatible with
	df.

	
2005-12-18  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>

	* fwprop.c (local_ref_killed_between_p): New Function.
	(use_killed_between, varying_mem_p, all_uses_available_at,
	update_df, subst, forward_propagate_subreg,
	forward_propagate_and_simplify, forward_propagate_into, fwprop,
	fwprop_addr): Changes to support modifications to df datastructures.
	* ddg.c (add_deps_for_def, add_deps_for_use, build_inter_loop_deps):
	Ditto.
	* flow.c (verify_local_live_at_start, update_life_info,
	update_life_info, initialize_uninitialized_subregs,
	propagate_one_insn, init_propagate_block_info,
	init_propagate_block_info, regno_clobbered_at_setjmp, 
	rest_of_handle_life): Ditto.
	* modulo-sched.c (sms_schedule): Ditto.
	* web.c (union_defs, entry_register, web_main): Ditto.
	* global.c (global_alloc, global_conflicts, mark_elimination,
	build_insn_chain, rest_of_handle_global_alloc): Ditto.
	* ifcvt.c (find_if_case_1, if_convert): Ditto.
	* loop_invariant.c (find_defs, record_use, find_invariant_insn,
	find_invariants_to_move, move_invariant_reg, move_invariant_reg,
	free_inv_motion_data, move_loop_invariants):
     	* bb-reorder.c (rest_of_handle_reorder_blocks): Ditto. 
	* reg-stack.c (reg_to_stack): Ditto.
	* postreload.c (reload_combine): Changed set reference to
	reflect different dataflow problem.
	* reload.c (push_reload, find_dummy_reload): Ditto.
	* postreload.c (rest_of_handle_postreload): Fixed typo in comment.
	* tree-pass.h: Added pass_reset_df_after_reload.
	* df.c: Removed, rewritten as df-core.c, df-problems.c and df-scan.c.
	* df-scan.c: The scanning fuctions, once in df.c, completely
	rewritten so that they now fully model the functionality of
	register usage at the backend.
	* cfgrtl.c (dump_regset_in, dump_regset_out): New dataflow
	* print functions.
	(rtl_dump_bb, print_rtl_with_bb): Changed to use
	dump_regset_in, dump_regset_out).
	* sched_deps (sched_analyze_1): Changed to used renamed
	df_read_modify_subreg_p (was read_modify_subreg_p).
	(df_scan_free_internal, df_scan_get_bb_info,
	df_scan_set_bb_info, df_scan_free_bb_info, df_scan_alloc,
	df_scan_free, df_scan_dump, df_scan_add_problem,
	df_grow_reg_info, df_grow_ref_info, df_grow_insn_info,
	df_rescan_blocks, df_ref_create, df_get_artificial_defs,
	df_get_artificial_uses, df_reg_chain_create, df_ref_unlink,
	df_reg_chain_unlink, df_ref_remove,
	df_insn_create_insn_record, df_insn_refs_delete,
	df_refs_delete, df_reorganize_refs, df_reg_use_gen,
	df_reg_def_gen, df_set_state, df_ref_create_structure,
	df_ref_record, df_read_modify_subreg_p, df_def_record_1,
	df_defs_record, df_uses_record, df_insn_contains_asm,
	df_insn_refs_record, df_bb_refs_record, df_refs_record,
	df_mark_reg, df_record_exit_block_uses, df_hard_reg_init): New functions.
	* df-core.c: The core dataflow solver and glue routines for
        rtl dataflow.
	(df_init, df_add_problem, df_set_blocks, df_finish,
	df_hybrid_search_forward, df_hybrid_search_backward,
	df_iterative_dataflow, df_prune_to_subcfg,
	df_analyze_problem, df_analyze, df_get_bb_info,
	df_set_bb_info, df_analyze_simple_change_some_blocks,
	df_analyze_simple_change_one_block, df_compact_blocks,
	df_bb_replace, df_bb_regno_last_use_find,
	df_bb_regno_first_def_find, df_bb_regno_last_def_find,
	df_insn_regno_def_p, df_find_def, df_find_use, df_dump,
	df_refs_chain_dump, df_regs_chain_dump, df_insn_debug,
	df_insn_debug_regno, df_regno_debug, df_ref_debug,
	debug_df_insn, debug_df_reg, debug_df_regno, debug_df_ref
	debug_df_defno, debug_df_useno, reset_df_after_reload): New functions.
	* df-problems.c: Seven concrete dataflow problems that use the scanning 
	in df-scan.c and are solved by the engine in df-core.c.
	(df_get_dependent_problem, df_chain_create,
	df_chain_unlink, df_chain_copy, df_get_live_in,
	df_get_live_out, df_grow_bb_info, df_chain_dump,
	df_print_bb_index, df_ref_bitmap, df_set_seen,
	df_unset_seen, df_ru_get_bb_info, df_ru_set_bb_info,
	df_ru_free_bb_info, df_ru_alloc,
	df_ru_bb_local_compute_process_def,
	df_ru_bb_local_compute_process_use, df_ru_bb_local_compute,
	df_ru_local_compute, df_ru_init_solution,
	df_ru_confluence_n, df_ru_transfer_function, df_ru_free,
	df_ru_dump, df_ru_add_problem, df_rd_get_bb_info,
	df_rd_set_bb_info, df_rd_free_bb_info, df_rd_alloc,
	df_rd_bb_local_compute_process_def, df_rd_bb_local_compute,
	df_rd_local_compute, df_rd_init_solution,
	df_rd_confluence_n, df_rd_transfer_function, df_rd_free,
	df_rd_dump, df_rd_add_problem, df_lr_get_bb_info,
	df_lr_set_bb_info, df_lr_free_bb_info, df_lr_alloc,
	df_lr_bb_local_compute, df_lr_local_compute, df_lr_init,
	df_lr_confluence_0, df_lr_confluence_n,
	df_lr_transfer_function, df_lr_free, df_lr_dump,
	df_lr_add_problem, df_ur_get_bb_info, df_ur_set_bb_info,
	df_ur_free_bb_info, df_ur_alloc, df_ur_bb_local_compute,
	df_ur_local_compute, df_ur_init, df_ur_local_finalize,
	df_ur_confluence_n, df_ur_transfer_function, df_ur_free,
	df_ur_dump, df_ur_add_problem, df_urec_get_bb_info,
	df_urec_set_bb_info, df_urec_free_bb_info, df_urec_alloc,
	df_urec_mark_reg_change, df_urec_check_earlyclobber,
	df_urec_mark_reg_use_for_earlyclobber,
	df_urec_mark_reg_use_for_earlyclobber_1,
	df_urec_bb_local_compute, df_urec_local_compute,
	df_urec_init, df_urec_local_finalize, df_urec_confluence_n,
	df_urec_transfer_function, df_urec_free, df_urec_dump,
	df_urec_add_problem, df_chain_alloc,
	df_chain_create_bb_process_use, df_chain_create_bb,
	df_chain_finalize, df_chain_free, df_chains_dump,
	df_chain_add_problem, df_ri_alloc, df_ri_bb_compute,
	df_ri_compute, df_ri_free, df_ri_dump, df_ri_add_problem,
	df_reg_lifetime) New functions.
	df.h: Complete rewrite to support new df-problems.c, df-scan.c and 
	df-core.c.

2005-12-14  Kenneth Zadeck <zadeck@naturalbridge.com>

	* bitmap.c (bitmap_clear_range): Removed extra debugging. 

2005-12-12  Paolo Bonzini  <bonzini@gnu.org>

	* rtl.h (find_occurrence): Declare.
	* rtlanal.c (find_occurrence): New.
	(loc_mentioned_in_p): Accept a NULL value for IN.
	* common.opt (-fforward-propagate): New.
	* tree-pass.h: Add forward propagation passes.
	* passes.c: Ditto.
	* timevar.def: Add forward propagation timevar.
	* fwprop.c: New file.
	* Makefile.in: Add fwprop.o dependencies.

2005-11-28  Paolo Bonzini  <bonzini@gnu.org>

	* config/sh/sh.c (sh_output_mi_thunk): Use df_finish.

2005-11-17  Paolo Bonzini  <bonzini@gnu.org>

        * df.h (struct df_reach): Add size field.
        * df.c (df_realloc_reach_bitmaps, df_renumber_refs): New.
        (df_reg_use_chain_create, df_reg_def_chain_create): Use them.
        Fix GNU coding standards compliancy.

2005-11-11  Richard Earnshaw  <richard.earnshaw@arm.com>

	* df.c (df_chain_create): Move declaration of bb outside define
	for ENABLE_CHECKING.

2005-11-08  Paolo Bonzini  <bonzini@gnu.org>

	* df.c (df_local_ref_killed_between_p): Reinstate.

2005-11-08  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>

	* bitmap.c (bitmap_element_free, bitmap_element_link, bitmap_and,
	bitmap_and_compl, bitmap_ior, bitmap_ior_into, bitmap_xor, 
	bitmap_xor_into): Fixed latent performance issue where current
	was being properly kept up to date.
	(bitmap_clear_range, bitmap_compl_and_into): New functions to support 
	dataflow analysis.
	* df.c (df_rd_confluence_n, df_alloc_reach_bitmaps, df_free_reach_bitmaps, 
	df_clear_reach_bitmaps, df_ru_confluence_n, df_lr_confluence_0, 
	df_lr_confluence_n, df_init, df_dump): Changed the way EH_USES is processed.
       	(df_bitmaps_alloc, df_bitmaps_free,
	df_bb_reg_def_chain_create, df_bb_reg_def_chain_create,
	df_reg_use_chain_create, df_rd_transfer_function,
	df_alloc_reach_bitmaps, df_ref_bitmap, df_bb_rd_local_compute,
	df_rd_local_compute, df_bb_ru_local_compute, df_analyze, 
	df_analyze_subcfg, df_analyze_simple_change_some_blocks): Fixed
	performance problems by grouping all defs and uses
	for the same pseudo into contigious ranges.
	(df_bb_du_chain_create, df_bb_ud_chain_create): Combined in
	new function df_bb_chain_create.
	(df_chain_create, df_alloc_reach_bitmaps, df_free_reach_bitmaps, 
	df_clear_reach_bitmaps, df_ref_bitmap): New function.
	(df_rd_init, df_rd_confluence_n, df_rd_transfer_function,
	df_rd_set_dflow, df_ru_transfer_function, df_ru_confluence_n, 
	df_ru_transfer_function, df_ru_set_dflow, df_lr_transfer_function, 
	df_lr_set_dflow, df_lr_confluence_n, df_ur_transfer_function, 
	df_ur_set_dflow, df_ur_init, df_ur_transfer_function, df_ur_set_dflow
	df_ur_confluence_n, hybrid_search_forward, hybrid_search_backward
	iterative_dataflow): Changed interface for dataflow callback
	functions to hide where the source of bitmaps.
       	(df_rd_set_bitmaps, df_ru_set_bitmaps, df_lr_set_bitmaps, 
	df_ur_set_bitmaps, df_bitmap_ior_edge):	Removed as part of
	changing dataflow callback interface.
	(df_free, df_ref_create, df_ref_record_1,
	df_record_exit_block_uses, df_refs_record, df_exit_lr_local_compute,
	df_insn_move_before, df_local_ref_killed_between_p, 
	df_bb_regno_last_def_find, df_chain_dump, df_dump): 
	Added chains that go to artifical uses in exit block.
	(df_exit_bb_reg_use_chain_create, df_exit_bb_chain_create):
	New functions to support artifical uses in exit block.
	(df_insn_refs_record): Added new DF_REF_CLOBBER ref type to
	avoid creation of artifical chains for clobbers at call sites.

2005-11-03  Paolo Bonzini  <bonzini@gnu.org>
	    Steven Bosscher  <stevenb@suse.de>

	* df.c (df_free): Fix call to df_bitmaps_free.
	(df_bb_regno_last_def_find): Make it return what it is supposed
	to return.
	(df_local_ref_killed_between_p): New.

2005-11-01  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>

	* flow.c (update_life_info): Added debugging.
	(init_propagate_block_info): Fixed typo.
	* df.c (df_refs_unlink, df_ref_record_1, df_ref_record,
	read_modify_subreg_p, df_def_record_1, df_insn_refs_record):
	Fixed control of when regs_ever_live is modified.
	* combine.c: Documentation rot.
	* reload1.c: Used wrong type of comment.

2005-10-31  Jan Hubicka  <jh@suse.cz>

	* reg-stack.c (subst_stack_regs_pat): Expect USEs to be ignored for
	liveness.
	(change_stack): Initialize partially dead registers.
	(convert_regs_1): Handle dead return values.
	(reg_to_stack): Switch to partial liveness. 
	(propagate_stack): Push in partially live stuff.

2005-10-25  Daniel Berlin  <dberlin@dberlin.org>
            Kenneth Zadeck <zadeck@naturalbridge.com>

	* cfgrtl.c (print_rtl_with_bb): Fixed problem with debugging
	output of bitmaps.
	* df.c (mark_reg_change): Fixed problem computing sizes of hard regs.
	* reload1.c (reload): Fixed over agressive updating of bitmaps.
	* sched-rgn.c (schedule_insns): Cleaned away some useless verification 
	code.
	(rest_of_handle_sched2): Removed debugging.


2005-10-24  Kenneth Zadeck <zadeck@naturalbridge.com>

	* sched-rgn.c (check_live_1, update_live_1, rest_of_handle_sched): 
	Converted to use partially available liveness.
	(init_regions, schedule_insns, rest_of_handle_sched): 
	Removed assertion checking based on death notes.


2005-10-23  Daniel Berlin  <dberlin@dberlin.org>
	    Kenneth Zadeck <zadeck@naturalbridge.com>

	* df.c (df_bitmaps_alloc, df_lr_local_compute, df_compute_all_blocks): 
	Removed df->all_blocks.
	(df_lr_local_compute): Added flag to indicate that 
	blocks was really the whole function.
	(df_ref_record): Fixed missing case for memory refs.
	(df_insn_refs_record): Fixed regs ever live processing.
	(df_bb_refs_record): Removed debugging code.
	(df_bb_lr_local_compute, notice_stack_pointer_modification, 
	df_bb_lr_local_compute): Moved stack pointer modification 
	detection code back to flow.c.
	(df_bb_lr_local_compute, hybrid_search_forward, 
	hybrid_search_backward): Formatting cleanup.
	(df_compute_all_blocks, notice_stack_pointer_modification):
	Removed.
	(df_analyze):  Changed the definition of whole program to be all 
	reachable blocks rather than all blocks.
	(df_analyze_subcfg, df_analyze_simple_change_some_blocks): Added 
	parameter to df_lr_local_compute. 
	(df_rtx_reg_replace): Fixed way it decided it was processing 
	entire function.
	* df.h: Removed all_blocks from struct df definition.
	* flow.c (notice_stack_pointer_modification_1, 
	notice_stack_pointer_modification): Added back.
	(life_analysis): Added back call to 
	notice_stack_pointer_modification.
	(struct tree_opt_pass pass_life, rest_of_handle_flow2): 
	Added debugging.
	* gcse.c (gcse_main, bypass_jumps): Additional places where we had missed 
	in renumbering entry and exit blocks.
	* global.c (global_alloc): Additional debugging code.


2005-10-19  Daniel Berlin  <dberlin@dberlin.org>

	* df.c (df_lr_local_compute): Fix thinko regarding pseudos and call
	defs.

2005-10-19  Kenneth Zadeck <zadeck@naturalbridge.com>

	* df.c (df_bitmap_ior_edge, df_lr_confluence_0
	df_lr_confluence_n, df_ur_confluence_n, df_ur_set_bitmaps): New 
	functions.
	(df_exit_lr_local_compute, dataflow_set_a_op_b): Removed 
	functions.
	(df_ur_set_bitmaps, mark_reg_change, df_ur_local_finalize,
	mark_reg_use_for_earlyclobber, df_ur_local_compute, 
	df_bb_reg_live_start, df_bb_reg_live_end, df_bb_reg_live_start_p,
	df_bb_reg_live_end_p): Renamed "reaching registers" 
	problem (rr) to "uninitialized registers" problem. 
	(df_free): Changed variables freed.
	(df_ref_record): Added more sophisticated hard register scan.
	(df_insn_refs_record): Changed way invalidated_by_call is 
	processed.
	(df_bb_refs_record, df_exit_lr_local_compute, 
	df_bb_lr_local_compute): Removed bad way to simulate edge functions.  
	There are now real confluence functions.
	(notice_stack_pointer_modification): Disabled.
	(df_bb_lr_local_compute): Disabled call to 
	notice_stack_pointer_modification. Added code to properly handle hard 
	regs at call site.
	(df_lr_local_compute): Added more hard reg processing. 
	Changed order exit block is processed.
	(df_init): Added some invariant hard regs initialization.
	(df_refs_process): Removed artifical special case. 
	(df_print_bb_index, df_dump): Removed parameter to df_dump.
	(hybrid_search_forward, hybrid_search_backward): Added 
	confluence function calls.
	(iterative_dataflow): Added hack to initialize in and out sets 
	with hard registers.  This will be removed later.  
	* df.h: Removed DF_ARTIFICIAL_DEFS.  Renamed "reaching registers". 
	problem (rr) to "uninitialized registers" problem. Changed confluence 
	operator to general confluence functions.
	* flow.c (verify_wide_reg, verify_local_live_at_start): Removed 
	parameter to df_dump. 
	* reg_stack.c (reg_to_stack): Ditto.
	* sched_rgn.c (init_regions, schedule_insns): Ditto.
	* web.c (web_main): Ditto.
	* flow.c: (update_life_info): Removed DF_ARTIFICIAL_DEFS.
	* global.c (global_alloc): Ditto.
