@deftypemethod BigDecimal {public static BigDecimal} valueOf (long@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public static BigDecimal} valueOf (long@w{ }@var{val}, int@w{ }@var{scale}) @*throws NumberFormatException

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} add (java.math.BigDecimal@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} subtract (java.math.BigDecimal@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} multiply (java.math.BigDecimal@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} divide (java.math.BigDecimal@w{ }@var{val}, int@w{ }@var{roundingMode}) @*throws ArithmeticException, IllegalArgumentException

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} divide (java.math.BigDecimal@w{ }@var{val}, int@w{ }@var{newScale}, int@w{ }@var{roundingMode}) @*throws ArithmeticException, IllegalArgumentException

@end deftypemethod
@deftypemethod BigDecimal {public int} compareTo (java.math.BigDecimal@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public int} compareTo (java.lang.Object@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod BigDecimal {public int} hashCode () 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} max (java.math.BigDecimal@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} min (java.math.BigDecimal@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} movePointLeft (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} movePointRight (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigDecimal {public int} signum () 

@end deftypemethod
@deftypemethod BigDecimal {public int} scale () 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} abs () 

@end deftypemethod
@deftypemethod BigDecimal {public BigDecimal} negate () 

@end deftypemethod
@deftypemethod BigDecimal {public String} toString () 

@end deftypemethod
@deftypemethod BigDecimal {public BigInteger} toBigInteger () 

@end deftypemethod
@deftypemethod BigDecimal {public int} intValue () 

@end deftypemethod
@deftypemethod BigDecimal {public long} longValue () 

@end deftypemethod
@deftypemethod BigDecimal {public float} floatValue () 

@end deftypemethod
@deftypemethod BigDecimal {public double} doubleValue () 

@end deftypemethod
@deftypemethod BigInteger {public static BigInteger} valueOf (long@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public int} signum () 

@end deftypemethod
@deftypemethod BigInteger {public int} compareTo (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod BigInteger {public int} compareTo (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} min (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} max (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} add (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} subtract (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} multiply (java.math.BigInteger@w{ }@var{y}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} divide (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} remainder (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} divideAndRemainder (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} mod (java.math.BigInteger@w{ }@var{m}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} pow (int@w{ }@var{exponent}) 
Calculate the integral power of a BigInteger.
@end deftypemethod
@deftypemethod BigInteger {public BigInteger} modInverse (java.math.BigInteger@w{ }@var{y}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} modPow (java.math.BigInteger@w{ }@var{exponent}, java.math.BigInteger@w{ }@var{m}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} gcd (java.math.BigInteger@w{ }@var{y}) 

@end deftypemethod
@deftypemethod BigInteger {public boolean} isProbablePrime (int@w{ }@var{certainty}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} shiftLeft (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} shiftRight (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigInteger {public String} toString () 

@end deftypemethod
@deftypemethod BigInteger {public String} toString (int@w{ }@var{radix}) 

@end deftypemethod
@deftypemethod BigInteger {public int} intValue () 

@end deftypemethod
@deftypemethod BigInteger {public long} longValue () 

@end deftypemethod
@deftypemethod BigInteger {public int} hashCode () 

@end deftypemethod
@deftypemethod BigInteger {public boolean} equals (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod BigInteger {public double} doubleValue () 

@end deftypemethod
@deftypemethod BigInteger {public float} floatValue () 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} abs () 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} negate () 

@end deftypemethod
@deftypemethod BigInteger {public int} bitLength () 
Calculates ceiling(log2(this < 0 ? -this : this+1))
 See Common Lisp: the Language, 2nd ed, p. 361.
@end deftypemethod
@deftypemethod BigInteger {public byte} toByteArray () 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} and (java.math.BigInteger@w{ }@var{y}) 
Return the logical (bit-wise) "and" of two BigIntegers.
@end deftypemethod
@deftypemethod BigInteger {public BigInteger} or (java.math.BigInteger@w{ }@var{y}) 
Return the logical (bit-wise) "(inclusive) or" of two BigIntegers.
@end deftypemethod
@deftypemethod BigInteger {public BigInteger} xor (java.math.BigInteger@w{ }@var{y}) 
Return the logical (bit-wise) "exclusive or" of two BigIntegers.
@end deftypemethod
@deftypemethod BigInteger {public BigInteger} not () 
Return the logical (bit-wise) negation of a BigInteger.
@end deftypemethod
@deftypemethod BigInteger {public BigInteger} andNot (java.math.BigInteger@w{ }@var{val}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} clearBit (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} setBit (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigInteger {public boolean} testBit (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigInteger {public BigInteger} flipBit (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod BigInteger {public int} getLowestSetBit () 

@end deftypemethod
@deftypemethod BigInteger {public int} bitCount () 
Count one bits in a BigInteger.
 If argument is negative, count zero bits instead.
@end deftypemethod
