2001-02-02  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Large amount of variable renaming and formatting
	fixups. Hope i caught them all.

2001-02-01  Richard Henderson  <rth@redhat.com>

	* new-regalloc.c (assign_regs): Insert missing "else" between
	biased and non-biased code.  Try the preferred register class
	before the alternate register class, not at the same time.

2001-02-01  Richard Henderson  <rth@redhat.com>

	* toplev.c (NEW_REGISTER_ALLOCATOR): Remove.
	(dump_file_index, dump_file): Remove lreg dump file.
	(rest_of_compilation): Don't ifdef NEW_REGISTER_ALLOCATOR.
	Use the global register time var and dump files for the
	new allocator.
	* timevar.def (TV_LOCAL_ALLOC): Remove.

2001-02-01  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Convert sbitmaps to regsets.
	(finish_new_regalloc): Delete ig_node's as well.
	(ig_node_delete): Free memory for ig_node's properly.
	(find_move_cost): Fix cost calculation.
	

	* new-regalloc.c (coalesce): Fixed test for constrainedness.
	(top level): Include new-regalloc.h

2001-01-31  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (precolored_OK): Fix heuristic.
	(reg_freedom): Cache register freedoms, they don't change.
	(find_reg_given_constraints): Remove backwards direction, it's useless.
	(assign_regs): Start to implement biased coloring.
	(*): Dump debug info to rtl_dump_file, rather than stderr.

2001-01-30  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (perform_new_regalloc_init): Handle fixed
	registers, as they interfere with everything
	(OK): rename to precolored_OK.
	(precolored_OK): Handle fixed registers, since we can't
	coalesce them with anything.

2001-01-20  Richard Henderson  <rth@redhat.com>

	* new-regalloc.c: Canonicalize formatting.

2001-01-29  Daniel Berlin  <dberlin@redhat.com>

	* ssa.c  (mark_phi_and_copy_regs): Test rtx against 0, not NULL,
	and test pattern against 0 too.
	
	* reload1.c (finish_spills): Call find_reg_given_constraints
	rather than retry_global_alloc.

	* df.c (df_insn_regno_def_p): Reverse return values so that it
	does what the function says it does, so that dataflow analysis of
	call clobbered registers works.

	* new-regalloc.h: Add definitions of external functions, stop
	including other files.
	
	* new-regalloc.c: Move inclusion of those files to here.
	(perform_new_regalloc_init): Fix data flow analysis problem.
	(rewrite_program): Change call to reload to tell it we are calling
	from the global register allocator, now that it calls the right
	retry routine.

2001-01-29  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (find_reg_given_constraints): Fix the *other* bug
	in spilling, causing things taking up > 1 register to be spilled
	if register 0 was free. Duh. (The arguments to x_okay_in_direction
	were off by one).
	(conservative): freedom would be max of the reg_freedom's of the
	lhs and rhs, not the max of the size of the preferred class of
	each (though it's close).

2001-01-28  Daniel Berlin  <dberlin@redhat.com>

	* Makefile.in (STAGE1_CFLAGS): Remove -O3, sorry about that.

	* new-regalloc.c (find_reg_given_constraints): Fix bug in spilling
	(notOK isn't used anymore).
	Pass mode along to x_okay_in_direction.
	(x_okay_in_direction): Add mode argument, use it.
	(find_costliest_move): Fix REGISTER_MOVE_COST call so that it has
	proper arguments.

Sun Jan 28 21:11:10 2001  Denis Chertykov  <denisc@overta.ru>

	* new-regalloc.c (find_reg_given_constraints): test result with
	`HARD_REGNO_MODE_OK'.

	* new-regalloc.h: add `#include "tm_p.h"'
	
2001-01-28  Daniel Berlin  <dberlin@redhat.com>

	* sbitmap.h (EXECUTE_IF_SET_IN_SBITMAP_REV): New macro, needed for
	dataflow analysis.
	(sbitmap_realloc): New function definition.

	* sbitmap.c (sbitmap_realloc): New function, change size of an
	already-allocated sbitmap.

	* toplev.c (rest_of_compilation): Stop calling old allocators,
	call new allocator instead.

	* rtl.h: Add reg_spill_cost definition.

	* reload1.c: De-staticify alter_reg.

	* reload.h: Make alter_reg externally visible (probably need it
	for spill code insertion).

	* new-regalloc.[ch]: New files. New register allocator.

	* df.[ch]: New files. Dataflow analysis.

	* local-alloc.c: Make update_equiv_regs non-static, we need it in
	the new allocator.

	* Makefile.in (OBJS): Add df.o, new-regalloc.o

	* regclass.c (regclass): Don't free costs, need it for spill costs.
	(reg_spill_cost): New function, give us cost if we have to
	put the register in memory.
	
	

