2003-06-30  Michael Matz  <matz@suse.de>
	* ra-build.c (remember_move): Handle subreg moves.
	(moves_to_webs): Ensure that we get the correct refs.

2003-06-30  Michael Matz  <matz@suse.de>
	* ra-rewrite.c (coalesce_spill_slots): Don't use uninitialized
	values.

2003-06-23  Michael Matz  <matz@suse.de>
	* Makefile.in (ra-build.o): Depend on OBSTACK_H.
	(ra-rewrite.o): Depend on pre-reload.h.

	* caller-save.c (save_call_clobbered_regs): Handle uninitialized rmw
	regs.
	* cfgrtl.c (verify_flow_info): Barf again on missing REG_EH_REGION.
	(purge_dead_edges): Also ignore sibling calls.
	* cse.c (delete_trivially_dead_insns_1): Break out from ... plus
	updates a df structure.
	(delete_trivially_dead_insns): ... here.  Call the above.
	(delete_trivially_dead_insns_df): New.
	* df.c (df_uid_refs_remove): New.
	(df_refs_update): Handle deleted insns.
	* df.h (delete_trivially_dead_insns_df): Prototype.
	* jump.c (true_regnum): Avoid segfault.
	* loop.c (copy_cost_for_loop): Renamed from ...
	(copy_cost): ... this.  Updated all accesses.
	* pre-reload.c (prefer_swapped): New.
	(push_pre_reload): Don't subreg special reg rtx's.
	(scan_alternative): New arguments pfree and prej.  Use prefer_swapped.
	(collect_insn_info): Better heuristics for choosing alternative.
	Don't add reloads in later ra passes.
	* ra.c (newra_in_progress): New.
	(reg_alloc): Set/reset it.
	* recog.c (toplevel): Include ra.h.
	(insn_invalid_p): Check for newra_in_progress.
	(scratch_operand): Ditto, plus only accept non-spill pseudos.
	(does_contain_spill_pseudos): New.
	(constrain_operands): Call it.  Check newra_in_progress.  Accept
	stack pseudos where MEM is accepted.
	* reg-stack.c (move_for_stack_reg): Use delete_insn_and_edges.
	* regclass.c (may_move_in_cost, may_move_out_cost, copy_cost):
	Make global.
	* regs.h (may_move_in_cost, may_move_out_cost): Declare.
	* rtl.h (REG_OR_SUBREG_P): New.
	(note_uses_partial, newra_in_progress, copy_cost): Declare.
	* rtlanal.c (note_uses_1, note_uses_partial): New.
	(note_uses): Call note_uses_1.
	* version.c (version_string): Add "(new RA)" designator.

2003-04-10  Denis Chertykov  <denisc@overta.ru>

	* ra-rewrite.c (find_move, init_find_move, insn2move):
	Removed.
	(coalesce_spill_slot): Use copy_insn_p for detecting move
	insns.
	(assign_stack_slots_1): Don't use insn2move, init_find_move.

2003-04-02  Michael Matz  <matz@suse.de>

	* ra-build.c (update_regnos_mentioned): Handle all copy insns.

2003-02-26  Denis Chertykov  <denisc@overta.ru>
	    Michael Matz  <matz@suse.de>

	* ra-build.c (copy_p_type): New enum.
	(copy_p_cache): Use it.
	(copy_insn_p): Ditto.
	(remember_move): Don't remember all copy insns.
	(update_regnos_mentioned): Ditto.

2003-02-25  Michael Matz  <matz@suse.de>

	* ra-colorize.c (merge_moves): Fix list handling.

2003-02-21  Michael Matz  <matz@suse.de>

	* df.h (DF_REF_ALREADY_SPILLED, DF_REF_COMPARE_RELATED,
	DF_REF_EARLYCLOBBER): New.
	* df.c (df_ref_search_cached): Ignore some flags for equality.
	(read_modify_subreg_p): Return false.
	(df_uses_record): Mark compare related refs.

	* ra-build.c (copy_insn_p): If there are stack pseudos, it's no
	copy insn.
	(detect_remat_webs): Don't rematerialize trapping expressions.
	(class_ok_for_mode): New.
	(web_class): Use it.

	* ra-colorize.c (proper_hard_reg_subset_p): New.
	(colorize_one_web): Use it.

	* ra-rewrite.c (delete_useless_defs): Don't delete throwing insns.
	(assign_stack_slots_1): Ditto.

2003-02-01  Denis Chertykov  <denisc@overta.ru>

	* ra-debug.c (dump_igraph): Mark all insns generated by
	allocator by "'", mark all pseudos generated by allocator too.

	* ra.h (copy_insn_p): Declared as extern.
	(hard_regs_combinable_p): New prototype.

	* ra.c (hard_regs_combinable_p): New function.

	* ra-colorize.c (sort_and_combine_web_pairs): Use
	hard_regs_combinable_p instead of hard_regs_intersect_p.
	(extended_coalesce): Likewise.
	(extended_coalesce_2): Likewise.
	(ra_colorize_free_all): Fix memory deallocation bug.

	* ra-build.c (copy_insn_p): Declared as extern in ra.h
	(rematerializable_stack_arg_p): New function.
	(detect_remat_webs): Use it.
	(moves_to_webs): Use hard_regs_combinable_p instead of
	hard_regs_intersect_p.
	(web_class): Disable web splitting.

	* ra-rewrite.c (insert_stores): Insert spill slot register
	immediately to insn if rematerialization or insn is a move.
	(emit_loads): Remove all code which handle rematerialization.
	Allow to insert spill slot register immediately to insn if
	insn is a move.
	(coalesce_spill_slot): Remove checking for rematerialization.
	(assign_stack_slots_1): Handle rematerialization.
	(web_class_spill_ref): Fix handling of subregs.

	* pre-reload.c (scan_addr_state): Remove field regs_per_addr.
	(scan_addr_func): Likewise.
	(collect_insn_info): Likewise.
	(df_link2ra_link): Scan more insns.

2003-01-24  Dale Johannesen  <dalej@apple.com>

	* ra-build.c (compare_and_free_webs):  Loosen checking for hard regs.
	* pre-reload.c (scan_alternative):  Win on non-reg in 'g' case.

2003-01-08  Denis Chertykov  <denisc@overta.ru>

	* ra.h (debug_web_insns): Prototype added.
	(debug_web_conflicts): Likewise.
	(actual_spill): Prototype changed.
	(web_preferred_class): Prototype removed.
	(web_class): Prototype changed.
	(count_long_blocks): Prototype added.
	(detect_web_parts_to_rebuild): Likewise
	(web_class_spill_ref): Likewise.
	(subst_to_stack_p): Likewise.

	* ra.c (reg_class_of_web): Removed.
	(one_pass): Support spill in web_class and substitution of
	webs colored by an_unusable_color to stack slots.
	(reg_alloc): Move setting of while_newra to start of function.
	Handling of reg_class_of_web removed.
	Calling of delete_trivially_dead_insns commented because insns
	deleted by it isn't marked for rescanning in next pass.
	Dump original function - the function after pre-reload and
	before register allocation.

	* ra-colorize.c (count_long_blocks): Declared as extern.
	(combine): Merge usable_regs of combined webs before conflicts
	merging.
	(colorize_one_web): Add new spill candidate. Some structural
	changes in calculation of spill candidates.
	(assign_colors): Call colorize_one_web with the HARD argument
	setted to 2.
	(try_recolor_web): Allocate small arrays in stack.
	(ra_colorize_free_all): Free web defs/uses/useless_conflicts.
	It was a memory allocation bug.

	* ra-build.c: Include obstack.h and pre-reload.h.
	(livethrough_conflicts_bb): Small change to avoid warning.
	Initialize `info' out of declaration.
	(select_regclass): Call web_class for each web. Handle a
	spilling possible in the web_class.
	(make_webs): Handle a spilling possible in the web_class.
	Call conflicts_early_clobbered to record conflicts between
	defs with '&' constraint and all uses in one insn.
	(build_i_graph): Handle a spilling possible in the web_class.
	Commented out call to handle_asm_insn.
	(conflicts_early_clobbered): New function. record conflicts
	between defs with '&' constraint and all uses in one insn.
	(web_class): Significantly changed to calculate usable_regs
	and regclass only for one web. Call the web_class_spill_ref
	for spilling ref out of web if single reg_class can't be
	selected.

	* ra-rewrite.c: Include obstack.h and pre-reload.h.
	(detect_web_parts_to_rebuild): Declared as extern.
	(insn2move): New variable for quick mapping INSN_UID to
	structure of a move.
	(spill_coalescing): Merge together the usable_regs of
	coalesced webs. 
	(allocate_spill_web): Garbage of my experiments.
	(insert_stores): Check all uses in insns generated by spill
	phase in previous passes for accurate detection of insns with
	death. Change all code which tries incorporate spill slot
	registers to non move insns.
	(emit_loads): Change all code which tries to incorporate spill
	slot registers to non move insns. Use ra_validate_change for
	strict constraints checking.
	(mark_insn_refs_for_checking): New function. Mark all webs
	mentioned in insn for checking in the next allocator pass.
	(detect_web_parts_to_rebuild): Call mark_insn_refs_for_checking
	for each insn marked in the last_changed_insns.
	(subst_to_stack_p): New function. Check all colored webs to
	detect ones colored by an_unusable_color.
	(actual_spill): Argument spill_p added for tuning calls to
	assign_stack_slots.
	(assign_stack_slots): New function. Allocate and assign stack
	slots to all webs colored by an_unusable_color.
	(init_find_move): New function. Setup insn2move array.
	(find_move): New function. Find move for ref.
	(coalesce_spill_slot): New function. Coalesce small webs with
	stack spilled slots.
	(assign_stack_slots_1): New function. Replace spill slot web
	to stack slot in all insns.
	(web_class_spill_ref): New function. Spill ref out of web if
	single reg_class can't be found.

	* pre-reload.h (ra_ref): Correct mistyped field.
	(ra_check_constraints): New function.
	(ra_validate_change): Likewise.
	(ra_apply_change_group): Likewise.
	(ra_cancel_changes): Likewise.
	(df2ra): Declared as extern.

	* pre-reload.c (alternative_info): New structure.
	(scan_alternative): New function. Scan one alternative and
	fill alternative info.
	(collect_insn_info): Changed to call scan_alternative.
	(ra_check_constraints): New function. Recognize insn and check
	constraints validity very strictly.
	(ra_validate_change): New functions. Set of functions similar
	to validate_change. Simplified and use ra_check_constraints
	for insn validity. 
	(ra_apply_change_group): Likewise.
	(ra_cancel_changes): Likewise.

2002-11-20  Michael Matz  <matz@suse.de>

	merge with HEAD at tag ra-merge-20021120

	older fixes:

	* ra.h (struct web.crosses_bb): New member.
	(struct web.last_use): New.
	(struct web_part.crosses_bb): New.
	(last_changed_insns, comp_webs_maxcost): Declare.
	
	* ra.c (free_all_mem): Free last_changed_insns.
	(detect_possible_mem_refs): New.
	(reg_alloc): Call it.  Handle last_changed_insns.
	Add CLEANUP_UPDATE_LIFE to cleanup_cfg() call.
	Remove / recreate REG_DEAD notes.

	* ra-colorize.c (comp_webs_maxcost): Make global.
	(put_web): Put stack webs onto SIMPLIFY list.
	(build_worklists): Swap order in which stack webs are listed.
	(combine): Stack webs can't be targets for normal webs.
	(select_spill): More spill candidates.
	(colorize_one_web): More split candidates.  Add a
	insert_coalesced_conflicts() call.
	(insert_coalesced_conflicts): Activate it.  Add missing conflicts
	instead of aborting.
	(break_precolored_alias): recreate deleted conflicts.
	(restore_conflicts_from_coalesce): Reset I-graph bits also for all
	subwebs.

	* ra-debug.c (ra_print_rtx): Correct LABEL handling.
	(dump_igraph): Mark stack webs.

	* ra-rewrite.c (insn-config.h, recog.h): Include.
	(delete_overlapping_uses, last_changed_insns): New.
	(allocate_spill_web): Create pseudos as backing store.
	(slot_member_p): Subregs are also members.
	(insert_stores): Scan all insns for memory refs.
	Try to create the stack ref in place.
	(emit_loads): Ditto.
	(rewrite_program2): Set .last_use member.
	(mark_refs_for_checking): Reset .crosses_bb member.
	(detect_web_parts_to_rebuild): Ditto.
	(actual_spill): Handle last_changed_insns.
	(emit_colors): Allocate stack slots for stack webs in different order.

	* df.h (enum df_ref_flags): New members DF_REF_MODE_CHANGE,
	DF_REF_DELETED, DF_REF_MEM_OK.
	
	* df.c (df_insn_refs_mark_deleted, df_ref_search_cached): New.
	(df_ref_create): Call df_ref_search_cached().
	(df_bb_refs_update): Call df_insn_refs_mark_deleted().
	(df_insn_refs_unlink): Only deleted marked refs.

	* pre-reload.c (pre_operands_match_p): New.
	(gen_pre_reload): Don't special case subregs.
	(emit_input_pre_reload_insns, emit_output_pre_reload_insns,
	subst_pre_reloads): Use simplify_gen_subreg instead of gen_rtx_REG.
	(push_pre_reload): Don't special case pseudo regs.
	Adjust reload_inner_reg_of_subreg() calls.
	(scan_addr_create_ref): Refs can be subregs.
	(df_link2ra_link): Ditto.
	(collect_insn_info): Ditto.  Use pre_operands_match_p.
	If match was seen really ignore things after '#'.

	* pre-reload.h (RA_REF_REGNO): Accept subreg refs.
	(reload_inner_reg_of_subreg): Adjust prototype.

	* reload.c (push_reload): Don't try to reuse register marked REG_DEAD.
	(combine_reloads, find_dummy_reload): Ditto.

	* basic-block.h (mark_regs_live_at_end): Declare.

	* flow.c (mark_regs_live_at_end): Make global.

	* i386/i386.c (override_options): Only set flag_omit_frame_pointer
	when optimizing.

	* i386/i386.md (divmodsi4_cltd): Fix constraints.

2002-08-06  Michael Matz  <matz@suse.de>

	* ra.c (hard_regs_same_p): New.
	* ra.h (hard_regs_same_p): Prototype.
	* ra-colorize.c (restore_conflicts_from_coalesce): Use it.

2002-08-02  Denis Chertykov  <denisc@overta.ru>

	* pre-reload.c (scan_addr_func): Bugfix. Argument ra_info removed.
	(collect_insn_info): this_alternative_address_operand,
	goal_alternative_address_operand, new arrays for handling
	constraint 'p'.
	(pre_reload_collect): Debug a pre-reload process to rtl_dump_file.

	* ra.h (max_normal_pseudo, orig_max_uid): Removed.
	(emitted_by_spill, ra_modified_insns, spill_slot_regs): New bitmaps.
	(is_partly_dead, set_web_live, reset_web_live, reg_class,
	web_class): Prototypes declared as extern.
	(SPILL_SLOT_P): New macro.
	
	* ra-build.c (copy_insn_p): Use SPILL_SLOT_P instead of
	comparision with max_normal_pseudo.
	(detect_spill_temps): Use detect_spanned_deaths if special flag.
	Use bitmap emitted_by_spill instead of orig_max_uid.
	(detect_remat_webs): Use bitmap emitted_by_spill instead of
	orig_max_uid.
	(select_regclass): Use web_class if flag_ra_pre_reload.
	(handle_asm_insn): Use web_preferred_class if flag_ra_pre_reload.
	(detect_spanned_deaths): New function. Calculate spanned deaths
	and spanned defs of webs.

	* ra.c (max_normal_pseudo, orig_max_uid): Removed.
	(emitted_by_spill, ra_modified_insns, spill_slot_regs): New
	bitmaps.
	(init_ra): Definition of orig_max_uid removed.
	Initialization of insns_with_deaths and death_insns_max_uid moved
	to reg_alloc.
	(reg_alloc): Use pre_reload if flag_ra_pre_reload.
	(web_class): New variable "debug" for better controlling of debug
	output.

	* ra-colorize.c (build_worklists): Use SPILL_SLOT_P instead of
	max_normal_pseudo.
	(combine): Likewise.
	(check_colors): Likewise.
	(extended_coalesce_2): Likewise.
	(colorize_one_web): Likewise. Handle flag_ra_pre_reload.

	* ra-debug.c (dump_igraph): Use SPILL_SLOT_P instead of
	max_normal_pseudo.
	(dump_web_insns): Renamed to debug_web_insns. All debugging output
	will be printed to stderr.
	(dump_web_conflicts): Likewise.

	* ra-rewrite.c: Set bit in ra_modified_insns for all insns handled by
	by df_insn_modify.
	Set bit in emitted_by_spill for all emitted insns.
	(allocate_spill_web): Set bit in spill_slot_regs for new spill
	slot register.
	(is_partly_live): Test web->parent_web.
	(emit_loads): Emit loads only for subwebs if super web isn't
	marked for load.

	* toplev.c (flag_ra_pre_reload): New flag -fnew-ra-pre-reload.
	(flag_ra_spanned_deaths_from_scratch): New flag
	-fnew-ra-spanned-deaths-pass.

2002-07-29  Denis Chertykov  <denisc@overta.ru>

	* ra-rewrite.c (set_web_live, reset_web_live, is_partly_dead): New
	functions.
	(is_partly_live): Walk only on one subweb or all subwebs of super web.
	(emit_loads): Use set_web_live, reset_web_live.
	(detect_deaths_in_bb): Likewise.
	(reloads_to_loads): Use is_partly_dead instead of is_death ....
	Use set_web_live, reset_web_live.
	(rewrite_program2): Likewise.

2002-07-25  Denis Chertykov  <denisc@overta.ru>

	* ra-build.c (remember_web_was_spilled): Removed.
	(init_one_web_common): Move initialization of regclass, add_hardregs,
	num_conflicts fields of web to select_regclass.
	(select_regclass): New function.
	(detect_spill_temps): Remove call to remember_web_was_spilled.
	(make_webs): Call select_regclass.

2002-07-19  Denis Chertykov  <denisc@overta.ru>

	* pre-reload.c : Substitute all emit_insns to emit_insn.
	Substitute all emit_insns_before to emit_insn_before.
	(ra_insn_table_realloc): Bugfix. Argument SIZE now a size of table
	not a size of increasing.
	Update all calls to ra_insn_table_realloc.
	(ra_reg_table_realloc): Bugfix. Argument SIZE now a size of table
	not a size of increasing.
	Update all calls to ra_reg_table_realloc
	(pre_reload_collect): Use FOR_EACH_BB.

2002-07-11  Michael Matz  <matz@suse.de>

	* ra.c (flag_ra_improved_spilling): New.
	* ra.h (flag_ra_improved_spilling): Declare.
	* ra-rewrite.c (actual_spill): Use it, and call rewrite_program().

2002-06-27  Michael Matz  <matz@suse.de>

	* toplev.c (flag_new_regalloc): Add comment.
	* df.c (df_insn_table_realloc): Size param is absolute.
	* Makefile.in: Clean up header dependencies for ra*.o  
	* doc/invoke.texi: Document -fnew-ra.
	* ra.c: Add comments everywhere.  Delete some #if 0'ed code.
	* ra.h: Ditto.
	* ra-build.c: Ditto.
	* ra-colorize.c: Ditto.
	* ra-debug.c: Ditto.
	* ra-rewrite.c: Ditto.

2002-06-21  Andreas Jaeger  <aj@suse.de>

	* ra.c: Cleanup whitespace.
	* ra.h: Cleanup whitespace.
	* ra-build.c: Cleanup whitespace.
	* ra-colorize.c: Cleanup whitespace.
	* ra-debug.c: Cleanup whitespace.
	* ra-ranges.c: Cleanup whitespace.
	* ra-rewrite.c: Cleanup whitespace.

2002-06-20  Michael Matz  <matz@suse.de>

	Split ra.c into ra.c, ra.h, ra-build.c, ra-colorize.c, ra-debug.c,
	ra-ranges.c and ra-rewrite.c.

	* df.h (struct ref.id): Make unsigned.
	* df.c (df_bb_reg_def_chain_create): Remove unsigned cast.
	* ra.c (regs_overlap_p): Removed.
	(realloc_mem, free_mem, free_all_mem): Split out into ...
	* ra-build.c (ra_build_realloc, ra_build_free,
	ra_build_free_all): ... here ...
	* ra_colorize.c (ra_colorize_free_all): ... and here.
	(ra_colorize_init, ra_colorize_graph): New.
	* ra-rewrite.c (ra_rewrite_init): New.
	* Makefile.in (ra-build.o, ra-colorize.o, ra-debug.o, ra-rewrite.o):
	New targets.
	(libbackend.a): Link them in.

2002-06-20  Hartmut Penner <HPENNER@de.ibm.com>

	* df.c (df_uses_record): Fix pasto.

2002-06-19  Michael Matz  <matz@suse.de>

	Merge with HEAD at tag ra-merge-20020613.
	Adjust files to make it compile.

	* ra.c (ra_emit_move_insn, detect_webs_set_in_cond_jump): New.
	(ra_print_rtl_with_bb, livethrough_conflicts_bb, init_bb_info,
	build_web_parts_and_conflicts, alloc_mem, free_all_mem,
	rewrite_program2, emit_colors, dump_static_insn_cost): Use new
	CFG structure and variables.
	(ggc_mark_rtx_ptr): New.
	(want_to_remat): Use it to mark GC root.
	(make_webs): Call detect_webs_set_in_cond_jump.
	(rewrite_program): Use ra_emit_move_insn and emit_insn_xxx.
	(calculate_pre_post, reach_under, find_nesting_depths):
	s/n_basic_blocks/last_basic_block/ .
	(reg_alloc): Adjust calls to compute_bb_for_insn.
	
2002-06-17  Michael Matz  <matz@suse.de>

	* ra.c (detect_remat_webs): Fail if the first found pattern
	is not rematerializable.

2002-06-13  Michael Matz  <matz@suse.de>

	* df.h (DF_REF_MODE_CHANGE): New flag.
	* df.c (df_def_record_1, df_uses_record): Set this flag for refs
	involving subregs with invalid mode changes, when
	CLASS_CANNOT_CHANGE_MODE is defined.
	* ra.c (struct web.mode_changed): New member.
	(reinit_one_web): Reset it.
	(compare_and_free_webs): Check it.
	(parts_to_webs_1): Set it.
	(init_one_web_common, remember_web_was_spilled, colorize_one_web):
	If mode_changed is set, cut off all regs in CLASS_CANNOT_CHANGE_MODE.
	(remember_web_was_spilled): Use the preferred and alternate class for
	stack pseudos.
	(insert_stores): Don't remember stores over trapping insns.
	(detect_web_parts_to_rebuild): Remove all uses of hardregs from
	uses_as_bitmap.

2002-05-07  Michael Matz  <matz@suse.de>

	* reload1.c (fixup_abnormal_edges): Don't insert on NULL edge.
	* ra.c (undef_to_size_word): New rtx argument.  Changed callers.
	Use it in 0x0fff case.
	(reg_alloc): Insert use of return value at each predecessor of
	EXIT_BLOCK.  Call fixup_abnormal_edges().

2002-05-03  Michael Matz  <matz@suse.de>

	* pre-reload.c : Include optabs.h.
	* ra.c (break_precolored_alias, validify_one_insn,
	make_insns_structurally_valid, dump_static_insn_cost): New.
	(max_normal_pseudo, an_unusable_color): New.
	(DUMP_VALIDIFY): New.
	(copy_insn_p): Moves involving spill-pseudos are not coalescable.
	(init_one_web_common): Initialize num_conflicts to 0.
	(add_subweb, check_conflict_numbers, conservative): Ditto.
	(remember_web_was_spilled): Adjust num_conflicts by 0.
	(dump_igraph, check_colors, spill_same_color_p, update_spill_colors,
	spill_is_free, emit_loads): Handle spillpseudos.
	(build_worklists): Push spillpseudos onto the stack first.
	(combine): Don't allow to combine a spillpseudo and a normal one.
	(colorize_one_web): Don't try hard to color a spillpseudo.
	Webs aliased to precolored ones are candidates too.
	Fake-colorize spilled spillpseudos.
	(try_recolor_web): Don't choke on wide webs, or on SELECTed ones.
	(unalias_web): Factor out non-common code into ...
	(break_aliases_to_web): ... here.  New.
	(allocate_spill_web): Create pseudos.
	(rewrite_program, insert_stores, emit_loads):
	Use simplify_gen_subreg().
	(slots_overlap_p, insert_stores): Handle REGs.
	(emit_colors): Allocate stack slots here.
	(extended_coalesce_2): Don't coalesce spillpseudos.
	(init_ra): Initialize an_unusable_color.
	(reg_alloc): Add use of return register.  Initialize
	max_normal_pseudo.  Don't call store_motion().  Initialize
	reg_equiv_memory_loc.  Call allocate_initial_values() and regclass().

2002-05-03  Michael Matz  <matz@suse.de>

	merged with HEAD (tag ra-merge-initial)

Wed Apr 24 00:37:50 2002  Denis Chertykov  <denisc@overta.ru>

	* pre-reload.h (df2ra): Variable declaration removed.
	* pre-reload.c (obstack_chunk_alloc): Defined.
	(obstack_chunk_free): Defined.
	(scan_addr_create_ref): More accurate sizeof.
	(collect_insn_info): We don't work with REG_NOTES. Commented.
	More accurate sizeof.
	(ra_insn_table_realloc): Argument of sizeof was totally wrong.
	Fixed.
	(ra_reg_table_realloc): Likewise.
	(ra_info_init): ra_info->reg_def_last not used anymore.
	Initialize ra_info->insns and ra_info->regs before reallocation.
	(ra_info_free): Initialization of all fields of ra_info removed.
	Free ra_info.
	(df_link2ra_link): Wrong code removed.
	(pre_reload_collect): Unnecessary code removed.
	(compare_ra_info): Free of ra2 removed. ra_info_free already done
	this.

Thu Apr 18 22:36:48 2002  Denis Chertykov  <denisc@overta.ru>

	* pre-reload.h (DF2RA): Remaining parameter added.

	* pre-reload.c (df_link2ra_link): New function. Build array
          for translation df refs to ra_refs.
	(build_df2ra): Use df_link2ra_link.

	* ra.c (web_class): Changed use of DF2RA.

Fri Apr 12 00:14:17 2002  Denis Chertykov  <denisc@overta.ru>

	* reload.c: Include "obstack.h" and "bitmap.h".

	* pre-reload.h (ra_info): Add new field 'obstack'.
	(pre_reload): Prototype declaration changed.
	(debug_hard_reg_set): New prototype declaration.
	(compare_ra_info): Likewise.

	* pre-reload.c (ra_info_obstack): Global variable removed.
	(ra_link_create): Use 'obstack' field of ra_info structure.
	(scan_addr_func): Likewise.
	(scan_addr_create_ref): Likewise.
	(collect_insn_info): Likewise.
	(ra_info_init): Likewise.
	(ra_info_free): Likewise.
	(build_ra_refs_for_insn): Likewise.
	(debug_ra_reg_refs): New debug function.
	(ra_info_add_insn_refs): Add check.
	(ra_info_add_reg_refs): Bugfix. Right building registers
	related ra_refs.
	(pre_reload): Remove all information about changed insns.
	(pre_reload_collect): Collect information only about
	changed insns.
	(insn_uid): Removed.
	(ra_info_remove_refs): New function.
	(compare_ra_info): New function. Can be used for checking
	consistency of incrementally builded ra_info.

2002-04-10  Michael Matz  <matz@suse.de>

	* ra.c (init_one_web_common, remember_web_was_spilled, combine):
	Subtract add_hardregs from num_freedom.
	(reg_alloc): Set while_newra.
	* recog.c (while_newra): New variable.
	(scratch_operand): Use it to accept pseudos, when set.

Sun Apr  7 15:58:46 2002  Denis Chertykov  <denisc@overta.ru>

	* ra.c (emit_colors): Choose mode from insn not from
	PSEUDO_REGNO_MODE.
	(dump_web_insns): New debug function.
	* pre-reload.c (emit_pre_reload_insns): Change generation of
	reload register.
	(push_pre_reload): More accurate work with the general reload mode.
	(collect_insn_info): Likewise.

Sat Apr  6 12:40:44 2002  Denis Chertykov  <denisc@overta.ru>

	* pre-reload.c (emit_pre_reload_insns): Don't try to keep basic
	block info.
	(pre_reload_collect): Keep basic block info up to date.

Sat Apr  6 09:42:42 2002  Denis Chertykov  <denisc@overta.ru>

	* df.c (df_uses_record): Return after recording all uses
	in ASM_OPERANDS.

Thu Mar 21 22:31:53 2002  Denis Chertykov  <denisc@overta.ru>

	* ra.c (restore_conflicts_from_coalesce): Restore usable_regs before
	call to record_conflict.

2002-03-21  Michael Matz  <matz@suse.de>

	* reload.c: Include <pre-reload.h> after <hard-reg-set.h>.

Sat Mar 16 12:33:21 2002  Denis Chertykov  <denisc@overta.ru>

	* pre-reload.h (ra_ref_type): New enum. Type of ra_ref.
	(RA_REF_SET_TYPE): New. Add type to ra_ref.
        (RA_REF_READ_P): New. Query type of ra_ref.
	(RA_REF_WRITE_P): Likewise.
	(RA_REF_CLOBBER_P): Likewise.
	(RA_REF_ADDRESS_P): Likewise.
	(RA_REF_RDWR_P): Likewise.
	(RA_REF_ID): Access of ra_ref id.
	(RA_REF_REGNO): Register number of ra_ref.
	(ra_ref): New. Structure for description one reference to
	register.
	(ra_ref): New type.
	(RA_INSN_DEFS): New. Defs for insn linked to list of ra_link's.
	(RA_INSN_USES): Likewise, but it's uses.
	(RA_INSN_REFS): New. Pointer to ra_refs structure for insn.
	(RA_REG_DEFS): New. Defs of reg linked to list of ra_link's.
	(RA_REG_USES): Likewise, but it's uses of regs.
	(RA_REG_REFS): New. Pointer to ra_refs structure for register.
	(ra_refs): New structure. Describe all defs and uses for one
	register or for one insn.
	(ra_info): New structure. Head of all ra_info ... information.
	(df2ra): New structure. Translate df ref to ra_ref.
	(DF2RA): New macro for easy access ra_ref by df ref.

	* pre-reload.c: Add PARAMS to all function declarations.
	(ra_info_obstack): New obstack.
	(ra_link_create): New. Create a link in def/use chain.
	(pseudo_clobbered_p): New.
	(push_pre_reload): Few bugfix.
	(pseudo_fits_class_p): New.
	(scan_addr_state): New struct. Auxilary structure for scan
	addresses.
	(scan_addr_func): New. Main address scanner.
	(scan_addr_create_ref): New. Create ra_ref from
	scan_addr_state.
	(collect_insn_info): New. Reload insn or collect defs/uses.
	(find_pre_reloads): Converted to collect_insn_info.
	(ra_insn_table_realloc): New. Increase the insn info table.
	(ra_reg_table_realloc): New. Increase the reg info table.
	(ra_info_init): New. Allocate and initialise dataflow memory.
	(ra_info_free): New. Free all the dataflow info.
	(debug_ra_insn_refs): New. Print all defs/uses for INSN from
	RA_INFO.
	(ra_info_add_insn_refs): New. Put pointer REFS (pointer to
	defs/uses for INSN) to ra_info->insns array.
	(ra_info_add_reg_refs): Add reference to ra_info->regs array
	for each register of INSN.
	(build_ra_refs_for_insn): New. List of defs/uses builded from
	plain arrays.
	(build_df2ra): New. Check ra_info by comparing it with the df
	info and build array for translation df ref to ra_ref.
	(pre_reload): Changet to use pre_reload_collect.
	(pre_reload_collect): New. Collect all ra_refs for all insns.

	* ra.c: Fix signed/unsigned types.
	(try_recolor_web): Probably serious bugfix. I lose '}' in
	previous commit.
	(reg_alloc): Usage ra_info_init, pre_reload,
	ra_info_free.
	
	(reg_alloc): Commented examples of usage ra_info
	... routines. I can't bootstrap with these.
	
	(web_conflicts_p): New. Helper for dump_web_conflicts.
	(dump_web_conflicts): Dump conflicts for web.
	(web_preferred_class): New. Return preferred class for web
	(web_class): New. Dumb and very simple.

Thu Feb 28 22:14:34 2002  Denis Chertykov  <denisc@overta.ru>

	* ra.c: (try_recolor_web): Restore original colors: spilled,
	allocated.

Sat Feb  2 18:58:07 2002  Denis Chertykov  <denisc@overta.ru>

        * pre-reload.h: New. Communication between reload.c, reload1.c and
        pre-reload.c.

        * pre-reload.c: New. Analog of reload pass which work with pseudos
        and classes.

        * ra.c (sort_and_combine_web_pairs): Disable 'for_move' to prevent
        abort inside 'combine'.
        (reg_alloc): Call pre_reload and rescan all regs.
        (debug_hard_reg_set): New. Print readable HARD_REG_SET.

        * regclass.c (regclass): Work with all regs which have sets or
        refs.
        (reg_scan_mark_refs): Count regs inside (clobber ...).
        (reload.c): Changed for use pre-reload.h.
        (reload1.c): Likewise.

        * Makefile.in (reload.o): Add dependency on pre-reload.h
        (reload1.o): Likewise.
        (pre-reload.o): New.

2002-01-19  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (ok): Wide webs coalesced to precolored ones take more
	than one hardweb.  Check all of them for non-conflict.
	(colorize_one_web): Even when using usable_regs try first
	the preferred colors of them.
	(try_recolor_web): Check mode and wide coalesced precolored webs.
	(regnos_coalesced_to_hardregs): New.
	(emit_colors): Initialize it.
	(init_ra): Don't skip some regs when looking for all regs for a mode.
	(remove_suspicious_death_notes): New.
	(reg_alloc): Call it.
	
2002-01-17  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (conflicts_between_webs): Also consider conflicts in
	uses of (uninitialized) hardregs.
	(reg_alloc): Disable update_equiv_regs(); it's wrong after
	allocation and before.

	* dwarf2out.c (gen_namespace_die): Remove.
	(dwarf_tag_name): Ignore namespace tag.
	(scope_die_for): Ignore namespace decls.
	(gen_decl_die, dwarf2out_decl): Likewise.

	* libstdc++-v3/src/gen-num-limits.cc: Use __LONG_LONG_MAX__.

2002-01-16  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (undef_to_size_word): Don't add the begin offset to the
	size.
	(init_ra): Instead aborting just ingore sizeless modes.

2002-01-11  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (struct web.changed): New.
	(detect_spill_temp): Use it to deny further spilling for marked
	webs.
	(emit_loads): Set it.
	(detect_non_changed_flag, reset_changed_flag): New.
	(actual_spill): Call them.
	(one_pass): Remember state of WEBS(SPILLED) in case it changes.

2002-01-09  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (struct web.useless_conflicts): New.
	(init_one_web, reinit_one_web): Allocate it.
	(record_conflict): Note half-useless conflicts in that bitmap.
	(reset_conflicts): Partially clear that bitmap.
	(reset_lists): Free it.
	(mark_refs_for_checking): New.
	(detect_web_parts_to_rebuild): Use it and useless_conflicts.
	(init_ra): abort() if modes are OK for regs but don't use them.

2002-01-04  Michael Matz  <matzmich@cs.tu-berlin.de>

	* df.c (df_ref_record): Correctly calculate SUBREGs of hardregs.
	(df_bb_reg_def_chain_create, df_bb_reg_use_chain_create): Only
	add new refs.
	(df_bb_refs_update): Don't clear insns_modified here, ...
	(df_analyse): ... but here.

	* longlong.h (count_trailing_zeros): Fix macro multiline continuation.

	* sbitmap.c (dump_sbitmap_file): New.
	(debug_sbitmap): Use it.

	* sbitmap.h (dump_sbitmap_file): Add prototype.

	* toplev.c (rest_of_compilation): Do regclass() only when old-ra,
	don't dump info when new-ra.

	* varray.h (struct varray_data_tag): New member 'web'.
	(VARRAY_INIT_WEB, VARRAY_WEB, VARRAY_PUSH_WEB, VARRAY_TOP_WEB): New.

	* ra.c (enum node_type): New members 'FREE', 'SIMPLIFY_SPILL' and
	'SIMPLIFY_FAT'.
	(struct tagged_conflict): Add 'size_word', delete 'size' and 'word'.
	(struct web_part): s/spanned_insns/spanned_deaths/.
	(struct web.orig_spill_temp, span_deaths, orig_spill_temp,
	orig_spill_cost, num_aliased, old_color, old_web, in_load, one_load,
	target_of_spilled_move, have_orig_conflicts, parent_web,
	orig_conflict_list, orig_usable_regs, bias_colors, prefer_colors,
	last_use_insn, pattern, temp_refs): New members.
	(struct web::span_insns, has_sub_conflicts): Remove members.
	(struct conflict): Delete.
	(ra_obstack): New static variable.
	(rtx_to_bits): Return an unsigned int.

	(set_undefined, free_all_lists, rematerializable,
	only_one_reaching_def): Delete functions.
	(unbrokengraph): Delete.
	(insns_with_death, death_insns_max_uid, ra_pass, live_at_end): New.
	(struct bb_begin_info): Rename to ra_bb_info, new members
	'regnos_mentioned' and 'live_throughout'.
	(all_defs_for_web, all_uses_for_web): Delete.
	(web_lists[]): New.
	(WEBS): Macro for accessing it.
	(simplify_wl, freeze_wl, spill_wl, simplify_spilled_wl,
	coalesced_nodes, colored_nodes, spilled_nodes, select_stack,
	simplify_fat_wl): Delete, now in web_lists[].  All users changed.
	(last_def_id, last_use_id, last_num_webs, last_max_uid,
	last_check_uses, remember_conflicts): New.
	(hardregs_for_mode[], byte2bitcount[]): New.
	(ID2WEB): New.
	(DUMP_*): New.
	(flag_ra_dump_only_costs, flag_ra_biased, flag_ra_ir_spilling,
	flag_ra_optimistic_coalescing, flag_ra_break_aliases,
	flag_ra_merge_spill_costs, flag_ra_spill_every_use,
	flag_ra_dump_notes): New.
	(struct ra_insn_info): New.
	(insn_df_max_uid, insn_df, refs_for_insn_df): New.
	
	(hard_regs_count, rtx_to_undefined, create_insn_info,
	free_insn_info, undef_to_size_word, defuse_overlap_p_1,
	find_web_for_subweb_1, copy_web, compare_and_free_webs,
	init_webs_defs_uses, parts_to_webs_1, check_conflict_numbers,
	free_all_mem, push_list_end, put_web_at_end, remove_web_from_list,
	simplify_p, dump_igraph_machine, dump_cost, dump_graph_cost,
	setup_renumber, check_df): Various new functions.

	(debug_msg): Use a bitmap as debug level.  All callers changed
	to use some level.
	(find_sub_conflicts, get_sub_conflicts): Use a combined size
	and word arguments.  Change callers.
	(undef_table[]): According changes to above.
	(undef_to_bitmap): Use undef_to_size_word.
	(prune_hardregs_for_mode): Use hardregs_for_mode[].
	(find_subweb): web->subreg_next is no circular list anymore.
	(find_subweb_2): Ditto and use one argument for size/word.
	(find_web_for_subweb): Macro, plus use parent_web.
	(add_subweb): Set parent_web.
	(add_subweb_2): One size/word argument.
	(remember_move): Move sanity checking for copy insns to here ...
	(live_out_1): ... from here.  Use insn_df[] instead DF_INSN_DEFS().
	Update spanned_deaths according to insns_with_deaths.  Don't
	check defs of fixed registers.
	(defuse_overlap_p): Now a macro calling ...
	(defuse_overlap_p_1): ... this, when necessary.  Use rtx_to_undefined.

	(ra_print_rtx_1op, ra_print_rtx_2op, ra_print_rtx_3op,
	ra_print_rtx_object, ra_print_rtx, ra_print_rtx_top, ra_debug_rtx,
	ra_debug_insns, ra_debug_bbi, ra_print_rtl_with_bb): My version of
	pretty-printing RTL.  Use them in the various dumps.

	(ra_alloc, ra_calloc): New.  Use the ra_obstack for allocating memory.
	Use it everywhere, where small objects were allocated by xmalloc
	or xcalloc.  At the same time never free that memory while working,
	but simply forget it.  Instead it's freed once at the end of reg_alloc.

	-- Optimisations for graph building --
	(update_regnos_mentioned, livethrough_conflicts_bb, init_bb_info,
	free_bb_info, live_in_edge): New.  Handle use-transparent blocks.
	(live_in): Don't use prev_real_insn(), too many function calls.
	Call live_in_edge() for handling basic block boundaries, which has
	optimisations, when the entered block is transparent for the use in
	question.
	(build_web_parts_and_conflicts): Don't allocate copy_cache here,
	nor the per basic block info.
	Call update_regnos_mentioned() for conservative detection of
	transparency.  Don't trace uses of fixed registers.  Only trace new
	or marked uses.  Call livethrough_conflicts_bb for dealing with
	transparent uses/blocks.

	-- Incremental building of interference graph --
	(init_one_web_common, reinit_one_web, reset_lists, reset_conflicts,
	realloc_web_parts, detect_web_parts_to_rebuild): New.

	(init_one_web_common): Old init_one_web.  Initialize also
	dlink.  Put web directly in the correct list.
	(init_one_web): Simply memset() everything, then call
	init_one_web_common.
	(reinit_one_web): Clears only necessary members.  Deal with
	new members.
	(init_web_parts): Sanity checks.  Sometimes clear web_parts[].ref
	member (incremental building).
	(parts_to_webs): Break out in parts_to_webs_1 and init_webs_defs_uses.
	Generally deal with incremental building.  Reuse free webs.
	Create artifical inverse webs.  use2web[] and def2web[] now contain
	the subwebs instead of webs.  All users of those arrays changed.
	(conflicts_between_webs): Use reset_conflicts() for later passes for
	incremental building.  Cache already created conflicts. 
	(alloc_mem): Use mostly realloc_web_parts.  Only allocate
	move_handled and insn_df[] (per create_insn_info) each round.
	(free_mem): Similar.  Don't free all memory here, but ...
	(free_all_mem): ... here.

	-- Interference region spilling --
	(build_inverse_webs, spill_same_color_p, is_partly_live_1,
	update_spill_colors, spill_is_free, emit_loads,
	detect_bbs_for_rewrite, detect_deaths_in_bb, reloads_to_loads,
	rewrite_program2): New.  Interference region spilling.
	
	(remember_slot, slots_overlap_p, delete_overlapping_slots,
	slot_member_p, insert_stores): New.  Emit stores slightly more
	clever than after each def.
	
	-- Rematerialisation --
	(memref_is_stack_slot, contains_pseudo, want_to_remat,
	detect_remat_webs):  New.  Detect rematerializable webs.
	Set web->pattern to the source rtx.  Emit that instead of a reload
	in emit_loads() later.
	
	(delete_useless_defs): New.  Delete insns which defined
	rematerializable webs which got spilled, and are now useless.
	(spill_coalescing): Don't coalesce rematerializable webs.  Update
	savings due to insns deleting.

	-- Local spill cost improvements --
	(spill_prop_savings, spill_prop_insert, spill_propagation,
	spill_coalprop): New.  Spill propagation and integration with
	spill coalescing.
	(try_recolor_web, recolor_spills): New.  Recoloring spilled
	webs if neighbors can be colored differently or spilled and that's
	cheaper.

	(actual_spill): Use spill_coalprop(), choose_spill_colors(),
	rewrite_program2(), insert_stores(), delete_useless_defs() and
	detect_web_parts_to_rebuild().

	-- Optimistic coalescing / coalesce breaking --
	(insert_coalesced_conflicts, comp_webs_maxcost,
	restore_conflicts_from_coalesce, unalias_web, copy_conflict_list,
	init_web_pairs, add_web_pair_cost, comp_web_pairs,
	sort_and_combine_web_pairs, aggressive_coalesce,
	aggressive_coalesce_2, extended_coalesce, extended_coalesce_2,
	check_uncoalesced_moves): New.  Optimistically coalesce
	nonconflicting webs.
	
	(add_conflict_edge): Remember current conflict list when needed.
	Update num_conflicts only when other web has correct type. (coalesce
	breaking)
	(moves_to_webs): Only fill web's moves list, when
	!flag_ra_optimistic_coalescing.  Otherwise that member isn't needed.
	This way no iterated coalescing is done at all when we want optimistic
	coalescing.
	(combine): Can combine webs with any type.  Merge spill cost
	into coalesce target of requested.  Merge _all_ conflicts
	into coalesce target (not only non-selected non-coalesced).
	
	-- Various stuff --
	(remember_web_was_spilled): Use hard_regs_count.  Maintain
	orig_usable_regs.  Web doesn't yet have any neighbors.
	(detect_spill_temps): Better classification of when webs can't be
	spilled, or are spill-temps but _can_ be spilled.
	(determine_web_costs): New.  Broken out of parts_to_webs.  Correctly
	calculate spill costs in terms of basic-block frequency (although
	this seems wrong sometimes).
	(make_webs): Use detect_remat_webs() and determine_web_costs().
	(put_web): Use web_lists[] instead of a directly named list header.
	(decrement_degree): Use remove_web_from_list.
	(combine): In case of partial conflicts try to find a corresponding
	part in the target.  Relax spill_temp flag when combining
	constrained with less constrained webs.
	(default_spill_heuristic): Coalesced webs are cheaper.  Prefer also
	webs spanning more deaths.
	(color_usable_p, get_biased_reg): New.  Checks if a certain color
	is usable for a web, and get a available color for a web,
	prefering biased colors.
	(calculate_dont_begin): New.  Detect colors which are forbidden
	as begin colors for a web according to already colored neighbors.
	Broken out from ...
	(colorize_one_web): ... here.  Use calculate_dont_begin.  Try to
	use the color this web got the last round first.  Then try biased
	colors.  Better and more methods to respill neighbors for
	spill_temps or non-spills.  Maintain bias_colors for neighbors when
	requested.  When optimistic coloring already break coalescings for
	spilled webs here and recolor.
	(rewrite_program): Maintain cost variables.  Swap order of
	load and store emitting.  Emit uses here only if
	flag_ra_spill_every_use.  Emit stores only when a stack-slot was
	allocated.  Now not called anymore.  Stores are emitted by
	insert_stores.
	(one_pass): If requested call aggressive_coalesce() and
	extended_coalesce_2().  Use dump_igraph_machine().  Check the
	graph after coloring (check_colors()), break any remaining coalesces
	to spills if reqeusted and try to recolor spilled
	webs (recolor_spills).
	(dump_constraints): Temporarily change final colors into pseudo
	rtx's.  Call constrain_operands() to check if the insns already
	strictly match, or not.
	(init_ra): Don't add eliminable registers into never_use_colors.
	Reload will fix this up, if it's finally not usable.
	Initialize byte2bitcount[], hardregs_for_mode[], insns_with_deaths
	and ra_obstack.
	(setup_renumber): Free ra_reg_renumber only if necessary.
	(reg_alloc): Initialize debug level to some usefull values.
	Call regclass() here (instead in toplev.c).  Reset some global
	vars.
	
Sun Dec 23 17:40:53 2001  Denis Chertykov  <denisc@overta.ru>

	* ra.c (get_free_reg): Remove my wrong changes.

Thu Dec 20 23:57:05 2001  Denis Chertykov  <denisc@overta.ru>

	* ra.c (get_free_reg): Check hardregs for dont_begin_colors.

2001-09-14  Michael Matz  <matzmich@cs.tu-berlin.de>

	reload1.c (reload): don't delete dead throwing insns.

	gcse.c (store_motion): run a cleanup_cfg(0) before anything.

	ra.c (NO_REMAT): Define.
	(live_over_abnormal, struct curr_use.live_over_abnormal): New.
	(live_in): Update it.
	(build_web_parts_and_conflicts): Initialize it.
	(parts_to_web): Use it to initialize...
	(struct web, live_over_abnormal): ... this, new.
	(conflicts_between_webs): Use that to handle STACK_REGS.
	(init_one_web, select_spill, colorize_one_web): Handle was_spilled
	as bitmap, not int.
	(combine): Conflict with all hardregs in a multi-word web.
	(colorize_one_web): Make three passes to find non-spilled neighbors.
	(rewrite_program): Use emit_move_insn() instead emit_insn().
	(reg_alloc): Change order of find_basic_blocks() and cleanup_cfg().

2001-08-30  Michael Matz  <matzmich@cs.tu-berlin.de>

	ra.c (ok): Check target for validness of mode.

	from Denis Chertykov  <denisc@overta.ru>:
	* ra.c (get_free_reg): Don't check successive hardregs for valid
	mode.

2001-08-28  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (combine): Merge usable_regs of both webs.

2001-08-20  Dan Nicolaescu  <dann@ics.uci.edu>

	* ra.c (struct web): Reorder members and make some of them
	bitfields to reduce size.

2001-08-28  Michael Matz  <matzmich@cs.tu-berlin.de>

	* gcse.c (store_killed_in_insn): Even pure/const calls kill
	argument stack slots, and all things aliased to
	CALL_INSN_FUNCTION_USAGE.

	* toplev.c (rest_of_compilation): Preserve basic blocks in
	delete_trivially_dead_insns(), initialize
	rebuild_label_notes_after_reload.

	* i386/i386.h (LIMIT_RELOAD_CLASS): Also limit LEGACY_REGS.

	* ra.c (NO_REMAT): New macro.
	(struct df *df): Staticify.
	(ra_max_regno, ra_reg_renumber): New.
	(struct undef_table_s): Also handle index 15.
	(undef_to_bitmap): case 0xF: remove, default: only handle
	lengths as powers of two.
	(live_out_1): Remove the x86 hack.
	(freeze): Call freeze_moves() again.
	(emit_colors): Initialize ra_reg_renumber[] instead of reg_renumber[].
	(init_ra): Init ra_reg_renumber.
	(rematerializable): Return 0 if NO_REMAT.
	(setup_renumber): New...
	(reg_alloc): ... call it.  Call update_equiv_regs() after allocation.
	Don't calculate DU- and UD-chains if NO_REMAT.
	Preserve basic blocks over delete_trivially_dead_insns().
	Call allocate_reg_info() to not allocate reg_renumber.

2001-08-18  Daniel Berlin  <dan@cgsoftware.com>

	* ra.c (live_out_1): Temporary hack to make x86 compile. Someone
	please fix this the right way. 

2001-08-17  Daniel Berlin  <dan@cgsoftware.com>

	* ra.c (assign_colors): Stop trying to colors webs with no uses.
	We can get into infinite spill loops this way, and it's pointless.
	(we only need them for conflicts, not for coloring, AFAIK)

	From Dan Nicolaescu <dann@godzilla.ics.uci.edu>:
	* Makefile.in (ra.o): Add reload.h o the dependencies.
	* ra.c: Include reload.h, so MEMORY_MOVE_COST is always defined.

2001-08-15  Daniel Berlin  <dan@cgsoftware.com>

	* ra.c (splits_init): New function, initialize split data
	structures/determine costs in terms of loads/stores.
	(rematerializable): Handle reg_defs properly.
	(parts_to_webs): Calculate spill cost on our own, taking remat
	into account.
	(init_one_web): Init spill cost to 0 now that we calculate it on
	our own.
	(struct split_range): New struct, keeping track of stores/loads
	needed for live ranges.
	(reg_alloc): Don't call reg_scan and regclass at the end, they
	screw reg_renumber.

	* df.[ch]: Use sbitmaps for reaching uses/defs instead of bitmaps.
	The kill set is greedily set, so it's very very dense, and we waste 
	memory/time using bitmaps for it.

	* gcse.c: Begin to fix store motion, global store elimination
	works okay now. 

2001-08-07  Daniel Berlin  <dan@cgsoftware.com>

	* ra.c (get_free_reg): Revert Denis's change, it caused subregs to
	get allocated to registers of the wrong mode on SPARC. I don't
	believe it's correct.
	(rewrite_program): Mark modified insns with df_insn_modify.
	Properly emit pseudos for rematerialized things, if possible, 
	in order to split our live range.
	Move definition of df to top of file, making it global, so we can
	stop passing it around for no good reason.
	
	* df.c (df_insn_modify): Grow the UID table if necessary, rather
	than assume all emits go through df_insns_modify.

	Add dj graph stuff for loop finding/block depth (hopefully will be
	moved to flow.c at some point)
	(find_nesting_depths): New function.
	(dominates): New function.
	(DFS_DJ_graph): New function.
	(visit_successors): New function.
	(dfs): New function.
	(reach_under): New function.
	(sp_back_edge): New function.
	(dom_parent): New function.
	(walk_dom_tree): New function.
	(calculate_pre_post): New function.
	(toplevel): New variables, pre/post order info, depths array for
	blocks, domtree is a dominator tree.
	* dominance.c (new_dom_tree): New function.
	(destroy_dominator_tree): New function.
	(add_dom_node): New function.
	(dom_node_for_block): New function.
	(add_dom_edge): New function.
	(dom_tree_from_idoms): New function.
	(dump_dom_tree): New function.

	* basic-block.h (dom_node): New struct.
	(dom_edge): New struct.
	(dom_graph): New struct.
	(dominator_tree): New typedef.
	(dom_tree_from_idoms): New prototype.
	(DTREE_N_EDGES): New macro.
	(DTREE_N_NODES): New macro.
	(DTREE_NODE): New macro.
	(DTREE_EDGE): New macro.
	(dom_node_for_block): New prototype.
	(dump_dom_tree): New prototype.
	(destroy_dominator_tree): New prototype.
	(linked_list): New struct.
	(dj_graph_info): New struct.
	(scc_info): New struct.

2001-08-06  Daniel Berlin  <dan@cgsoftware.com>

	Mainline merge of gcc stuff, fixes a bunch of flow bugs that had
	been fixed, etc.
	
	* ra.c (reg_alloc): Do only what is necessary for life analysis,
	rather than PROP_FINAL and whatnot.
	Also, fix all the comparison warnings and such.
	

2001-08-06  Daniel Berlin  <dan@cgsoftware.co>

	* gcse.c (gcse_main): Disable store motion, it's completely broken
	in it's current state.
	(simple_mem): Undo #if 0'ing, since we never seem to move loads who
	address varies *anyway*.

	* ra.c (reg_alloc): Ditto.
	
Sun Aug  5 14:16:46 2001  Denis Chertykov  <denisc@overta.ru>

        Restore ra.c version 1.1.2.28

	* ra.c (reg_alloc): Correct `max_regno' after rescan registers
	preferences. 

2001-08-03  Daniel Berlin  <dan@cgsoftware.com>

	* ra.c (coalesce): Comment out conservative test, in preparation
	for optimistic coalescing. Also fixes x86 (though this is a side
	effect). 

Wed Aug  1 23:40:05 2001  Denis Chertykov  <denisc@overta.ru>

	* ra.c (undef_to_bitmap): Handle more variants of *undefined.

Wed Aug  1 23:35:02 2001  Denis Chertykov  <denisc@overta.ru>

	* ra.c (combine): combine add_hardregs's of U and V.
	(ok): Remove check for combining a web with a precolored web.
	Check a precolored web for usable_regs.

	(rewrite_program): Since we always call `regclass' if
	`changed' we can emit a new pseudos which will have a new reg
	class preferences.

Mon Jul 30 20:21:07 2001  Denis Chertykov  <denisc@overta.ru>

	* ra.c (get_free_reg): Wrong test removed.
	(reg_alloc): Fix formatting.

2001-07-29  Daniel Berlin  <dan@cgsoftware.com>

	Add support for simple rematerialization (not lattice based right
	now, very trivial, but already has a large positive impact).

	* ra.c (rematerializable): New function. Determine if a value is
	rematerializable. 
	(parts_to_webs): If it's rematerializable, modify the spill cost
	to be the cost of rematerializing the RTL in question.
	(rewrite_program): If we can rematerialize, do it.
	(toplevel): New variable, emitted_remat.
	(dump_ra): Print out number of rematerializations.
	(reg_alloc): Init emitted_remat to 0.

2001-07-29  Daniel Berlin  <dan@cgsoftware.com>

	* df.c (df_rd_global_compute): Add successors to worklist, not
	current item.
	(df_ru_global_compute): Ditto.
	
	* df.[ch]: Update to mainline, which contains fixes for register 
	liveness over calls.

2001-07-26  Daniel Berlin  <dan@cgsoftware.com>

	* gcse.c: Use rtl_dump_file instead of gcse_file, remove gcse_file, 
	and parameter file to gcse_main.
	(build_store_vectors): Take st_antloc into account as well.
	
	* rtl.h: Change gcse_main prototype.

	* toplev.c: Don't pass file to gcse_main.

	* ra.c : (default_spill_heuristic): Add one to num_conflicts, 
	so that a web with 0 conflicts doesn't have a 0 spill cost.
	(init_one_web): If we don't think we have any registers we can put
	this thing in, ever, something is wrong, so abort (I.E. if
	web->num_freedom == 0, abort)
	(reg_alloc): Call reg_scan_update and regclass if stuff changed,
	since we'll have more registers now.

	* regclass.c (reg_scan_mark_refs): When we increase REG_N_SETS,
	increase REG_N_REFS (like flow does), so that regclass doesn't
	think a reg is useless, and thus, not calculate a class, when it
	really should have.

	* flow.c (propagate_block): When prev is null, but we haven't hit
	the beginning of the block, we crash.  So just set prev to
	something other than null at the start, and stop if it becomes
	null. I think this is just a symptom of some *other* problem,
	but I can't figure out what it is.
	

2001-07-25  Daniel Berlin  <dan@cgsoftware.com>

	* gcse.c: Store motion stuff from patch submitted to mainline.

	* ra.c: Call store motion when we are done.

	* rtl.h: Add store_motion prototype.
	
2001-07-20  Daniel Berlin  <dan@cgsoftware.com>

	* params.def: Turn the C++ inlining default down like it is on the
	mainline and 3.0 branch, so we can work with C++ and have
	reasonable compile times.

	* ra.c (hardregset_to_string): You meant HOST_WIDE_INT_PRINT_HEX,
	not "%x".  Also, just increase the static string length to avoid
	overflow, as well.
	Fixes crash on powerpc.

2001-07-20  Michael Matz <matzmich@cs.tu-berlin.de>

	* ra.c : (rtx_to_bits): Use SUBREG_BYTE, instead of calculating
	things from SUBREG_WORD.
	(defuse_overlap_p, find_subweb): Ditto.
	(dump_igraph, dump_ra): s/SUBREG_WORD/SUBREG_BYTE/ .
	(colorize_one_web): Simulate SUBREG_WORD.
	(rewrite_program): Don't emit (subreg(mem ...)).

	* rtl.h : (reg_spill_cost): Add prototype.

	* cp/optimize.c : (inlinable_size_p): Replace with dummy.

2001-07-13  Michael Matz <matzmich@cs.tu-berlin.de>
 
        preliminar dump_constraints()
 
        * ra.c : (struct web_part): New member crosses_call.
        (struct web): Ditto.
        (union_web_parts): Merge it.
        (live_out_1): Set it.
        (parts_to_webs): Copy it.
        Restore use-undefined for each DEF on one insn,
        and only update it after all the effects of it have been seen.
        (init_web_parts): Don't initialize web_part.sub_conflicts member.
        (dump_constraints): New.
        (reg_alloc): Call it.
        Don't dump complete RTL for each pass.

2001-07-07  Michael Matz <matzmich@cs.tu-berlin.de>
 
        * ra.c : (copy_insn_p): Subregs in move insns don't prevent them
        from being copy insns.
        (remember_move): Only add REG-REG moves into coalesce list.
        (live_out_1): Use subreg copies to limit conflicts made for copy
        insns.
        Kill some #if 0 code.

2001-07-07  Michael Matz <matzmich@cs.tu-berlin.de>
 
        * ra.c : (colorize_one_web): Added int argument.  Caller changed.
        Use it to limit recoloring an unsuccessful spill attempt.
        (hardreg2web): New.
        (handle_asm_insn): Prepare for adding conflicts to hardreg according
        to constraints.
        (init_webs_parts): Also merge webs for hardregs, if they have no
        def.
        (parts_to_webs): Initialize hardreg2web with webs for all hardregs.
        Adjust web->id initialization.
        (simplify_fat_wl): New.
        (free_all_lists): Free it.
        (put_web): Fill it.
        (simplify): Pop it.
        (one_pass): Test it.

2001-07-06  Michael Matz <matzmich@cs.tu-berlin.de>
 
        This makes the whole SPECint2000 (besides eon) work.
 
        * ra.c : (struct bb_begin_info): New.
        (visited): Remove.
        (live_in): Before processing predecessors of a block, check if that
        wasn't already done.
        Remember use-undefined over multiple predecessors blocks.
        (build_web_parts_and_conflicts): Don't allocate/free visited.
        Allocate and free a bb_begin_info entry for all basic blocks.
 
        * reload.c : (push_reload): Don't use REG_DEAD notes for finding
        a reg_rtx for input reloads.
 
        * reload1.c : (scan_paradoxical_subregs): Commenting wrongness of
        reg_max_ref_width[] setting.

2001-07-05  Michael Matz <matzmich@cs.tu-berlin.de>
 
	* ra.c : (copy_insn_p): Bitfield extraction are no simple copy
	insns.

2001-07-03  Michael Matz  <matzmich@cs.tu-berlin.de>
 
        * ra.c : (live_out_1): Make conflicts of yet undefined parts to
        the def even, if that def covers the same regno but no undefined
        bits.
        #if 0 NO_CONFLICT support.
        (add_conflict_edge): Early out if parent webs are the same.
        (colorize_one_web): New locals long_blocks, best_long_blocks,
        fat_colors.
        Only look at non-coalesced conflict webs for fat neighbors.
        Choose color which destroys the fewest long blocks.
        Color web, even if constraining.

2001-07-03  Michael Matz <matzmich@cs.tu-berlin.de>
 
        First naive version of spill coalescing.
 
        * ra.c : (spill_coalescing): New.
        (actual_spill): New.
        (one_pass): Use it.
        (allocate_spill_web): Don't abort if already having a stack slot.
        (rewrite_program): Deal with webs coalesced to spilled ones.

2001-06-30  Michael Matz <matzmich@cv.tu-berlin.de>
 
        * ra.c : (colorize_one_web): Two passes over conflicts trying to
        spill colored webs.  First potential-spill ones, then others.
        (dump_ra): Indicate dead (useless (literally) webs).

2001-06-28  Michael Matz  <matzmich@cs.tu-berlin.de>

        * ra.c : (get_free_reg): New HARD_REG_SET argument.  Callers changed.
        Use this as a set of forbidden begin hard-regs.
        Test if all hardregs are OK for the mode (???).
        (hardregset_to_string): New.
        (colorize_one_web): Use it.
        Deduce forbidden begin regs instead of non-free regs.

2001-06-28  Michael Matz  <matzmich@cs.tu-berlin.de>

        bootstrap again (without regressions)
 
        * ra.c : (struct web.conflict_list): New member.
        (struct sub_conflict, struct conflict): New.
        (struct conflict_link): Remove member "t", add member "sub".
        (conflicts): Remove.
        (rewrite_program): Remove argument.  Callers changed.
        (add_conflict_edge): Don't iterate conflict list to add fake conflicts.
        Remove sub conflicts if a whole conflict is added.
        (parts_to_webs): Don't alloc conflicts.
        Make sup_igraph a num_webs*num_webs bitmap.
        (remember_web_was_spilled): Don't deal with fake conflicts.
        (free_mem): Ditto.  Change to two level conflicts approach.
        (decrement_degree): Ditto (both).
        (simplify, ok, conservative, combine, colorize_one_web): Ditto.
        (coalesce): Test bits [a,b] and [b,a] in sup_igraph.
        (rewrite_program): Iterate over webs, not defs/uses.
        (emit_colors): Don't rely on reg_renumber to color aliased webs
        the same, but instead use the same reg rtx (the same pseudo).
        (delete_insn_bb): Copy from dce.c.
        (deleted_move_insns): New.
        (delete_moves): New.
        (reg_alloc): Use it.
        (emitted_spill_loads, emitted_spill_stores): New.
        (rewrite_program, dump_ra, reg_alloc): Update, use, initialize them.

2001-06-20  Michael Matz  <matzmich@cs.tu-berlin.de>

	subreg handling
	
	* df.c (df_uses_record): case SET, GET_CODE(dst)==SUBREG: don't
	add a use for the def, if it's wider than word, and the subreg isn't
	paradoxical.

	* df.h (DF_REF_REAL_LOC): New.
	(DF_REF_LOC): Define with help from above.

	* ra.c : Don't define OLD_DF_INTERFACE, #include "tm_p.h".
	(struct tagged_conflict): New.
	(struct web_part): Delete conflicts, add sub_conflicts (of the
	above type).  Adjust users of that field.
	(struct web): Add has_sub_conflicts, artificial.
	(struct conflict_link): New.
	(union_web_part_roots): Use them.
	(rtx_to_bits, find_sub_conflicts, get_sub_conflicts,
	undef_to_bitmap): New.
	(regs_overlap_p): Rename to...
	(defuse_overlap_p): this.
	(live_out_1): Use them.
	(find_subweb_2, add_subweb_2, find_web_for_subweb,
	regs_overlap_p): New.
	(add_conflict_edge): Breakout from ...
	(record_conflict): here.
	(sup_igraph): New, (de)allocate where also igraph is (de)allocated.
	(struct visit_trace, num_subwebs, SUBWEB_P, BYTE_BEGIN,
	BYTE_LENGTH): New.
	(add_conflict_edge): Add a fake conflict (->s==NULL).
	Set sup_igraph bit.
	(parts_to_webs): Create needed artificial webs.
	(conflicts_between_webs): Create conflict lists out of sub_conflicts.
	(remember_web_was_spilled, simplify, ok, conservative, combine,
	colorize_one_web): Deal with fake conflicts.
	(coalesce): Use sup_igraph instead igraph to prevent coalescing.
	(detect_spill_temps, build_worklists, emit_colors): Only deal with
	full webs.
	(colorize_one_web): Also try to spill smaller already colored
	neighbors in case we happen to spill a spill-temp.
	(rewrite_program): Only load or store the part which really is needed
	by the insn (i.e. subreg).
	(vim:): modeline adjusted ;-)
	
2001-04-29  Michael Matz  <matzmich@cs.tu-berlin.de>

	Infrastructure for subreg handling.

	* df.h (DF_REF_REAL_REG): New.
	(DF_REF_REGNO, DF_REF_REG, DF_REF_LOC): Change to support subregs.

	* df.c (HANDLE_SUBREG): #define, all other code is #ifdef'd on this.
	(df_ref_record): handle subregs (don't abort, canonicalize).
	(df_def_record_1, df_uses_record): don't overread all subregs.

	* ra.c (*): commentary adjusted, use DF_REF_* whereever possible.
	(struct web): new fields .orig_x and .subreg_next.
	(struct curr_use): New.
	(live_out_1, live_out, live_in): takes now a (struct curr_use *),
	callers changed.
	(regs_overlap_p): New.
	(live_out_1): Use it.
	(init_one_web): takes a rtx, instead a regno.
	(find_subweb, add_subweb): New.
	(parts_to_webs): Use them.
	(set_undefined): New.
	(build_webs_and_conflicts): Use it.
	(union_web_part_roots): Don't merge conflicts here for every case.
	(live_out_1): handle partly overlaps for conflicts.
	(parts_to_webs): deal with and remember subwebs (webs corresponding
	to subregs).
	(conflicts_between_webs): handle conflicts in non-roots.

2001-04-29  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (moves_to_webs): don't try to handle 'complicated' copy
	insns.

2001-02-25  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (colorize_one_web): comment about our strategy.
	(get_free_reg): return also a pref_reg==0.

Sun Feb 25 22:14:13 2001  Denis Chertykov  <denisc@overta.ru>
 
         * ra.c (get_free_reg): Use preferred register order for selection.
         (colorize_one_web): Use call_used_reg_set as preference.
         (init_ra): arg,frame,stack pointers can use few hard regs.

2001-02-24  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (conflicts_between_webs): new function, split out from ...
	(parts_to_webs): ... here, new argument part2web.  Change callers.
	(make_webs): new function, calling the above in the right order;
	partly split out from ...
	(build_i_graph): ... here.
	(everywhere): format some comments.

2001-02-23  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (colorize_one_web): only use array-ref, if HARD_REG_SET
	really is an array (in debug-output).

2001-02-20  Michael Matz  <matzmich@cs.tu-berlin.de>

	Bootstraps again on x86.

	* ra.c (live_out_1): preliminar support for REG_NO_CONFLICTS blocks.
	(init_one_web): base spill_cost on reg_spill_cost().
	(colorize_one_web): More Bad Web (tm) handling.  Now recursively
	trying to spill already colored long neighbors to prevent spilling
	short living Bad Webs.
	(everywhere): some commentary, finally merged Daniel's changes,
	so there exists one ra.c now ;).

	* sibcall.c (call_ends_block_p): Honor return of
	identify_call_return_value.

	* Makefile.in (BOOT_CFLAGS): add -O2 again.
	(LIBGCC2_CFLAGS): remove -save-temps, add -O2.

	* toplev.c (flag_new_regalloc): default to 1.
	(rest_of_compilation): honor -fno-new-ra to fall back to
	local/global register allocation (the mainline code).  I like
	it to be able to test if something (like new crashes) depends on
	the new register allocator.

2001-02-20  Michael Matz  <matzmich@cs.tu-berlin.de>

	Argh.  Daniel had merged the mainline, and I was using a
	different version.  Conflicts over conflicts.  ;)
	* ra.c (parts_to_webs): calculate weight of webs as
	\sum_i(8^{loop_depth(i)}), with i all uses/defs.
	(colorize_one_web): Try even more hard not to spill a short live
	web, which is colorable according the number of conflicts, but not
	according to actual constrains (think multi hard-regs, but only
	non-consecutive blocks free).  I should call them Bad Webs (tm).

2001-02-17  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (struct web_parts) : new structure.
	(find_web_part, union_web_parts, init_web_parts, parts_to_webs,
	detect_spill_temps, connect_rmw_web_parts,
	build_web_parts_and_conflicts, put_web, put_move): new functions.
	(queue_conflict, apply_conflict, relink_web, clean_conflicts,
	init_webs, fill_misc_web_info, connect_rmw_webs,
	build_webs_and_conflicts, mark_simplify): remove functions.
	(current_web, queued_conflicts): remove.
	(live_in, live_out): add "struct web_part*" argument. Callers changed.
	(def2web): now a "struct web **".
	(visited): now a "unsigned int *".
	(visited_pass): tick counter, instead of clearing visited each use.
	(id2web): new variable (int -> struct web*). Makes webs dynamically
	allocatable.
	(num_webs): new var.
	(struct copy_p_cache): new struct.
	(copy_cache): new var.
	(copy_insn_p): use them.
	(live_in, live_out): use visit_trace to speed up building webs by
	some magnitudes, use web_parts instead full webs.
	(dump_number_seen): new function (debug output).
	(moves_to_webs): use smallest numbered of webs for moves involving
	more than one source/dest.
	(get_free_reg): return only last_resort, if really no other reg found.
	(emit_colors): first change all uses, then defs; try to update
	basic block live info (still not correct).
	(default_spill_heuristic): use w->spill_cost instead reg_spill_cost().
	(everywhere): fixed most (all?) unsigned/signed warnings.

	* df.c (df_insn_debug): destaticify.
	(df_chain_dump_regno, df_insn_debug_regno): new functions (similar
	to those without _regno).
	
2001-02-19  Daniel Berlin  <dberlin@redhat.com>

	Mainline merge performed.
	
	* ra.c: Rename mm_reg_alloc to reg_alloc.
	Commented file some more.
	* toplev.c: ditto.

2001-02-09  Daniel Berlin  <dberlin@redhat.com>

	* toplev.c: Add mm_reg_alloc prototype.
	(rest_of_compilation): Add mm_reg_alloc, remove init_new_regalloc.

	* ra.c: New file, replaces "old" new register allocator

	* new-regalloc.[ch]: Removed.

	* cbitmap.c: New file, compressed bitvectors.

	* cbitmap.h: New file, compressed bitvectors.

	* Makefile.in: Dependencies for new ra.c, cbitmap.c, add ra.o and
	cbitmap.o to libbackend.a.

2001-02-06  Daniel Berlin  <dberlin@redhat.com>

	* basic-block.h: Add flow_depth_first_order_compute prototype.

	* flow.c (flow_depth_first_order_compute): De staticify, so we can
	use it elsewhere.

2001-02-03  Daniel Berlin  <dberlin@redhat.com>

	* bitmap.h : Add dump_bitmap, bitmap_zero, bitmap_union_of_diffs,
	bitmap_a_or_b, bitmap_a_and_b, bitmap_first_set_bit,
	bitmap_last_set_bit. All for compatibility with sbitmap's.

	* bitmap.c (bitmap_zero): New function.
	(bitmap_union_of_diffs): New function.
	(bitmap_first_set_bit): New function.
	(bitmap_last_set_bit): New function.

	* df.h: Change to use bitmaps, not sbitmaps, to save memory.

	* df.c: Change to use bitmaps, not sbitmaps, to save memory.


2001-02-02  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Use debug_msg in rest of places.
	(adjacent): Fix same type of traversal through regset problem.
	(is_reg_candidate): Also a reg candidate if it has a use.

2001-02-02  Geert Bosch  <bosch@gnat.com)

	* new-regalloc.c: Add debug_msg to output based on debug_regalloc
	level, clean up some of the if+fprintf pairs to use it instead.
	(make_worklist): Don't clear bit while running through bitmap, as
	it screws up the traversal.
	
2001-02-02  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Add warning about something i learned the hard
	way using the hashed sets. This is part of the preparation for
	moving the hashed set stuff into seperate files (hset.h, hset.c),
	or libiberty.
	

2001-02-02  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Large amount of variable renaming and formatting
	fixups. Hope i caught them all.

2001-02-01  Richard Henderson  <rth@redhat.com>

	* new-regalloc.c (assign_regs): Insert missing "else" between
	biased and non-biased code.  Try the preferred register class
	before the alternate register class, not at the same time.

2001-02-01  Richard Henderson  <rth@redhat.com>

	* toplev.c (NEW_REGISTER_ALLOCATOR): Remove.
	(dump_file_index, dump_file): Remove lreg dump file.
	(rest_of_compilation): Don't ifdef NEW_REGISTER_ALLOCATOR.
	Use the global register time var and dump files for the
	new allocator.
	* timevar.def (TV_LOCAL_ALLOC): Remove.

2001-02-01  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Convert sbitmaps to regsets.
	(finish_new_regalloc): Delete ig_node's as well.
	(ig_node_delete): Free memory for ig_node's properly.
	(find_move_cost): Fix cost calculation.
	

	* new-regalloc.c (coalesce): Fixed test for constrainedness.
	(top level): Include new-regalloc.h

2001-01-31  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (precolored_OK): Fix heuristic.
	(reg_freedom): Cache register freedoms, they don't change.
	(find_reg_given_constraints): Remove backwards direction, it's useless.
	(assign_regs): Start to implement biased coloring.
	(*): Dump debug info to rtl_dump_file, rather than stderr.

2001-01-30  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (perform_new_regalloc_init): Handle fixed
	registers, as they interfere with everything
	(OK): rename to precolored_OK.
	(precolored_OK): Handle fixed registers, since we can't
	coalesce them with anything.

2001-01-20  Richard Henderson  <rth@redhat.com>

	* new-regalloc.c: Canonicalize formatting.

2001-01-29  Daniel Berlin  <dberlin@redhat.com>

	* ssa.c  (mark_phi_and_copy_regs): Test rtx against 0, not NULL,
	and test pattern against 0 too.
	
	* reload1.c (finish_spills): Call find_reg_given_constraints
	rather than retry_global_alloc.

	* df.c (df_insn_regno_def_p): Reverse return values so that it
	does what the function says it does, so that dataflow analysis of
	call clobbered registers works.

	* new-regalloc.h: Add definitions of external functions, stop
	including other files.
	
	* new-regalloc.c: Move inclusion of those files to here.
	(perform_new_regalloc_init): Fix data flow analysis problem.
	(rewrite_program): Change call to reload to tell it we are calling
	from the global register allocator, now that it calls the right
	retry routine.

2001-01-29  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (find_reg_given_constraints): Fix the *other* bug
	in spilling, causing things taking up > 1 register to be spilled
	if register 0 was free. Duh. (The arguments to x_okay_in_direction
	were off by one).
	(conservative): freedom would be max of the reg_freedom's of the
	lhs and rhs, not the max of the size of the preferred class of
	each (though it's close).

2001-01-28  Daniel Berlin  <dberlin@redhat.com>

	* Makefile.in (STAGE1_CFLAGS): Remove -O3, sorry about that.

	* new-regalloc.c (find_reg_given_constraints): Fix bug in spilling
	(notOK isn't used anymore).
	Pass mode along to x_okay_in_direction.
	(x_okay_in_direction): Add mode argument, use it.
	(find_costliest_move): Fix REGISTER_MOVE_COST call so that it has
	proper arguments.

Sun Jan 28 21:11:10 2001  Denis Chertykov  <denisc@overta.ru>

	* new-regalloc.c (find_reg_given_constraints): test result with
	`HARD_REGNO_MODE_OK'.

	* new-regalloc.h: add `#include "tm_p.h"'
	
2001-01-28  Daniel Berlin  <dberlin@redhat.com>

	* sbitmap.h (EXECUTE_IF_SET_IN_SBITMAP_REV): New macro, needed for
	dataflow analysis.
	(sbitmap_realloc): New function definition.

	* sbitmap.c (sbitmap_realloc): New function, change size of an
	already-allocated sbitmap.

	* toplev.c (rest_of_compilation): Stop calling old allocators,
	call new allocator instead.

	* rtl.h: Add reg_spill_cost definition.

	* reload1.c: De-staticify alter_reg.

	* reload.h: Make alter_reg externally visible (probably need it
	for spill code insertion).

	* new-regalloc.[ch]: New files. New register allocator.

	* df.[ch]: New files. Dataflow analysis.

	* local-alloc.c: Make update_equiv_regs non-static, we need it in
	the new allocator.

	* Makefile.in (OBJS): Add df.o, new-regalloc.o

	* regclass.c (regclass): Don't free costs, need it for spill costs.
	(reg_spill_cost): New function, give us cost if we have to
	put the register in memory.
	
	

