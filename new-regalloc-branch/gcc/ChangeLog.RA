2001-07-20  Michael Matz <matzmich@cs.tu-berlin.de>

	* ra.c : (rtx_to_bits): Use SUBREG_BYTE, instead of calculating
	things from SUBREG_WORD.
	(defuse_overlap_p, find_subweb): Dito.
	(dump_igraph, dump_ra): s/SUBREG_WORD/SUBREG_BYTE/ .
	(colorize_one_web): Simulate SUBREG_WORD.
	(rewrite_program): Don't emit (subreg(mem ...)).

	* rtl.h : (reg_spill_cost): Add prototype.

	* cp/optimize.c : (inlinable_size_p): Replace with dummy.

2001-07-13  Michael Matz <matzmich@cs.tu-berlin.de>
 
        preliminar dump_constraints()
 
        * ra.c : (struct web_part): New member crosses_call.
        (struct web): Dito.
        (union_web_parts): Merge it.
        (live_out_1): Set it.
        (parts_to_webs): Copy it.
        Restore use-undefined for each DEF on one insn,
        and only update it after all the effects of it have been seen.
        (init_web_parts): Don't initialize web_part.sub_conflicts member.
        (dump_constraints): New.
        (reg_alloc): Call it.
        Don't dump complete RTL for each pass.

2001-07-07  Michael Matz <matzmich@cs.tu-berlin.de>
 
        * ra.c : (copy_insn_p): Subregs in move insns don't prevent them
        from being copy insns.
        (remember_move): Only add REG-REG moves into coalesce list.
        (live_out_1): Use subreg copies to limit conflicts made for copy
        insns.
        Kill some #if 0 code.

2001-07-07  Michael Matz <matzmich@cs.tu-berlin.de>
 
        * ra.c : (colorize_one_web): Added int argument.  Caller changed.
        Use it to limit recoloring an unsuccessful spill attempt.
        (hardreg2web): New.
        (handle_asm_insn): Prepare for adding conflicts to hardreg according
        to constraints.
        (init_webs_parts): Also merge webs for hardregs, if they have no
        def.
        (parts_to_webs): Initialize hardreg2web with webs for all hardregs.
        Adjust web->id initialization.
        (simplify_fat_wl): New.
        (free_all_lists): Free it.
        (put_web): Fill it.
        (simplify): Pop it.
        (one_pass): Test it.

2001-07-06  Michael Matz <matzmich@cs.tu-berlin.de>
 
        This makes the whole SPECint2000 (besides eon) work.
 
        * ra.c : (struct bb_begin_info): New.
        (visited): Remove.
        (live_in): Before processing predecessors of a block, check if that
        wasn't already done.
        Remember use-undefined over multiple predecessors blocks.
        (build_web_parts_and_conflicts): Don't allocate/free visited.
        Allocate and free a bb_begin_info entry for all basic blocks.
 
        * reload.c : (push_reload): Don't use REG_DEAD notes for finding
        a reg_rtx for input reloads.
 
        * reload1.c : (scan_paradoxical_subregs): Commenting wrongness of
        reg_max_ref_width[] setting.

2001-07-05  Michael Matz <matzmich@cs.tu-berlin.de>
 
	* ra.c : (copy_insn_p): Bitfield extraction are no simple copy
	insns.

2001-07-03  Michael Matz  <matzmich@cs.tu-berlin.de>
 
        * ra.c : (live_out_1): Make conflicts of yet undefined parts to
        the def even, if that def covers the same regno but no undefined
        bits.
        #if 0 NO_CONFLICT support.
        (add_conflict_edge): Early out if parent webs are the same.
        (colorize_one_web): New locals long_blocks, best_long_blocks,
        fat_colors.
        Only look at non-coalesced conflict webs for fat neighbors.
        Choose color which destroys the fewest long blocks.
        Color web, even if constraining.

2001-07-03  Michael Matz <matzmich@cs.tu-berlin.de>
 
        First naive version of spill coalescing.
 
        * ra.c : (spill_coalescing): New.
        (actual_spill): New.
        (one_pass): Use it.
        (allocate_spill_web): Don't abort if already having a stack slot.
        (rewrite_program): Deal with webs coalesced to spilled ones.

2001-06-30  Michael Matz <matzmich@cv.tu-berlin.de>
 
        * ra.c : (colorize_one_web): Two passes over conflicts trying to
        spill colored webs.  First potential-spill ones, then others.
        (dump_ra): Indicate dead (useless (literally) webs).

2001-06-28  Michael Matz  <matzmich@cs.tu-berlin.de>

        * ra.c : (get_free_reg): New HARD_REG_SET argument.  Callers changed.
        Use this as a set of forbidden begin hard-regs.
        Test if all hardregs are OK for the mode (???).
        (hardregset_to_string): New.
        (colorize_one_web): Use it.
        Deduce forbidden begin regs instead of non-free regs.

2001-06-28  Michael Matz  <matzmich@cs.tu-berlin.de>

        bootstrap again (without regressions)
 
        * ra.c : (struct web.conflict_list): New member.
        (struct sub_conflict, struct conflict): New.
        (struct conflict_link): Remove member "t", add member "sub".
        (conflicts): Remove.
        (rewrite_program): Remove argument.  Callers changed.
        (add_conflict_edge): Don't iterate conflict list to add fake conflicts.
        Remove sub conflicts if a whole conflict is added.
        (parts_to_webs): Don't alloc conflicts.
        Make sup_igraph a num_webs*num_webs bitmap.
        (remember_web_was_spilled): Don't deal with fake conflicts.
        (free_mem): Dito.  Change to two level conflicts approach.
        (decrement_degree): Dito (both).
        (simplify, ok, conservative, combine, colorize_one_web): Dito.
        (coalesce): Test bits [a,b] and [b,a] in sup_igraph.
        (rewrite_program): Iterate over webs, not defs/uses.
        (emit_colors): Don't rely on reg_renumber to color aliased webs
        the same, but instead use the same reg rtx (the same pseudo).
        (delete_insn_bb): Copy from dce.c.
        (deleted_move_insns): New.
        (delete_moves): New.
        (reg_alloc): Use it.
        (emitted_spill_loads, emitted_spill_stores): New.
        (rewrite_program, dump_ra, reg_alloc): Update, use, initialize them.

2001-06-20  Michael Matz  <matzmich@cs.tu-berlin.de>

	subreg handling
	
	* df.c (df_uses_record): case SET, GET_CODE(dst)==SUBREG: don't
	add a use for the def, if it's wider than word, and the subreg isn't
	paradoxical.

	* df.h (DF_REF_REAL_LOC): New.
	(DF_REF_LOC): Define with help from above.

	* ra.c : Don't define OLD_DF_INTERFACE, #include "tm_p.h".
	(struct tagged_conflict): New.
	(struct web_part): Delete conflicts, add sub_conflicts (of the
	above type).  Adjust users of that field.
	(struct web): Add has_sub_conflicts, artificial.
	(struct conflict_link): New.
	(union_web_part_roots): Use them.
	(rtx_to_bits, find_sub_conflicts, get_sub_conflicts,
	undef_to_bitmap): New.
	(regs_overlap_p): Rename to...
	(defuse_overlap_p): this.
	(live_out_1): Use them.
	(find_subweb_2, add_subweb_2, find_web_for_subweb,
	regs_overlap_p): New.
	(add_conflict_edge): Breakout from ...
	(record_conflict): here.
	(sup_igraph): New, (de)allocate where also igraph is (de)allocated.
	(struct visit_trace, num_subwebs, SUBWEB_P, BYTE_BEGIN,
	BYTE_LENGTH): New.
	(add_conflict_edge): Add a fake conflict (->s==NULL).
	Set sup_igraph bit.
	(parts_to_webs): Create needed artificial webs.
	(conflicts_between_webs): Create conflict lists out of sub_conflicts.
	(remember_web_was_spilled, simplify, ok, conservative, combine,
	colorize_one_web): Deal with fake conflicts.
	(coalesce): Use sup_igraph instead igraph to prevent coalescing.
	(detect_spill_temps, build_worklists, emit_colors): Only deal with
	full webs.
	(colorize_one_web): Also try to spill smaller already colored
	neighbors in case we happen to spill a spill-temp.
	(rewrite_program): Only load or store the part which really is needed
	by the insn (i.e. subreg).
	(vim:): modeline adjusted ;-)
	
2001-04-29  Michael Matz  <matzmich@cs.tu-berlin.de>

	Infrastructure for subreg handling.

	* df.h (DF_REF_REAL_REG): New.
	(DF_REF_REGNO, DF_REF_REG, DF_REF_LOC): Change to support subregs.

	* df.c (HANDLE_SUBREG): #define, all other code is #ifdef'd on this.
	(df_ref_record): handle subregs (don't abort, canonicalize).
	(df_def_record_1, df_uses_record): don't overread all subregs.

	* ra.c (*): commentary adjusted, use DF_REF_* whereever possible.
	(struct web): new fields .orig_x and .subreg_next.
	(struct curr_use): New.
	(live_out_1, live_out, live_in): takes now a (struct curr_use *),
	callers changed.
	(regs_overlap_p): New.
	(live_out_1): Use it.
	(init_one_web): takes a rtx, instead a regno.
	(find_subweb, add_subweb): New.
	(parts_to_webs): Use them.
	(set_undefined): New.
	(build_webs_and_conflicts): Use it.
	(union_web_part_roots): Don't merge conflicts here for every case.
	(live_out_1): handle partly overlaps for conflicts.
	(parts_to_webs): deal with and remember subwebs (webs corresponding
	to subregs).
	(conflicts_between_webs): handle conflicts in non-roots.

2001-04-29  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (moves_to_webs): don't try to handle 'complicated' copy
	insns.

2001-02-25  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (colorize_one_web): comment about our strategy.
	(get_free_reg): return also a pref_reg==0.

Sun Feb 25 22:14:13 2001  Denis Chertykov  <denisc@overta.ru>
 
         * ra.c (get_free_reg): Use preferred register order for selection.
         (colorize_one_web): Use call_used_reg_set as preference.
         (init_ra): arg,frame,stack pointers can use few hard regs.

2001-02-24  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (conflicts_between_webs): new function, split out from ...
	(parts_to_webs): ... here, new argument part2web.  Change callers.
	(make_webs): new function, calling the above in the right order;
	partly split out from ...
	(build_i_graph): ... here.
	(everywhere): format some comments.

2001-02-23  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (colorize_one_web): only use array-ref, if HARD_REG_SET
	really is an array (in debug-output).

2001-02-20  Michael Matz  <matzmich@cs.tu-berlin.de>

	Bootstraps again on x86.

	* ra.c (live_out_1): preliminar support for REG_NO_CONFLICTS blocks.
	(init_one_web): base spill_cost on reg_spill_cost().
	(colorize_one_web): More Bad Web (tm) handling.  Now recursively
	trying to spill already colored long neighbors to prevent spilling
	short living Bad Webs.
	(everywhere): some commentary, finally merged Daniel's changes,
	so there exists one ra.c now ;).

	* sibcall.c (call_ends_block_p): Honor return of
	identify_call_return_value.

	* Makefile.in (BOOT_CFLAGS): add -O2 again.
	(LIBGCC2_CFLAGS): remove -save-temps, add -O2.

	* toplev.c (flag_new_regalloc): default to 1.
	(rest_of_compilation): honor -fno-new-ra to fall back to
	local/global register allocation (the mainline code).  I like
	it to be able to test if something (like new crashes) depends on
	the new register allocator.

2001-02-20  Michael Matz  <matzmich@cs.tu-berlin.de>

	Argh.  Daniel had merged the mainline, and I was using a
	different version.  Conflicts over conflicts.  ;)
	* ra.c (parts_to_webs): calculate weight of webs as
	\sum_i(8^{loop_depth(i)}), with i all uses/defs.
	(colorize_one_web): Try even more hard not to spill a short live
	web, which is colorable according the number of conflicts, but not
	according to actual constrains (think multi hard-regs, but only
	non-consecutive blocks free).  I should call them Bad Webs (tm).

2001-02-17  Michael Matz  <matzmich@cs.tu-berlin.de>

	* ra.c (struct web_parts) : new structure.
	(find_web_part, union_web_parts, init_web_parts, parts_to_webs,
	detect_spill_temps, connect_rmw_web_parts,
	build_web_parts_and_conflicts, put_web, put_move): new functions.
	(queue_conflict, apply_conflict, relink_web, clean_conflicts,
	init_webs, fill_misc_web_info, connect_rmw_webs,
	build_webs_and_conflicts, mark_simplify): remove functions.
	(current_web, queued_conflicts): remove.
	(live_in, live_out): add "struct web_part*" argument. Callers changed.
	(def2web): now a "struct web **".
	(visited): now a "unsigned int *".
	(visited_pass): tick counter, instead of clearing visited each use.
	(id2web): new variable (int -> struct web*). Makes webs dynamically
	allocatable.
	(num_webs): new var.
	(struct copy_p_cache): new struct.
	(copy_cache): new var.
	(copy_insn_p): use them.
	(live_in, live_out): use visit_trace to speed up building webs by
	some magnitudes, use web_parts instead full webs.
	(dump_number_seen): new function (debug output).
	(moves_to_webs): use smallest numbered of webs for moves involving
	more than one source/dest.
	(get_free_reg): return only last_resort, if really no other reg found.
	(emit_colors): first change all uses, then defs; try to update
	basic block live info (still not correct).
	(default_spill_heuristic): use w->spill_cost instead reg_spill_cost().
	(everywhere): fixed most (all?) unsigned/signed warnings.

	* df.c (df_insn_debug): destaticify.
	(df_chain_dump_regno, df_insn_debug_regno): new functions (similar
	to those without _regno).
	
2001-02-19  Daniel Berlin  <dberlin@redhat.com>

	Mainline merge performed.
	
	* ra.c: Rename mm_reg_alloc to reg_alloc.
	Commented file some more.
	* toplev.c: ditto.

2001-02-09  Daniel Berlin  <dberlin@redhat.com>

	* toplev.c: Add mm_reg_alloc prototype.
	(rest_of_compilation): Add mm_reg_alloc, remove init_new_regalloc.

	* ra.c: New file, replaces "old" new register allocator

	* new-regalloc.[ch]: Removed.

	* cbitmap.c: New file, compressed bitvectors.

	* cbitmap.h: New file, compressed bitvectors.

	* Makefile.in: Dependencies for new ra.c, cbitmap.c, add ra.o and
	cbitmap.o to libbackend.a.

2001-02-06  Daniel Berlin  <dberlin@redhat.com>

	* basic-block.h: Add flow_depth_first_order_compute prototype.

	* flow.c (flow_depth_first_order_compute): De staticify, so we can
	use it elsewhere.

2001-02-03  Daniel Berlin  <dberlin@redhat.com>

	* bitmap.h : Add dump_bitmap, bitmap_zero, bitmap_union_of_diffs,
	bitmap_a_or_b, bitmap_a_and_b, bitmap_first_set_bit,
	bitmap_last_set_bit. All for compatibility with sbitmap's.

	* bitmap.c (bitmap_zero): New function.
	(bitmap_union_of_diffs): New function.
	(bitmap_first_set_bit): New function.
	(bitmap_last_set_bit): New function.

	* df.h: Change to use bitmaps, not sbitmaps, to save memory.

	* df.c: Change to use bitmaps, not sbitmaps, to save memory.


2001-02-02  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Use debug_msg in rest of places.
	(adjacent): Fix same type of traversal through regset problem.
	(is_reg_candidate): Also a reg candidate if it has a use.

2001-02-02  Geert Bosch  <bosch@gnat.com)

	* new-regalloc.c: Add debug_msg to output based on debug_regalloc
	level, clean up some of the if+fprintf pairs to use it instead.
	(make_worklist): Don't clear bit while running through bitmap, as
	it screws up the traversal.
	
2001-02-02  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Add warning about something i learned the hard
	way using the hashed sets. This is part of the preparation for
	moving the hashed set stuff into seperate files (hset.h, hset.c),
	or libiberty.
	

2001-02-02  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Large amount of variable renaming and formatting
	fixups. Hope i caught them all.

2001-02-01  Richard Henderson  <rth@redhat.com>

	* new-regalloc.c (assign_regs): Insert missing "else" between
	biased and non-biased code.  Try the preferred register class
	before the alternate register class, not at the same time.

2001-02-01  Richard Henderson  <rth@redhat.com>

	* toplev.c (NEW_REGISTER_ALLOCATOR): Remove.
	(dump_file_index, dump_file): Remove lreg dump file.
	(rest_of_compilation): Don't ifdef NEW_REGISTER_ALLOCATOR.
	Use the global register time var and dump files for the
	new allocator.
	* timevar.def (TV_LOCAL_ALLOC): Remove.

2001-02-01  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c: Convert sbitmaps to regsets.
	(finish_new_regalloc): Delete ig_node's as well.
	(ig_node_delete): Free memory for ig_node's properly.
	(find_move_cost): Fix cost calculation.
	

	* new-regalloc.c (coalesce): Fixed test for constrainedness.
	(top level): Include new-regalloc.h

2001-01-31  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (precolored_OK): Fix heuristic.
	(reg_freedom): Cache register freedoms, they don't change.
	(find_reg_given_constraints): Remove backwards direction, it's useless.
	(assign_regs): Start to implement biased coloring.
	(*): Dump debug info to rtl_dump_file, rather than stderr.

2001-01-30  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (perform_new_regalloc_init): Handle fixed
	registers, as they interfere with everything
	(OK): rename to precolored_OK.
	(precolored_OK): Handle fixed registers, since we can't
	coalesce them with anything.

2001-01-20  Richard Henderson  <rth@redhat.com>

	* new-regalloc.c: Canonicalize formatting.

2001-01-29  Daniel Berlin  <dberlin@redhat.com>

	* ssa.c  (mark_phi_and_copy_regs): Test rtx against 0, not NULL,
	and test pattern against 0 too.
	
	* reload1.c (finish_spills): Call find_reg_given_constraints
	rather than retry_global_alloc.

	* df.c (df_insn_regno_def_p): Reverse return values so that it
	does what the function says it does, so that dataflow analysis of
	call clobbered registers works.

	* new-regalloc.h: Add definitions of external functions, stop
	including other files.
	
	* new-regalloc.c: Move inclusion of those files to here.
	(perform_new_regalloc_init): Fix data flow analysis problem.
	(rewrite_program): Change call to reload to tell it we are calling
	from the global register allocator, now that it calls the right
	retry routine.

2001-01-29  Daniel Berlin  <dberlin@redhat.com>

	* new-regalloc.c (find_reg_given_constraints): Fix the *other* bug
	in spilling, causing things taking up > 1 register to be spilled
	if register 0 was free. Duh. (The arguments to x_okay_in_direction
	were off by one).
	(conservative): freedom would be max of the reg_freedom's of the
	lhs and rhs, not the max of the size of the preferred class of
	each (though it's close).

2001-01-28  Daniel Berlin  <dberlin@redhat.com>

	* Makefile.in (STAGE1_CFLAGS): Remove -O3, sorry about that.

	* new-regalloc.c (find_reg_given_constraints): Fix bug in spilling
	(notOK isn't used anymore).
	Pass mode along to x_okay_in_direction.
	(x_okay_in_direction): Add mode argument, use it.
	(find_costliest_move): Fix REGISTER_MOVE_COST call so that it has
	proper arguments.

Sun Jan 28 21:11:10 2001  Denis Chertykov  <denisc@overta.ru>

	* new-regalloc.c (find_reg_given_constraints): test result with
	`HARD_REGNO_MODE_OK'.

	* new-regalloc.h: add `#include "tm_p.h"'
	
2001-01-28  Daniel Berlin  <dberlin@redhat.com>

	* sbitmap.h (EXECUTE_IF_SET_IN_SBITMAP_REV): New macro, needed for
	dataflow analysis.
	(sbitmap_realloc): New function definition.

	* sbitmap.c (sbitmap_realloc): New function, change size of an
	already-allocated sbitmap.

	* toplev.c (rest_of_compilation): Stop calling old allocators,
	call new allocator instead.

	* rtl.h: Add reg_spill_cost definition.

	* reload1.c: De-staticify alter_reg.

	* reload.h: Make alter_reg externally visible (probably need it
	for spill code insertion).

	* new-regalloc.[ch]: New files. New register allocator.

	* df.[ch]: New files. Dataflow analysis.

	* local-alloc.c: Make update_equiv_regs non-static, we need it in
	the new allocator.

	* Makefile.in (OBJS): Add df.o, new-regalloc.o

	* regclass.c (regclass): Don't free costs, need it for spill costs.
	(reg_spill_cost): New function, give us cost if we have to
	put the register in memory.
	
	

