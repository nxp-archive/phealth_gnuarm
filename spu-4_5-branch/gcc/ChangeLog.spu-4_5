2009-07-23  Revital Eres  <eres@il.ibm.com>

	* config/spu/spu.c (need_to_save_reg, frame_emit_add_imm,
	spu_expand_prologue, spu_expand_epilogue, begin_critical_section,
	end_critical_section, spu_dont_create_jumptable,
	record_branch_info, spu_initial_elimination_offset): Change
	icache behavior to support lr bits calculation.
	(spu_machine_dependent_reorg): Call record_link_elements_liveness.
	(record_link_elements_liveness): New function.
	(bb_contains_prologue_p): Remove.
	* config/spu/spu.md: Add %@ to ibranch patterns.

2009-07-19  Revital Eres  <eres@il.ibm.com>
	    Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	* config/spu/spu-elf.h: Remove --lrlive-analysis flag.
	* gcc/config/spu/t-spu-elf (MULTILIB_OPTIONS, MULTILIB_DIRNAMES):
	Pass icache flags.

2009-06-29  Revital Eres  <eres@il.ibm.com>

	* target.h (fpart_finalize): New field in struct gcc_target.	
	* bb-reorder.c (partition_size_init): Use the new field.
	* target-def.h (TARGET_FPART_FINALIZE): New definition.
	* config/spu/spu.c (TARGET_FPART_FINALIZE): Define.
	(critical_sections): Rename to critical_sections_t.
	(critical_sections_p): New pointer type.
	(spu_legal_breakpoint): Adjust the code to use the new
	critical_sections_p type.
	(close_critical_sections): Likewise.
	(spu_start_new_section): Likewise.
	(critical_sections): Change allocation scheme to DEF_VEC_ALLOC_P.
	(fpart_finalize): New function.

2009-06-14  Revital Eres  <eres@il.ibm.com>

	* config/spu/spu.c (record_jump_table): Add parameter and fix
	recognition of jump-table for icache scheme.
	(critical_sections_t): Change allocation method from heap to gc.
	(close_critical_sections): Adjust reference to critical_sections_t.
	(begin_critical_section): Fix recognition of jump-table for
	icache scheme.
	(spu_start_new_section): Likewise, adjust reference to
	critical_sections_t and free critical_sections_t list.
	(spu_dont_create_jumptable): Fix jumptable size caclulation.
	(spu_machine_dependent_reorg): Fix branch hint emission.
	* config/spu/spu.md: Change generation of casei pattern for
	icache scheme.

2009-05-27  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	* spu-c.c: Define __SOFTWARE_ICACHE__.
	* spu-elf.h: Add --auto-overlay to LINK_SPEC.

2009-05-18  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>
	    Revital Eres  <eres@il.ibm.com>

	* varasm.c (text_part_section): Pass current_function_decl to
	get_named_section.
	(current_function_section): Likewise.
	(assemble_start_function): Set in_part_section_p.
	* bb-reorder.c (fix_up_fall_thru_edges): Check for any_condjump_p.
	* config/spu/spu.c (spu_override_options): Change stub size.
	(spu_expand_prologue): Add REG_BRANCH_INFO to mark prologue.
	(spu_expand_epilogue): Add REG_BRANCH_INFO to mark epilogue.
	(begin_critical_section): Change Recognition of prologue,
	epilogue and icache sequence.
	(is_ibranch_seq_end): Change check.
	(end_critical_section): Change Recognition of prologue, epilogue
	and icache sequence.
	(record_jump_table): Use last_basic_block.
	(spu_start_new_section): Re-set
	estimate_number_of_external_branches_in_section.
	(record_link_elements_liveness): Remove.
	(record_branch_info): Add condition.
	(final_prescan_insn): Change analysis for branch info. 
	(spu_machine_dependent_reorg): Remove calls to
	record_link_elements_liveness.
	(spu_function_ok_for_sibcall): Remove TARGET_SOFTWARE_ICACHE check.
	* config/spu/spu-elf.h: Define msoftware-icache linker options.	
	* config/spu/spu.md: Change icache sequance.

2009-01-25  Revital Eres  <eres@il.ibm.com>

	* bb-reorder.c (create_sections): Fix comment.
	* config/spu/spu.opt (micache-linesize): Remove.
	* config/spu/spu.c (critical_sections): Add comment.
	(TARGET_ASM_UNIQUE_SECTION): Define.
	(ICACHE_LINESIZE): Define.
	(spu_override_options): Use ICACHE_LINESIZE.
	(spu_unique_section, dump_critical_section_type,
	dump_critical_section_info): New functions.
	(spu_start_new_section): Use object instead of pointer and call
	dump_critical_section_type.
	(branch_info): New typedef.  Add DEF_VEC_O and DEF_VEC_ALLOC_O
	statements for it.
	(record_branch_info): Use VEC instead of array for branch_info.
	(spu_function_ok_for_sibcall): Return false for
	TARGET_SOFTWARE_ICACHE.
	(end_critical_section): Dump info regarding the critical section.
	(begin_critical_section): Likewise and update recognition of
	IBRANCH_SEQ.
	* config/spu/spu.h (ICACHE_MASK_INDEX_REGNUM,
	ICACHE_TAG_ARR_REGNUM, ICACHE_MASK_TAG_REGNUM, ICACHE_LINESIZE):
	Delete.
	* config/spu/spu.md (rotm_<mode>): Accept symbolic immediate
	value for the second input operand.
	(indirect_jump, tablejump, sibcall, sibcall_value, call,
	call_value): Change icache inline tag check sequence.
	(_call_value_hw): Fix indentation.

2008-12-17  Revital Eres  <eres@il.ibm.com>

	* rtl-factoring.c (compute_init_costs): Insert check for insn.
	* target.h (legal_breakpoint, dont_create_jumptable): Add new
	fields to bb_partitioning struct in struct gcc_target.
	* target-def.h (TARGET_LEGAL_BREAKPOINT,
	TARGET_DONT_CREATE_JUMPTABLE): New definitions.
	* bb-reorder.c (split_bb): Extend support for function
	partitioning.
	(create_sections): Likewise.
	* config/spu/spu-protos.h (print_operand_punct_valid_p,
	final_prescan_insn): Declare.
	* config/spu/spu.opt (msoftware-icache, micache-branch-limit,
	micache-linesize): New flags.
	* config/spu/spu.c (IBRANCH_SEQ, PROLOGUE, EPILOGUE): Add to
	enum critical_section_type.
	(TARGET_LEGAL_BREAKPOINT, TARGET_DONT_CREATE_JUMPTABLE):
	New Defintions.
	(global_branch_info): New static variable.
	(output_branch_info, spu_dont_create_jumptable,
	record_link_elements_liveness, record_branch_info,
	print_operand_punct_valid_p, final_prescan_insn,
	spu_legal_breakpoint, bb_contains_prologue_p, is_ibranch_seq_end,
	branch_info_compare_frequency): New functions.
	(spu_override_options, print_operand, spu_machine_dependent_reorg,
	spu_initial_elimination_offset, need_to_save_reg,
	frame_emit_add_imm, spu_expand_prologue, spu_expand_epilogue,
	begin_critical_section, end_critical_section,
	spu_start_new_section, close_critical_sections,
	classify_immediate): Support software i-cache.
	(estimate_number_of_external_branches_in_section): New static variable.
	(get_stub_size): Fix calculation.
	(start, end): Add new fields to struct critical_sections.
	(critical_sections): New static variable.
	(struct branch_info_def): New structure.
	(MAX_PRIORITY): New definition.
	* config/spu/spu.h (FINAL_PRESCAN_INSN,
	PRINT_OPERAND_PUNCT_VALID_P): New Definitions.
	(ICACHE_MASK_INDEX_REGNUM, ICACHE_TAG_ARR_REGNUM,
	ICACHE_MASK_TAG_REGNUM, ICACHE_LINESIZE): Likewise.
	* config/spu/spu.md (indirect_jump): Change to be a
	define_expand and make the original indirect_jump be renamed
	to indirect_jump_hw.
	(tablejump, sibcall, _sibcall_value, _call, _call_value): Likewise.
	(jump, _return, branches): Support software i-cache.
	* reg-notes.def (BRANCH_INFO): New reg-note.
	* stmt.c (expand_case): Support software i-cache.
	
2008-12-07  Revital Eres  <eres@il.ibm.com>

	* toplev.c (process_options): Enable
	-fpartition-functions-into-sections when debugging is set.
	* opts.c (decode_options): Likewise for unwind_tables and
	exceptions.
	* vmsdbgout.c (vmsdbg_debug_hooks): Change declaration of
	switch_text_section field.
	* debug.c (do_nothing_debug_hooks): Likewise.
	* debug.h (gcc_debug_hooks): Likewise.
	(dwarf2out_switch_text_section): Change declaration.
	* dbxout.c (dbx_debug_hooks, xcoff_debug_hooks): Change
	declaration of switch_text_section.
	* final.c (final_scan_insn): Support new functionality.
	* dwarf2out.c (COMP_UNIT_HAS_SECTIONS): define.
	(first_section_p, last_section_p): New fields in dw_fde_node.
	(block_aux_struct): New type for information regarding a lexical
	block.
	(block_labels_table): A table to hold information regarding a
	lexical block.
	(label_wrapper): New struct.
	(output_call_frame_info, dwarf2out_begin_prologue,
	dwarf2out_end_epilogue, add_var_loc_to_decl): Add support for
	function partitioning.
	(dwarf2out_switch_text_section): Likewise and also add parameter to
	pass the section id.
	(copy_cfi, copy_cfi_from_previous_fde, push_new_label,
	blk_info_hash, blk_info_eq, clear_block_labels,
	add_new_loc, add_tables_to_decl_loc_table,
	convert_cfa_to_fb_loc_list_multiple_sections): New functions to
	support debug information for function partitioning.
	(die_sections_def): New struct.
	(sections_info): New field in die_node.
	new_section_p, end_section_p): New fields to var_loc_node.
	(decl): New field to var_loc_list_def structure.
	(output_aranges, add_location_or_const_value_attribute,
	gen_subprogram_die, add_high_low_attributes,
	dwarf2out_begin_block, dwarf2out_end_block, dwarf2out_init,
	dwarf2out_finish): Support new functionality.
	* sdbout.c (sdb_debug_hooks): Change declaration of
	switch_text_section.

2008-11-27  Revital Eres  <eres@il.ibm.com>

	* doc/invoke: Document -fpartition-functions-into-sections
	new flag.
	* tree-pass.h (pass_partition_blocks_size): Add new RTL pass.
	(pass_partition_blocks): Rename to...
	(pass_partition_blocks_hot_cold): This.
	(TODO_check_sections): Define.
	* target.h (bb_partitioning_into_sections): New struct in
	gcc_target.
	(estimate_section_overhead, estimate_instruction_size,
	start_new_section): New members to gcc_target.bb_partitioning.
	* ddg.c (mem_read_insn_p, mem_write_insn_p): Remove static.
	* ddg.h (mem_read_insn_p, mem_write_insn_p): Declare. 
	* final.c (final_scan_insn): Support new functionality.
	(pass_final): Add TODO_check_sections to todo_flags_start field.
	* toplev.c (process_options): Disable
	-fpartition-functions-into-sections if profile_flag or
	flag_unwind_tables are set, -ffunction-sections is not supported
	or debugging is set.
	* opts.c (common_handle_option): Handle
	OPT_fpartition_functions_into_sections.
	(decode_options): Disable the new functionality if
	HAS_LONG_COND_BRANCH or HAS_LONG_UNCOND_BRANCH are not defined;
	target does not supports have_named_sections; flag_exceptions or
	flag_unwind_tables are set.  Issue a warning that it doesn't work.
	* timevar.def (TV_PARTITION_BLOCKS_SIZE): New.
	* function.h (section_start_labels, section_end_labels,
	unlikely_part_text_section_name, part_text_section_name,
	number_of_sections, first_text_section_part_changed): New fields
	to function_subsections struct.
	(const_str): Define and DEF_VEC.
	* print-rtl.c (print_rtx): Avoid printing the basic-block number
	if -fpartition-functions-into-sections is set.
	* cfglayout.c: (relink_block_chain): Clear skip field.
	* common.opt (fpartition-functions-into-sections): Document
	new flag.
	* varasm.c (last_part_text_section_name): New variable.
	(in_part_section_p): Likewise.
	(initialize_part_section_name, text_part_section,
	output_sections): New functions.
	(function_section, current_function_section,
	assemble_start_function, assemble_end_function,
	default_section_type_flags): Support new functionality.
	* target-def.h (TARGET_ESTIMATE_SECTION_OVERHEAD,
	TARGET_ESTIMATE_INSTRUCTION_SIZE, TARGET_START_NEW_SECTION,
	TARGET_BB_PARTITIONING): Define.
	* rtl.h (NOTE_TEXT_SECTION): Define to hold the section id.
	* output.h (text_part_section): Add declaration.
	* bb-reorder.c (cfgloop.h, langhooks.h, hashtab.h, vec.h):
	New includes.
	(find_rarely_executed_basic_blocks_and_crossing_edges,
	partition_hot_cold_basic_blocks): Remove.
	(add_labels_and_missing_jumps,
	fix_edges_for_rarely_executed_code): Pass VEC instead of edge *.
	(partition_callbacks, loop_info_def,
	funcpart_basic_block_data_def, insn_aux) New structures.
	(loop_info): New typedef and DEF_VEC.
	(insns_aux, estimate_section_overhead, estimate_max_section_size,
	fbb_data_size, fbb_data): New static variables.
	(validate_fbb_data_element, estimate_size_of_insns_in_bb,
	split_bb, size_insert_section_boundary_note,
	start_new_section, start_new_section_for_loop,
	create_sections, size_crossing_edge_p, partition_basic_blocks,
	partition_hot_cold_init, partition_hot_cold_finalize,
	mark_hot_cold_blocks, hot_cold_crossing_edge_p,
	mark_crossing_edges, calculate_loop_boundary, loop_size_is_less,
	record_insns_size_estimation, record_loops_boundaries,
	free_fbb_data, check_unexpected_insns, partition_size_init,
	partition_size_finalize, get_estimate_section_overhead,
	instruction_size_exceeds_threshold,
	gate_handle_partition_blocks_size,
	rest_of_handle_partition_blocks_size, check_sections): New
	functions.
	(rest_of_handle_partition_blocks): Rename to...
	(rest_of_handle_partition_blocks_hot_cold): This and use the
	new callback functions to do the transformation.
	(gate_handle_partition_blocks): Rename to...
	(gate_handle_partition_blocks_hot_cold): This.
	(pass_partition_blocks): Rename to...
	(pass_partition_blocks_hot_cold): This.
	(insert_section_boundary_note): Avoid
	emitting NOTE_INSN_SWITCH_TEXT_SECTIONS if
	-fpartition-functions-into-sections is set.
	(pass_partition_functions): New pass.
	* Makefile.in (bb-reorder.o): Add CFGLOOP_H,
	LANGHOOKS_DEF_H, HASHTAB_H, vec.h to dependencies.
	* basic-block.h (bb_flags): Add new BB_FIRST_AFTER_SECTION_SWITCH
	flag.
	(skip): Add new field to struct rtl_bb_info.	
	(check_sections): Add declaration.
	* passes.c (pass_partition_blocks): Rename to...
	(pass_partition_blocks_hot_cold): This.
	(pass_partition_blocks_size): New.
	(execute_todo): Call to check_sections function.
	* config/spu/spu.c (vec.h): New include.
	(critical_section_type): New enum.
	(spu_estimate_instruction_size, spu_estimate_section_overhead,
	record_jump_table, end_critical_section, begin_critical_section,
	close_critical_sections, get_stub_size, spu_start_new_section):
	New functions.
	(critical_sections): New struct.
	(critical_sections_t): New typedef and DEF_VEC.
	(TARGET_ESTIMATE_SECTION_OVERHEAD,
	TARGET_ESTIMATE_INSTRUCTION_SIZE, TARGET_START_NEW_SECTION):
	Override.
	(spu_override_options): call fix_range to support new functionality.
	* config/spu/spu.h (HAS_LONG_COND_BRANCH, HAS_LONG_UNCOND_BRANCH):
	Define.
	* config/spu/spu.opt (mstub-size): New flag.
	* cfgrtl.c (rtl_verify_flow_info_1, rtl_verify_flow_info):
	Consider NOTE_INSN_VAR_LOCATION note.

