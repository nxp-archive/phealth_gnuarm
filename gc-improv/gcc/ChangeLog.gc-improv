2009-10-31  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* gcc.h (digit_vector, new_ggc_zone, destroy_ggc_zone,
	ggc_min_expand_heuristic, ggc_min_heapsize_heuristic): Remove.
	(digit_string): Move to stringpool.c.
	(ggc_mark_stringpool, ggc_purge_stringpool, ggc_mark_roots,
	gt_pch_save_stringpool, gt_pch_restore_stringpool, gt_pch_p_S,
	init_ggc_pch, ggc_pch_count_object, ggc_pch_total_size,
	ggc_pch_this_base, ggc_pch_alloc_object, ggc_pch_prepare_write,
	ggc_pch_write_object, ggc_pch_finish, ggc_pch_read,
	ggc_force_collect, ggc_record_overhead, ggc_free_overhead,
	ggc_prune_overhead_list, ggc_get_size, ggc_statistics,
	ggc_print_common_statistics): Move to ggc-internal.h
	* ggc-internal.h: New file.
	* stringpool.c: Include ggc-internal.h
	(digit_vector): Make static.
	(digit_string): New.
	* ggc-common.c: Include ggc-internal.h.
	(ggc_rlimit_bound): Remove prototype.  Surround with #ifdef.
	(ggc_min_expand_heuristic, ggc_min_heapsize_heuristic): Make
	static.  Surround with #ifdef.
	* ggc-zone.c: Include ggc-internal.h.
	(new_ggc_zone, destroy_ggc_zone): Remove.
	* ggc-page.c: Likewise.
	* Makefile.in (GGC_INTERNAL_H): New.
	(ggc-common.o, ggc-page.o, ggc-zone.o, stringpool.o): Add
	$(GGC_INTERNAL_H) to dependencies.

2009-10-29  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ggc.h (ggc_calloc): Remove.
	(ggc_internal_vec_alloc, ggc_internal_cleared_vec_alloc): Add
	missing braces around parameters.
	(ggc_cleared_alloc_htab_ignore_args): New.
	(ggc_cleared_alloc_ptr_array_two_args): New.
	(htab_create_ggc): Redefine using
	htab_create_alloc_with_separate_allocators.
	* ggc-common.c (ggc_calloc): Remove.
	(ggc_cleared_alloc_htab_ignore_args): New.
	(ggc_cleared_alloc_ptr_array_two_args): New.
	* cfgloop.c (record_loop_exits): Use htab_create_ggc.
	* tree-scalar-evolution.c (scev_initialize): Likewise.

2009-10-28  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ipa-prop.c (duplicate_ggc_array): Rename to
	duplicate_ipa_jump_func_array.  Use typed GC allocation.
	* lto-streamer-in.c (unpack_ts_real_cst_value_fields): Use typed
	GC allocation.
	* ipa.c (cgraph_node_set_new): Likewise.
	(cgraph_node_set_add): Likewise.
	* function.c (types_used_by_var_decl_insert): Likewise.

2009-08-23  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ggc.h (ggc_alloc_stat): Rename to ggc_internal_alloc_stat.
	(ggc_internal_alloc, ggc_alloc): Redefine.
	(ggc_alloc_cleared_stat): Rename to
	ggc_internal_cleared_alloc_stat.
	(ggc_internal_cleared_alloc, ggc_alloc_cleared): Redefine.
	(GGC_NEW, GGC_CNEW, GGC_RESIZEVEC, GGC_RESIZEVAR): Redefine.
	(GGC_NEWVAR, GGC_CNEWVAR): Remove.
	(ggc_internal_vec_alloc, ggc_internal_cleared_vec_alloc): Redefine.
	(ggc_internal_sized_alloc): Remove.
	(ggc_internal_cleared_sized_alloc): Remove.
	(ggc_internal_vec_sized_alloc): Remove.
	(ggc_internal_cleared_vec_sized_alloc): Remove.
	(ggc_alloc_atomic, ggc_alloc_cleared_atomic): Redefine.
	(ggc_alloc_rtvec): Rename to ggc_alloc_rtvec_sized and redefine.
	(ggc_alloc_zone_stat): Rename to ggc_internal_alloc_zone_stat.
	(ggc_alloc_zone, ggc_alloc_zone_pass_stat): Remove.
	(ggc_internal_cleared_alloc_zone_stat): New.
	(ggc_internal_zone_stat_alloc): Define.
	(ggc_internal_zone_cleared_stat_alloc): Define.
	(ggc_internal_zone_vec_alloc): Define.
	* ggc-none.c (ggc_alloc_stat): Rename to ggc_internal_alloc_stat.
	(ggc_alloc_cleared_stat): Rename to
	ggc_internal_cleared_alloc_stat.
	* ggc-page.c (ggc_alloc_typed_stat): Use ggc_internal_alloc_stat.
	(ggc_alloc_stat): Rename to ggc_internal_alloc_stat.
	* ggc-zone.c (ggc_alloc_zone_stat): Rename to
	ggc_internal_alloc_zone_stat.
	(ggc_internal_cleared_alloc_zone_stat): New.
	(ggc_internal_alloc_zone_pass_stat): Define.
	(ggc_alloc_typed_stat): Use ggc_internal_alloc_zone_pass_stat.
	(ggc_alloc_stat): Rename to ggc_internal_alloc_stat.  Use
	ggc_internal_alloc_zone_pass_stat.
	(ggc_pch_total_size): Change type of i to int.
	* ggc-common.c (ggc_internal_alloc_stat): Rename to
	ggc_internal_cleared_alloc_stat, use ggc_internal_alloc_stat.
	(ggc_realloc_stat): Use ggc_internal_alloc_stat.
	(ggc_calloc): Use ggc_internal_cleared_alloc.
	(ggc_splay_alloc): Use ggc_internal_alloc.
	* gengtype.c (alloc_quantity, alloc_zone): new enumerations.
	(write_typed_alloc_end): Replace argument `is_vector' with
	`quantity'.  Rewrite to support zone allocators.
	(write_typed_struct_alloc_def): Likewise.
	(write_typed_typedef_alloc_def): Likewise.
	(write_typed_alloc_defns): Output zone allocators.
	(write_typed_alloc_defns): Likewise.
	* varray.h (struct varray_head_tag): Add variable_size GTY option.
	* varray.c (varray_init): Use typed GC allocation.
	* rtl.h (struct rtvec_def): add variable_size GTY option.
	* rtl.c (rtvec_alloc): Use ggc_alloc_rtvec_sized.
	* ira.c (fix_reg_equiv_init): Use GGC_RESIZEVEC.
	* c-tree.h (struct lang_type): add variable_size GTY option.
	(struct lang_decl): Likewise.
	* c-decl.c (finish_struct): Pass size to GC allocator.
	(finish_enum): Likewise.
	(c_dup_lang_specific_decl): Likewise.
	* toplev.c (realloc_for_line_map): Use GGC_RESIZEVAR.
	* tree.c (make_node_stat): Convert to typed GC allocation.
	(copy_node_stat): Likewise.
	(make_tree_binfo_stat): Likewise.
	(make_tree_vec_stat): Likewise.
	(tree_cons_stat): Likewise.
	(build1_stat): Likewise.
	(build_vl_exp_stat): Likewise.

2009-08-22  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* cgraph.h (cgraph_node_ptr, cgraph_node_set): Remove vector
	definitions.
	(struct cgraph_node_set_def, cgraph_node_set): Remove.
	(struct cgraph_node_set_element_def): Remove.
	(cgraph_node_set_element, const_cgraph_node_set_element): Remove.
	(cgraph_node_set_iterator, cgraph_node_set_new): Remove.
	(cgraph_node_set_find, cgraph_node_set_add): Remove.
	(cgraph_node_set_remove, dump_cgraph_node_set): Remove.
	(debug_cgraph_node_set, csi_end_p, csi_next, csi_start): Remove.
	(cgraph_node_in_set_p, cgraph_node_set_size): Remove.
	* tree-pass.h (cgraph_node_set_def): Remove forward declaration.
	(ipa_opt_pass_d): Remove write_summary member.
	* passes.c (order): use cgraph_node_ptr * instead of struct
	cgraph_node **.
	* c-common.h (struct sorted_fields_type): add GTY option
	variable_size.
	* ggc-page.c: Do not mention ggc_alloc in comments.
	* ggc-zone.c: Likewise.
	* graphite.c (build_access_matrix): New argument
	graphite_obstack.  Use obstack allocation instead of GC.
	(build_scop_data_accesses): New argument graphite_obstack.  Pass
	it down.
	* ipa.c (cgraph_node_set_add): Remove.
	(cgraph_node_set_remove): Remove.
	(cgraph_node_set_find): Remove.
	(dump_cgraph_node_set): Remove.
	(debug_cgraph_node_set): Remove.
	* c-decl.c (make_label): Use typed GC allocation.
	(lookup_label_for_goto): Likewise.
	(finish_struct): Likewise.
	* dwarf2out.c (add_name_and_src_coords_attributes): Likewise.
	* ipa-reference.c (pass_ipa_reference): Remove write_summary
	member initialization.
	* ipa-pure-const.c (pass_ipa_pure_const): Likewise.
	* ipa-inline.c (pass_ipa_inline): Likewise.
	* ipa-cp.c (ipcp_create_replace_map): Use typed GC allocation.
	(pass_ipa_cp): Remove write_summary member initialization.
	* gengtype.c (dump_type_u_s_lang_struct): New.
	(dump_type_u_s): Do not dump lang_struct member.
	(dump_type): Adjust for TYPE_LANG_STRUCT.

2009-08-21  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ggc.h (GGC_NEWVEC): Remove.
	(ggc_internal_vec_alloc): Redefine.
	* gengtype.c (USED_BY_TYPED_GC): Adjust definition for pointer
	types.
	(write_typed_alloc_defns): Remove extraneous
	write_typed_struct_alloc_def calls.
	* stringpool.c (struct string_pool_data): use ht_identifier_ptr *
	instead of ht_identifier * *.
	(gt_pch_save_stringpool): Use typed GC allocation instead of
	GGC_NEWVEC.

2009-08-20  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* lambda.h (lambda_matrix_new, lambda_matrix_inverse): New
	argument lambda_obstack.
	* lambda-code.c (lambda_lattice_new): Pass lambda_obstack to
	lambda_matrix_new.
	(compute_nest_using_fourier_motzkin): Likewise.
	(lambda_compute_auxillary_space): Likewise.
	(lambda_compute_step_signs): Likewise.
	(lambda_compute_target_space): Pass lambda_obstack to
	lambda_matrix_new and lambda_matrix_inverse.
	(lambda_loopnest_transform): Pass lambda_obstack to
	lambda_compute_step_signs and lambda_matrix_new.
	(lambda_matrix_project_to_null): Remove.
	* tree-data-ref.c (analyze_subscript_affine_affine): New variable
	scratch_obstack.  Initialize obstack, pass it to
	lambda_matrix_new, destroy obstack.
	* lambda-trans.c (lambda_trans_matrix_new): Pass lambda_obstack to
	lambda_matrix_new.
	(lambda_trans_matrix_inverse): Pass lambda_obstack to
	lambda_matrix_inverse.
	* lambda-mat.c (lambda_matrix_get_column): Remove.
	(lambda_matrix_new): New argument lambda_obstack.  Use obstack
	allocation instead of GGC_NEWVEC.
	(lambda_matrix_inverse_hard, lambda_matrix_inverse): New argument
	lambda_obstack.
	(lambda_matrix_project_to_null): Remove.

2009-08-05  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ggc.h (GGC_CNEWVEC): Remove.
	(GGC_NEWVECVAR): Remove.
	(GGC_CNEWVECVAR): Remove.
	(ggc_internal_cleared_vec_alloc): Redefine.
	(ggc_internal_vec_sized_alloc): Redefine.
	(ggc_internal_cleared_vec_sized_alloc): Redefine.
	(ggc_alloc_cleared_atomic): Redefine.
	(ggc_alloc_rtvec): Unconditionally undefine before definition.
	* gengtype.c (USED_BY_TYPED_GC): Include TYPE_POINTER kind of
	types too.
	(write_typed_typedef_alloc_def): Remove local variable s, do not
	cal write_typed_alloc_end, output a typed allocator for a typedef
	using its tag.
	* pretty-print.c (identifier_to_locale): Use atomic GC allocation
	instead of GGC_NEWVEC.
	* lambda.h (lambda_vector_new): Likewise.
	* dwarf2out.c (add_const_value_attribute): Likewise.
	(add_comp_dir_attribute): Likewise.
	(tree_add_const_value_attribute): Use atomic GC allocation instead
	of GGC_CNEWVEC.
	(dwarf2out_init): Use typed GC allocation instead of GGC_CNEWVEC.
	* alias.c (init_alias_analysis): Likewise.
	* c-parser.c (c_parse_init): Likewise.
	* dbxout.c (dbxout_init): Likewise.
	* ira.c (update_equiv_regs): Likewise.
	* integrate.c (get_hard_reg_initial_val): Use typed GC allocation
	instead of GGC_NEWVEC.
	* passes.c (do_per_function_toporder): Likewise.
	* emit-rtl.c (init_emit): Likewise.
	* gimple.c (gimple_copy): Likewise.
	(gimple_build_omp_for): Use typed GC allocation instead of
	GGC_CNEWVEC.

2009-08-02  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* Makefile.in (build/gengtype.o): Add $(HASHTAB_H) dependency.
	* gengtype.c: Include hashtab.h.  Add comment for
	GC_MAYBE_POINTED_TO.
	(do_typedef): Initialize opt to NULL.
	(dump_pair, dump_type, dump_type_list, INDENT, dump_typekind)
	(dump_gc_used, dump_options, dump_fileloc, dump_type_u_s)
	(dump_type_u_a, dump_type_u_param_struct, seen_types)
	(dump_pair_list, dump_structures, dump_everything): New.
	(main): New variable do_dump.  Check if first command line
	argument is -d, invoke dump_everything.

2009-08-02  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* tree-dfa.c (create_var_ann): Use typed GC allocation.
	(create_tree_common_ann): Likewise.

2009-08-02  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* gengtype.c (USED_BY_TYPED_GC): New.
	(write_enum_defn): Use it.  Do not output whitespace at the end of
	line.
	(USED_BY_GC): Remove.
	(write_typed_alloc_defns): Use USED_BY_TYPED_GC.

2009-08-02  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ipa.c (hash_cgraph_node_set_element, eq_cgraph_node_set_element,
	cgraph_node_set_new): Remove.

2009-08-01  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* lambda.h (lambda_trans_matrix_new): New argument of type struct
	obstack *.
	(lambda_trans_matrix_inverse): Likewise.
	* lambda-code.c (lambda_loopnest_transform): Pass lambda_obstack
	to lambda_trans_matrix_new.
	(lambda_loopnest_to_gcc_loopnest): Pass lambda_obstack to
	lambda_trans_matrix_inverse.
	* graphite.c (create_if_region_on_edge): New argument
	graphite_obstack.  Replace GC allocation with obstack allocation.
	(move_sese_in_condition): New argument graphite_obstack.  Pass it
	to create_if_region_on_edge.
	(is_interchange_valid): New argument graphite_obstack.  Pass it to
	lambda_trans_matrix_new.
	(graphite_trans_bb_block): New argument graphite_obstack.  Pass it
	to is_interchange_valid.
	(graphite_trans_loop_block): New argument graphite_obstack.  Pass
	it to graphite_trans_bb_block.
	(graphite_trans_scop_block): New argument graphite_obstack.  Pass
	it to graphite_trans_loop_block.
	(graphite_apply_transformations): New argument graphite_obstack.
	Pass it to graphite_trans_scop_block.
	(graphite_transform_loops): New variable graphite_obstack.
	Initialize it, pass it to gloog, free it.
	* lambda-trans.c (lambda_trans_matrix_new): New argument
	lambda_obstack.  Allocate ret from it instead of GC.
	(lambda_trans_matrix_inverse): New argument lambda_obstack.  Pass
	it to lambda_trans_matrix_new.
	* tree-parloops.c (loop_parallel_p): New argument parloop_obstack.
	Pass it to lambda_trans_matrix_new.
	(parallelize_loops): New variable parloop_obstack.  Initialize it,
	pass it to loop_parallel_p, free it.
	* tree-loop-linear.c (linear_transform_loops): Pass lambda_obstack
	to lambda_trans_matrix_new.

2009-07-31  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* tree-data-ref.h (lambda_compute_access_matrices): New argument
	of type struct obstack *.
	* lambda-code.c (build_access_matrix): New argument
	lambda_obstack.  Allocate am from obstack instead of GC.
	(lambda_compute_access_matrices): New argument lambda_obstack.
	Pass it to build_access_matrix
	* tree-loop-linear.c (linear_transform_loops): Pass lambda_obstack
	to lambda_compute_access_matrices.

2009-06-22  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* lambda.h (lambda_loop_new): Remove.
	* lambda-code.c (lambda_loop_new): New function.
	(compute_nest_using_fourier_motzkin): Pass lambda_obstack to
	lambda_loop_new.
	(lambda_compute_target_space): Likewise.
	(gcc_loop_to_lambda_loop): Likewise.
	* stringpool.c (stringpool_ggc_alloc): Use ggc_alloc_atomic.

2009-06-17  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* c-tree.h (push_init_level, pop_init_level, set_init_index): new
	argument of type struct obstack *.
	(set_init_label, process_init_element): Likewise.

	* c-parser.c (c_parser_braced_init): New variable
	braced_init_obstack.  Initialize obstack, pass it down, destroy
	afterwards.
	(c_parser_initelt, c_parser_initval): New argument
	braced_init_obstack, pass it further down.

	* c-typeck.c (push_init_level): New argument braced_init_obstack,
	pass it further down.
	(pop_init_level, set_designator, set_init_index): Likewise.
	set_nonincremental_init): Likewise.
	(set_init_label, set_nonincremental_init): Likewise.
	(set_nonincremental_init_from_string, find_init_member): Likewise.
	(output_init_element, output_pending_init_elements): Likewise.
	(process_init_element): Likewise.

	(push_range_stack): New argument braced_init_obstack.  Allocate p
	from obstack instead of GC.
	(add_pending_init): New argument braced_init_obstack.  Allocate r
	from obstack instead of GC.

2009-05-30  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* tree-ssa-operands.h (struct ssa_operand_memory_d): Add
	variable_size GTY option.
	* tree-ssa-operands.c (ssa_operand_alloc): Use typed GC
	allocation.

2009-05-30  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* tree.c (build_fixed, build_real): Use typed GC allocation.

2009-05-21  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* tree-phinodes.c (allocate_phi_node): Use typed GC allocation.
	* gimple.c (gimple_alloc_stat, gimple_seq_alloc): Likewise.
	* gimple.h (union gimple_statement_d): Add variable_size GTY
	marker.

2009-05-17  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ggc-common.c (ggc_splay_alloc): Add enum gt_types_enum
	parameter.
	* ggc.h (splay_tree_new_ggc): Add typed GGC allocator parameters.
	(ggc_splay_alloc): Add enum gt_types_enum parameter.
	* gengtype.h: (error_at_line): Constify.
	* gengtype.c (error_at_line): Constify.
	(write_local_func_for_structure): Likewise.
	(walk_type_data): constify line member.
	(get_output_file_for_structure): New.
	(write_func_for_structure): Use it.
	(write_local_func_for_structure): Likewise.
	(output_typename, write_splay_tree_allocator_def): New.
	(write_splay_tree_allocators): New.
	(main): Invoke write_splay_tree_allocators.
	* alias.c (record_alias_subset): Update splay_tree_new_gcc
	invocation.
	* ipa-reference.c (ipa_init): Likewise.
	* omp-low.c (lower_omp_critical): Likewise.
	* dwarf2asm.c: (dw2_force_const_mem): Likewise.

2009-05-10  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* ggc.h (ggc_alloc_atomic): New.
	* c-common.c (parse_optimize_options): Use it.
	* stringpool.c (ggc_alloc_string): Likewise.

2009-05-08  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* varpool.c (varpool_node): Use typed GC allocation.
	* cfgrtl.c (init_rtl_bb_info): Likewise.
	* cfgloop.c (alloc_loop): Likewise.
	* tree-ssa.c (init_tree_ssa): Likewise.
	* graphite.c (if_region_set_false_region): Likewise.
	* c-decl.c (push_scope, finish_struct, finish_enum): Likewise.
	* loop-init.c (loop_optimizer_init): Likewise.
	* tree-ssa-alias.c (get_ptr_info): Likewise.
	* cfg.c (init_flow, alloc_block, unchecked_make_edge): Likewise.
	* cgraph.c (cgraph_create_node, cgraph_add_asm_node): Likewise.
	* tree-cfg.c (create_bb): Update comment not to refer to
	ggc_alloc_cleared.  Use typed GC allocation.

2009-05-07  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* doc/tm.texi (Per-Function Data): Replace reference to ggc_alloc
	with GC allocation in general.
	* tree-ssanames.c (duplicate_ssa_name_ptr_info): Use typed GC
	allocation.
	* c-parser.c (c_parse_file): Likewise.
	* tree-ssa-structalias.c (heapvar_insert): Likewise.
	* cfgloop.c (rescan_loop_exit): Likewise.
	* integrate.c (get_hard_reg_initial_val): Likewise.
	* lambda-code.c (replace_uses_equiv_to_x_with_y): Likewise.
	* tree-eh.c (add_stmt_to_eh_region_fn): Likewise.
	* c-decl.c (bind): Likewise.
	(record_inline_static): Likewise.
	(c_push_function_context): Likewise.
	(c_dup_lang_specific_decl): Likewise.
	* gimple-iterator.c (gsi_insert_before_without_update): Likewise.
	(gsi_insert_after_without_update): Likewise.
	* toplev.c (general_init): Likewise.
	* tree-scalar-evolution.c (new_scev_info_str): Likewise.
	* bitmap.c (bitmap_element_allocate): Likewise.
	(bitmap_gc_alloc_stat): Likewise.
	* cgraph.c (cgraph_create_edge): Likewise.
	* tree-ssa-loop-niter.c (record_estimate): Likewise.

2009-05-06  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* rtl.h (struct rtx_def): Add variable_size GTY annotation.
	* rtl.c (rtx_alloc_stat): Use typed GGC allocation.
	(shallow_copy_rtx_stat): Likewise.
	* varasm.c (create_block_symbol): Likewise.

2009-05-05  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* gengtype.c (walk_type): Recognize variable_size option.
	(variable_size_p): New.
	(write_typed_alloc_end): Handle variable size types.
	(write_typed_struct_alloc_def): Likewise.
	* tree.c (build_string): Use typed GGC allocation.
	(build_omp_clause): Likewise.
	* tree.h (tree_node): Add variable_size GTY option.
	* bitmap.h (bitmap_head_def): Update comment.
	* ggc.h (GGC_NEWVECVAR, GGC_CNEWVECAR): New.
	(ggc_internal_vec_alloc, ggc_internal_cleared_vec_alloc): Update
	arguments.
	(ggc_internal_sized_alloc, ggc_internal_cleared_sized_alloc): New.
	(ggc_internal_vec_sized_alloc): New.
	(ggc_internal_cleared_vec_sized_alloc): New.
	(ggc_alloc_tree): Remove.

2009-05-03  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* gengtype.c (write_typed_alloc_end): Print type cast to the
	pointer to the type of object being allocated.

2009-04-29  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* gengtype.c: Update copyright year.
	(get_file_gtfilename): Fix typo.
	(get_tag_string, write_typed_alloc_end): New.
	(write_typed_struct_alloc_def): New.
	(write_typed_typedef_alloc_def): New.
	(USED_BY_GC): New.
	(write_typed_alloc_defns): New.
	(main): Invoke write_typed_alloc_defns.
	* ggc.h: Update copyright year.
	(ggc_internal_alloc, ggc_internal_cleared_alloc): New.
	(ggc_internal_vec_alloc, ggc_internal_cleared_vec_alloc): New.
	* optabs.c (set_optab_libfunc, set_conv_libfunc): Use typed GC
	allocators.
	* tree.c (decl_priority_info, decl_restrict_base_insert): Likewise.
	(decl_debug_expr_insert, decl_value_expr_insert, type_hash_add):
	Likewise.
	* dwarf2out.c (new_cfi, queue_reg_save, dwarf2out_frame_init):
	Likewise.
	(new_loc_descr, find_AT_string, new_die): Likewise.
	(add_var_loc_to_decl, new_loc_list, lookup_filename): Likewise.
	(dwarf2out_var_location): Likewise.
	* function.c (insert_temp_slot_address): Likewise.
	(assign_stack_temp_for_type, allocate_struct_function): Likewise.
	* alias.c (record_alias_subset): Likewise.
	* c-pragma.c: Update copyright year.
	(push_alignment, handle_pragma_push_macro): Use typed GC
	allocators.
	(handle_pragma_push_options): Likewise.
	* except.c (init_eh_for_function, gen_eh_region): Likewise.
	(duplicate_eh_regions_1, add_call_site): Likewise.
	* emit-rtl.c (get_mem_attrs, get_reg_attrs, start_sequence):
	Likewise.
	* stringpool.c: Update copyright year.
	(gt_pch_save_stringpool): Use typed GC allocators.
	* varasm.c (emutls_decl, get_unnamed_section, get_section):
	Likewise.
	(get_block_for_section, build_constant_desc): Likewise.
	(create_constant_pool, force_const_mem): Likewise.
	* tree-iterator.c: Likewise.
	* config/i386/i386.c (get_dllimport_decl): Likewise.
	(ix86_init_machine_status): Likewise.
	(assign_386_stack_local): Likewise.

2009-04-29  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* expr.c: Do not include ggc.h.
	* tree-inline.c: Likewise.
	* Makefile.in (expr.o): Remove $(GGC_H) dependency.
	(tree-inline.o): Likewise.
