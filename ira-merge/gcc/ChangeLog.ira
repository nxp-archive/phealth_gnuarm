2008-09-21  H.J. Lu  <hongjiu.lu@intel.com>

	* ira-lives.c (mark_ref_live): Revert revision 140533.
	(process_bb_node_lives): Likewise.

2008-09-21  Richard Sandiford <rsandifo@nildram.co.uk>

	PR rtl-optimization/37535
	* ira-lives.c (mark_ref_live): Return bool.
	(process_bb_node_lives): Only mark the registers dead which have
	been marked live before without being already live at that point.

2008-09-21  H.J. Lu  <hongjiu.lu@intel.com>

	PR rtl-optimization/37598
	* ira-lives.c (mark_reg_live, mark_reg_dead): Revert revision
	140504.
	(mark_ref_live, mark_ref_dead): Likewise.
	(def_conflicts_with_inputs_p): Likewise.
	(mark_early_clobbers): Likewise.
	(process_bb_node_lives): Likewise..

2008-09-19  Vladimir Makarov  <vmakarov@redhat.com>

	PR middle-end/37535
	* ira-lives.c (mark_reg_live, mark_reg_dead): New functions.
	(mark_ref_live, mark_ref_dead): Use them.
	(def_conflicts_with_inputs_p): Remove.
	(mark_early_clobbers): New function.
	(process_bb_node_lives): Call preprocess_constraints and
	mark_early_clobbers.

2008-09-19  Vladimir Makarov  <vmakarov@redhat.com>

	* ira-color.c (start_allocno_priorities): Rename to
	setup_allocno_priorities.  Use costs and
	ALLOCNO_EXCESS_PRESSURE_POINTS_NUM instead of frequencies and
	range lengths.  Get rid off doubles.
	(ira_fast_allocations): Call start_allocno_priorities.
	
2008-09-18  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-18  Nick Clifton  <nickc@redhat.com>

	* config/frv/frv.h (IRA_COVER_CLASSES): Define.
	(SECONDARY_INPUT_RELOAD_CLASS): Omit unused argument in call
	to frv_secondary_reload_class.
	(SECONDARY_OUTPUT_RELOAD_CLASS): Likewise.
	* config/frv/frv.c (TARGET_SECONDARY_RELOAD): Define.
	(frv_secondary_reload_class): Omit unused parameter.
	(frv_secondary_reload): New function.  Handle the case when
	secondary_reload_class() is called before the reload_(in|out)
	_optabs have been initialised.
	* config/frv/frv-protos.h (frv_secondary_reload_class): Omit
	unused parameter.
	* config/frv/frv.md: Define an exclusion set between fr550_m0
	and fr550_f0.

2008-09-17  Richard Sandiford <rsandifo@nildram.co.uk>

	* doc/tm.texi (TARGET_IRA_COVER_CLASSES): Define.
	(IRA_COVER_CLASSES): Refer to TARGET_IRA_COVER_CLASSES.
	* target.h (gcc_target): Add ira_cover_classes.
	* ira.c: Remove IRA_COVER_CLASSES guards.
	(setup_cover_and_important_classes): Use targetm.ira_cover_classes
	instead of IRA_COVER_CLASSES.
	(setup_cover_and_important_classes): Remove IRA_COVER_CLASSES guard.
	(setup_class_translate): Likewise.
	(setup_reg_class_intersect_union): Likewise.
	(find_reg_class_closure): Replace IRA_COVER_CLASSES guard with a
	test of targetm.ira_cover_classes.
	* opts.c (decode_options): Use targetm.ira_cover_classes instead
	of IRA_COVER_CLASSES.
	* target-def.h (TARGET_IRA_COVER_CLASSES): Define.
	(TARGET_INITIALIZER): Include it.
	* targhooks.h (default_ira_cover_classes): Declare.
	* targhooks.c (default_ira_cover_classes): New function.

2008-09-17  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-08-26  Hans-Peter Nilsson  <hp@axis.com>

	* opts.c (decode_options) [!IRA_COVER_CLASSES]: Add missing
	parameter to inform call.

2008-09-16  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-15  Jakub Jelinek  <jakub@redhat.com>

	* ira-color.c (finish_cost_update): Free update_cost_queue_elems
	rather than update_cost_queue.

2008-09-13  Vladimir Makarov <vmakarov@redhat.com>

	PR middle-end/37448
	* ira-int.h (IRA_ALLOCNO_TEMP): Rename to ALLOCNO_TEMP.
	(ira_compress_allocno_live_ranges): New prototype.

	* ira-color.c: Rename IRA_ALLOCNO_TEMP to ALLOCNO_TEMP.
	(coalesced_allocnos_living_at_program_points): New.
	(coalesced_allocnos_live_at_points_p,
	set_coalesced_allocnos_live_points): New functions.
	(coalesce_spill_slots): Rewrite.
	
	* ira-lives.c (remove_some_program_points_and_update_live_ranges,
	ira_compress_allocno_live_ranges): New functions.

	* ira-build.c (ira_flattening): Call
	ira_compress_allocno_live_ranges.
	(ira_build): Ditto.

2008-09-11  Richard Sandiford <rsandifo@nildram.co.uk>

	* ira-color.c (conflict_allocno_vec): Delete.
	(update_cost_queue_elem): New structure.
	(update_cost_queue): New variable.
	(update_cost_queue_tail): Likewise.
	(update_cost_queue_elems): Likewise.
	(allocno_update_cost_check): Delete.
	(initiate_cost_update): Allocate update_cost_queue_elems
	instead of allocno_update_cost_check.
	(finish_cost_update): Update the free()s accordingly.
	(start_update_cost): New function.
	(queue_update_cost): Likewise.
	(get_next_update_cost): Likewise.
	(update_copy_costs_1): Inline into...
	(update_copy_costs): ...here.  Use a queue instead of recursive calls.
	Use cover_class instead of ALLOCNO_COVER_CLASS (another_allocno),
	once we've established they are equal.  Don't allocate update
	costs if there is nothing to add to them.
	(update_conflict_hard_regno_costs): Remove ALLOCNO and
	DIVISOR arguments.  Use a queue instead of recursive calls;
	process all the allocnos in the initial queue, rather than
	a single allocno.
	(assign_hard_reg): Use queue_update_cost instead of
	conflict_allocno_vec.  Queue coalesced allocnos instead
	of calling update_conflict_hard_regno_costs for each one.
	Just call update_conflict_hard_regno_costs once for the
	entire queue.
	(ira_color): Remove conflict_allocno_vec handling.

2008-09-11  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-02  M R Swami Reddy <MR.Swami.Reddy@nsc.com>

	* config/crx/crx.h (IRA_COVER_CLASSES): Define.

2008-09-11  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-11  Andreas Schwab  <schwab@suse.de>

	* config/m68k/m68k.h (IRA_COVER_CLASSES): Define.

2008-09-11  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-11  Jeff Law <law@redhat.com>

	* reload1.c (alter_reg): Undo the BYTE_BIG_ENDIAN correction performed
	by assign_stack_local on the IRA path for stack slot sharing
	as well as the non-IRA path.

2008-09-11  Eric Botcazou  <ebotcazou@adacore.com>

	PR rtl-optimization/37424
	* ira-color.c (coalesced_pseudo_reg_slot_compare): Untie by comparing
	the regnos instead of the addresses.

2008-09-09  Vladimir Makarov  <vmakarov@redhat.com>

	PR rtl-opt/37435
	* caller-save.c (insert_restore, insert_save): Check the mode by
	reg_save_code.

2008-09-09  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-09  Vladimir Makarov  <vmakarov@redhat.com>

	* ira-conflicts.c (process_regs_for_copy): Check that the hard
	regno is in the right range.  Add comments.

2008-09-08  Vladimir Makarov  <vmakarov@redhat.com>

	* ira-conflicts.c (process_regs_for_copy): Check that the hard
	regno is in the right range.

2008-09-08 Vladimir Makarov <vmakarov@redhat.com>

	PR rtl-opt/37377
	* ira-build.c (common_loop_tree_node_dominator): Remove.
	(copy_live_ranges_to_removed_store_destinations): New function.
	(regno_top_level_allocno_map): Move to top level from ...
	(ira_flattening): ... here. Use
	copy_live_ranges_to_removed_store_destinations.

	* ira-emit.c (generate_edge_moves): Fix a comment.

2008-09-08  Vladimir Makarov  <vmakarov@redhat.com>

	* ira-conflicts.c (process_regs_for_copy): Check that the hard
	regno is not negative.

2008-09-08  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-07  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>

	* config/pa/pa32-regs.h (IRA_COVER_CLASSES): Define.
	* config/pa/pa64-regs.h (IRA_COVER_CLASSES): Likewise.

	2008-09-06  Jeff Law <law@redhat.com>

	* config/h8300/h8300.h (IRA_COVER_CLASSES): Define.

2008-09-08  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-08  Eric Botcazou  <ebotcazou@adacore.com>

	* ira-color.c (ira_reuse_stack_slot): Set slot_num on success at the
	end of the search.

2008-09-07  H.J. Lu  <hongjiu.lu@intel.com>

	* ira-color.c (allocno_live_range_length): Reverted.
	(allocno_spill_priority_compare): Likewise.
	(push_allocnos_to_stack): Likewise.

2008-09-06  Vladimir Makarov  <vmakarov@redhat.com>

	* ira-color.c (allocno_live_range_length): New function.
	(allocno_spill_priority_compare): Use it.
	(push_allocnos_to_stack): Ditto.  Use double for priority
	calculations.

2008-09-06  Vladimir Makarov  <vmakarov@redhat.com>

	PR rtl-opt/37333
	* ira-build.c (ira_create_allocno): Setup frequency to 0.

	* ira-color.c (update_conflict_hard_regno_costs): Remove assert.
	Check zero freq and increase if necessary.

2008-09-06  Vladimir Makarov  <vmakarov@redhat.com>

	* doc/tm.texi (IRA_COVER_CLASSES): Fix a typo.

2008-09-06  H.J. Lu  <hongjiu.lu@intel.com>

	* ira-int.h (ALLOCNO_ORDER_COMPARE): Reverted.
	* ira-color.c (allocno_cost_compare_func,
	bucket_allocno_compare_func, bucket_allocno_compare_func,
	push_allocnos_to_stack, allocno_priority_compare_func): Likewise.
	* ira-build.c (ira_swap_allocno_copy_ends_if_necessary): Likewise.

2008-09-04  Vladimir Makarov  <vmakarov@redhat.com>

	* ira-color.c (ira_fast_allocation): Permit global allocno
	allocation.

2008-09-04  Richard Sandiford  <rdsandiford@googlemail.com>
	    Vladimir Makarov  <vmakarov@redhat.com>

	* ira-int.h (ALLOCNO_ORDER_COMPARE): New.

	* ira-color.c (allocno_cost_compare_func,
	bucket_allocno_compare_func, bucket_allocno_compare_func,
	push_allocnos_to_stack, allocno_priority_compare_func): Use it.

	* ira-build.c (ira_swap_allocno_copy_ends_if_necessary): Ditto.

2008-09-04  Vladimir Makarov  <vmakarov@redhat.com>

	* ira-conflicts.c (process_regs_for_copy): Check insn to check
	that the cost is already taken into account in ira-costs.c

	* ira-int.h (ira_debug_copy, ira_debug_copies): New.

	* ira-build.c (print_copy, print_copies, ira_debug_copy,
	ira_debug_copies): New.

	* doc/tm.texi (IRA_COVER_CLASSES): Fix the description.

2008-09-04  Richard Sandiford <rsandifo@nildram.co.uk>

	* ira-int.h (ira_zero_hard_reg_set, ira_one_hard_reg_set): Delete.
	* ira-color.c (setup_allocno_left_conflicts_num): Use
	hard_reg_set_equal_p instead of a comparison with
	ira_zero_hard_reg_set.
	* ira.c (setup_reg_subclasses): Likewise.
	(setup_cover_and_important_classes): Likewise.
	(setup_class_translate): Likewise.
	(setup_reg_class_intersect_union): Likewise.
	(ira_zero_hard_reg_set, ira_one_hard_reg_set): Delete.
	(ira_init_once): Don't initialize them.

2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>

	PR middle-end/37359
	* ira-lives.c (process_bb_node_lives): Check setjmp.

2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>

	PR rtl-opt/37296
	* ira-int.h (ira_sort_insn_chain): Remove.

	* ira.c (basic_block_order_nums, chain_insn_order,
	chain_freq_compare, chain_bb_compare, ira_sort_insn_chain): Remove.
	(ira): Don't call ira_sort_insn_chain.

	* reload1.c (reload): Don't call ira_sort_insn_chain.

2008-09-02  Richard Sandiford <rsandifo@nildram.co.uk>

	* ira-build.c (form_loop_tree): Use FOR_EACH_BB instead of
	FOR_EACH_BB_REVERSE.
	(create_bb_allocnos): Use FOR_BB_INSNS_REVERSE instead of
	FOR_BB_INSNS.

	* ira-lives.c (make_regno_born_and_dead): Removed.
	(regs_set): Likewise.
	(mark_reg_store): Likewise.
	(mark_reg_clobber): Likewise.
	(mark_reg_conflicts): Likewise.
	(mark_reg_death): Likewise.
	(mark_ref_live): New.
	(def_conflicts_with_inputs_p): Likewise.
	(mark_ref_dead): Likewise.
	(process_bb_node_lives): Updated to use DF instead.
	(ira_create_allocno_live_ranges): Updated.

2008-09-02  Vladimir Makarov  <vmakarov@redhat.com>

	PR rtl-opt/37243
	* ira-int.h (ira_loop_tree_node): Rename mentioned_allocnos to
	all_allocnos.

	* ira-color.c (print_loop_title): Use all_allocnos.
	(color_pass): Ditto.  Don't add border_allocnos.  Check that
	subloop allocno in the correspdoning bitmap all_allocnos.

	* ira-emit.c (change_loop): Use all_allocnos.

	* ira-build.c (create_loop_tree_nodes, finish_loop_tree_node):
	Ditto.
	(ira_create_allocno): Set up all_allocnos bit for the created
	allocno.
	(create_cap_allocno): Remove setting mentioned_allocnos.
	(create_insn_allocnos): Ditto.
	(remove_unnecessary_allocnos): Use all_allocnos.
	(check_allocno_creation): Check that allocnos are in the
	corresponding bitmap all_allocnos.

2008-09-02  Vladimir Makarov  <vmakarov@redhat.com>

	PR rtl-opt/37243
	* ira-conflicts.c (REG_SUBREG_P, go_through_subreg): New.
	(process_regs_for_copy): Process subregs.  Refine check when cost
	is taken into account in ira-costs.c.
	(process_reg_shuffles): Use REG_SUBREG_P.
	(add_insn_allocno_copies): Ditto.  Ignore modes.

	* ira-color.c (conflict_allocno_vec): New.
	(COST_HOP_DIVISOR): New macro.
	(update_copy_costs_1): Use it.
	(update_conflict_hard_regno_costs): New function.
	(assign_hard_reg): Use it.
	(ira_color): Allocate and free conflict_allocno_vec.

2008-09-02  H.J. Lu  <hongjiu.lu@intel.com>

	Backport from mainline:
	2008-09-01  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>

	* ira.c (setup_eliminable_regset): Only declare i if ELIMINABLE_REGS is
	defined.

	2008-08-29  Vladimir Makarov  <vmakarov@redhat.com>

	PR rtl-opt/37251
	* ira-color.c (push_allocnos_to_stack): Truncate
	removed_splay_allocno_vec.

	2008-08-29  Vladimir Makarov  <vmakarov@redhat.com>

	PR rtl-opt/37243
	* ira-color (ira_fast_allocation): Don't assign hard registers to
	global allocnos.
