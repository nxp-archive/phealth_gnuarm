2005-11-02  Paolo Carlini  <pcarlini@suse.de>

	PR libstdc++/24617
	* include/bits/stl_vector.h (vector<>::_M_erase_at_end): New.
	(vector<>::clear, resize): Use it.
	* include/bits/vector.tcc (vector<>::erase(iterator, iterator),
	_M_fill_assign, _M_assign_aux): Likewise.

	* testsuite/23_containers/vector/modifiers/erase/1.cc: New.

2005-10-28  Paolo Carlini  <pcarlini@suse.de>

	Merged to mainline at revision 105943.

2005-10-19  Paolo Carlini  <pcarlini@suse.de>

	* include/ext/sso_string.h (_M_swap): Rewrite.

2005-10-19  Paolo Carlini  <pcarlini@suse.de>

	PR libstdc++/23897
	* include/bits/basic_string.h: Add move constructor and move
	assignment operator; provide specialization of __is_moveable
	for basic_string.
	* testsuite/performance/21_strings/moveable_vector_insert.cc: New.

2005-10-19  Paolo Carlini  <pcarlini@suse.de>

	* include/ext/rc_string.h (_S_terminal): Remove.
	(_M_set_length): Adjust.
	(_S_max_size): Change to anonymous enum.
	(_M_max_size()): Add, returns the latter.
	* include/ext/sso_string.h: Likewise.
	* include/bits/basic_string.h (max_size): Adjust.

2005-10-18  Chris Jefferson <chris@bubblescope.net>

	* include/bits/deque.tcc (deque::erase(iterator)): Make rvalref aware.
	(deque::erase(iterator, iterator)): Likewise.
	(deque::_M_push_back_aux): Template to allow both normal and rvalue
	references, make rvalref aware.
	(deque::_M_push_front_aux): Likewise.
	(deque::_M_insert_aux(iterator, value_type)): Make rvalref aware.
	(deque::_M_insert_aux(iterator, size_type, value_type)): Make rvalref
	aware, add std quantification to fill.
	(deque::_M_insert_aux(iterator, iterator, iterator, size_type)): Make
	rvalref aware.
	(deque::_M_reallocate_map(size_type, bool)): Likewise.
	* include/bits/moveable.h (__move_iterator): Implemented from N1771.
	(__make_move_iterator): Likewise.
	* include/bits/stl_construct.h (_Construct_a): New.
	(_Construct_move_a) : Remove unused function.
	* include/bits/stl_deque.h (deque::push_front(__rvalref),
	deque::push_back(__rvalref)): New.
	(_M_push_front_aux, _M_push_back_aux): Make templated.
	* include/bits/stl_uninitialized.h (__uninitialized_copy_move,
	__uninitialized_move_copy, __uninitialized_fill_move, 
	__uninitialized_move_fill): New.
	* include/bits/stl_vector.h (vector::push_back(__rvalref)): New.
	(vector::_M_insert_aux): Make templated.
	* include/bits/vector.tcc (vector::erase(iterator),
	vector::erase(iterator, iterator)): New.
	(vector::_M_insert_aux(iterator, value_type): Template to allow both
	normal and rvalue references, make rvalref aware.
	(vector::_M_fill_insert(iterator, size_type, value_type)): Make
	rvalref aware.
	* testsuite/23_containers/deque/cons/moveable.cc: New.
	* testsuite/23_containers/deque/modifiers/1.cc: New.
	* testsuite/23_containers/deque/modifiers/moveable.cc: New.
	* testsuite/23_containers/deque/modifiers/moveable2.cc: New.
	* testsuite/23_containers/deque/resize/moveable.cc: New.
	* testsuite/23_containers/vector/cons/moveable.cc: New.
	* testsuite/23_containers/vector/modifiers/3.cc: New.
	* testsuite/23_containers/vector/modifiers/moveable.cc: Tweak.
	* testsuite/23_containers/vector/modifiers/moveable2.cc: New.
	* testsuite/23_containers/vector/resize/moveable.cc: New.
	* testsuite/testsuite_rvalref.h (copycounter::copycounter()):
	Allow copying default-constructed values.
	(copycounter::~copycounter()): Add destructor.

2005-10-13  Paolo Carlini  <pcarlini@suse.de>

	Merged to mainline at tag libstdcxx_so_7-merge-20051013.

	(Recent patches to ext/rc_string_base.h and ext/sso_string_base.h
	applied to ext/rc_string.h and ext/sso_string.h, respectively)

2005-09-19  Benjamin Kosnik  <bkoz@redhat.com>

	* include/ext/mt_allocator.h (__destroy_handler): Remove.
	(__pool<true>::_M_initialize(__destroy_handler): Remove.
	(__pool<true>::_M_destroy_thread_key): Remove.
	* src/mt_allocator.cc: Same.
	* config/linker-map.gnu: Cleanups.

2005-09-18  Paolo Carlini  <pcarlini@suse.de>

	Merged to mainline at tag libstdcxx_so_7-merge-20050918.

	(Adjusted v7-specific exports in linker-map.gnu)
	(Fixed libstdc++/23767 in a slightly different (more general) way)

2005-09-11  Chris Jefferson <chris@bubblescope.net>

	* include/bits/moveable.h (__move): Add overload for const references.
	* testsuite/25_algorithms/sort/sort-vectorbool.cc: New.

2005-09-09  Chris Jefferson <chris@bubblescope.net>

	* include/bits/stl_construct.h (_Construct_move_a): New.
	* include/bits/stl_uninitialized.h (__uninitialized_move,
	__uninitialized_move_a): New.
	* include/bits/stl_vector.h (vector::_M_allocate_and_move): New.
	* include/bits/vector.tcc (vector::reserve, vector::_M_insert_aux,
	vector::_M_fill_insert, vector::_M_range_insert): Make rvalref aware.
	* testsuite/23_containers/vector/modifiers/moveable.cc: New.
	* testsuite/testsuite_rvalref.h (rvalstruct): Add documentation.
	(copycounter): New.

2005-09-09  Paolo Carlini  <pcarlini@suse.de>

	*testsuite/performance/25_algorithms/sort.cc: Rename
	__is_moveable<int_wrap>::value -> __value.

2005-09-07  Chris Jefferson <chris@bubblescope.net>

	* include/bits/stl_algo.h (search_n): Delegate to specializations.
	(__search_n(std::forward_iterator_tag): Original search_n, tweak to
	remove an unnecessary comparison.

2005-09-07  Jim Xochellis <jimxoch@yahoo.gr>

	* include/bits/stl_algo.h (__search_n(std::random_access_iterator_tag):
	Add specialization.

2005-09-04  Paolo Carlini  <pcarlini@suse.de>

	Merged to mainline at tag libstdcxx_so_7-merge-20050904.

2005-09-02  Paolo Carlini  <pcarlini@suse.de>

	PR libstdc++/20787 (DR 130 [DR])
	* include/bits/stl_tree.h (_Rb_tree<>::erase(iterator),
	_Rb_tree<>::erase(iterator, iterator)): Adjust to return
	an iterator, as per the resolution of DR 130.
	* include/bits/stl_map.h (map<>::erase(iterator),
	map<>::erase(iterator, iterator)): Update consistently.
	* include/bits/stl_multimap.h (multimap<>::erase(iterator),
	multimap<>::erase(iterator, iterator)): Likewise.
	* include/bits/stl_multiset.h (multiset<>::erase(iterator),
	multiset<>::erase(iterator, iterator)): Likewise.
	* include/bits/stl_set.h (set<>::erase(iterator),
	set<>::erase(iterator, iterator)): Likewise.
	* include/debug/map.h (map<>::erase(iterator),
	map<>::erase(iterator, iterator)): Likewise.
	* include/debug/multimap.h (multimap<>::erase(iterator),
	multimap<>::erase(iterator, iterator)): Likewise.
	* include/debug/multiset.h (multiset<>::erase(iterator),
	multiset<>::erase(iterator, iterator)): Likewise.
	* include/debug/set.h (set<>::erase(iterator),
	set<>::erase(iterator, iterator)): Likewise.
	* docs/html/ext/howto.html: Add an entry for DR 130.
	* testsuite/23_containers/map/erase/1.cc: New.
	* testsuite/23_containers/multimap/erase/1.cc: Likewise.
	* testsuite/23_containers/multiset/erase/1.cc: Likewise.
	* testsuite/23_containers/set/erase/1.cc: Likewise.

2005-07-28  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050728.

        (Not merged ext/vstring)

2005-07-28  Chris Jefferson <chris@bubblescope.net>
	    Jonathan Wakely  <redi@gcc.gnu.org>

	(http://gcc.gnu.org/ml/libstdc++/2005-07/msg00041.html)
	* include/bits/stl_bvector.h (vector::vector(__rvalref)): Fix typo,
	template constructor.
	(vector::operator=(__rvalref)): Template.
	* include/bits/stl_vector.h: Template rvalref constructor and rvalref
	operator=.
	* include/bits/stl_deque.h: Likewise.
	* include/bits/stl_list.h: Likewise.
	* include/bits/stl_map.h: Likewise.
	* include/bits/stl_multimap.h: Likewise.
	* include/bits/stl_multiset.h: Likewise.
	* include/bits/stl_set.h: Likewise.
	* testsuite/23_containers/deque/moveable2.cc: New.
	* testsuite/23_containers/list/moveable2.cc: New.
	* testsuite/23_containers/map/moveable2.cc: New.
	* testsuite/23_containers/multimap/moveable2.cc: New.
	* testsuite/23_containers/multiset/moveable2.cc: New.
	* testsuite/23_containers/set/moveable2.cc: New.
	* testsuite/23_containers/list/moveable2.cc: New.
	* testsuite/23_containers/vector/moveable2.cc: New.
	* testsuite/23_containers/vector/moveable.cc: Tweak.

2005-07-15  Paolo Carlini  <pcarlini@suse.de>

	* include/bits/moveable.h: Rename __is_moveable::value -> __value.
	* include/bits/stl_algo.h: Likewise.
	* include/bits/stl_algobase.h: Likewise.
	* include/bits/stl_deque.h: Likewise.
	* include/bits/stl_list.h: Likewise.
	* include/bits/stl_map.h: Likewise.
	* include/bits/stl_multimap.h: Likewise.
	* include/bits/stl_multiset.h: Likewise.
	* include/bits/stl_pair.h: Likewise.
	* include/bits/stl_set.h: Likewise.
	* include/bits/stl_vector.h: Likewise.
	* testsuite/testsuite_rvalref.h: Likewise.

2005-07-01  Paolo Carlini  <pcarlini@suse.de>

	* include/ext/sso_string.h (struct __sso_string_base):
	Add _Traits template parameter; tweak typedefs.
	(class __sso_string): Adjust consistently.

2005-06-30  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050630.

        (Not merged the ABI compatibility bits)

2005-06-29  Chris Jefferson <chris@bubblescope.net>

	PR libstdc++/21796
	* include/bits/predefined_ops.h (__bind2nd, bind2nd): New.
	* include/bits/stl_algo.h (search): Delegate to specializations.
	(__search(,,,,,forward_iterator_tag): Tidy up original version of
	std::search, add calls to find_if.
	(__search(,,,,,random_access_iterator_tag): Add new random access
	specialization.
	* testsuite/25_algorithms/search/1.cc: Add new test.
	* testsuite/25_algorithms/search/check_type.cc: Improve and extend
	tests.

2005-06-29  Paolo Carlini  <pcarlini@suse.de>

	* src/string-inst.cc: Add explicit instantiations of __search and
	__find_if.

2005-06-16  Paolo Carlini  <pcarlini@suse.de>

	* include/std/std_string.h: Don't include <algorithm>.

	* include/ext/sso_string.h: Move all the includes (besides
	atomicity.h) to string_util.h.
	* include/ext/rc_string.h: Likewise.
	* include/ext/string_util.h: Adjust accordingly.

	* include/ext/sso_string.h: Change inheritance from
	__string_utility to protected; change _S_terminal to private.
	* include/ext/rc_string.h: Likewise.

2005-06-14  Paolo Carlini  <pcarlini@suse.de>

	* include/ext/sso_string.h: Remove the const _Alloc& argument
	from all the member functions, simply use _M_get_allocator()
	instead; change _S_create to non-static and rename as _M_create.
	* src/sso_string-inst.cc: Likewise, remove the argument.

	* include/ext/sso_string.h (__sso_string(const _Alloc&)): Simplify,
	just call _M_set_length.

2005-06-14  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050614.

	(Adjusted debug/string::swap to disambiguate _M_swap)

2005-06-13  Chris Jefferson  <chris@bubblescope.net>

	* include/bits/stl_algo.h (adjacent_find, search, search_n, unique,
	partial_sort, lower_bound, upper_bound, merge, inplace_merge, 
	nth_element, equal_range, binary_search, includes, set_union,
	set_intersection, set_difference, set_symmetric_difference,
	max_element, min_element, next_permutation, prev_permutation, 
	partial_sort_copy, find_first_of): Add inline to trivial function.
	(__partition(,,,forward_iterator_tag),
	__partition(,,,bidirectional_iterator_tag), __inplace_stable_partition,
	__stable_partition_adaptive, __unguarded_partition, _S_threshold,
	__unguarded_linear_insert, __unguarded_nocopy_partition,
	__unguarded_mid_partition, __unguarded_insertion_sort, __introsort_loop,
	__inplace_stable_sort): Extend existing comment.
	(__introsort_partition, __merge_sort_loop, _S_chuck_size,
	__chunk_insertion_sort, __merge_sort_with_buffer,
	__stable_sort_adaptive): Add comment.
	* include/bits/stl_algobase.h (mismatch, lexicographical_compare) : Add
	inline to trivial functions.
	(copy): Correct minor error in comment.
	(__move, __move_backward): Add comments.
	* include/bits/stl_heap.h (__is_heap(_RandomAccessIterator, _Distance),
	__is_heap(_RandomAccessIterator, _RandomAccessIterator), 
	__is_heap(_RandomAccessIterator, _RandomAccessIterator, __comp), 
	make_heap, sort_heap): Add inline to trivial functions.

	* include/bits/stl_algo.h (partial_sort_copy): Fix missing return.

2005-06-12  Paolo Carlini  <pcarlini@suse.de>

	* include/bits/basic_string.h (reserve): Forward to
	_M_reserve.
	(assign(const basic_string&)): Likewise to _M_assign.
	* include/bits/basic_string.tcc (reserve,
	assign(const basic_string&)): Remove.
	* include/ext/rc_string.h (_M_reserve): Tweak consistently.
	* include/ext/sso_string.h (_M_reserve): Likewise.

	* include/ext/sso_string.h (_M_dispose): New, check
	_M_is_local and forward to _M_destroy.
	(_M_destroy): Adjust; adjust all callers to use _M_dispose.
	(_M_reserve): Use _M_destroy.

	* include/ext/sso_string.h: Rename _S_construct ->
	_M_construct.
	* src/sso_string-inst.cc: Likewise.

	* src/allocator-inst.cc: Add instantiation for size_t.
	* src/bitmap_allocator.cc: Likewise.

2005-06-11  Paolo Carlini  <pcarlini@suse.de>

	* include/ext/sso_string.h (__sso_string::_Alloc_hider): Adjust
	constructor to take an additional _CharT*.
	(__sso_string): Adjust constructors and _S_construct to use the
	above; slightly tweak _M_assign.

2005-06-10  Paolo Carlini  <pcarlini@suse.de>

	* src/rc_string-inst.cc: Fix typo in comment.
	* src/wrc_string-inst.cc: Likewise.
	* src/sso_string-inst.cc: Likewise.
	* src/wsso_string-inst.cc: Likewise.

2005-06-10  Paolo Carlini  <pcarlini@suse.de>

	* acinclude.m4: Add __sso_string and change the default.
	* config/linker-map.gnu: Add symbols.
	* config/string/sso_string_base.h: Add.
	* include/Makefile.am: Add sso_string.h.
	* include/ext/sso_string.h: New basic_string base class (not
	reference counted + simple optimization for short strings).
	* src/Makefile.am: Add sso_string-inst.cc, wsso_string-inst.cc.
	* src/sso_string-inst.cc: __sso_string<char> instantiations.
	* src/wsso_string-inst.cc: Likewise for wchar_t.
	* configure: Regenerate.
	* include/Makefile.in: Likewise.
	* src/Makefile.in: Likewise.

2005-06-06  Chris Jefferson  <chris@bubblescope.net>

	* include/bits/stl_algo.h (__unguarded_linear_insert): Remove 
	unnecessary parameter, make rvalref aware.
	(__unguarded_nocopy_partition, __unguarded_mid_partition,
	__introsort_partition): New helper functions.
	(__insertion_sort): Make rvalref aware, adapt to new
	__unguarded_linear_insert.
	(__unguarded_insertion_sort): Adapt to new __unguarded_linear_insert.
	(__introsort_loop, nth_element): Use __introsort_partition.
	* include/bits/stl_algobase.h (__move, __move_backward): New.
	* testsuite/25_algorithms/nth_element/moveable.cc: New.
	* testsuite/25_algorithms/partial_sort/moveable.cc: New.
	* testsuite/25_algorithms/sort/moveable.cc: New.
	* testsuite/25_algorithms/sort.cc: Move to...
	* testsuite/25_algorithms/sort/sort.cc: ...here.
	* testsuite/performance/25_algorithms/sort.cc: New.

2005-06-05  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050605.

	(N.B. The fix for libstdc++/19495 stays in the branch: the reversion
	from mainline was due to binary compatibility issues.)

2005-05-22  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050522.

2005-20-05  Chris Jefferson  <chris@bubblescope.net>

	* include/bits/stl_algo.h (remove, remove_if): Make rvalref aware.
	(__rotate(,,,forward_iterator_tag)): Make rvalref aware and convert 
	swap to iter_swap.
	(__rotate(,,,bidirectional_iterator_tag)): Likewise.
	(__rotate(,,,random_access_iterator_tag)): Make rvalref aware.
	(__partition(,,,forward_iterator_tag)): Convert swap to iter_swap.
	(partial_sort) : Remove parameter from __pop_heap.
	* include/bits/stl_heap.h (__push_heap): Rearrange order of template
	parameters, make rvalref aware.
	(push_heap(,,_Compare)): Make rvalref aware.
	(push_heap(,)): Likewise.
	(__adjust_heap): Rearrange order of template parameters, make rvalref
	aware.
	(__pop_heap): Remove unnecessary parameter, make rvalref aware.
	(pop_heap(,)): Remove parameter from __pop_heap.
	(pop_heap(,,_Compare)): Likewise.
	(make_heap): Make rvalref aware.
	* testsuite/25_algorithms/heap.cc: Move to...
	* testsuite/25_algorithms/heap/heap.cc: ...here.
	* testsuite/25_algorithms/partition.cc: Move to...
	* testsuite/25_algorithms/partition/partition.cc: ...here.
	* testsuite/25_algorithms/heap/moveable.cc: New.
	* testsuite/25_algorithms/partition/moveable.cc: New.
	* testsuite/25_algorithms/remove/moveable.cc: New.
	* testsuite/25_algorithms/remove_if/1.cc: Test correct function!
	* testsuite/25_algorithms/remove_if/moveable.cc: New.
	* testsuite/25_algorithms/reverse/moveable.cc: New.
	* testsuite/25_algorithms/rotate/moveable.cc: New.
	* testsuite/25_algorithms/swap_ranges/check_type.cc: Alter to pass
	concept checks.
	* testsuite/25_algorithms/swap_ranges/moveable.cc: New.
	* testsuite/25_algorithms/unique/moveable.cc: Disable concept checks.
	* testsuite/testsuite_rvalref.h (rvalstruct): Provide way to enable 
	copy constructor.
	(rvalstruct::rvalstruct(int)): New.
	(rvalstruct::operator=(int)): Add extra check.

2005-05-12  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050512.

2005-04-25  Christopher Jefferson  <chris@bubblescope.net>

	* include/bits/stl_algo.h (count): Correct concept checks.
	(search_n): Likewise.
	* testsuite/25_algorithms/search_n/check_type.cc: New.

2005-04-25  Christopher Jefferson  <chris@bubblescope.net>

	* testsuite/testsuite_iterators.h 
	(random_access_iterator_wrapper::operator+): Move out of
	class to external function, and add symmetric version.

2005-04-17  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050417.

2005-04-17  Christopher Jefferson  <chris@bubblescope.net>

	* include/bits/stl_vector.h (vector::operator==): Add missing
	return value.
	* include/bits/stl_bvector.h (vector<bool>): Add rvalue ref
	constructor and operator=.
	* include/bits/stl_deque.h (deque): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark deque as
	rvalue ref aware.
	* include/bits/stl_list.h (list): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark list as
	rvalue ref aware.
	* include/bits/stl_map.h (map): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark map as
	rvalue ref aware.
	* include/bits/stl_multimap.h (multimap): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark multimap as
	rvalue ref aware.
	* include/bits/stl_multiset.h (multiset): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark multiset as
	rvalue ref aware.
	* include/bits/stl_pair.h (pair): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark pair as
	rvalue ref aware.
	* include/bits/stl_set.h (set): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark set as
	rvalue ref aware.
	* testsuite/20_util/utility/pair/moveable.cc: New.
	* testsuite/23_containers/deque/moveable.cc: Likewise.
	* testsuite/23_containers/list/moveable.cc: Likewise.
	* testsuite/23_containers/map/moveable.cc: Likewise.
	* testsuite/23_containers/multimap/moveable.cc: Likewise.
	* testsuite/23_containers/multiset/moveable.cc: Likewise.
	* testsuite/23_containers/set/moveable.cc: Likewise.
	* testsuite/performance/25_algorithms/unique.cc: Likewise.
	* testsuite/testsuite_rvalref.h (rvalstruct): Simplify.
	* testsuite/25_algorithms/unique/moveable.cc: Modify to use new
	rvalstruct.

2005-03-29  Christopher Jefferson  <chris@bubblescope.net>

	* testsuite/25_algorithms/includes/1.cc: Add tests.
	* testsuite/25_algorithms/search/1.cc: Likewise.
	* testsuite/25_algorithms/unique_copy/1.cc: Likewise.
	* testsuite/25_algorithms/swap_ranges/1.cc: New.
	* testsuite/25_algorithms/swap_ranges/check_type.cc: New.
	* testsuite/25_algorithms/rotate.cc: Move to...
	* testsuite/25_algorithms/rotate/rotate.cc: ... here.
	* testsuite/25_algorithms/rotate/1.cc: New.
	* testsuite/25_algorithms/rotate/check_type.cc: New.
	* testsuite/25_algorithms/search_n/iterator.cc: Fix typo.

2005-03-22  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050322.

2005-03-22  Christopher Jefferson  <chris@bubblescope.net>

	* include/bits/moveable.h: New.
	* include/Makefile.am: Add.
	* include/Makefile.in: Regenerate.
	* include/bits/stl_algo.h (unique): Make rvalue ref aware.
	* include/bits/stl_vector.h (vector): Add rvalue ref constructor
	and operator=.
	(__gnu_cxx::__is_moveable): Add overload to mark vector<T> as
	rvalue ref aware.
	* testsuite/testsuite_rvalref.h: New.
	* testsuite/23_containers/vector/moveable.cc: New.
	* testsuite/25_algorithms/unique/moveable.cc: New.

2005-03-14  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050314.

2005-03-14  Christopher Jefferson  <chris@bubblescope.net>

	* include/bits/stl_algo.h (replace_copy, replace_copy_of):
	Don't assume that __new_value and *__first are convertible to
	each other.	

	* include/bits/stl_algobase.h (min): Readd lost comment.
	* include/bits/predefined_ops.h (equal_to::operator(),
	less::operator()): Add const.
	* testsuite/testsuite_iterators.h (WritableObject::WritableObject):
	Add const.
	* testsuite/25_algorithms/find/1.cc: New.
	* testsuite/25_algorithms/find/check_type.cc: New.
	* testsuite/25_algorithms/find_if/1.cc: New.
	* testsuite/25_algorithms/find_if/check_type.cc: New.
	* testsuite/25_algorithms/replace/1.cc: New.
	* testsuite/25_algorithms/replace/check_type.cc: New.
	* testsuite/25_algorithms/replace_if/1.cc: New.
	* testsuite/25_algorithms/replace_if/check_type.cc: New.
	* testsuite/25_algorithms/replace_copy/1.cc: New.
	* testsuite/25_algorithms/replace_copy/check_type.cc: New.
	* testsuite/25_algorithms/replace_copy_if/1.cc: New.
	* testsuite/25_algorithms/replace_copy_if/check_type.cc: New.
	* testsuite/25_algorithms/remove/1.cc: New.
	* testsuite/25_algorithms/remove/check_type.cc: New.
	* testsuite/25_algorithms/remove_if/1.cc: New.
	* testsuite/25_algorithms/remove_if/check_type.cc: New.
	* testsuite/25_algorithms/count/1.cc: New.
	* testsuite/25_algorithms/count/check_type.cc: New.
	* testsuite/25_algorithms/count_if/1.cc: New.
	* testsuite/25_algorithms/count_if/check_type.cc: New.

2005-02-27  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050227.

2005-02-27  Christopher Jefferson  <chris@bubblescope.net>
            Paolo Carlini  <pcarlini@suse.de>

	* include/bits/stl_heap.h (__is_heap, __push_heap, push_heap, 
	pop_heap, make_heap, sort_heap): Make non-predicated version call
	predicated version.
	* include/bits/stl_algobase.h (min, max): Likewise.
	* testsuite/ext/is_heap/check_type.cc : New.

2005-02-27  Paolo Carlini  <pcarlini@suse.de>

	* testsuite/ext/is_heap/1.cc: New.

2005-02-21  Paolo Carlini  <pcarlini@suse.de>

	PR libstdc++/17922 (ABI-unsafe half)
	* config/io/c_io_stdio.h (struct __ios_flags): Remove.
	* include/bits/ios_base.h (enum _Ios_Fmtflags, enum _Ios_Openmode,
	enum _Ios_Iostate, enum _Ios_Seekdir): Remove *_end enumerators.
	(class ios_base): Adjust fmtflags, iostate, openmore, seekdir
	static constants.
	* src/ios.cc: Remove definitions of __ios_flags constants.
	* testsuite/27_io/ios_base/types/fmtflags/case_label.cc: Adjust,
	removing the dummy label.
	* testsuite/27_io/ios_base/types/iostate/case_label.cc: Likewise.
	* testsuite/27_io/ios_base/types/openmode/case_label.cc: Likewise.
	* testsuite/27_io/ios_base/types/seekdir/case_label.cc: Likewise.
	* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust dg-error
	line numbers.
	* testsuite/27_io/ios_base/cons/copy_neg.cc: Likewise.

2005-02-21  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050221.

2005-02-20  Paolo Carlini  <pcarlini@suse.de>

	* include/ext/rc_string.h: Add __rc_string(const __rc_string&);
	restore the _M_data(_CharT*); add _M_length(), _M_capacity(),
	_M_set_length(); minor clean-ups.
	(__rc_string(_CharT*, const _Alloc&), _M_data_pointer): Remove.
	(_M_assign): Tweak to take a const __rc_string&.
	(_M_swap): Tweak to take a __rc_string&.
	(_Rep::_M_is_shared, _M_is_leaked, _M_set_shared, _M_set_leaked):
	Move out to __rc_string.
	* include/bits/basic_string.h: Tweak consistently with the above.
	* include/bits/basic_string.tcc: Likewise.

2005-02-18  Paolo Carlini  <pcarlini@suse.de>

	* acinclude.m4 ([GLIBCXX_ENABLE_STRING]): New, allows to
	configure at build time the memory allocation policy.
	* configure.ac: Use it.
	* config/linker-map.gnu: Add symbols.
	* config/string/rc_string_base.h: New.
	* include/Makefile.am: Add new headers.
	(host_headers_extra): Add c++string.h.
	* include/bits/basic_string.h: Remove the low level memory
	allocation bits, now configurable: basic_string derives 
	from ___glibcxx_base_string, included via c++string.h.
	* include/bits/basic_string.tcc: Likewise use facilities
	provided by the base class.
	* include/ext/rc_string.h: New, __rc_string encapsulates
	a reference-counted memory allocation policy, very similar
	to the traditional one; derives from __string_utility.
	* include/ext/string_util.h: New, class __string_utility
	provides static utility function for moving and copying
	chars.
	* src/rc_string-inst.cc: New, __rc_string instantiations.
	* src/wrc_string-inst.cc: Likewise.
	* src/Makefile.am: Add.
	* src/string-inst.cc: Tweak consistently.
	* Makefile.in: Regenerate
	* configure: Likewise.
	* include/Makefile.in: Likewise.
	* libmath/Makefile.in: Likewise.
	* libsupc++/Makefile.in: Likewise.
	* po/Makefile.in: Likewise.
	* src/Makefile.in: Likewise.
	* testsuite/Makefile.in: Likewise.

2005-02-16  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050216.

2005-02-10  Paolo Carlini  <pcarlini@suse.de>

	* testsuite/21_strings/basic_string/capacity/1.c: Tweak, avoid
	the assumption that the capacity of a default constructed string
	is zero.
	* testsuite/21_strings/basic_string/capacity/char/1.cc: Same.
	* testsuite/21_strings/basic_string/capacity/char/18654.cc: Same.
	* testsuite/21_strings/basic_string/capacity/char/2.cc: Same.
	* testsuite/21_strings/basic_string/capacity/wchar_t/1.cc: Same.
	* testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc: Same.
	* testsuite/21_strings/basic_string/capacity/wchar_t/2.cc: Same.

	* testsuite/21_strings/basic_string/swap/char/1.cc: New.
	* testsuite/21_strings/basic_string/swap/wchar_t/1.cc: Same.

2005-02-01  Paolo Carlini  <pcarlini@suse.de>

	* include/bits/stl_algo.h: Minor tweaks (i.e., add missing std::
	qualifications, remove unused typedefs, formatting).

2005-02-01  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050201.

2005-02-01  Christopher Jefferson  <chris@bubblescope.net>

	* include/bits/stl_algo.h (__median, adjacent_find, search, search_n,
	unique, unique_copy, partial_sort, partial_sort_copy, sort, 
	lower_bound, merge, inplace_merge, stable_sort, nth_element, 
	equal_range, binary_search, includes, set_union, set_intersection,
	set_difference, set_symmetric_difference, min_element, max_element,
	next_permutation, prev_permutation, find_first_of, find_end): 
	Make non-predicated version call predicated version.

2005-02-01  Christopher Jefferson  <chris@bubblescope.net>

	* testsuite/testsuite_iterators.h (random_access_iterator_wrapper::
	operator--) : Fix typo.
	(OutputContainer::OutputContainer) : Correct zeroing array.
	(WritableObject::operator==) : Fix typo.
        (WritableObject::operator=) : make operator= templated 
	to allow differing types to be assigned.
	(WritableObject::operator++) : Fix checking if iterator is
	written to multiple times.
	(random_access_iterator_wrapper::operator+) : Add const.
	(random_access_iterator_wrapper::operator-) : Likewise.
	(random_access_iterator_wrapper::operator[]) : Add dereference.
	* testsuite/ext/median.cc: New.
	* testsuite/25_algorithms/adjacent_find/1.cc: New.
	* testsuite/25_algorithms/adjacent_find/check_type.cc: New.
	* testsuite/25_algorithms/search/1.cc: New.
	* testsuite/25_algorithms/search/check_type.cc: New.
	* testsuite/25_algorithms/unique_copy/1.cc: New.
	* testsuite/25_algorithms/unique_copy/check_type.cc: New.
	* testsuite/25_algorithms/partial_sort/1.cc: New.
	* testsuite/25_algorithms/partial_sort/check_type.cc: New.
	* testsuite/25_algorithms/partial_sort_copy/1.cc: New.
	* testsuite/25_algorithms/partial_sort_copy/check_type.cc: New.
	* testsuite/25_algorithms/lower_bound/1.cc: New.
	* testsuite/25_algorithms/lower_bound/check_type.cc: New.
	* testsuite/25_algorithms/upper_bound/1.cc: New.
	* testsuite/25_algorithms/upper_bound/check_type.cc: New.
	* testsuite/25_algorithms/merge/1.cc: New.
	* testsuite/25_algorithms/merge/check_type.cc: New.
	* testsuite/25_algorithms/inplace_merge/1.cc: New.
	* testsuite/25_algorithms/inplace_merge/check_type.cc: New.
	* testsuite/25_algorithms/stable_sort/1.cc: New.
	* testsuite/25_algorithms/stable_sort/check_type.cc: New.
	* testsuite/25_algorithms/nth_element/1.cc: New.
	* testsuite/25_algorithms/nth_element/check_type.cc: New.
	* testsuite/25_algorithms/equal_range/1.cc: New.
	* testsuite/25_algorithms/equal_range/check_type.cc: New.
	* testsuite/25_algorithms/binary_search/1.cc: New.
	* testsuite/25_algorithms/binary_search/check_type.cc: New.
	* testsuite/25_algorithms/includes/1.cc: New.
	* testsuite/25_algorithms/includes/check_type.cc: New.
	* testsuite/25_algorithms/set_union/1.cc: New.
	* testsuite/25_algorithms/set_union/check_type.cc: New.
	* testsuite/25_algorithms/set_intersection/1.cc: New.
	* testsuite/25_algorithms/set_intersection/check_type.cc: New.
	* testsuite/25_algorithms/set_difference/1.cc: New.
	* testsuite/25_algorithms/set_difference/check_type.cc: New.
	* testsuite/25_algorithms/set_symmetric_difference/1.cc: New.
	* testsuite/25_algorithms/set_symmetric_difference/check_type.cc: New.	
	* testsuite/25_algorithms/min_element/1.cc: New.
	* testsuite/25_algorithms/min_element/check_type.cc: New.
	* testsuite/25_algorithms/max_element/1.cc: New.
	* testsuite/25_algorithms/max_element/check_type.cc: New.
	* testsuite/25_algorithms/prev_permutation/1.cc: New.
	* testsuite/25_algorithms/prev_permutation/check_type.cc: New.
	* testsuite/25_algorithms/next_permutation/1.cc: New.
	* testsuite/25_algorithms/next_permutation/check_type.cc: New.
	* testsuite/25_algorithms/find_first_of/1.cc: New.
	* testsuite/25_algorithms/find_first_of/check_type.cc: New.
	* testsuite/25_algorithms/find_end/1.cc: New.
	* testsuite/25_algorithms/find_end/check_type.cc: New.
	* testsuite/25_algorithms/equal/check_type.cc: Insert iterator type.
	* testsuite/25_algorithms/lexicographical_compare/check_type.cc:
	Likewise.

2005-01-30  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050130.

2005-01-25  Loren J. Rittle  <ljrittle@acm.org>

	* include/bits/locale_facets.h (ctype<wchar_t>::_M_bit):
	Base size on bits in __wmask_type.
	(ctype<wchar_t>::_M_wmask): Likewise.
	* config/locale/generic/ctype_members.cc: Remove magic numbers.

2005-01-24  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050124.

2005-01-18  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050118.

2005-01-12  Christopher Jefferson <chris@bubblescope.net>

	* include/bits/stl_function.h (mem_fun_t, const_mem_fun_t,
	mem_fun_ref_t, const_mem_fun_ref_t, mem_fun1_t, const_mem_fun1_t,
	mem_fun1_ref_t, const_mem_fun1_ref_t): Remove overloads for void
	return type, just an old HP/SGI workaround.
	* testsuite/20_util/functional/binders.cc: Move to...
	* testsuite/20_util/functional/binders/3113.cc: ...here.
	* testsuite/20_util/functional/binders/1.cc: New.

2005-01-10  Paolo Carlini  <pcarlini@suse.de>

	* include/bits/stl_algobase.h (lexicographical_compare):
	Fix concept check.

2005-01-10  Christopher Jefferson <chris@bubblescope.net>

	* include/bits/predefined_ops.h: New.
	* include/Makefile.am: Add.
	* include/Makefile.in: Regenerate.
	* include/bits/stl_algobase.h (mismatch, equal,
	lexicographical_compare): Make non-predicate version call predicated
	version.
	* testsuite/25_algorithms/lexicographical_compare/check_type.cc: New.
	* testsuite/25_algorithms/lexicographical_compare/1.cc: Likewise.
	* testsuite/25_algorithms/mismatch/check_type.cc: Likewise.
	* testsuite/25_algorithms/mismatch/1.cc: Likewise.
	* testsuite/25_algorithms/equal/check_type.cc: New.
	* testsuite/25_algorithms/equal/1.cc: New.

2005-01-09  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20050109.

2004-12-31  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041231.

2004-12-06  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041206.

2004-11-17  Paolo Carlini  <pcarlini@suse.de>

	DR 434. bitset::to_string() hard to use [Ready]
	* include/std/std_bitset.h (to_string): Add three overloads, taking
	fewer template arguments.
	* docs/html/ext/howto.html: Add an entry for DR 434.
	* testsuite/23_containers/bitset/to_string/1.cc: New.

2004-11-16  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041116.

2004-11-08  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041108.

2004-10-28  Chris Jefferson  <chris@bubblescope.net>

	PR libstdc++/17441
	* include/bit/stl_algo.h (find(,,,input_iterator_tag),
	find(,,,random_access_interator_tag),
	find_if(,,,input_iterator_tag),
	find_if(,,,random_access_iterator_tag)): Uglify function name.
	(find, find_if): Use new uglified specialisation names.
	* testsuite/25_algorithms/find/17441.cc: New.

2004-10-25  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041025.

2004-10-18  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041018.

2004-10-10  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041010.

2004-10-08  Paolo Carlini  <pcarlini@suse.de>

	* include/bits/stl_map.h (map::map(const _Compare&,
	const allocator_type&), map::map(_InputIterator, _InputIterator,
	const _Compare&, const allocator_type&)): Implement according to
	the letter of the standard, i.e., don't use two overloads.
	* include/bits/stl_multimap.h: Likewise for multimap.
	* include/bits/stl_multiset.h: Likewise for multiset.
	* include/bits/stl_set.h: Likewise for set.

	* include/bits/stl_bvector.h (vector::vector(size_type, bool,
	const allocator_type&)): Don't use two overloads; fix the
	signature, the second argument is by const ref.

	* include/bits/stl_bvector.h (assign(size_t, bool)): Fix the
	signature: according to the standard the second argument is by
	const ref.
	(insert(iterator, bool)): Likewise.
	(insert(iterator, size_type, bool)): Likewise for the third arg.

2004-10-03  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20041003.

2004-09-24  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20040924.

2004-09-24  Paolo Carlini  <pcarlini@suse.de>
	    Jonathan Wakely  <redi@gcc.gnu.org>

	* include/bits/stl_list.h (list::list(size_type, value_type,
	const allocator_type&): Implement according to the letter of the
	standard, i.e., don't use two overloads, not equivalent in case
	of non default constructible T.
	(list::resize(size_type, const value_type&)): Fix the signature:
	according to the standard the second argument is by value; also,
	don't use two overloads.
	* include/bits/list.tcc (list::resize(size_type, const value_type&)):
	Adjust consistently the signature.
	* include/bits/stl_deque.h (deque::deque(size_type, value_type,
	const allocator_type&)): Likewise.
	(deque::resize(size_type, const value_type&)): Likewise.
	* include/bits/stl_vector.h (vector::vector(size_type, value_type,
	const allocator_type&)): Likewise.
	(vector::resize(size_type, const value_type&)): Likewise.
	* testsuite/testsuite_hooks.h: Add NonDefaultConstructible test type.
	* testsuite/23_containers/deque/explicit_instantiation.cc: Move to...
	* testsuite/23_containers/deque/explicit_instantiation/1.cc: ...here.
	* testsuite/23_containers/deque/explicit_instantiation/2.cc: New.
	* testsuite/23_containers/list/explicit_instantiation.cc: Move to...
	* testsuite/23_containers/list/explicit_instantiation/1.cc: ...here.
	* testsuite/23_containers/list/explicit_instantiation/2.cc: New.
	* testsuite/23_containers/map/explicit_instantiation.cc: Move to...
	* testsuite/23_containers/map/explicit_instantiation/1.cc: ...here.
	* testsuite/23_containers/map/explicit_instantiation/2.cc: New.
	* testsuite/23_containers/multimap/explicit_instantiation.cc: Move to...
	* testsuite/23_containers/multimap/explicit_instantiation/1.cc: ...here.
	* testsuite/23_containers/multimap/explicit_instantiation/2.cc: New.
	* testsuite/23_containers/multiset/explicit_instantiation.cc: Move to...
	* testsuite/23_containers/multiset/explicit_instantiation/1.cc: ...here.
	* testsuite/23_containers/multiset/explicit_instantiation/2.cc: New.
	* testsuite/23_containers/set/explicit_instantiation.cc: Move to...
	* testsuite/23_containers/set/explicit_instantiation/1.cc: ...here.
	* testsuite/23_containers/set/explicit_instantiation/2.cc: New.
	* testsuite/23_containers/vector/explicit_instantiation.cc: Move to...
	* testsuite/23_containers/vector/explicit_instantiation/1.cc: ...here.
	* testsuite/23_containers/vector/explicit_instantiation/2.cc: New.

2004-09-16  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20040916.

2004-08-30  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20040830.

2004-08-24  Paolo Carlini  <pcarlini@suse.de>

	PR libstdc++/16896
	* include/bits/stl_list.h (struct _List_node_base): Rename the
	transfer member to _M_transfer, hook to _M_hook, and unhook to
	_M_unhook.
	* include/bits/list.tcc (list<>::insert): Tweak consistently.
	* src/list.cc: Change consistently.
	* config/linker-map.gnu: Likewise.	
	* testsuite/23_containers/list/16896.cc: New.

	* include/bits/stl_list.h: Trivial formatting fixes.

	* config/linker-map.gnu: Move everything in GLIBCXX_3.4, 3.4.1
	and 3.4.2 under GLIBCXX_3.6.
	* testsuite/testsuite_abi.cc: Add GLIBCXX_3.6.
	* configure.ac (libtool_VERSION): Bump to 7:0:0.
	* configure: Regenerate.

2004-08-24  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20040824.

2004-08-19  Dhruv Matani  <dhruvbird@gmx.net>
	
	* include/bits/stl_tree.h (struct _Rb_tree_impl): Change the
	_M_key_compare member to a function, so that the _M_impl's member
	can be accessed with equal ease for either the normal version, or
	the specialization for PODs - this reduces the size of the red-black
	tree by 4-bytes for optimizable struct comparators; tweak consistently
	all users.

2004-08-17  Paolo Carlini  <pcarlini@suse.de>

        Merged to mainline at tag libstdcxx_so_7-merge-20040817.
