2008-03-10  Jakub Jelinek  <jakub@redhat.com>

	* config/linux/lock.c: Rewrite to make locks task owned,
	for backwards compatibility provide the old entrypoints
	if symbol versioning.
	* config/linux/omp-lock.h (omp_lock_25_t, omp_nest_lock_25_t): New
	types.
	(omp_nest_lock_t): Change owner into void *, add lock field.
	* config/posix95/lock.c: Rewrite to make locks task owned,
	for backwards compatibility provide the old entrypoints
	if symbol versioning.
	* config/posix95/omp-lock.h: Include semaphore.h.
	(omp_lock_25_t, omp_nest_lock_25_t): New types.
	(omp_lock_t): Use sem_t instead of mutex if semaphores
	aren't broken.
	(omp_nest_lock_t): Likewise.  Change owner to void *.
	* config/posix/lock.c: Rewrite to make locks task owned,
	for backwards compatibility provide the old entrypoints
	if symbol versioning.
	* config/posix/omp-lock.h: Include semaphore.h.
	(omp_lock_25_t, omp_nest_lock_25_t): New types.
	(omp_lock_t): Use sem_t instead of mutex if semaphores
	aren't broken.
	(omp_nest_lock_t): Likewise.  Add owner field.
	* libgomp_f.h.in (omp_lock_25_arg_t, omp_nest_lock_25_arg_t): New
	types.
	(omp_lock_25_arg, omp_nest_lock_25_arg): New macros.
	(omp_check_defines): Check even the compat defines.
	* libgomp.h (LIBGOMP_GNU_SYMBOL_VERSIONING): Undef if no visibility
	or no alias support, or if not PIC.
	(gomp_init_lock_30, gomp_destroy_lock_30, gomp_set_lock_30,
	gomp_unset_lock_30, gomp_test_lock_30, gomp_init_nest_lock_30,
	gomp_destroy_nest_lock_30, gomp_set_nest_lock_30,
	gomp_unset_nest_lock_30, gomp_test_nest_lock_30, gomp_init_lock_25,
	gomp_destroy_lock_25, gomp_set_lock_25, gomp_unset_lock_25,
	gomp_test_lock_25, gomp_init_nest_lock_25, gomp_destroy_nest_lock_25,
	gomp_set_nest_lock_25, gomp_unset_nest_lock_25,
	gomp_test_nest_lock_25): New prototypes.
	(omp_lock_symver, strong_alias): Define.
	* fortran.c: Rewrite lock wrappers, if symbol versioning provide
	both wrappers for compatibility and new locks.
	* libgomp.map: Export lock routines also @@OMP_2.0.
	* configure.ac (LIBGOMP_GNU_SYMBOL_VERSIONING): New AC_DEFINE.
	Substitute also OMP_*LOCK_25*.
	* configure: Regenerated.
	* config.h.in: Regenerated.
	* testsuite/libgomp.fortran/lock-1.f90: New test.
	* testsuite/libgomp.fortran/lock-2.f90: New test.
	* testsuite/libgomp.c/lock-1.c: New test.
	* testsuite/libgomp.c/lock-2.c: New test.

2008-03-07  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.fortran/vla4.f90: Add dg-warning.
	* testsuite/libgomp.fortran/vla5.f90: Likewise.
	* testsuite/libgomp.c/pr26943-2.c: Likewise.
	* testsuite/libgomp.c/pr26943-3.c: Likewise.
	* testsuite/libgomp.c/pr26943-4.c: Likewise.

2008-02-29  Jakub Jelinek  <jakub@redhat.com>

	* team.c (gomp_thread_start): Initialize ts.active_level.
	* sections.c (GOMP_parallel_sections_start): Pass count
	as second argument to gomp_resolve_num_threads, don't adjust
	num_threads after the call.
	* env.c (gomp_thread_limit_var): Initialize to ULONG_MAX.
	(gomp_remaining_threads_count, gomp_remaining_threads_lock): New
	variables.
	(initialize_env): Initialize gomp_remaining_threads_count and
	gomp_remaining_threads_lock if needed.
	(omp_get_thread_limit): Return INT_MAX if gomp_thread_limit_var
	is larger than INT_MAX.
	* libgomp.h (struct gomp_team_state): Add active_level field.
	(gomp_remaining_threads_count, gomp_remaining_threads_lock): New
	decls.
	* loop.c (gomp_parallel_loop_start): Pass 0 as second argument
	to gomp_resolve_num_threads.
	* parallel.c: Include limits.h.
	(gomp_resolve_num_threads): Add count argument.  Use current thread's
	active_level rather than level when checking nest-var or
	max-active-levels-var.  Implement OMP_THREAD_LIMIT limitation of
	total number of OpenMP threads.  If second argument is non-zero,
	don't return more than that number if dyn-var is true.
	(GOMP_parallel_start): Pass 0 as second argument to
	gomp_resolve_num_threads.
	(GOMP_parallel_end): Decrease gomp_remaining_threads_count
	if gomp_thread_limit_var != ULONG_MAX.
	(omp_in_parallel, omp_get_active_level): Implement using
	ts.active_level.

2008-02-28  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.fortran/allocatable1.f90: New test.
	* testsuite/libgomp.fortran/allocatable2.f90: New test.
	* testsuite/libgomp.fortran/allocatable3.f90: New test.

2008-02-26  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/ctor-10.C: New test.

	* testsuite/libgomp.c++/for-5.C (I<T>::~I ()): Clear p.
	* testsuite/libgomp.c++/collapse-2.C: New test.
	* testsuite/libgomp.fortran/collapse4.f90: New test.

2008-02-22  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/collapse-2.c: New test.

2008-02-15  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/nestedfn-6.c: New test.
	* testsuite/libgomp.c++/for-5.C: New test.
	* testsuite/libgomp.fortran/nestedfn4.f90: New test.
	* testsuite/libgomp.fortran/collapse3.f90: Uncomment tests for
	lastprivate values, make sure all iterators are in lastprivate
	clauses.
	* testsuite/libgomp.fortran/lastprivate1.f90: New test.
	* testsuite/libgomp.fortran/lastprivate2.f90: New test.

2008-02-12  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/task-2.c: New test.

	* testsuite/libgomp.c++/c++.exp: Add libstdc++-v3 build includes
	to C++ testsuite default compiler options.
	* testsuite/libgomp.c++/for-1.C: New test.
	* testsuite/libgomp.c++/for-2.C: New test.
	* testsuite/libgomp.c++/for-3.C: New test.
	* testsuite/libgomp.c++/for-4.C: New test.

2008-02-04  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.fortran/collapse2.f90: New test.
	* testsuite/libgomp.fortran/collapse3.f90: New test.

2007-12-19  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/task-1.c (f3): New function.
	(main): Call it, also test from within parallel region.
	* testsuite/libgomp.c/collapse-1.c: New test.
	* testsuite/libgomp.c++/task-1.C: New test.
	* testsuite/libgomp.c++/collapse-1.C: New test.
	* testsuite/libgomp.fortran/collapse1.f90: New test.

2007-12-12  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.fortran/task1.f90: New test.

2007-11-30  Richard Henderson  <rth@redhat.com>

	* team.c (gomp_team_end): Use gomp_end_task.
	* testsuite/libgomp.c/icv-1.c: Enable failing test.

2007-11-30  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/task-1.c: New test.

	* testsuite/libgomp.c/icv-1.c: New test.

2007-11-28  Richard Henderson  <rth@redhat.com>

	* task.c: New file.
	* Makefile.am (libgomp_la_SOURCES): Add task.c.
	* Makefile.in: Regenerate.
	* libgomp_g.h (GOMP_task, GOMP_taskwait): Add.
	* libgomp.map (GOMP_task, GOMP_taskwait): Add.
	* team.c (struct gomp_thread_start_data): Add task.
	(gomp_thread_start): Initialize and finalize the thread task.
	(gomp_team_start): Create tasks for each member thread.
	* libgomp.h (gomp_new_task, gomp_end_task): New.

2007-11-28  Richard Henderson  <rth@redhat.com>

	* parallel.c (gomp_resolve_num_threads): Update to the OMP3 algorithm.

2007-11-28  Richard Henderson  <rth@redhat.com>

	* libgomp.h (struct gomp_task_icv, gomp_global_icv): New.
	(gomp_thread_limit_var, gomp_max_active_levels_var): New.
	(struct gomp_task): New.
	(struct gomp_thread): Add task member.
	(gomp_nthreads_var, gomp_dyn_var, gomp_nest_var,
	gomp_run_sched_var, gomp_run_sched_chunk): Remove.
	(gomp_icv): New.
	* env.c (gomp_nthreads_var, gomp_dyn_var, gomp_nest_var,
	gomp_run_sched_var, gomp_run_sched_chunk): Remove.
	(gomp_global_icv): New.
	(parse_schedule, initialize_env): Use it.
	(omp_set_num_threads): Use gomp_icv.
	(omp_set_dynamic, omp_get_dynamic, omp_set_nested, omp_get_nested,
	omp_set_schedule, omp_get_schedule): Likewise.
	(omp_get_max_threads): Move from parallel.c; only use nthreads_var.
	* sections.c (GOMP_parallel_sections_start): Use gomp_icv.
	* loop.c (GOMP_loop_runtime_start): Likewise.
	(GOMP_loop_ordered_runtime_start): Likewise.
	* parallel.c (gomp_resolve_num_threads): Likewise.
	(omp_get_max_threads): Move to env.c.
	* config/linux/proc.c (gomp_init_num_threads): Use gomp_global_icv.
	(get_num_procs, gomp_dynamic_max_threads): Use gomp_icv.
	* config/posix/proc.c, config/mingw32/proc.c: Similarly.
	* omp_lib.f90.in: Change some tabs to spaces to prevent warnings.

2007-10-23  Jakub Jelinek  <jakub@redhat.com>

	* libgomp.h (gomp_schedule_type): Reorder enum to match
	omp_sched_t.
	(struct gomp_team_state): Add level field.
	* team.c (gomp_thread_start): Clear ts.level.
	(gomp_team_start): Initialize ts.level.
	* parallel.c (omp_in_parallel): Update comment.
	(omp_get_level, omp_get_ancestor_thread_num,
	omp_get_team_size, omp_get_active_level): New functions,
	add ialias.
	* env.c (omp_set_schedule, omp_get_schedule, omp_get_thread_limit,
	omp_set_max_active_levels, omp_get_max_active_levels): New functions,
	add ialias.
	* omp_lib.f90.in (omp_get_ancestor_thread_num): Handle
	integer (8) argument.
	* fortran.c (omp_set_schedule, omp_get_schedule,
	omp_get_thread_limit, omp_set_max_active_levels,
	omp_get_max_active_levels, omp_get_level,
	omp_get_ancestor_thread_num, omp_get_team_size,
	omp_get_active_level): New ialias_redirect.
	(omp_set_schedule_, omp_set_schedule_8_,
	omp_get_schedule_, omp_get_schedule_8_, omp_get_thread_limit_,
	omp_set_max_active_levels_, omp_set_max_active_levels_8_,
	omp_get_max_active_levels_, omp_get_level_,
	omp_get_ancestor_thread_num_, omp_get_ancestor_thread_num_8_,
	omp_get_team_size_, omp_get_team_size_8_, omp_get_active_level_):
	New functions.
	* libgomp.map (omp_set_schedule, omp_get_schedule,
	omp_get_thread_limit, omp_set_max_active_levels,
	omp_get_max_active_levels, omp_get_level,
	omp_get_ancestor_thread_num, omp_get_team_size, omp_get_active_level,
	omp_set_schedule_, omp_set_schedule_8_,
	omp_get_schedule_, omp_get_schedule_8_, omp_get_thread_limit_,
	omp_set_max_active_levels_, omp_set_max_active_levels_8_,
	omp_get_max_active_levels_, omp_get_level_,
	omp_get_ancestor_thread_num_, omp_get_ancestor_thread_num_8_,
	omp_get_team_size_, omp_get_team_size_8_, omp_get_active_level_):
	New exports @@OMP_3.0.
	* testsuite/libgomp.fortran/nested1.f90: New test.
	* testsuite/libgomp.fortran/lib4.f90: New test.
	* testsuite/libgomp.c/lib-2.c: New test.
	* testsuite/libgomp.c/nested-3.c: New test.

	* omp.h.in (omp_sched_t): New type.
	(omp_set_schedule, omp_get_schedule, omp_get_thread_limit,
	omp_set_max_active_levels, omp_get_max_active_levels,
	omp_get_level, omp_get_ancestor_thread_num, omp_get_team_size,
	omp_get_active_level): New prototypes.
	* omp_lib.f90.in (omp_sched_kind, omp_sched_static, omp_sched_dynamic,
	omp_sched_guided, omp_sched_auto): New parameters.
	(omp_set_schedule, omp_get_schedule, omp_get_thread_limit,
	omp_set_max_active_levels, omp_get_max_active_levels,
	omp_get_level, omp_get_ancestor_thread_num, omp_get_team_size,
	omp_get_active_level): New interfaces.
	* omp_lib.h.in (omp_sched_kind, omp_sched_static, omp_sched_dynamic,
	omp_sched_guided, omp_sched_auto): New parameters.
	(omp_set_schedule, omp_get_schedule, omp_get_thread_limit,
	omp_set_max_active_levels, omp_get_max_active_levels,
	omp_get_level, omp_get_ancestor_thread_num, omp_get_team_size,
	omp_get_active_level): New externals.

2007-10-22  Jakub Jelinek  <jakub@redhat.com>

	* env.c (gomp_active_wait_policy, gomp_max_active_levels_var,
	gomp_thread_limit_var): New variables.
	(parse_schedule): Parse "auto".
	(parse_stacksize, parse_wait_policy): New functions.
	(initialize_env): Handle OMP_WAIT_POLICY, OMP_MAX_ACTIVE_LEVELS,
	OMP_THREAD_LIMIT, OMP_STACKSIZE env vars.  Handle unit specification
	for GOMP_STACKSIZE.
