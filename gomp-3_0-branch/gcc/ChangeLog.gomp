2008-03-13  Jakub Jelinek  <jakub@redhat.com>

	* omp-low.c (use_pointer_for_field): Change first argument's type
	from const_tree to tree.  Clarify comment.

2008-03-12  Jakub Jelinek  <jakub@redhat.com>

	* tree.h (OMP_TASK_EXPLICIT_START): Define.
	* omp-low.c (task_shared_vars): New variable.
	(use_pointer_for_field): In OMP_TASK disallow copy-in/out
	sharing.
	(lower_send_shared_vars): Don't copy-out if TREE_READONLY,
	only copy-in.
	(lower_rec_input_clauses): Set OMP_TASK_EXPLICIT_START
	if firstprivate or allocatable private needs to copy data from
	outer task.  Emit GOMP_task_wait call if so.
	(expand_task_call): Change last GOMP_task argument to bitmask.
	* builtin-types.def (BT_FN_VOID_OMPFN_PTR_BOOL_BOOL): Remove.
	(BT_FN_VOID_OMPFN_PTR_BOOL_UINT): New.
	* omp-builtins.def (BUILT_IN_GOMP_TASK_START): New.
	(BUILT_IN_GOMP_TASK): Change type of last argument.

2008-03-07  Jakub Jelinek  <jakub@redhat.com>

	* omp-low.c (check_omp_nesting_restrictions): Warn if work-sharing,
	barrier, master or ordered region is closely nested inside OMP_TASK.
	Add warnings for barrier if closely nested inside of work-sharing,
	ordered, or master region.
	(scan_omp_1): Call check_omp_nesting_restrictions even for
	GOMP_barrier calls.
	* gimplify.c (gimplify_expr): Handle OMP_SECTIONS_SWITCH.

2008-02-28  Jakub Jelinek  <jakub@redhat.com>

	* langhooks.h (lang_hooks_for_decls): Add omp_private_outer_ref
	hook, add another argument to omp_clause_default_ctor hook.
	* langhooks-def.h (LANG_HOOKS_OMP_PRIVATE_OUTER_REF): Define.
	(LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR): Change to
	hook_tree_tree_tree_tree_null.
	(LANG_HOOKS_DECLS): Add LANG_HOOKS_OMP_PRIVATE_OUTER_REF.
	* hooks.c (hook_tree_tree_tree_tree_null): New function.
	* hooks.h (hook_tree_tree_tree_tree_null): New prototype.
	* gimplify.c (enum gimplify_omp_var_data): Add GOVD_PRIVATE_OUTER_REF.
	(omp_notice_variable): Set GOVD_PRIVATE_OUTER_REF if needed,
	if it is set, lookup var in outer contexts too.
	(gimplify_scan_omp_clauses): Likewise, set
	OMP_CLAUSE_PRIVATE_OUTER_REF if GOVD_PRIVATE_OUTER_REF is set.
	(gimplify_adjust_omp_clauses_1): Set OMP_CLAUSE_PRIVATE_OUTER_REF if
	GOVD_PRIVATE_OUTER_REF is set.
	* tree-nested.c (convert_nonlocal_omp_clauses,
	convert_local_omp_clauses): Set placeholder context before walking
	OMP_CLAUSE_REDUCTION_INIT.
	* tree.h (OMP_CLAUSE_PRIVATE_OUTER_REF): Define.
	* omp-low.c (scan_sharing_clauses): Handle
	OMP_CLAUSE_PRIVATE_OUTER_REF.
	(lower_rec_input_clauses): Pass outer var ref to
	omp_clause_default_ctor hook if OMP_CLAUSE_PRIVATE_OUTER_REF
	or OMP_CLAUSE_LASTPRIVATE.  Replace OMP_CLAUSE_REDUCTION_PLACEHOLDER
	decls in OMP_CLAUSE_REDUCTION_INIT.
	(lower_send_clauses): Handle OMP_CLAUSE_PRIVATE_OUTER_REF.

2008-02-26  Jakub Jelinek  <jakub@redhat.com>

	* gimplify.c (gimplify_omp_for): Set OMP_CLAUSE_LASTPRIVATE_STMT
	also if collapse > 1.

2008-02-22  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_finish_omp_for): Change decl/init/cond/incr arguments
	to TREE_VECs, check arguments for all collapsed loops.
	* c-parser.c (c_parser_omp_for_loop): Parse collapsed loops.

2008-02-15  Jakub Jelinek  <jakub@redhat.com>

	* tree.h (OMP_CLAUSE_LASTPRIVATE_STMT): Define.
	* tree.c (omp_clause_num_ops): Increase OMP_CLAUSE_LASTPRIVATE num_ops
	to 2.
	(walk_tree_1): Walk OMP_CLAUSE_LASTPRIVATE_STMT.
	* omp-low.c (scan_sharing_clauses): Scan
	OMP_CLAUSE_LASTPRIVATE_STMT.
	(lower_lastprivate_clauses): Even if some lastprivate is found on a
	work-sharing construct, continue looking for them on parent parallel
	construct.
	* gimplify.c (gimplify_scan_omp_clauses): Handle
	OMP_CLAUSE_LASTPRIVATE_STMT.
	(gimplify_omp_for): If loop counter has been replaced and original
	iterator is present in lastprivate clause, set
	OMP_CLAUSE_LASTPRIVATE_STMT.
	* tree-nested.c (convert_nonlocal_omp_clauses,
	convert_local_omp_clauses): Handle OMP_CLAUSE_LASTPRIVATE_STMT,
	OMP_CLAUSE_REDUCTION_INIT and OMP_CLAUSE_REDUCTION_MERGE.
	Don't do about TREE_STATIC or DECL_EXTERNAL VAR_DECLs in
	OMP_CLAUSE_DECL.
	* c-parser.c (c_parser_omp_clause_collapse): Don't clear
	OMP_CLAUSE_COLLAPSE_ITERVAR and OMP_CLAUSE_COLLAPSE_COUNT.
	(c_parser_omp_for_loop): Add par_clauses argument.  If decl is
	present in parallel's lastprivate clause, change it to shared
	and add lastprivate clause for decl to OMP_FOR_CLAUSES.
	(c_parser_omp_for, c_parser_omp_parallel): Adjust
	c_parser_omp_for_loop callers.

2008-02-12  Jakub Jelinek  <jakub@redhat.com>

	* tree-nested.c (conver_nonlocal_reference, convert_local_reference,
	convert_call_expr): Handle OMP_TASK the same as OMP_PARALLEL.  Use
	OMP_TASKREG_* macros rather than OMP_PARALLEL_*.

	* omp-low.c (lower_omp_for_lastprivate): Add lastprivate clauses
	to the beginning of dlist rather than end.
	(lower_omp_for): Add rec input clauses before OMP_FOR_PRE_BODY,
	not after it.
	* tree-cfg.c (remove_useless_stmts_1): Handle OMP_* containers.

2008-02-04  Jakub Jelinek  <jakub@redhat.com>

	* tree.h (OMP_CLAUSE_COLLAPSE_ITERVAR,
	OMP_CLAUSE_COLLAPSE_COUNT): Define.
	* tree.c (omp_clause_num_ops): Change OMP_CLAUSE_COLLAPSE
	to 3 ops from 1 op.
	(walk_tree_1): Handle the 2 extra ops in OMP_CLAUSE_COLLAPSE.
	* tree-pretty-print.c (dump_generic_node): Handle collapsed
	OMP_FOR loops.
	* tree-parloops.c (create_parallel_loop): Create 1 entry
	vectors for OMP_FOR_{INIT,COND,INCR}.
	* gimplify.c (gimplify_omp_for): Handle collapsed OMP_FOR
	loops, adjust for OMP_FOR_{INIT,COND,INCR} changes.
	* tree-ssa-operands.c (get_expr_operands): Likewise.
	* c-omp.c (c_finish_omp_for): Create 1 entry vectors for
	OMP_FOR_{INIT,COND,INCR}.
	* tree-nested.c (walk_omp_for): Adjust for OMP_FOR_{INIT,COND,INCR}
	changes.
	(convert_nonlocal_omp_clauses, convert_local_omp_clauses): Handle
	OMP_CLAUSE_COLLAPSE and OMP_CLAUSE_UNTIED.
	* c-parser.c (c_parser_omp_clause_collapse): Clear
	OMP_CLAUSE_COLLAPSE_ITERVAR and OMP_CLAUSE_COLLAPSE_COUNT.
	* omp-low.c (struct omp_for_data_loop): New type.
	(struct omp_for_data): Remove v, n1, n2, step, cond_code fields.
	Add loop, loops, collapse fields.
	(extract_omp_for_data): Add loops argument.  Extract data for
	collapsed OMP_FOR loops.
	(workshare_safe_to_combine_p): Don't combine collapse > 1 loops
	unless all bounds and steps are constant.  Adjust extract_omp_for_data
	caller.
	(get_ws_args_for): Adjust extract_omp_for_data caller.
	(scan_omp_for): Handle collapsed OMP_FOR
	loops, adjust for OMP_FOR_{INIT,COND,INCR} changes.
	(expand_omp_for_generic): Handle collapsed OMP_FOR loops.  Adjust
	for struct omp_for_data changes.  If libgomp function doesn't return
	boolean_type_node, add comparison of the return value with 0.
	(expand_omp_for_static_nochunk, expand_omp_for_static_chunk): Adjust
	for struct omp_for_data changes.
	(expand_omp_for): Allocate loops array, pass it to
	extract_omp_for_data.  For collapse > 1 loops use always
	expand_omp_for_generic.
	(lower_omp_single_simple): If libgomp function doesn't return
	boolean_type_node, add comparison of the return value with 0.
	(lower_omp_for_lastprivate): Adjust for struct omp_for_data changes.
	(lower_omp_for): Handle collapsed OMP_FOR loops, adjust for
	OMP_FOR_{INIT,COND,INCR} changes, adjust extract_omp_for_data
	caller.
	(diagnose_sb_1, diagnose_sb_2): Handle collapsed OMP_FOR
	loops, adjust for OMP_FOR_{INIT,COND,INCR} changes.

2007-12-12  Jakub Jelinek  <jakub@redhat.com>

	* tree.h (enum omp_clause_default_kind): Add
	OMP_CLAUSE_DEFAULT_FIRSTPRIVATE.
	* tree-pretty-print.c (dump_omp_clause): Handle
	OMP_CLAUSE_DEFAULT_FIRSTPRIVATE.
	* gimplify.c (omp_notice_variable): Likewise.

2007-11-30  Jakub Jelinek  <jakub@redhat.com>

	* gimplify.c (new_omp_context): Set default_kind to
	OMP_CLAUSE_DEFAULT_UNSPECIFIED for OMP_TASK regions.
	(omp_notice_variable): Handle vars that are supposed
	to be implicitly determined firstprivate for task regions.

	* builtin-types.def (BT_FN_VOID_OMPFN_PTR_BOOL_BOOL): New.
	* omp-builtins.def (BUILT_IN_GOMP_TASK): New builtin.
	* gimplify.c (omp_region_type): New enum.
	(struct gimplify_omp_ctx): Remove is_parallel and is_combined_parallel
	fields, add region_type.
	(new_omp_context): Take region_type as argument instead of is_parallel
	and is_combined_parallel.
	(gimple_add_tmp_var, omp_firstprivatize_variable, omp_notice_variable,
	omp_is_private, omp_check_private): Adjust ctx->is_parallel and
	ctx->is_combined_parallel checks.
	(gimplify_scan_omp_clauses): Take region_type as last argument instead
	of in_parallel and in_combined_parallel.
	(gimplify_omp_parallel, gimplify_omp_for, gimplify_omp_workshare): Adjust
	callers.
	(gimplify_omp_task): New function.
	(gimplify_expr): Handle OMP_TASK.
	* tree-inline.c (estimate_num_insns_1): Handle OMP_TASK.
	* tree.h (OMP_TASKREG_CHECK, OMP_TASKREG_BODY, OMP_TASKREG_CLAUSES,
	OMP_TASKREG_FN, OMP_TASKREG_DATA_ARG): Define.
	* omp-low.c (parallel_nesting_level): Rename to...
	(taskreg_nesting_level): ... this.
	(is_taskreg_ctx): New function.
	(build_outer_var_ref, omp_copy_decl, scan_sharing_clauses,
	scan_sharing_clauses): Use is_taskreg_ctx instead of is_parallel_ctx.
	(scan_omp_parallel, execute_lower_omp): Rename parallel_nesting_level to
	taskreg_nesting_level.
	(scan_omp_1): Likewise.  Handle OMP_TASK.
	(scan_omp_task): New function.
	(expand_task_call): New function.
	(expand_omp_parallel): Rename to...
	(expand_omp_taskreg): ... this.  Use OMP_TASKREG_* macros where needed.
	Call omp_task_call for OMP_TASK regions.
	(expand_omp): Adjust caller, handle OMP_TASK.
	(lower_omp_parallel): Rename to...
	(lower_omp_taskreg): ... this.  Use OMP_TASKREG_* macros where needed.
	(lower_omp_1): Adjust caller, handle OMP_TASK.
	(diagnose_sb_1, diagnose_sb_2): Handle OMP_TASK.
	* tree-cfg.c (make_edges): Handle OMP_TASK.

2007-11-14  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.c (c_parser_omp_clause_collapse): Include correct
	location in the error message.  Ensure the argument is reasonable
	positive integer and set OMP_CLAUSE_COLLAPSE_EXPR to it.
	(c_parser_omp_clause_schedule): Include correct location in the
	error message.
	(c_parser_omp_for_loop): Add clauses argument, on success set
	OMP_FOR_CLAUSES to it.  Look up collapse count in clauses.
	(c_parser_omp_for, c_parser_omp_parallel): Adjust callers.
	(OMP_FOR_CLAUSE_MASK): Add 1 << PRAGMA_OMP_CLAUSE_COLLAPSE.
	* omp-builtins.def (BUILT_IN_GOMP_LOOP_AUTO_START,
	BUILT_IN_GOMP_LOOP_ORDERED_AUTO_START, BUILT_IN_GOMP_LOOP_AUTO_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_AUTO_NEXT,
	BUILT_IN_GOMP_PARALLEL_LOOP_AUTO_START): New.
	* gimplify.c (gimplify_scan_omp_clauses, gimplify_adjust_omp_clauses):
	Handle OMP_CLAUSE_COLLAPSE and OMP_CLAUSE_UNTIED.
	* omp-low.c (scan_sharing_clauses): Likewise.
	(expand_omp_for): Adjust fn_index computation for the addition of
	schedule(auto).

2007-11-13  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.c (c_parser_pragma): Handle PRAGMA_OMP_TASKWAIT.
	(c_parser_omp_clause_name): Handle collapse and untied clauses.
	(c_parser_omp_clause_collapse, c_parser_omp_clause_untied): New
	functions.
	(c_parser_omp_clause_schedule): Handle schedule(auto).
	(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_COLLAPSE
	and PRAGMA_OMP_CLAUSE_UNTIED.
	(OMP_TASK_CLAUSE_MASK): Define.
	(c_parser_omp_task, c_parser_omp_taskwait): New functions.
	(c_parser_omp_construct): Handle PRAGMA_OMP_TASK.
	* tree-gimple.c (is_gimple_stmt): Handle OMP_TASK.
	* tree.def (OMP_TASK): New tree code.
	* c-tree.h (c_begin_omp_task, c_finish_omp_task): New prototypes.
	* omp-builtins.def (BUILT_IN_GOMP_TASKWAIT): New builtin.
	* tree.h (OMP_DIRECTIVE_P): Add OMP_TASK.
	(OMP_CLAUSE_COLLAPSE, OMP_CLAUSE_UNTIED): New clause codes.
	(OMP_TASK_BODY, OMP_TASK_CLAUSES, OMP_TASK_FN, OMP_TASK_DATA_ARG):
	Define.
	(OMP_CLAUSE_COLLAPSE_EXPR): Define.
	(OMP_CLAUSE_SCHEDULE_AUTO): New schedule kind.
	* tree.c (omp_clause_num_ops, omp_clause_code_name): Add
	OMP_CLAUSE_COLLAPSE and OMP_CLAUSE_UNTIED entries.
	(walk_tree_1): Handle OMP_CLAUSE_COLLAPSE and OMP_CLAUSE_UNTIED.
	* c-pragma.h (PRAGMA_OMP_TASK, PRAGMA_OMP_TASKWAIT): New.
	(PRAGMA_OMP_CLAUSE_COLLAPSE, PRAGMA_OMP_CLAUSE_UNTIED): New.
	* c-typeck.c (c_begin_omp_task, c_finish_omp_task): New functions.
	(c_finish_omp_clauses): Handle OMP_CLAUSE_COLLAPSE and
	OMP_CLAUSE_UNTIED.
	* c-pragma.c (init_pragma): Init omp task and omp taskwait pragmas.
	* c-common.h (c_finish_omp_taskwait): New prototype.
	* gimple-low.c (lower_stmt): Handle OMP_TASK.
	* tree-pretty-print.c (dump_omp_clause): Handle
	OMP_CLAUSE_SCHEDULE_AUTO, OMP_CLAUSE_UNTIED and OMP_CLAUSE_COLLAPSE.
	(dump_generic_node): Handle OMP_TASK.
	* c-omp.c (c_finish_omp_taskwait): New function.
	(c_split_parallel_clauses): Put OMP_CLAUSE_COLLAPSE clause to
	ws_clauses.

