/*
 *  DO NOT EDIT THIS FILE - it has been generated
 *
 * Install modified versions of certain ANSI-incompatible system header
 * files which are fixed to work correctly with ANSI C and placed in a
 * directory that GNU C will search.
 *
 * This file contains 120 fixup descriptions.
 *
 * See README-fixinc for more information.
 *
 *  inclhack copyright (c) 1998, 1999, 2000
 *  The Free Software Foundation, Inc.
 *
 *  inclhack is free software.
 *  
 *  You may redistribute it and/or modify it under the terms of the
 *  GNU General Public License, as published by the Free Software
 *  Foundation; either version 2, or (at your option) any later version.
 *  
 *  inclhack is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with inclhack.  See the file "COPYING".  If not,
 *  write to:  The Free Software Foundation, Inc.,
 *             59 Temple Place - Suite 330,
 *             Boston,  MA  02111-1307, USA.
 */

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aaa_Ki_Iface fix
 */
#define AAA_KI_IFACE_FIXIDX              0
tSCC zAaa_Ki_IfaceName[] =
     "AAA_ki_iface";

/*
 *  File name selection pattern
 */
tSCC zAaa_Ki_IfaceList[] =
  "|sys/ki_iface.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAaa_Ki_IfaceMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAaa_Ki_IfaceSelect0[] =
       "These definitions are for HP Internal developers";

#define    AAA_KI_IFACE_TEST_CT  1
tTestDesc aAaa_Ki_IfaceTests[] = {
  { TT_EGREP,    zAaa_Ki_IfaceSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aaa_Ki_Iface
 */
const char* apzAaa_Ki_IfacePatch[] = {
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aaa_Ki fix
 */
#define AAA_KI_FIXIDX                    1
tSCC zAaa_KiName[] =
     "AAA_ki";

/*
 *  File name selection pattern
 */
tSCC zAaa_KiList[] =
  "|sys/ki.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAaa_KiMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAaa_KiSelect0[] =
       "11.00 HP-UX LP64";

#define    AAA_KI_TEST_CT  1
tTestDesc aAaa_KiTests[] = {
  { TT_EGREP,    zAaa_KiSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aaa_Ki
 */
const char* apzAaa_KiPatch[] = {
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aaa_Ki_Calls fix
 */
#define AAA_KI_CALLS_FIXIDX              2
tSCC zAaa_Ki_CallsName[] =
     "AAA_ki_calls";

/*
 *  File name selection pattern
 */
tSCC zAaa_Ki_CallsList[] =
  "|sys/ki_calls.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAaa_Ki_CallsMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAaa_Ki_CallsSelect0[] =
       "kthread_create_caller_t";

#define    AAA_KI_CALLS_TEST_CT  1
tTestDesc aAaa_Ki_CallsTests[] = {
  { TT_EGREP,    zAaa_Ki_CallsSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aaa_Ki_Calls
 */
const char* apzAaa_Ki_CallsPatch[] = {
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aaa_Ki_Defs fix
 */
#define AAA_KI_DEFS_FIXIDX               3
tSCC zAaa_Ki_DefsName[] =
     "AAA_ki_defs";

/*
 *  File name selection pattern
 */
tSCC zAaa_Ki_DefsList[] =
  "|sys/ki_defs.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAaa_Ki_DefsMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAaa_Ki_DefsSelect0[] =
       "Kernel Instrumentation Definitions";

#define    AAA_KI_DEFS_TEST_CT  1
tTestDesc aAaa_Ki_DefsTests[] = {
  { TT_EGREP,    zAaa_Ki_DefsSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aaa_Ki_Defs
 */
const char* apzAaa_Ki_DefsPatch[] = {
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aaa_Bad_Fixes fix
 */
#define AAA_BAD_FIXES_FIXIDX             4
tSCC zAaa_Bad_FixesName[] =
     "AAA_bad_fixes";

/*
 *  File name selection pattern
 */
tSCC zAaa_Bad_FixesList[] =
  "|sundev/ipi_error.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAaa_Bad_FixesMachs (const char**)NULL
#define AAA_BAD_FIXES_TEST_CT  0
#define aAaa_Bad_FixesTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Aaa_Bad_Fixes
 */
const char* apzAaa_Bad_FixesPatch[] = {
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aaa_Time fix
 */
#define AAA_TIME_FIXIDX                  5
tSCC zAaa_TimeName[] =
     "AAA_time";

/*
 *  File name selection pattern
 */
tSCC zAaa_TimeList[] =
  "|sys/time.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAaa_TimeMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAaa_TimeSelect0[] =
       "11.0 and later representation of ki time";

#define    AAA_TIME_TEST_CT  1
tTestDesc aAaa_TimeTests[] = {
  { TT_EGREP,    zAaa_TimeSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aaa_Time
 */
const char* apzAaa_TimePatch[] = {
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aab_Dgux_Int_Varargs fix
 */
#define AAB_DGUX_INT_VARARGS_FIXIDX      6
tSCC zAab_Dgux_Int_VarargsName[] =
     "AAB_dgux_int_varargs";

/*
 *  File name selection pattern
 */
tSCC zAab_Dgux_Int_VarargsList[] =
  "|_int_varargs.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAab_Dgux_Int_VarargsMachs (const char**)NULL
#define AAB_DGUX_INT_VARARGS_TEST_CT  0
#define aAab_Dgux_Int_VarargsTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Aab_Dgux_Int_Varargs
 */
const char* apzAab_Dgux_Int_VarargsPatch[] = {
"#ifndef __INT_VARARGS_H\n\
#define __INT_VARARGS_H\n\
\n\
/************************************************************************/\n\
/* _INT_VARARGS.H - Define the common stuff for varargs/stdarg/stdio.   */\n\
/************************************************************************/\n\
\n\
/*\n\
** This file is a DG internal header.  Never include this\n\
** file directly.\n\
*/\n\
\n\
#ifndef ___int_features_h\n\
#include &lt;sys/_int_features.h&gt;\n\
#endif\n\
\n\
#if !(defined(_VA_LIST) || defined(_VA_LIST_))\n\
#define _VA_LIST\n\
#define _VA_LIST_\n\
\n\
#ifdef __LINT__\n\
\n\
#ifdef __STDC__\n\
typedef void * va_list;\n\
#else\n\
typedef char * va_list;\n\
#endif\n\
\n\
#else\n\
#if _M88K_ANY\n\
\n\
#if defined(__DCC__)\n\
\n\
typedef struct {\n\
      int     next_arg;\n\
      int     *mem_ptr;\n\
      int     *reg_ptr;\n\
} va_list;\n\
\n\
#else  /* ! defined(__DCC__) */\n\
\n\
typedef struct {\n\
      int  __va_arg;       /* argument number */\n\
      int *__va_stk;       /* start of args passed on stack */\n\
      int *__va_reg;       /* start of args passed in regs */\n\
} va_list;\n\
\n\
#endif  /* ! defined(__DCC__) */\n\
\n\
#elif _IX86_ANY\n\
\n\
#if defined(__GNUC__) || defined(__STDC__)\n\
typedef void * va_list;\n\
#else\n\
typedef char * va_list;\n\
#endif\n\
\n\
#endif  /*  _IX86_ANY */\n\
\n\
#endif /* __LINT__ */\n\
#endif /*  !(defined(_VA_LIST) || defined(_VA_LIST_)) */\n\
#endif /*  #ifndef __INT_VARARGS_H  */\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aab_Fd_Zero_Asm_Posix_Types_H fix
 */
#define AAB_FD_ZERO_ASM_POSIX_TYPES_H_FIXIDX 7
tSCC zAab_Fd_Zero_Asm_Posix_Types_HName[] =
     "AAB_fd_zero_asm_posix_types_h";

/*
 *  File name selection pattern
 */
tSCC zAab_Fd_Zero_Asm_Posix_Types_HList[] =
  "|asm/posix_types.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzAab_Fd_Zero_Asm_Posix_Types_HMachs[] = {
        "i[34567]86-*-linux-gnu*",
        (const char*)NULL };

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zAab_Fd_Zero_Asm_Posix_Types_HBypass0[] =
       "} while";

#define    AAB_FD_ZERO_ASM_POSIX_TYPES_H_TEST_CT  1
tTestDesc aAab_Fd_Zero_Asm_Posix_Types_HTests[] = {
  { TT_NEGREP,   zAab_Fd_Zero_Asm_Posix_Types_HBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aab_Fd_Zero_Asm_Posix_Types_H
 */
const char* apzAab_Fd_Zero_Asm_Posix_Types_HPatch[] = {
"/* This file fixes a bug in the __FD_ZERO macro\n\
   for older versions of the Linux kernel. */\n\
#ifndef _POSIX_TYPES_H_WRAPPER\n\
#include <features.h>\n\
 #include_next <asm/posix_types.h>\n\
\n\
#if defined(__FD_ZERO) && !defined(__GLIBC__)\n\
#undef __FD_ZERO\n\
#define __FD_ZERO(fdsetp) \\\n\
  do { \\\n\
    int __d0, __d1; \\\n\
\t\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n\
\t\t\t: \"=&c\" (__d0), \"=&D\" (__d1) \\\n\
\t\t\t: \"a\" (0), \"0\" (__FDSET_LONGS), \\\n\
\t\t\t  \"1\" ((__kernel_fd_set *) (fdsetp)) :\"memory\"); \\\n\
  } while (0)\n\
#endif\n\
\n\
#define _POSIX_TYPES_H_WRAPPER\n\
#endif /* _POSIX_TYPES_H_WRAPPER */\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aab_Fd_Zero_Gnu_Types_H fix
 */
#define AAB_FD_ZERO_GNU_TYPES_H_FIXIDX   8
tSCC zAab_Fd_Zero_Gnu_Types_HName[] =
     "AAB_fd_zero_gnu_types_h";

/*
 *  File name selection pattern
 */
tSCC zAab_Fd_Zero_Gnu_Types_HList[] =
  "|gnu/types.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzAab_Fd_Zero_Gnu_Types_HMachs[] = {
        "i[34567]86-*-linux-gnu*",
        (const char*)NULL };
#define AAB_FD_ZERO_GNU_TYPES_H_TEST_CT  0
#define aAab_Fd_Zero_Gnu_Types_HTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Aab_Fd_Zero_Gnu_Types_H
 */
const char* apzAab_Fd_Zero_Gnu_Types_HPatch[] = {
"/* This file fixes a bug in the __FD_ZERO macro present in glibc 1.x. */\n\
#ifndef _TYPES_H_WRAPPER\n\
#include <features.h>\n\
 #include_next <gnu/types.h>\n\
\n\
#if defined(__FD_ZERO) && !defined(__GLIBC__)\n\
#undef __FD_ZERO\n\
# define __FD_ZERO(fdsetp) \\\n\
  do { \\\n\
    int __d0, __d1; \\\n\
\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n\
        \t: \"=&c\" (__d0), \"=&D\" (__d1) \\\n\
        \t: \"a\" (0), \"0\" (__FDSET_LONGS), \\\n\
\t\t  \"1\" ((__fd_set *) (fdsetp)) :\"memory\"); \\\n\
  } while (0)\n\
#endif\n\
\n\
#define _TYPES_H_WRAPPER\n\
#endif /* _TYPES_H_WRAPPER */\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aab_Fd_Zero_Selectbits_H fix
 */
#define AAB_FD_ZERO_SELECTBITS_H_FIXIDX  9
tSCC zAab_Fd_Zero_Selectbits_HName[] =
     "AAB_fd_zero_selectbits_h";

/*
 *  File name selection pattern
 */
tSCC zAab_Fd_Zero_Selectbits_HList[] =
  "|selectbits.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzAab_Fd_Zero_Selectbits_HMachs[] = {
        "i[34567]86-*-linux-gnu*",
        (const char*)NULL };
#define AAB_FD_ZERO_SELECTBITS_H_TEST_CT  0
#define aAab_Fd_Zero_Selectbits_HTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Aab_Fd_Zero_Selectbits_H
 */
const char* apzAab_Fd_Zero_Selectbits_HPatch[] = {
"/* This file fixes a bug in the __FD_ZERO macro present in glibc 2.0.x. */\n\
#ifndef _SELECTBITS_H_WRAPPER\n\
#include <features.h>\n\
 #include_next <selectbits.h>\n\
\n\
#if defined(__FD_ZERO) && defined(__GLIBC__) \\\n\
\t&& defined(__GLIBC_MINOR__) && __GLIBC__ == 2 \\\n\
\t&& __GLIBC_MINOR__ == 0\n\
#undef __FD_ZERO\n\
#define __FD_ZERO(fdsetp) \\\n\
  do { \\\n\
    int __d0, __d1; \\\n\
  __asm__ __volatile__ (\"cld; rep; stosl\" \\\n\
                        : \"=&c\" (__d0), \"=&D\" (__d1) \\\n\
                        : \"a\" (0), \"0\" (sizeof (__fd_set) \\\n\
                                        / sizeof (__fd_mask)), \\\n\
                          \"1\" ((__fd_mask *) (fdsetp)) \\\n\
                        : \"memory\"); \\\n\
  } while (0)\n\
#endif\n\
\n\
#define _SELECTBITS_H_WRAPPER\n\
#endif /* _SELECTBITS_H_WRAPPER */\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aab_Sun_Memcpy fix
 */
#define AAB_SUN_MEMCPY_FIXIDX            10
tSCC zAab_Sun_MemcpyName[] =
     "AAB_sun_memcpy";

/*
 *  File name selection pattern
 */
tSCC zAab_Sun_MemcpyList[] =
  "|memory.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAab_Sun_MemcpyMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAab_Sun_MemcpySelect0[] =
       "/\\*\t@\\(#\\)(head/memory.h\t50.1\t |memory\\.h 1\\.[2-4] 8./../.. SMI; from S5R2 1\\.2\t)\\*/";

#define    AAB_SUN_MEMCPY_TEST_CT  1
tTestDesc aAab_Sun_MemcpyTests[] = {
  { TT_EGREP,    zAab_Sun_MemcpySelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aab_Sun_Memcpy
 */
const char* apzAab_Sun_MemcpyPatch[] = {
"/* This file was generated by fixincludes */\n\
#ifndef __memory_h__\n\
#define __memory_h__\n\
\n\
#ifdef __STDC__\n\
extern void *memccpy();\n\
extern void *memchr();\n\
extern void *memcpy();\n\
extern void *memset();\n\
#else\n\
extern char *memccpy();\n\
extern char *memchr();\n\
extern char *memcpy();\n\
extern char *memset();\n\
#endif /* __STDC__ */\n\
\n\
extern int memcmp();\n\
\n\
#endif /* __memory_h__ */\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aab_Svr4_Replace_Byteorder fix
 */
#define AAB_SVR4_REPLACE_BYTEORDER_FIXIDX 11
tSCC zAab_Svr4_Replace_ByteorderName[] =
     "AAB_svr4_replace_byteorder";

/*
 *  File name selection pattern
 */
tSCC zAab_Svr4_Replace_ByteorderList[] =
  "|sys/byteorder.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzAab_Svr4_Replace_ByteorderMachs[] = {
        "*-*-sysv4*",
        "i[34567]86-*-sysv5*",
        "i[34567]86-*-udk*",
        "i[34567]86-*-solaris2.[0-4]",
        "powerpcle-*-solaris2.[0-4]",
        "sparc-*-solaris2.[0-4]",
        (const char*)NULL };
#define AAB_SVR4_REPLACE_BYTEORDER_TEST_CT  0
#define aAab_Svr4_Replace_ByteorderTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Aab_Svr4_Replace_Byteorder
 */
const char* apzAab_Svr4_Replace_ByteorderPatch[] = {
"#ifndef _SYS_BYTEORDER_H\n\
#define _SYS_BYTEORDER_H\n\
\n\
/* Functions to convert `short' and `long' quantities from host byte order\n\
   to (internet) network byte order (i.e. big-endian).\n\
\n\
   Written by Ron Guilmette (rfg@ncd.com).\n\
\n\
   This isn't actually used by GCC.  It is installed by fixinc.svr4.\n\
\n\
   For big-endian machines these functions are essentially no-ops.\n\
\n\
   For little-endian machines, we define the functions using specialized\n\
   asm sequences in cases where doing so yields better code (e.g. i386).  */\n\
\n\
#if !defined (__GNUC__) && !defined (__GNUG__)\n\
#error You lose!  This file is only useful with GNU compilers.\n\
#endif\n\
\n\
#ifndef __BYTE_ORDER__\n\
/* Byte order defines.  These are as defined on UnixWare 1.1, but with\n\
   double underscores added at the front and back.  */\n\
#define __LITTLE_ENDIAN__   1234\n\
#define __BIG_ENDIAN__      4321\n\
#define __PDP_ENDIAN__      3412\n\
#endif\n\
\n\
#ifdef __STDC__\n\
static __inline__ unsigned long htonl (unsigned long);\n\
static __inline__ unsigned short htons (unsigned int);\n\
static __inline__ unsigned long ntohl (unsigned long);\n\
static __inline__ unsigned short ntohs (unsigned int);\n\
#endif /* defined (__STDC__) */\n\
\n\
#if defined (__i386__)\n\
\n\
#ifndef __BYTE_ORDER__\n\
#define __BYTE_ORDER__ __LITTLE_ENDIAN__\n\
#endif\n\
\n\
/* Convert a host long to a network long.  */\n\
\n\
/* We must use a new-style function definition, so that this will also\n\
   be valid for C++.  */\n\
static __inline__ unsigned long\n\
htonl (unsigned long __arg)\n\
{\n\
  register unsigned long __result;\n\
\n\
  __asm__ (\"xchg%B0 %b0,%h0\n\
\tror%L0 $16,%0\n\
\txchg%B0 %b0,%h0\" : \"=q\" (__result) : \"0\" (__arg));\n\
  return __result;\n\
}\n\
\n\
/* Convert a host short to a network short.  */\n\
\n\
static __inline__ unsigned short\n\
htons (unsigned int __arg)\n\
{\n\
  register unsigned short __result;\n\
\n\
  __asm__ (\"xchg%B0 %b0,%h0\" : \"=q\" (__result) : \"0\" (__arg));\n\
  return __result;\n\
}\n\
\n\
#elif ((defined (__i860__) && !defined (__i860_big_endian__))\t\\\n\
       || defined (__ns32k__) || defined (__vax__)\t\t\\\n\
       || defined (__spur__) || defined (__arm__))\n\
\n\
#ifndef __BYTE_ORDER__\n\
#define __BYTE_ORDER__ __LITTLE_ENDIAN__\n\
#endif\n\
\n\
/* For other little-endian machines, using C code is just as efficient as\n\
   using assembly code.  */\n\
\n\
/* Convert a host long to a network long.  */\n\
\n\
static __inline__ unsigned long\n\
htonl (unsigned long __arg)\n\
{\n\
  register unsigned long __result;\n\
\n\
  __result = (__arg >> 24) & 0x000000ff;\n\
  __result |= (__arg >> 8) & 0x0000ff00;\n\
  __result |= (__arg << 8) & 0x00ff0000;\n\
  __result |= (__arg << 24) & 0xff000000;\n\
  return __result;\n\
}\n\
\n\
/* Convert a host short to a network short.  */\n\
\n\
static __inline__ unsigned short\n\
htons (unsigned int __arg)\n\
{\n\
  register unsigned short __result;\n\
\n\
  __result = (__arg << 8) & 0xff00;\n\
  __result |= (__arg >> 8) & 0x00ff;\n\
  return __result;\n\
}\n\
\n\
#else /* must be a big-endian machine */\n\
\n\
#ifndef __BYTE_ORDER__\n\
#define __BYTE_ORDER__ __BIG_ENDIAN__\n\
#endif\n\
\n\
/* Convert a host long to a network long.  */\n\
\n\
static __inline__ unsigned long\n\
htonl (unsigned long __arg)\n\
{\n\
  return __arg;\n\
}\n\
\n\
/* Convert a host short to a network short.  */\n\
\n\
static __inline__ unsigned short\n\
htons (unsigned int __arg)\n\
{\n\
  return __arg;\n\
}\n\
\n\
#endif /* big-endian */\n\
\n\
/* Convert a network long to a host long.  */\n\
\n\
static __inline__ unsigned long\n\
ntohl (unsigned long __arg)\n\
{\n\
  return htonl (__arg);\n\
}\n\
\n\
/* Convert a network short to a host short.  */\n\
\n\
static __inline__ unsigned short\n\
ntohs (unsigned int __arg)\n\
{\n\
  return htons (__arg);\n\
}\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aab_Ultrix_Ansi_Compat fix
 */
#define AAB_ULTRIX_ANSI_COMPAT_FIXIDX    12
tSCC zAab_Ultrix_Ansi_CompatName[] =
     "AAB_ultrix_ansi_compat";

/*
 *  File name selection pattern
 */
tSCC zAab_Ultrix_Ansi_CompatList[] =
  "|ansi_compat.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAab_Ultrix_Ansi_CompatMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAab_Ultrix_Ansi_CompatSelect0[] =
       "ULTRIX";

#define    AAB_ULTRIX_ANSI_COMPAT_TEST_CT  1
tTestDesc aAab_Ultrix_Ansi_CompatTests[] = {
  { TT_EGREP,    zAab_Ultrix_Ansi_CompatSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aab_Ultrix_Ansi_Compat
 */
const char* apzAab_Ultrix_Ansi_CompatPatch[] = {
"/* This file intentionally left blank.  */\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aix_Syswait fix
 */
#define AIX_SYSWAIT_FIXIDX               13
tSCC zAix_SyswaitName[] =
     "aix_syswait";

/*
 *  File name selection pattern
 */
tSCC zAix_SyswaitList[] =
  "|sys/wait.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAix_SyswaitMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAix_SyswaitSelect0[] =
       "^extern pid_t wait3\\(\\);\n";
tSCC zAix_SyswaitSelect1[] =
       "bos325,";

#define    AIX_SYSWAIT_TEST_CT  2
tTestDesc aAix_SyswaitTests[] = {
  { TT_EGREP,    zAix_SyswaitSelect0, (regex_t*)NULL },
  { TT_EGREP,    zAix_SyswaitSelect1, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aix_Syswait
 */
const char* apzAix_SyswaitPatch[] = {
    "format",
    "struct rusage;\n\
%0",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aix_Volatile fix
 */
#define AIX_VOLATILE_FIXIDX              14
tSCC zAix_VolatileName[] =
     "aix_volatile";

/*
 *  File name selection pattern
 */
tSCC zAix_VolatileList[] =
  "|sys/signal.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAix_VolatileMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAix_VolatileSelect0[] =
       "typedef volatile int sig_atomic_t";

#define    AIX_VOLATILE_TEST_CT  1
tTestDesc aAix_VolatileTests[] = {
  { TT_EGREP,    zAix_VolatileSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aix_Volatile
 */
const char* apzAix_VolatilePatch[] = {
    "format",
    "typedef int sig_atomic_t",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Alpha_Getopt fix
 */
#define ALPHA_GETOPT_FIXIDX              15
tSCC zAlpha_GetoptName[] =
     "alpha_getopt";

/*
 *  File name selection pattern
 */
tSCC zAlpha_GetoptList[] =
  "|stdio.h|stdlib.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAlpha_GetoptMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAlpha_GetoptSelect0[] =
       "getopt\\(int, char \\*\\[\\], *char \\*\\)";

#define    ALPHA_GETOPT_TEST_CT  1
tTestDesc aAlpha_GetoptTests[] = {
  { TT_EGREP,    zAlpha_GetoptSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Alpha_Getopt
 */
const char* apzAlpha_GetoptPatch[] = {
    "format",
    "getopt(int, char *const[], const char *)",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Alpha_Parens fix
 */
#define ALPHA_PARENS_FIXIDX              16
tSCC zAlpha_ParensName[] =
     "alpha_parens";

/*
 *  File name selection pattern
 */
tSCC zAlpha_ParensList[] =
  "|sym.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAlpha_ParensMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAlpha_ParensSelect0[] =
       "#ifndef\\(__mips64\\)";

#define    ALPHA_PARENS_TEST_CT  1
tTestDesc aAlpha_ParensTests[] = {
  { TT_EGREP,    zAlpha_ParensSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Alpha_Parens
 */
const char* apzAlpha_ParensPatch[] = {
    "format",
    "#ifndef __mips64",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Alpha_Sbrk fix
 */
#define ALPHA_SBRK_FIXIDX                17
tSCC zAlpha_SbrkName[] =
     "alpha_sbrk";

/*
 *  File name selection pattern
 */
tSCC zAlpha_SbrkList[] =
  "|unistd.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAlpha_SbrkMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAlpha_SbrkSelect0[] =
       "char[ \t]*\\*[\t ]*sbrk[ \t]*\\(";

#define    ALPHA_SBRK_TEST_CT  1
tTestDesc aAlpha_SbrkTests[] = {
  { TT_EGREP,    zAlpha_SbrkSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Alpha_Sbrk
 */
const char* apzAlpha_SbrkPatch[] = {
    "format",
    "void *sbrk(",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Arm_Norcroft_Hint fix
 */
#define ARM_NORCROFT_HINT_FIXIDX         18
tSCC zArm_Norcroft_HintName[] =
     "arm_norcroft_hint";

/*
 *  File name selection pattern
 */
tSCC zArm_Norcroft_HintList[] =
  "|X11/Intrinsic.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzArm_Norcroft_HintMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zArm_Norcroft_HintSelect0[] =
       "___type p_type";

#define    ARM_NORCROFT_HINT_TEST_CT  1
tTestDesc aArm_Norcroft_HintTests[] = {
  { TT_EGREP,    zArm_Norcroft_HintSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Arm_Norcroft_Hint
 */
const char* apzArm_Norcroft_HintPatch[] = { "sed",
    "-e", "s/___type p_type/p_type/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Arm_Wchar fix
 */
#define ARM_WCHAR_FIXIDX                 19
tSCC zArm_WcharName[] =
     "arm_wchar";

/*
 *  File name selection pattern
 */
tSCC zArm_WcharList[] =
  "|stdlib.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzArm_WcharMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zArm_WcharSelect0[] =
       "#[ \t]*define[ \t]*__wchar_t";

#define    ARM_WCHAR_TEST_CT  1
tTestDesc aArm_WcharTests[] = {
  { TT_EGREP,    zArm_WcharSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Arm_Wchar
 */
const char* apzArm_WcharPatch[] = { "sed",
    "-e", "s/\\(#[ \t]*ifndef[ \t]*\\)__wchar_t/\\1_GCC_WCHAR_T/",
    "-e", "s/\\(#[ \t]*define[ \t]*\\)__wchar_t/\\1_GCC_WCHAR_T/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Aux_Asm fix
 */
#define AUX_ASM_FIXIDX                   20
tSCC zAux_AsmName[] =
     "aux_asm";

/*
 *  File name selection pattern
 */
tSCC zAux_AsmList[] =
  "|sys/param.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAux_AsmMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAux_AsmSelect0[] =
       "#ifndef NOINLINE";

#define    AUX_ASM_TEST_CT  1
tTestDesc aAux_AsmTests[] = {
  { TT_EGREP,    zAux_AsmSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Aux_Asm
 */
const char* apzAux_AsmPatch[] = { "sed",
    "-e", "s|#ifndef NOINLINE|#if !defined(NOINLINE) \\&\\& !defined(__GNUC__)|",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Avoid_Bool fix
 */
#define AVOID_BOOL_FIXIDX                21
tSCC zAvoid_BoolName[] =
     "avoid_bool";

/*
 *  File name selection pattern
 */
tSCC zAvoid_BoolList[] =
  "|curses.h|curses_colr/curses.h|term.h|tinfo.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzAvoid_BoolMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zAvoid_BoolSelect0[] =
       "char[ \t]+bool|bool[ \t]+char";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zAvoid_BoolBypass0[] =
       "we must use the C\\+\\+ compiler's type";

#define    AVOID_BOOL_TEST_CT  2
tTestDesc aAvoid_BoolTests[] = {
  { TT_NEGREP,   zAvoid_BoolBypass0, (regex_t*)NULL },
  { TT_EGREP,    zAvoid_BoolSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Avoid_Bool
 */
const char* apzAvoid_BoolPatch[] = { "sed",
    "-e", "/^#[ \t]*define[ \t][ \t]*bool[ \t][ \t]*char[ \t]*$/i\\\n\
#ifndef __cplusplus\n",
    "-e", "/^#[ \t]*define[ \t][ \t]*bool[ \t][ \t]*char[ \t]*$/a\\\n\
#endif\n",
    "-e", "/^typedef[ \t][ \t]*char[ \t][ \t]*bool[ \t]*;/i\\\n\
#ifndef __cplusplus\n",
    "-e", "/^typedef[ \t][ \t]*char[ \t][ \t]*bool[ \t]*;/a\\\n\
#endif\n",
    "-e", "/^[ ]*typedef[ \t][ \t]*unsigned char[ \t][ \t]*bool[ \t]*;/i\\\n\
#ifndef __cplusplus\n",
    "-e", "/^[ ]*typedef[ \t][ \t]*unsigned char[ \t][ \t]*bool[ \t]*;/a\\\n\
#endif\n",
    "-e", "/^typedef[ \t][ \t]*int[ \t][ \t]*bool[ \t]*;/i\\\n\
#ifndef __cplusplus\n",
    "-e", "/^typedef[ \t][ \t]*int[ \t][ \t]*bool[ \t]*;/a\\\n\
#endif\n",
    "-e", "/^[ ]*typedef[ \t][ \t]*unsigned int[ \t][ \t]*bool[ \t]*;/i\\\n\
#ifndef __cplusplus\n",
    "-e", "/^[ ]*typedef[ \t][ \t]*unsigned int[ \t][ \t]*bool[ \t]*;/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Bad_Lval fix
 */
#define BAD_LVAL_FIXIDX                  22
tSCC zBad_LvalName[] =
     "bad_lval";

/*
 *  File name selection pattern
 */
tSCC zBad_LvalList[] =
  "|libgen.h|dirent.h|ftw.h|grp.h|ndbm.h|pthread.h|pwd.h|signal.h|standards.h|stdlib.h|string.h|stropts.h|time.h|unistd.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzBad_LvalMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zBad_LvalSelect0[] =
       "^[ \t]*#[ \t]*pragma[ \t]+extern_prefix";

#define    BAD_LVAL_TEST_CT  1
tTestDesc aBad_LvalTests[] = {
  { TT_EGREP,    zBad_LvalSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Bad_Lval
 */
const char* apzBad_LvalPatch[] = { "sed",
    "-e", "s/^[ \t]*#[ \t]*define[ \t][ \t]*\\([^(]*\\)\\(([^)]*)\\)[ \t]*\\(_.*\\)\\1\\2[ \t]*$/#define \\1 \\3\\1/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Bad_Struct_Term fix
 */
#define BAD_STRUCT_TERM_FIXIDX           23
tSCC zBad_Struct_TermName[] =
     "bad_struct_term";

/*
 *  File name selection pattern
 */
tSCC zBad_Struct_TermList[] =
  "|curses.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzBad_Struct_TermMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zBad_Struct_TermSelect0[] =
       "^[ \t]*typedef[ \t]+struct[ \t]+term[ \t]*;";

#define    BAD_STRUCT_TERM_TEST_CT  1
tTestDesc aBad_Struct_TermTests[] = {
  { TT_EGREP,    zBad_Struct_TermSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Bad_Struct_Term
 */
const char* apzBad_Struct_TermPatch[] = { "sed",
    "-e", "s/^[ \t]*typedef[ \t][ \t]*\\(struct[ \t][ \t]*term[ \t]*;[ \t]*\\)$/\\1/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Badquote fix
 */
#define BADQUOTE_FIXIDX                  24
tSCC zBadquoteName[] =
     "badquote";

/*
 *  File name selection pattern
 */
tSCC zBadquoteList[] =
  "|sundev/vuid_event.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzBadquoteMachs (const char**)NULL
#define BADQUOTE_TEST_CT  0
#define aBadquoteTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Badquote
 */
const char* apzBadquotePatch[] = { "sed",
    "-e", "s/doesn't/does not/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Broken_Assert_Stdio fix
 */
#define BROKEN_ASSERT_STDIO_FIXIDX       25
tSCC zBroken_Assert_StdioName[] =
     "broken_assert_stdio";

/*
 *  File name selection pattern
 */
tSCC zBroken_Assert_StdioList[] =
  "|assert.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzBroken_Assert_StdioMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zBroken_Assert_StdioSelect0[] =
       "stderr";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zBroken_Assert_StdioBypass0[] =
       "include.*stdio\\.h";

#define    BROKEN_ASSERT_STDIO_TEST_CT  2
tTestDesc aBroken_Assert_StdioTests[] = {
  { TT_NEGREP,   zBroken_Assert_StdioBypass0, (regex_t*)NULL },
  { TT_EGREP,    zBroken_Assert_StdioSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Broken_Assert_Stdio
 */
const char* apzBroken_Assert_StdioPatch[] = {
    "wrap",
    "#include <stdio.h>\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Broken_Assert_Stdlib fix
 */
#define BROKEN_ASSERT_STDLIB_FIXIDX      26
tSCC zBroken_Assert_StdlibName[] =
     "broken_assert_stdlib";

/*
 *  File name selection pattern
 */
tSCC zBroken_Assert_StdlibList[] =
  "|assert.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzBroken_Assert_StdlibMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zBroken_Assert_StdlibSelect0[] =
       "exit *\\(|abort *\\(";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zBroken_Assert_StdlibBypass0[] =
       "include.*stdlib\\.h";

#define    BROKEN_ASSERT_STDLIB_TEST_CT  2
tTestDesc aBroken_Assert_StdlibTests[] = {
  { TT_NEGREP,   zBroken_Assert_StdlibBypass0, (regex_t*)NULL },
  { TT_EGREP,    zBroken_Assert_StdlibSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Broken_Assert_Stdlib
 */
const char* apzBroken_Assert_StdlibPatch[] = {
    "wrap",
    "#ifdef __cplusplus\n\
#include <stdlib.h>\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Broken_Cabs fix
 */
#define BROKEN_CABS_FIXIDX               27
tSCC zBroken_CabsName[] =
     "broken_cabs";

/*
 *  File name selection pattern
 */
tSCC zBroken_CabsList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzBroken_CabsMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zBroken_CabsSelect0[] =
       "^extern double cabs";

#define    BROKEN_CABS_TEST_CT  1
tTestDesc aBroken_CabsTests[] = {
  { TT_EGREP,    zBroken_CabsSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Broken_Cabs
 */
const char* apzBroken_CabsPatch[] = { "sed",
    "-e", "s/^extern double cabs();//",
    "-e", "s/^extern double cabs(struct dbl_hypot);//",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ctrl_Quotes_Def fix
 */
#define CTRL_QUOTES_DEF_FIXIDX           28
tSCC zCtrl_Quotes_DefName[] =
     "ctrl_quotes_def";

/*
 *  File name selection pattern
 */
#define zCtrl_Quotes_DefList (char*)NULL
/*
 *  Machine/OS name selection pattern
 */
#define apzCtrl_Quotes_DefMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zCtrl_Quotes_DefSelect0[] =
       "define[ \t]+[A-Z0-9_]+CTRL\\(([a-zA-Z]).*'\\1'";

#define    CTRL_QUOTES_DEF_TEST_CT  1
tTestDesc aCtrl_Quotes_DefTests[] = {
  { TT_EGREP,    zCtrl_Quotes_DefSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Ctrl_Quotes_Def
 */
const char* apzCtrl_Quotes_DefPatch[] = {
    "char_macro_def",
    "CTRL",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ctrl_Quotes_Use fix
 */
#define CTRL_QUOTES_USE_FIXIDX           29
tSCC zCtrl_Quotes_UseName[] =
     "ctrl_quotes_use";

/*
 *  File name selection pattern
 */
#define zCtrl_Quotes_UseList (char*)NULL
/*
 *  Machine/OS name selection pattern
 */
#define apzCtrl_Quotes_UseMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zCtrl_Quotes_UseSelect0[] =
       "define[ \t]+[A-Z0-9_]+[ \t]+[A-Z0-9_]+CTRL[ \t]*\\( *[^,']";

#define    CTRL_QUOTES_USE_TEST_CT  1
tTestDesc aCtrl_Quotes_UseTests[] = {
  { TT_EGREP,    zCtrl_Quotes_UseSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Ctrl_Quotes_Use
 */
const char* apzCtrl_Quotes_UsePatch[] = {
    "char_macro_use",
    "CTRL",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Cxx_Unready fix
 */
#define CXX_UNREADY_FIXIDX               30
tSCC zCxx_UnreadyName[] =
     "cxx_unready";

/*
 *  File name selection pattern
 */
tSCC zCxx_UnreadyList[] =
  "|sys/mman.h|rpc/types.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzCxx_UnreadyMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zCxx_UnreadySelect0[] =
       "[^#]+malloc.*;";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zCxx_UnreadyBypass0[] =
       "\"C\"|__BEGIN_DECLS";

#define    CXX_UNREADY_TEST_CT  2
tTestDesc aCxx_UnreadyTests[] = {
  { TT_NEGREP,   zCxx_UnreadyBypass0, (regex_t*)NULL },
  { TT_EGREP,    zCxx_UnreadySelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Cxx_Unready
 */
const char* apzCxx_UnreadyPatch[] = {
    "wrap",
    "#ifdef __cplusplus\n\
extern \"C\" {\n\
#endif\n",
    "#ifdef __cplusplus\n\
}\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Dec_Intern_Asm fix
 */
#define DEC_INTERN_ASM_FIXIDX            31
tSCC zDec_Intern_AsmName[] =
     "dec_intern_asm";

/*
 *  File name selection pattern
 */
tSCC zDec_Intern_AsmList[] =
  "|c_asm.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzDec_Intern_AsmMachs (const char**)NULL
#define DEC_INTERN_ASM_TEST_CT  0
#define aDec_Intern_AsmTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Dec_Intern_Asm
 */
const char* apzDec_Intern_AsmPatch[] = { "sed",
    "-e", "/^[ \t]*float[ \t]*fasm/i\\\n\
#ifdef __DECC\n",
    "-e", "/^[ \t]*#[ \t]*pragma[ \t]*intrinsic([ \t]*dasm/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ecd_Cursor fix
 */
#define ECD_CURSOR_FIXIDX                32
tSCC zEcd_CursorName[] =
     "ecd_cursor";

/*
 *  File name selection pattern
 */
tSCC zEcd_CursorList[] =
  "|sunwindow/win_lock.h|sunwindow/win_cursor.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzEcd_CursorMachs (const char**)NULL
#define ECD_CURSOR_TEST_CT  0
#define aEcd_CursorTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Ecd_Cursor
 */
const char* apzEcd_CursorPatch[] = { "sed",
    "-e", "s/ecd.cursor/ecd_cursor/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Fix_Header_Breakage fix
 */
#define FIX_HEADER_BREAKAGE_FIXIDX       33
tSCC zFix_Header_BreakageName[] =
     "fix_header_breakage";

/*
 *  File name selection pattern
 */
tSCC zFix_Header_BreakageList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzFix_Header_BreakageMachs[] = {
        "m88k-motorola-sysv3*",
        (const char*)NULL };

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zFix_Header_BreakageSelect0[] =
       "extern double floor\\(\\), ceil\\(\\), fmod\\(\\), fabs\\(\\);";

#define    FIX_HEADER_BREAKAGE_TEST_CT  1
tTestDesc aFix_Header_BreakageTests[] = {
  { TT_EGREP,    zFix_Header_BreakageSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Fix_Header_Breakage
 */
const char* apzFix_Header_BreakagePatch[] = {
    "format",
    "extern double floor(), ceil(), fmod(), fabs _PARAMS((double));",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Hp_Inline fix
 */
#define HP_INLINE_FIXIDX                 34
tSCC zHp_InlineName[] =
     "hp_inline";

/*
 *  File name selection pattern
 */
tSCC zHp_InlineList[] =
  "|sys/spinlock.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzHp_InlineMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zHp_InlineSelect0[] =
       "include.*\"\\.\\./machine/";

#define    HP_INLINE_TEST_CT  1
tTestDesc aHp_InlineTests[] = {
  { TT_EGREP,    zHp_InlineSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Hp_Inline
 */
const char* apzHp_InlinePatch[] = { "sed",
    "-e", "s,\"../machine/inline.h\",<machine/inline.h>,",
    "-e", "s,\"../machine/psl.h\",<machine/psl.h>,",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Hp_Sysfile fix
 */
#define HP_SYSFILE_FIXIDX                35
tSCC zHp_SysfileName[] =
     "hp_sysfile";

/*
 *  File name selection pattern
 */
tSCC zHp_SysfileList[] =
  "|sys/file.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzHp_SysfileMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zHp_SysfileSelect0[] =
       "HPUX_SOURCE";

#define    HP_SYSFILE_TEST_CT  1
tTestDesc aHp_SysfileTests[] = {
  { TT_EGREP,    zHp_SysfileSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Hp_Sysfile
 */
const char* apzHp_SysfilePatch[] = { "sed",
    "-e", "s/(\\.\\.\\.)/(struct file *, ...)/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Hpux11_Fabsf fix
 */
#define HPUX11_FABSF_FIXIDX              36
tSCC zHpux11_FabsfName[] =
     "hpux11_fabsf";

/*
 *  File name selection pattern
 */
tSCC zHpux11_FabsfList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzHpux11_FabsfMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zHpux11_FabsfSelect0[] =
       "^[ \t]*#[ \t]*define[ \t]+fabsf\\(.*";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zHpux11_FabsfBypass0[] =
       "__cplusplus";

#define    HPUX11_FABSF_TEST_CT  2
tTestDesc aHpux11_FabsfTests[] = {
  { TT_NEGREP,   zHpux11_FabsfBypass0, (regex_t*)NULL },
  { TT_EGREP,    zHpux11_FabsfSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Hpux11_Fabsf
 */
const char* apzHpux11_FabsfPatch[] = {
    "format",
    "#ifndef __cplusplus\n\
%0\n\
#endif",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Hpux8_Bogus_Inlines fix
 */
#define HPUX8_BOGUS_INLINES_FIXIDX       37
tSCC zHpux8_Bogus_InlinesName[] =
     "hpux8_bogus_inlines";

/*
 *  File name selection pattern
 */
tSCC zHpux8_Bogus_InlinesList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzHpux8_Bogus_InlinesMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zHpux8_Bogus_InlinesSelect0[] =
       "inline";

#define    HPUX8_BOGUS_INLINES_TEST_CT  1
tTestDesc aHpux8_Bogus_InlinesTests[] = {
  { TT_EGREP,    zHpux8_Bogus_InlinesSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Hpux8_Bogus_Inlines
 */
const char* apzHpux8_Bogus_InlinesPatch[] = { "sed",
    "-e", "s@inline int abs(int [a-z][a-z]*) {.*}@extern \"C\" int abs(int);@",
    "-e", "s@inline double abs(double [a-z][a-z]*) {.*}@@",
    "-e", "s@inline int sqr(int [a-z][a-z]*) {.*}@@",
    "-e", "s@inline double sqr(double [a-z][a-z]*) {.*}@@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Hpux11_Uint32_C fix
 */
#define HPUX11_UINT32_C_FIXIDX           38
tSCC zHpux11_Uint32_CName[] =
     "hpux11_uint32_c";

/*
 *  File name selection pattern
 */
tSCC zHpux11_Uint32_CList[] =
  "|inttypes.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzHpux11_Uint32_CMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zHpux11_Uint32_CSelect0[] =
       "^#define UINT32_C\\(__c\\)[ \t]*__CONCAT__\\(__CONCAT_U__\\(__c\\),l\\)";

#define    HPUX11_UINT32_C_TEST_CT  1
tTestDesc aHpux11_Uint32_CTests[] = {
  { TT_EGREP,    zHpux11_Uint32_CSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Hpux11_Uint32_C
 */
const char* apzHpux11_Uint32_CPatch[] = {
    "format",
    "#define UINT32_C(__c) __CONCAT__(__c,ul)",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Isc_Omits_With_Stdc fix
 */
#define ISC_OMITS_WITH_STDC_FIXIDX       39
tSCC zIsc_Omits_With_StdcName[] =
     "isc_omits_with_stdc";

/*
 *  File name selection pattern
 */
tSCC zIsc_Omits_With_StdcList[] =
  "|stdio.h|math.h|ctype.h|sys/limits.h|sys/fcntl.h|sys/dirent.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzIsc_Omits_With_StdcMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zIsc_Omits_With_StdcSelect0[] =
       "!defined\\(__STDC__\\) && !defined\\(_POSIX_SOURCE\\)";

#define    ISC_OMITS_WITH_STDC_TEST_CT  1
tTestDesc aIsc_Omits_With_StdcTests[] = {
  { TT_EGREP,    zIsc_Omits_With_StdcSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Isc_Omits_With_Stdc
 */
const char* apzIsc_Omits_With_StdcPatch[] = {
    "format",
    "!defined(_POSIX_SOURCE)",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Io_Quotes_Def fix
 */
#define IO_QUOTES_DEF_FIXIDX             40
tSCC zIo_Quotes_DefName[] =
     "io_quotes_def";

/*
 *  File name selection pattern
 */
#define zIo_Quotes_DefList (char*)NULL
/*
 *  Machine/OS name selection pattern
 */
#define apzIo_Quotes_DefMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zIo_Quotes_DefSelect0[] =
       "define[ \t]+[A-Z0-9_]+IO[A-Z]*\\(([a-zA-Z]).*'\\1'";

#define    IO_QUOTES_DEF_TEST_CT  1
tTestDesc aIo_Quotes_DefTests[] = {
  { TT_EGREP,    zIo_Quotes_DefSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Io_Quotes_Def
 */
const char* apzIo_Quotes_DefPatch[] = {
    "char_macro_def",
    "IO",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Io_Quotes_Use fix
 */
#define IO_QUOTES_USE_FIXIDX             41
tSCC zIo_Quotes_UseName[] =
     "io_quotes_use";

/*
 *  File name selection pattern
 */
#define zIo_Quotes_UseList (char*)NULL
/*
 *  Machine/OS name selection pattern
 */
#define apzIo_Quotes_UseMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zIo_Quotes_UseSelect0[] =
       "define[ \t]+[A-Z0-9_]+[ \t]+[A-Z0-9_]+IO[A-Z]*[ \t]*\\( *[^,']";

#define    IO_QUOTES_USE_TEST_CT  1
tTestDesc aIo_Quotes_UseTests[] = {
  { TT_EGREP,    zIo_Quotes_UseSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Io_Quotes_Use
 */
const char* apzIo_Quotes_UsePatch[] = {
    "char_macro_use",
    "IO",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Hpux_Maxint fix
 */
#define HPUX_MAXINT_FIXIDX               42
tSCC zHpux_MaxintName[] =
     "hpux_maxint";

/*
 *  File name selection pattern
 */
tSCC zHpux_MaxintList[] =
  "|sys/param.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzHpux_MaxintMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zHpux_MaxintSelect0[] =
       "^#[ \t]*define[ \t]*MAXINT[ \t]";

#define    HPUX_MAXINT_TEST_CT  1
tTestDesc aHpux_MaxintTests[] = {
  { TT_EGREP,    zHpux_MaxintSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Hpux_Maxint
 */
const char* apzHpux_MaxintPatch[] = { "sed",
    "-e", "/^#[ \t]*define[ \t]*MAXINT[ \t]/i\\\n\
#ifndef MAXINT\n",
    "-e", "/^#[ \t]*define[ \t]*MAXINT[ \t]/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Hpux_Systime fix
 */
#define HPUX_SYSTIME_FIXIDX              43
tSCC zHpux_SystimeName[] =
     "hpux_systime";

/*
 *  File name selection pattern
 */
tSCC zHpux_SystimeList[] =
  "|sys/time.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzHpux_SystimeMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zHpux_SystimeSelect0[] =
       "^extern struct sigevent;";

#define    HPUX_SYSTIME_TEST_CT  1
tTestDesc aHpux_SystimeTests[] = {
  { TT_EGREP,    zHpux_SystimeSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Hpux_Systime
 */
const char* apzHpux_SystimePatch[] = { "sed",
    "-e", "s/^extern struct sigevent;/struct sigevent;/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ip_Missing_Semi fix
 */
#define IP_MISSING_SEMI_FIXIDX           44
tSCC zIp_Missing_SemiName[] =
     "ip_missing_semi";

/*
 *  File name selection pattern
 */
tSCC zIp_Missing_SemiList[] =
  "|netinet/ip.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzIp_Missing_SemiMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zIp_Missing_SemiSelect0[] =
       "}$";

#define    IP_MISSING_SEMI_TEST_CT  1
tTestDesc aIp_Missing_SemiTests[] = {
  { TT_EGREP,    zIp_Missing_SemiSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Ip_Missing_Semi
 */
const char* apzIp_Missing_SemiPatch[] = { "sed",
    "-e", "/^struct/,/^};/s/}$/};/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Irix_Asm_Apostrophe fix
 */
#define IRIX_ASM_APOSTROPHE_FIXIDX       45
tSCC zIrix_Asm_ApostropheName[] =
     "irix_asm_apostrophe";

/*
 *  File name selection pattern
 */
tSCC zIrix_Asm_ApostropheList[] =
  "|sys/asm.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzIrix_Asm_ApostropheMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zIrix_Asm_ApostropheSelect0[] =
       "^[ \t]*#.*[Ww]e're";

#define    IRIX_ASM_APOSTROPHE_TEST_CT  1
tTestDesc aIrix_Asm_ApostropheTests[] = {
  { TT_EGREP,    zIrix_Asm_ApostropheSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Irix_Asm_Apostrophe
 */
const char* apzIrix_Asm_ApostrophePatch[] = {
    "format",
    "%1 are",
    "^([ \t]*#.*[Ww]e)'re",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Irix_Multiline_Cmnt fix
 */
#define IRIX_MULTILINE_CMNT_FIXIDX       46
tSCC zIrix_Multiline_CmntName[] =
     "irix_multiline_cmnt";

/*
 *  File name selection pattern
 */
tSCC zIrix_Multiline_CmntList[] =
  "|sys/types.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzIrix_Multiline_CmntMachs (const char**)NULL
#define IRIX_MULTILINE_CMNT_TEST_CT  0
#define aIrix_Multiline_CmntTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Irix_Multiline_Cmnt
 */
const char* apzIrix_Multiline_CmntPatch[] = { "sed",
    "-e", "s@type of the result@type of the result */@",
    "-e", "s@of the sizeof@/* of the sizeof@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Isc_Fmod fix
 */
#define ISC_FMOD_FIXIDX                  47
tSCC zIsc_FmodName[] =
     "isc_fmod";

/*
 *  File name selection pattern
 */
tSCC zIsc_FmodList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzIsc_FmodMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zIsc_FmodSelect0[] =
       "fmod\\(double\\)";

#define    ISC_FMOD_TEST_CT  1
tTestDesc aIsc_FmodTests[] = {
  { TT_EGREP,    zIsc_FmodSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Isc_Fmod
 */
const char* apzIsc_FmodPatch[] = {
    "format",
    "fmod(double, double)",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Kandr_Concat fix
 */
#define KANDR_CONCAT_FIXIDX              48
tSCC zKandr_ConcatName[] =
     "kandr_concat";

/*
 *  File name selection pattern
 */
tSCC zKandr_ConcatList[] =
  "|sparc/asm_linkage.h|sun3/asm_linkage.h|sun3x/asm_linkage.h|sun4/asm_linkage.h|sun4c/asm_linkage.h|sun4m/asm_linkage.h|sun4c/debug/asm_linkage.h|sun4m/debug/asm_linkage.h|arm/as_support.h|arm/mc_type.h|arm/xcb.h|dev/chardefmac.h|dev/ps_irq.h|dev/screen.h|dev/scsi.h|sys/tty.h|Xm.acorn/XmP.h|bsd43/bsd43_.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzKandr_ConcatMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zKandr_ConcatSelect0[] =
       "/\\*\\*/";

#define    KANDR_CONCAT_TEST_CT  1
tTestDesc aKandr_ConcatTests[] = {
  { TT_EGREP,    zKandr_ConcatSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Kandr_Concat
 */
const char* apzKandr_ConcatPatch[] = {
    "format",
    "##",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Limits_Ifndefs fix
 */
#define LIMITS_IFNDEFS_FIXIDX            49
tSCC zLimits_IfndefsName[] =
     "limits_ifndefs";

/*
 *  File name selection pattern
 */
tSCC zLimits_IfndefsList[] =
  "|limits.h|sys/limits.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzLimits_IfndefsMachs (const char**)NULL

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zLimits_IfndefsBypass0[] =
       "ifndef[ \t]+FLT_MIN";

#define    LIMITS_IFNDEFS_TEST_CT  1
tTestDesc aLimits_IfndefsTests[] = {
  { TT_NEGREP,   zLimits_IfndefsBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Limits_Ifndefs
 */
const char* apzLimits_IfndefsPatch[] = {
    "format",
    "#ifndef %1\n\
%0#endif\n",
    "^[ \t]*#[ \t]*define[ \t]+((FLT|DBL)_(MIN|MAX|DIG))[ \t][^\n\
]*\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Lynx_Void_Int fix
 */
#define LYNX_VOID_INT_FIXIDX             50
tSCC zLynx_Void_IntName[] =
     "lynx_void_int";

/*
 *  File name selection pattern
 */
tSCC zLynx_Void_IntList[] =
  "|curses.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzLynx_Void_IntMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zLynx_Void_IntSelect0[] =
       "#[ \t]*define[ \t]+void[ \t]+int[ \t]*";

#define    LYNX_VOID_INT_TEST_CT  1
tTestDesc aLynx_Void_IntTests[] = {
  { TT_EGREP,    zLynx_Void_IntSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Lynx_Void_Int
 */
const char* apzLynx_Void_IntPatch[] = {
    "format",
    "",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Lynxos_Fcntl_Proto fix
 */
#define LYNXOS_FCNTL_PROTO_FIXIDX        51
tSCC zLynxos_Fcntl_ProtoName[] =
     "lynxos_fcntl_proto";

/*
 *  File name selection pattern
 */
tSCC zLynxos_Fcntl_ProtoList[] =
  "|fcntl.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzLynxos_Fcntl_ProtoMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zLynxos_Fcntl_ProtoSelect0[] =
       "fcntl[ \t]*\\(int, int, int\\)";

#define    LYNXOS_FCNTL_PROTO_TEST_CT  1
tTestDesc aLynxos_Fcntl_ProtoTests[] = {
  { TT_EGREP,    zLynxos_Fcntl_ProtoSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Lynxos_Fcntl_Proto
 */
const char* apzLynxos_Fcntl_ProtoPatch[] = {
    "format",
    "%1...)",
    "(fcntl[ \t]*\\(int, int, )int\\)",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of M88k_Bad_Hypot_Opt fix
 */
#define M88K_BAD_HYPOT_OPT_FIXIDX        52
tSCC zM88k_Bad_Hypot_OptName[] =
     "m88k_bad_hypot_opt";

/*
 *  File name selection pattern
 */
tSCC zM88k_Bad_Hypot_OptList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzM88k_Bad_Hypot_OptMachs[] = {
        "m88k-motorola-sysv3*",
        (const char*)NULL };

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zM88k_Bad_Hypot_OptSelect0[] =
       "^extern double hypot\\(\\);\n";

#define    M88K_BAD_HYPOT_OPT_TEST_CT  1
tTestDesc aM88k_Bad_Hypot_OptTests[] = {
  { TT_EGREP,    zM88k_Bad_Hypot_OptSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for M88k_Bad_Hypot_Opt
 */
const char* apzM88k_Bad_Hypot_OptPatch[] = {
    "format",
    "%0/* Workaround a stupid Motorola optimization if one\n\
   of x or y is 0.0 and the other is negative!  */\n\
#ifdef __STDC__\n\
static __inline__ double fake_hypot (double x, double y)\n\
#else\n\
static __inline__ double fake_hypot (x, y)\n\
\tdouble x, y;\n\
#endif\n\
{\n\
\treturn fabs (hypot (x, y));\n\
}\n\
#define hypot\tfake_hypot\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of M88k_Bad_S_If fix
 */
#define M88K_BAD_S_IF_FIXIDX             53
tSCC zM88k_Bad_S_IfName[] =
     "m88k_bad_s_if";

/*
 *  File name selection pattern
 */
tSCC zM88k_Bad_S_IfList[] =
  "|sys/stat.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzM88k_Bad_S_IfMachs[] = {
        "m88k-*-sysv3*",
        (const char*)NULL };

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zM88k_Bad_S_IfSelect0[] =
       "#define[ \t]+S_IS[A-Z]+\\(m\\)[ \t]+\\(m[ \t]*&";

#define    M88K_BAD_S_IF_TEST_CT  1
tTestDesc aM88k_Bad_S_IfTests[] = {
  { TT_EGREP,    zM88k_Bad_S_IfSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for M88k_Bad_S_If
 */
const char* apzM88k_Bad_S_IfPatch[] = {
    "format",
    "#define %1(m) (((m) & S_IFMT) == %2)",
    "#define[ \t]+(S_IS[A-Z]+)\\(m\\)[ \t]+\\(m[ \t]*&[ \t]*(S_IF[A-Z][A-Z][A-Z]+|0[0-9]+)[ \t]*\\)",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of M88k_Multi_Incl fix
 */
#define M88K_MULTI_INCL_FIXIDX           54
tSCC zM88k_Multi_InclName[] =
     "m88k_multi_incl";

/*
 *  File name selection pattern
 */
tSCC zM88k_Multi_InclList[] =
  "|time.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzM88k_Multi_InclMachs[] = {
        "m88k-tektronix-sysv3*",
        (const char*)NULL };

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zM88k_Multi_InclBypass0[] =
       "#ifndef";

#define    M88K_MULTI_INCL_TEST_CT  1
tTestDesc aM88k_Multi_InclTests[] = {
  { TT_NEGREP,   zM88k_Multi_InclBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for M88k_Multi_Incl
 */
const char* apzM88k_Multi_InclPatch[] = { "sh", "-c",
    "echo Fixing $file, to protect against multiple inclusion. >&2\n\
      cpp_wrapper=`echo $file | sed -e 's,\\.,_,g' -e 's,/,_,g'`\n\
      echo \"#ifndef __GCC_GOT_${cpp_wrapper}_\"\n\
      echo \"#define __GCC_GOT_${cpp_wrapper}_\"\n\
      cat\n\
      echo \"#endif /* ! __GCC_GOT_${cpp_wrapper}_ */\"",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Machine_Ansi_H_Va_List fix
 */
#define MACHINE_ANSI_H_VA_LIST_FIXIDX    55
tSCC zMachine_Ansi_H_Va_ListName[] =
     "machine_ansi_h_va_list";

/*
 *  File name selection pattern
 */
tSCC zMachine_Ansi_H_Va_ListList[] =
  "|machine/ansi.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzMachine_Ansi_H_Va_ListMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zMachine_Ansi_H_Va_ListSelect0[] =
       "_BSD_VA_LIST_";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zMachine_Ansi_H_Va_ListBypass0[] =
       "__builtin_va_list";

#define    MACHINE_ANSI_H_VA_LIST_TEST_CT  2
tTestDesc aMachine_Ansi_H_Va_ListTests[] = {
  { TT_NEGREP,   zMachine_Ansi_H_Va_ListBypass0, (regex_t*)NULL },
  { TT_EGREP,    zMachine_Ansi_H_Va_ListSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Machine_Ansi_H_Va_List
 */
const char* apzMachine_Ansi_H_Va_ListPatch[] = { "sed",
    "-e", "s/\\(_BSD_VA_LIST_[ \t][ \t]*\\).*$/\\1__builtin_va_list/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Machine_Name fix
 */
#define MACHINE_NAME_FIXIDX              56
tSCC zMachine_NameName[] =
     "machine_name";

/*
 *  File name selection pattern
 */
#define zMachine_NameList (char*)NULL
/*
 *  Machine/OS name selection pattern
 */
#define apzMachine_NameMachs (const char**)NULL

/*
 *  perform the C function call test
 */
tSCC zMachine_NameFTst0[] = "machine_name";

#define    MACHINE_NAME_TEST_CT  1
tTestDesc aMachine_NameTests[] = {
  { TT_FUNCTION, zMachine_NameFTst0,   0 /* unused */ }, };

/*
 *  Fix Command Arguments for Machine_Name
 */
const char* apzMachine_NamePatch[] = {
    "machine_name",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Math_Exception fix
 */
#define MATH_EXCEPTION_FIXIDX            57
tSCC zMath_ExceptionName[] =
     "math_exception";

/*
 *  File name selection pattern
 */
tSCC zMath_ExceptionList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzMath_ExceptionMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zMath_ExceptionSelect0[] =
       "struct exception";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zMath_ExceptionBypass0[] =
       "We have a problem when using C\\+\\+";

#define    MATH_EXCEPTION_TEST_CT  2
tTestDesc aMath_ExceptionTests[] = {
  { TT_NEGREP,   zMath_ExceptionBypass0, (regex_t*)NULL },
  { TT_EGREP,    zMath_ExceptionSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Math_Exception
 */
const char* apzMath_ExceptionPatch[] = {
    "wrap",
    "#ifdef __cplusplus\n\
#define exception __math_exception\n\
#endif\n",
    "#ifdef __cplusplus\n\
#undef exception\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Math_Huge_Val_From_Dbl_Max fix
 */
#define MATH_HUGE_VAL_FROM_DBL_MAX_FIXIDX 58
tSCC zMath_Huge_Val_From_Dbl_MaxName[] =
     "math_huge_val_from_dbl_max";

/*
 *  File name selection pattern
 */
tSCC zMath_Huge_Val_From_Dbl_MaxList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzMath_Huge_Val_From_Dbl_MaxMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zMath_Huge_Val_From_Dbl_MaxSelect0[] =
       "define[ \t]*HUGE_VAL[ \t]*DBL_MAX";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zMath_Huge_Val_From_Dbl_MaxBypass0[] =
       "define[ \t]*DBL_MAX";

#define    MATH_HUGE_VAL_FROM_DBL_MAX_TEST_CT  2
tTestDesc aMath_Huge_Val_From_Dbl_MaxTests[] = {
  { TT_NEGREP,   zMath_Huge_Val_From_Dbl_MaxBypass0, (regex_t*)NULL },
  { TT_EGREP,    zMath_Huge_Val_From_Dbl_MaxSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Math_Huge_Val_From_Dbl_Max
 */
const char* apzMath_Huge_Val_From_Dbl_MaxPatch[] = { "sh", "-c",
    "\tdbl_max_def=`egrep 'define[ \t]+DBL_MAX[ \t]+.*' float.h 2>/dev/null`\n\
\n\
\tif ( test -n \"${dbl_max_def}\" ) > /dev/null 2>&1\n\
\tthen sed -e '/define[ \t]*HUGE_VAL[ \t]*DBL_MAX/s/DBL_MAX/'\"$dbl_max_def/\"\n\
\telse cat\n\
\tfi",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Math_Huge_Val_Ifndef fix
 */
#define MATH_HUGE_VAL_IFNDEF_FIXIDX      59
tSCC zMath_Huge_Val_IfndefName[] =
     "math_huge_val_ifndef";

/*
 *  File name selection pattern
 */
tSCC zMath_Huge_Val_IfndefList[] =
  "|math/math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzMath_Huge_Val_IfndefMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zMath_Huge_Val_IfndefSelect0[] =
       "define[ \t]*HUGE_VAL";

#define    MATH_HUGE_VAL_IFNDEF_TEST_CT  1
tTestDesc aMath_Huge_Val_IfndefTests[] = {
  { TT_EGREP,    zMath_Huge_Val_IfndefSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Math_Huge_Val_Ifndef
 */
const char* apzMath_Huge_Val_IfndefPatch[] = { "sed",
    "-e", "/define[ \t]HUGE_VAL[ \t]/i\\\n\
#ifndef HUGE_VAL\n",
    "-e", "/define[ \t]HUGE_VAL[ \t]/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Nested_Motorola fix
 */
#define NESTED_MOTOROLA_FIXIDX           60
tSCC zNested_MotorolaName[] =
     "nested_motorola";

/*
 *  File name selection pattern
 */
tSCC zNested_MotorolaList[] =
  "|limits.h|sys/limits.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzNested_MotorolaMachs[] = {
        "m68k-motorola-sysv*",
        (const char*)NULL };
#define NESTED_MOTOROLA_TEST_CT  0
#define aNested_MotorolaTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Nested_Motorola
 */
const char* apzNested_MotorolaPatch[] = { "sed",
    "-e", "s@^\\(#undef[ \t][ \t]*PIPE_BUF[ \t]*/\\* max # bytes atomic in write to a\\)$@\\1 */@",
    "-e", "s@\\(/\\*#define\tHUGE_VAL\t3.[0-9e+]* \\)\\(/\\*error value returned by Math lib\\*/\\)$@\\1*/ \\2@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Nested_Sys_Limits fix
 */
#define NESTED_SYS_LIMITS_FIXIDX         61
tSCC zNested_Sys_LimitsName[] =
     "nested_sys_limits";

/*
 *  File name selection pattern
 */
tSCC zNested_Sys_LimitsList[] =
  "|sys/limits.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNested_Sys_LimitsMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zNested_Sys_LimitsSelect0[] =
       "CHILD_MAX";

#define    NESTED_SYS_LIMITS_TEST_CT  1
tTestDesc aNested_Sys_LimitsTests[] = {
  { TT_EGREP,    zNested_Sys_LimitsSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Nested_Sys_Limits
 */
const char* apzNested_Sys_LimitsPatch[] = { "sed",
    "-e", "/CHILD_MAX/s,/\\* Max, Max,",
    "-e", "/OPEN_MAX/s,/\\* Max, Max,",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Nested_Auth_Des fix
 */
#define NESTED_AUTH_DES_FIXIDX           62
tSCC zNested_Auth_DesName[] =
     "nested_auth_des";

/*
 *  File name selection pattern
 */
tSCC zNested_Auth_DesList[] =
  "|rpc/rpc.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNested_Auth_DesMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zNested_Auth_DesSelect0[] =
       "(/\\*.*rpc/auth_des\\.h>.*)/\\*";

#define    NESTED_AUTH_DES_TEST_CT  1
tTestDesc aNested_Auth_DesTests[] = {
  { TT_EGREP,    zNested_Auth_DesSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Nested_Auth_Des
 */
const char* apzNested_Auth_DesPatch[] = {
    "format",
    "%1*/ /*",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Nested_Ultrix fix
 */
#define NESTED_ULTRIX_FIXIDX             63
tSCC zNested_UltrixName[] =
     "nested_ultrix";

/*
 *  File name selection pattern
 */
tSCC zNested_UltrixList[] =
  "|rpc/svc.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNested_UltrixMachs (const char**)NULL
#define NESTED_ULTRIX_TEST_CT  0
#define aNested_UltrixTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Nested_Ultrix
 */
const char* apzNested_UltrixPatch[] = { "sed",
    "-e", "s@^\\( \\*\tint protocol;  \\)/\\*@\\1*/ /*@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of News_Os_Recursion fix
 */
#define NEWS_OS_RECURSION_FIXIDX         64
tSCC zNews_Os_RecursionName[] =
     "news_os_recursion";

/*
 *  File name selection pattern
 */
tSCC zNews_Os_RecursionList[] =
  "|stdlib.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNews_Os_RecursionMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zNews_Os_RecursionSelect0[] =
       "#include <stdlib.h>";

#define    NEWS_OS_RECURSION_TEST_CT  1
tTestDesc aNews_Os_RecursionTests[] = {
  { TT_EGREP,    zNews_Os_RecursionSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for News_Os_Recursion
 */
const char* apzNews_Os_RecursionPatch[] = { "sed",
    "-e", "/^#include <stdlib.h>/i\\\n\
#ifdef BOGUS_RECURSION\n",
    "-e", "/^#include <stdlib.h>/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Next_Math_Prefix fix
 */
#define NEXT_MATH_PREFIX_FIXIDX          65
tSCC zNext_Math_PrefixName[] =
     "next_math_prefix";

/*
 *  File name selection pattern
 */
tSCC zNext_Math_PrefixList[] =
  "|ansi/math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNext_Math_PrefixMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zNext_Math_PrefixSelect0[] =
       "^extern.*double.*__const__.*";

#define    NEXT_MATH_PREFIX_TEST_CT  1
tTestDesc aNext_Math_PrefixTests[] = {
  { TT_EGREP,    zNext_Math_PrefixSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Next_Math_Prefix
 */
const char* apzNext_Math_PrefixPatch[] = { "sed",
    "-e", "/^extern.*double.*__const__.*sqrt(/s/__const__//",
    "-e", "/^extern.*double.*__const__.*fabs(/s/__const__//",
    "-e", "/^extern.*double.*__const__.*cos(/s/__const__//",
    "-e", "/^extern.*double.*__const__.*hypot(/s/__const__//",
    "-e", "/^extern.*double.*__const__.*sin(/s/__const__//",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Next_Template fix
 */
#define NEXT_TEMPLATE_FIXIDX             66
tSCC zNext_TemplateName[] =
     "next_template";

/*
 *  File name selection pattern
 */
tSCC zNext_TemplateList[] =
  "|bsd/libc.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNext_TemplateMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zNext_TemplateSelect0[] =
       "template";

#define    NEXT_TEMPLATE_TEST_CT  1
tTestDesc aNext_TemplateTests[] = {
  { TT_EGREP,    zNext_TemplateSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Next_Template
 */
const char* apzNext_TemplatePatch[] = { "sed",
    "-e", "/\\(.*template\\)/s/template//",
    "-e", "/extern.*volatile.*void.*abort/s/volatile//",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Next_Volitile fix
 */
#define NEXT_VOLITILE_FIXIDX             67
tSCC zNext_VolitileName[] =
     "next_volitile";

/*
 *  File name selection pattern
 */
tSCC zNext_VolitileList[] =
  "|ansi/stdlib.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNext_VolitileMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zNext_VolitileSelect0[] =
       "volatile";

#define    NEXT_VOLITILE_TEST_CT  1
tTestDesc aNext_VolitileTests[] = {
  { TT_EGREP,    zNext_VolitileSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Next_Volitile
 */
const char* apzNext_VolitilePatch[] = { "sed",
    "-e", "/extern.*volatile.*void.*exit/s/volatile//",
    "-e", "/extern.*volatile.*void.*abort/s/volatile//",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Next_Wait_Union fix
 */
#define NEXT_WAIT_UNION_FIXIDX           68
tSCC zNext_Wait_UnionName[] =
     "next_wait_union";

/*
 *  File name selection pattern
 */
tSCC zNext_Wait_UnionList[] =
  "|sys/wait.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNext_Wait_UnionMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zNext_Wait_UnionSelect0[] =
       "wait\\(union wait";

#define    NEXT_WAIT_UNION_TEST_CT  1
tTestDesc aNext_Wait_UnionTests[] = {
  { TT_EGREP,    zNext_Wait_UnionSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Next_Wait_Union
 */
const char* apzNext_Wait_UnionPatch[] = { "sed",
    "-e", "s@wait(union wait@wait(void@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Nodeent_Syntax fix
 */
#define NODEENT_SYNTAX_FIXIDX            69
tSCC zNodeent_SyntaxName[] =
     "nodeent_syntax";

/*
 *  File name selection pattern
 */
tSCC zNodeent_SyntaxList[] =
  "|netdnet/dnetdb.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzNodeent_SyntaxMachs (const char**)NULL
#define NODEENT_SYNTAX_TEST_CT  0
#define aNodeent_SyntaxTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Nodeent_Syntax
 */
const char* apzNodeent_SyntaxPatch[] = { "sed",
    "-e", "s/char.*na_addr *$/char *na_addr;/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Osf_Namespace_A fix
 */
#define OSF_NAMESPACE_A_FIXIDX           70
tSCC zOsf_Namespace_AName[] =
     "osf_namespace_a";

/*
 *  File name selection pattern
 */
tSCC zOsf_Namespace_AList[] =
  "|reg_types.h|sys/lc_core.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzOsf_Namespace_AMachs (const char**)NULL

/*
 *  perform the 'test' shell command - do fix on success
 */
tSCC zOsf_Namespace_ATest0[] =
       " -r reg_types.h";
tSCC zOsf_Namespace_ATest1[] =
       " -r sys/lc_core.h";
tSCC zOsf_Namespace_ATest2[] =
       " -n \"`grep '} regex_t;' reg_types.h`\"";
tSCC zOsf_Namespace_ATest3[] =
       " -z \"`grep __regex_t regex.h`\"";

#define    OSF_NAMESPACE_A_TEST_CT  4
tTestDesc aOsf_Namespace_ATests[] = {
  { TT_TEST,     zOsf_Namespace_ATest0,   0 /* unused */ },
  { TT_TEST,     zOsf_Namespace_ATest1,   0 /* unused */ },
  { TT_TEST,     zOsf_Namespace_ATest2,   0 /* unused */ },
  { TT_TEST,     zOsf_Namespace_ATest3,   0 /* unused */ }, };

/*
 *  Fix Command Arguments for Osf_Namespace_A
 */
const char* apzOsf_Namespace_APatch[] = { "sed",
    "-e", "s/regex_t/__regex_t/g",
    "-e", "s/regoff_t/__regoff_t/g",
    "-e", "s/regmatch_t/__regmatch_t/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Osf_Namespace_B fix
 */
#define OSF_NAMESPACE_B_FIXIDX           71
tSCC zOsf_Namespace_BName[] =
     "osf_namespace_b";

/*
 *  File name selection pattern
 */
tSCC zOsf_Namespace_BList[] =
  "|regex.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzOsf_Namespace_BMachs (const char**)NULL

/*
 *  perform the 'test' shell command - do fix on success
 */
tSCC zOsf_Namespace_BTest0[] =
       " -r reg_types.h";
tSCC zOsf_Namespace_BTest1[] =
       " -r sys/lc_core.h";
tSCC zOsf_Namespace_BTest2[] =
       " -n \"`grep '} regex_t;' reg_types.h`\"";
tSCC zOsf_Namespace_BTest3[] =
       " -z \"`grep __regex_t regex.h`\"";

#define    OSF_NAMESPACE_B_TEST_CT  4
tTestDesc aOsf_Namespace_BTests[] = {
  { TT_TEST,     zOsf_Namespace_BTest0,   0 /* unused */ },
  { TT_TEST,     zOsf_Namespace_BTest1,   0 /* unused */ },
  { TT_TEST,     zOsf_Namespace_BTest2,   0 /* unused */ },
  { TT_TEST,     zOsf_Namespace_BTest3,   0 /* unused */ }, };

/*
 *  Fix Command Arguments for Osf_Namespace_B
 */
const char* apzOsf_Namespace_BPatch[] = { "sed",
    "-e", "/#include <reg_types.h>/a\\\n\
typedef __regex_t\tregex_t;\\\n\
typedef __regoff_t\tregoff_t;\\\n\
typedef __regmatch_t\tregmatch_t;\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Pthread_Page_Size fix
 */
#define PTHREAD_PAGE_SIZE_FIXIDX         72
tSCC zPthread_Page_SizeName[] =
     "pthread_page_size";

/*
 *  File name selection pattern
 */
tSCC zPthread_Page_SizeList[] =
  "|pthread.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzPthread_Page_SizeMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zPthread_Page_SizeSelect0[] =
       "^int __page_size";

#define    PTHREAD_PAGE_SIZE_TEST_CT  1
tTestDesc aPthread_Page_SizeTests[] = {
  { TT_EGREP,    zPthread_Page_SizeSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Pthread_Page_Size
 */
const char* apzPthread_Page_SizePatch[] = { "sed",
    "-e", "s/^int __page_size/extern int __page_size/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Read_Ret_Type fix
 */
#define READ_RET_TYPE_FIXIDX             73
tSCC zRead_Ret_TypeName[] =
     "read_ret_type";

/*
 *  File name selection pattern
 */
tSCC zRead_Ret_TypeList[] =
  "|stdio.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzRead_Ret_TypeMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zRead_Ret_TypeSelect0[] =
       "extern int\t.*, fread\\(\\), fwrite\\(\\)";

#define    READ_RET_TYPE_TEST_CT  1
tTestDesc aRead_Ret_TypeTests[] = {
  { TT_EGREP,    zRead_Ret_TypeSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Read_Ret_Type
 */
const char* apzRead_Ret_TypePatch[] = { "sed",
    "-e", "s/^\\(extern int\tfclose(), fflush()\\), \\(fread(), fwrite()\\)\\(.*\\)$/extern unsigned int\t\\2;\\\n\
\\1\\3/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Rs6000_Double fix
 */
#define RS6000_DOUBLE_FIXIDX             74
tSCC zRs6000_DoubleName[] =
     "rs6000_double";

/*
 *  File name selection pattern
 */
tSCC zRs6000_DoubleList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzRs6000_DoubleMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zRs6000_DoubleSelect0[] =
       "[^a-zA-Z_]class\\(";

#define    RS6000_DOUBLE_TEST_CT  1
tTestDesc aRs6000_DoubleTests[] = {
  { TT_EGREP,    zRs6000_DoubleSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Rs6000_Double
 */
const char* apzRs6000_DoublePatch[] = { "sed",
    "-e", "/class[(]/i\\\n\
#ifndef __cplusplus\n",
    "-e", "/class[(]/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Rs6000_Fchmod fix
 */
#define RS6000_FCHMOD_FIXIDX             75
tSCC zRs6000_FchmodName[] =
     "rs6000_fchmod";

/*
 *  File name selection pattern
 */
tSCC zRs6000_FchmodList[] =
  "|sys/stat.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzRs6000_FchmodMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zRs6000_FchmodSelect0[] =
       "fchmod\\(char";

#define    RS6000_FCHMOD_TEST_CT  1
tTestDesc aRs6000_FchmodTests[] = {
  { TT_EGREP,    zRs6000_FchmodSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Rs6000_Fchmod
 */
const char* apzRs6000_FchmodPatch[] = { "sed",
    "-e", "s/fchmod(char \\*/fchmod(int/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Rs6000_Param fix
 */
#define RS6000_PARAM_FIXIDX              76
tSCC zRs6000_ParamName[] =
     "rs6000_param";

/*
 *  File name selection pattern
 */
tSCC zRs6000_ParamList[] =
  "|stdio.h|unistd.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzRs6000_ParamMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zRs6000_ParamSelect0[] =
       "const char new";

#define    RS6000_PARAM_TEST_CT  1
tTestDesc aRs6000_ParamTests[] = {
  { TT_EGREP,    zRs6000_ParamSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Rs6000_Param
 */
const char* apzRs6000_ParamPatch[] = { "sed",
    "-e", "s@rename(const char \\*old, const char \\*new)@rename(const char *_old, const char *_new)@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sco_Static_Func fix
 */
#define SCO_STATIC_FUNC_FIXIDX           77
tSCC zSco_Static_FuncName[] =
     "sco_static_func";

/*
 *  File name selection pattern
 */
tSCC zSco_Static_FuncList[] =
  "|sys/stat.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzSco_Static_FuncMachs[] = {
        "i?86-*-sco3.2*",
        (const char*)NULL };

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSco_Static_FuncSelect0[] =
       "^static int";

#define    SCO_STATIC_FUNC_TEST_CT  1
tTestDesc aSco_Static_FuncTests[] = {
  { TT_EGREP,    zSco_Static_FuncSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sco_Static_Func
 */
const char* apzSco_Static_FuncPatch[] = { "sed",
    "-e", "/^static int/i\\\n\
#if __cplusplus\\\n\
extern \"C\" {\\\n\
#endif /* __cplusplus */",
    "-e", "/^}$/a\\\n\
#if __cplusplus\\\n\
 }\\\n\
#endif /* __cplusplus */",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sco_Strict_Ansi fix
 */
#define SCO_STRICT_ANSI_FIXIDX           78
tSCC zSco_Strict_AnsiName[] =
     "sco_strict_ansi";

/*
 *  File name selection pattern
 */
#define zSco_Strict_AnsiList (char*)NULL
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzSco_Strict_AnsiMachs[] = {
        "i?86-*-sco3.2*",
        (const char*)NULL };

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSco_Strict_AnsiSelect0[] =
       "^[ \t]*#[ \t]*if.*!__STDC__";

#define    SCO_STRICT_ANSI_TEST_CT  1
tTestDesc aSco_Strict_AnsiTests[] = {
  { TT_EGREP,    zSco_Strict_AnsiSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sco_Strict_Ansi
 */
const char* apzSco_Strict_AnsiPatch[] = { "sed",
    "-e", "s/!__STDC__/!defined(__STRICT_ANSI__)/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sco_Utime fix
 */
#define SCO_UTIME_FIXIDX                 79
tSCC zSco_UtimeName[] =
     "sco_utime";

/*
 *  File name selection pattern
 */
tSCC zSco_UtimeList[] =
  "|sys/times.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzSco_UtimeMachs[] = {
        "i?86-*-sco3.2v4*",
        (const char*)NULL };

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSco_UtimeSelect0[] =
       "(const char *, struct utimbuf *);";

#define    SCO_UTIME_TEST_CT  1
tTestDesc aSco_UtimeTests[] = {
  { TT_EGREP,    zSco_UtimeSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sco_Utime
 */
const char* apzSco_UtimePatch[] = { "sed",
    "-e", "s/(const char \\*, struct utimbuf \\*);/(const char *, const struct utimbuf *);/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sony_Include fix
 */
#define SONY_INCLUDE_FIXIDX              80
tSCC zSony_IncludeName[] =
     "sony_include";

/*
 *  File name selection pattern
 */
tSCC zSony_IncludeList[] =
  "|machine/machparam.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSony_IncludeMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSony_IncludeSelect0[] =
       "\"\\.\\./machine/endian.h\"";

#define    SONY_INCLUDE_TEST_CT  1
tTestDesc aSony_IncludeTests[] = {
  { TT_EGREP,    zSony_IncludeSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sony_Include
 */
const char* apzSony_IncludePatch[] = { "sed",
    "-e", "s@\"../machine/endian.h\"@<machine/endian.h>@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Statsswtch fix
 */
#define STATSSWTCH_FIXIDX                81
tSCC zStatsswtchName[] =
     "statsswtch";

/*
 *  File name selection pattern
 */
tSCC zStatsswtchList[] =
  "|rpcsvc/rstat.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzStatsswtchMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zStatsswtchSelect0[] =
       "boottime$";

#define    STATSSWTCH_TEST_CT  1
tTestDesc aStatsswtchTests[] = {
  { TT_EGREP,    zStatsswtchSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Statsswtch
 */
const char* apzStatsswtchPatch[] = { "sed",
    "-e", "s/boottime$/boottime;/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Stdio_Stdarg_H fix
 */
#define STDIO_STDARG_H_FIXIDX            82
tSCC zStdio_Stdarg_HName[] =
     "stdio_stdarg_h";

/*
 *  File name selection pattern
 */
tSCC zStdio_Stdarg_HList[] =
  "|stdio.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzStdio_Stdarg_HMachs (const char**)NULL

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zStdio_Stdarg_HBypass0[] =
       "include.*(stdarg.h|machine/ansi.h)";

#define    STDIO_STDARG_H_TEST_CT  1
tTestDesc aStdio_Stdarg_HTests[] = {
  { TT_NEGREP,   zStdio_Stdarg_HBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Stdio_Stdarg_H
 */
const char* apzStdio_Stdarg_HPatch[] = {
    "wrap",
    "#define __need___va_list\n\
#include <stdarg.h>\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Stdio_Va_List fix
 */
#define STDIO_VA_LIST_FIXIDX             83
tSCC zStdio_Va_ListName[] =
     "stdio_va_list";

/*
 *  File name selection pattern
 */
tSCC zStdio_Va_ListList[] =
  "|stdio.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzStdio_Va_ListMachs (const char**)NULL

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zStdio_Va_ListBypass0[] =
       "__gnuc_va_list|_BSD_VA_LIST_";

#define    STDIO_VA_LIST_TEST_CT  1
tTestDesc aStdio_Va_ListTests[] = {
  { TT_NEGREP,   zStdio_Va_ListBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Stdio_Va_List
 */
const char* apzStdio_Va_ListPatch[] = { "sed",
    "-e", "s@ va_list @ __gnuc_va_list @\n\
s@ va_list)@ __gnuc_va_list)@\n\
s@ _VA_LIST_));@ __gnuc_va_list));@\n\
s@ va_list@ __not_va_list__@\n\
s@\\*va_list@*__not_va_list__@\n\
s@ __va_list)@ __gnuc_va_list)@\n\
s@typedef[ \t]\\(.*\\)[ \t]va_list[ \t]*;@typedef \\1 __not_va_list__;@\n\
s@GNUC_VA_LIST@GNUC_Va_LIST@\n\
s@_NEED___VA_LIST@_NEED___Va_LIST@\n\
s@VA_LIST@DUMMY_VA_LIST@\n\
s@_Va_LIST@_VA_LIST@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Struct_File fix
 */
#define STRUCT_FILE_FIXIDX               84
tSCC zStruct_FileName[] =
     "struct_file";

/*
 *  File name selection pattern
 */
tSCC zStruct_FileList[] =
  "|rpc/xdr.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzStruct_FileMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zStruct_FileSelect0[] =
       "^.*xdrstdio_create.*struct __file_s";

#define    STRUCT_FILE_TEST_CT  1
tTestDesc aStruct_FileTests[] = {
  { TT_EGREP,    zStruct_FileSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Struct_File
 */
const char* apzStruct_FilePatch[] = {
    "format",
    "struct __file_s;\n\
%0",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Struct_Sockaddr fix
 */
#define STRUCT_SOCKADDR_FIXIDX           85
tSCC zStruct_SockaddrName[] =
     "struct_sockaddr";

/*
 *  File name selection pattern
 */
tSCC zStruct_SockaddrList[] =
  "|rpc/auth.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzStruct_SockaddrMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zStruct_SockaddrSelect0[] =
       "^.*authdes_create.*struct sockaddr";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zStruct_SockaddrBypass0[] =
       "<sys/socket.h>";

#define    STRUCT_SOCKADDR_TEST_CT  2
tTestDesc aStruct_SockaddrTests[] = {
  { TT_NEGREP,   zStruct_SockaddrBypass0, (regex_t*)NULL },
  { TT_EGREP,    zStruct_SockaddrSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Struct_Sockaddr
 */
const char* apzStruct_SockaddrPatch[] = {
    "format",
    "struct sockaddr;\n\
%0",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sun_Auth_Proto fix
 */
#define SUN_AUTH_PROTO_FIXIDX            86
tSCC zSun_Auth_ProtoName[] =
     "sun_auth_proto";

/*
 *  File name selection pattern
 */
tSCC zSun_Auth_ProtoList[] =
  "|rpc/auth.h|rpc/clnt.h|rpc/svc.h|rpc/xdr.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSun_Auth_ProtoMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSun_Auth_ProtoSelect0[] =
       "\\(\\*[a-z][a-z_]*\\)\\(\\)";

#define    SUN_AUTH_PROTO_TEST_CT  1
tTestDesc aSun_Auth_ProtoTests[] = {
  { TT_EGREP,    zSun_Auth_ProtoSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sun_Auth_Proto
 */
const char* apzSun_Auth_ProtoPatch[] = { "sed",
    "-e", "s/^\\(.*(\\*[a-z][a-z_]*)(\\)\\();.*\\)/\\\n\
#ifdef __cplusplus\\\n\
\\1...\\2\\\n\
#else\\\n\
\\1\\2\\\n\
#endif/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sun_Bogus_Ifdef fix
 */
#define SUN_BOGUS_IFDEF_FIXIDX           87
tSCC zSun_Bogus_IfdefName[] =
     "sun_bogus_ifdef";

/*
 *  File name selection pattern
 */
tSCC zSun_Bogus_IfdefList[] =
  "|hsfs/hsfs_spec.h|hsfs/iso_spec.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSun_Bogus_IfdefMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSun_Bogus_IfdefSelect0[] =
       "#ifdef __i386__ || __vax__";

#define    SUN_BOGUS_IFDEF_TEST_CT  1
tTestDesc aSun_Bogus_IfdefTests[] = {
  { TT_EGREP,    zSun_Bogus_IfdefSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sun_Bogus_Ifdef
 */
const char* apzSun_Bogus_IfdefPatch[] = { "sed",
    "-e", "s/\\#ifdef __i386__ || __vax__/\\#if __i386__ || __vax__/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sun_Bogus_Ifdef_Sun4c fix
 */
#define SUN_BOGUS_IFDEF_SUN4C_FIXIDX     88
tSCC zSun_Bogus_Ifdef_Sun4cName[] =
     "sun_bogus_ifdef_sun4c";

/*
 *  File name selection pattern
 */
tSCC zSun_Bogus_Ifdef_Sun4cList[] =
  "|hsfs/hsnode.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSun_Bogus_Ifdef_Sun4cMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSun_Bogus_Ifdef_Sun4cSelect0[] =
       "#ifdef __i386__ || __sun4c__";

#define    SUN_BOGUS_IFDEF_SUN4C_TEST_CT  1
tTestDesc aSun_Bogus_Ifdef_Sun4cTests[] = {
  { TT_EGREP,    zSun_Bogus_Ifdef_Sun4cSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sun_Bogus_Ifdef_Sun4c
 */
const char* apzSun_Bogus_Ifdef_Sun4cPatch[] = { "sed",
    "-e", "s/\\#ifdef __i386__ || __sun4c__/\\#if __i386__ || __sun4c__/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sun_Catmacro fix
 */
#define SUN_CATMACRO_FIXIDX              89
tSCC zSun_CatmacroName[] =
     "sun_catmacro";

/*
 *  File name selection pattern
 */
tSCC zSun_CatmacroList[] =
  "|pixrect/memvar.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSun_CatmacroMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSun_CatmacroSelect0[] =
       "^#define[ \t]+CAT\\(a,b\\)";

#define    SUN_CATMACRO_TEST_CT  1
tTestDesc aSun_CatmacroTests[] = {
  { TT_EGREP,    zSun_CatmacroSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sun_Catmacro
 */
const char* apzSun_CatmacroPatch[] = { "sed",
    "-e", "/^#define[ \t]CAT(a,b)/ i\\\n\
#ifdef __STDC__ \\\n\
#define CAT(a,b) a##b\\\n\
#else\n",
    "-e", "/^#define[ \t]CAT(a,b)/ a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sun_Malloc fix
 */
#define SUN_MALLOC_FIXIDX                90
tSCC zSun_MallocName[] =
     "sun_malloc";

/*
 *  File name selection pattern
 */
tSCC zSun_MallocList[] =
  "|malloc.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSun_MallocMachs (const char**)NULL
#define SUN_MALLOC_TEST_CT  0
#define aSun_MallocTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Sun_Malloc
 */
const char* apzSun_MallocPatch[] = { "sed",
    "-e", "s/typedef[ \t]char \\*\tmalloc_t/typedef void \\*\tmalloc_t/g",
    "-e", "s/int[ \t][ \t]*free/void\tfree/g",
    "-e", "s/char\\([ \t]*\\*[ \t]*malloc\\)/void\\1/g",
    "-e", "s/char\\([ \t]*\\*[ \t]*realloc\\)/void\\1/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sun_Rusers_Semi fix
 */
#define SUN_RUSERS_SEMI_FIXIDX           91
tSCC zSun_Rusers_SemiName[] =
     "sun_rusers_semi";

/*
 *  File name selection pattern
 */
tSCC zSun_Rusers_SemiList[] =
  "|rpcsvc/rusers.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSun_Rusers_SemiMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSun_Rusers_SemiSelect0[] =
       "_cnt$";

#define    SUN_RUSERS_SEMI_TEST_CT  1
tTestDesc aSun_Rusers_SemiTests[] = {
  { TT_EGREP,    zSun_Rusers_SemiSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sun_Rusers_Semi
 */
const char* apzSun_Rusers_SemiPatch[] = { "sed",
    "-e", "/^struct/,/^};/s/_cnt$/_cnt;/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sun_Signal fix
 */
#define SUN_SIGNAL_FIXIDX                92
tSCC zSun_SignalName[] =
     "sun_signal";

/*
 *  File name selection pattern
 */
tSCC zSun_SignalList[] =
  "|sys/signal.h|signal.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSun_SignalMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSun_SignalSelect0[] =
       "^void\t\\(\\*signal\\(\\)\\)\\(\\);";

#define    SUN_SIGNAL_TEST_CT  1
tTestDesc aSun_SignalTests[] = {
  { TT_EGREP,    zSun_SignalSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sun_Signal
 */
const char* apzSun_SignalPatch[] = { "sed",
    "-e", "/^void\t(\\*signal())();$/i\\\n\
#ifdef __cplusplus\\\n\
void\t(*signal(...))(...);\\\n\
#else\n",
    "-e", "/^void\t(\\*signal())();$/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sunos_Matherr_Decl fix
 */
#define SUNOS_MATHERR_DECL_FIXIDX        93
tSCC zSunos_Matherr_DeclName[] =
     "sunos_matherr_decl";

/*
 *  File name selection pattern
 */
tSCC zSunos_Matherr_DeclList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSunos_Matherr_DeclMachs (const char**)NULL

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zSunos_Matherr_DeclBypass0[] =
       "matherr.*struct exception";

#define    SUNOS_MATHERR_DECL_TEST_CT  1
tTestDesc aSunos_Matherr_DeclTests[] = {
  { TT_NEGREP,   zSunos_Matherr_DeclBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sunos_Matherr_Decl
 */
const char* apzSunos_Matherr_DeclPatch[] = { "sed",
    "-e", "/^struct exception/,$b",
    "-e", "/matherr/i\\\n\
struct exception;\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sunos_Strlen fix
 */
#define SUNOS_STRLEN_FIXIDX              94
tSCC zSunos_StrlenName[] =
     "sunos_strlen";

/*
 *  File name selection pattern
 */
tSCC zSunos_StrlenList[] =
  "|strings.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSunos_StrlenMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSunos_StrlenSelect0[] =
       "int[ \t]*strlen";

#define    SUNOS_STRLEN_TEST_CT  1
tTestDesc aSunos_StrlenTests[] = {
  { TT_EGREP,    zSunos_StrlenSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Sunos_Strlen
 */
const char* apzSunos_StrlenPatch[] = { "sed",
    "-e", "s/int[ \t]*strlen();/__SIZE_TYPE__ strlen();/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Svr4_Getcwd fix
 */
#define SVR4_GETCWD_FIXIDX               95
tSCC zSvr4_GetcwdName[] =
     "svr4_getcwd";

/*
 *  File name selection pattern
 */
tSCC zSvr4_GetcwdList[] =
  "|stdlib.h|unistd.h|prototypes.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSvr4_GetcwdMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSvr4_GetcwdSelect0[] =
       "getcwd\\(char \\*, int\\)";

#define    SVR4_GETCWD_TEST_CT  1
tTestDesc aSvr4_GetcwdTests[] = {
  { TT_EGREP,    zSvr4_GetcwdSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Svr4_Getcwd
 */
const char* apzSvr4_GetcwdPatch[] = { "sed",
    "-e", "s/getcwd(char \\*, int)/getcwd(char *, size_t)/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Svr4_Profil fix
 */
#define SVR4_PROFIL_FIXIDX               96
tSCC zSvr4_ProfilName[] =
     "svr4_profil";

/*
 *  File name selection pattern
 */
tSCC zSvr4_ProfilList[] =
  "|stdlib.h|unistd.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSvr4_ProfilMachs (const char**)NULL
#define SVR4_PROFIL_TEST_CT  0
#define aSvr4_ProfilTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Svr4_Profil
 */
const char* apzSvr4_ProfilPatch[] = { "sed",
    "-e", "s/profil(unsigned short \\*, unsigned int, unsigned int, unsigned int)/profil(unsigned short *, size_t, int, unsigned)/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Systypes fix
 */
#define SYSTYPES_FIXIDX                  97
tSCC zSystypesName[] =
     "systypes";

/*
 *  File name selection pattern
 */
tSCC zSystypesList[] =
  "|sys/types.h|stdlib.h|sys/stdtypes.h|stddef.h|memory.h|unistd.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSystypesMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSystypesSelect0[] =
       "typedef[ \t]+[a-z_][ \ta-z_]*[ \t](size|ptrdiff|wchar)_t";

#define    SYSTYPES_TEST_CT  1
tTestDesc aSystypesTests[] = {
  { TT_EGREP,    zSystypesSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Systypes
 */
const char* apzSystypesPatch[] = { "sed",
    "-e", "/^[ \t]*\\*[ \t]*typedef unsigned int size_t;/N",
    "-e", "s/^\\([ \t]*\\*[ \t]*typedef unsigned int size_t;\\n[ \t]*\\*\\/\\)/\\1\\\n\
#ifndef __SIZE_TYPE__\\\n\
#define __SIZE_TYPE__ long unsigned int\\\n\
#endif\\\n\
typedef __SIZE_TYPE__ size_t;\\\n\
/",
    "-e", "/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]size_t/i\\\n\
#ifndef __SIZE_TYPE__\\\n\
#define __SIZE_TYPE__ long unsigned int\\\n\
#endif\n",
    "-e", "s/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]size_t/typedef __SIZE_TYPE__ size_t/",
    "-e", "/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]ptrdiff_t/i\\\n\
#ifndef __PTRDIFF_TYPE__\\\n\
#define __PTRDIFF_TYPE__ long int\\\n\
#endif\n",
    "-e", "s/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]ptrdiff_t/typedef __PTRDIFF_TYPE__ ptrdiff_t/",
    "-e", "/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]wchar_t/i\\\n\
#ifndef __WCHAR_TYPE__\\\n\
#define __WCHAR_TYPE__ int\\\n\
#endif\\\n\
#ifndef __cplusplus\n",
    "-e", "/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]wchar_t/a\\\n\
#endif\n",
    "-e", "s/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]wchar_t/typedef __WCHAR_TYPE__ wchar_t/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Systypes_Stdlib_Size_T fix
 */
#define SYSTYPES_STDLIB_SIZE_T_FIXIDX    98
tSCC zSystypes_Stdlib_Size_TName[] =
     "systypes_stdlib_size_t";

/*
 *  File name selection pattern
 */
tSCC zSystypes_Stdlib_Size_TList[] =
  "|sys/types.h|stdlib.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSystypes_Stdlib_Size_TMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zSystypes_Stdlib_Size_TSelect0[] =
       "typedef[ \t][ \t]*[A-Za-z_][ \tA-Za-z_]*[ \t]size_t";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zSystypes_Stdlib_Size_TBypass0[] =
       "_(GCC|BSD)_SIZE_T";

#define    SYSTYPES_STDLIB_SIZE_T_TEST_CT  2
tTestDesc aSystypes_Stdlib_Size_TTests[] = {
  { TT_NEGREP,   zSystypes_Stdlib_Size_TBypass0, (regex_t*)NULL },
  { TT_EGREP,    zSystypes_Stdlib_Size_TSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Systypes_Stdlib_Size_T
 */
const char* apzSystypes_Stdlib_Size_TPatch[] = { "sed",
    "-e", "/typedef[ \t][ \t]*[A-Za-z_][ \tA-Za-z_]*[ \t]size_t/i\\\n\
#ifndef _GCC_SIZE_T\\\n\
#define _GCC_SIZE_T\n",
    "-e", "/typedef[ \t][ \t]*[A-Za-z_][ \tA-Za-z_]*[ \t]size_t/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sysv68_String fix
 */
#define SYSV68_STRING_FIXIDX             99
tSCC zSysv68_StringName[] =
     "sysv68_string";

/*
 *  File name selection pattern
 */
tSCC zSysv68_StringList[] =
  "|string.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSysv68_StringMachs (const char**)NULL
#define SYSV68_STRING_TEST_CT  0
#define aSysv68_StringTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Sysv68_String
 */
const char* apzSysv68_StringPatch[] = { "sed",
    "-e", "s/extern[ \t]*int[ \t]*strlen();/extern unsigned int strlen();/",
    "-e", "s/extern[ \t]*int[ \t]*ffs[ \t]*(long);/extern int ffs(int);/",
    "-e", "s/strdup(char \\*s1);/strdup(const char *s1);/",
    "-e", "/^extern char$/N",
    "-e", "s/^extern char\\(\\n\t\\*memccpy(),\\)$/extern void\\1/",
    "-e", "/^\tstrncmp(),$/N",
    "-e", "s/^\\(\tstrncmp()\\),\\n\\(\tstrlen(),\\)$/\\1;\\\n\
extern unsigned int\\\n\
\\2/",
    "-e", "/^extern int$/N",
    "-e", "s/^extern int\\(\\n\tstrlen(),\\)/extern size_t\\1/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sysz_Stdlib_For_Sun fix
 */
#define SYSZ_STDLIB_FOR_SUN_FIXIDX       100
tSCC zSysz_Stdlib_For_SunName[] =
     "sysz_stdlib_for_sun";

/*
 *  File name selection pattern
 */
tSCC zSysz_Stdlib_For_SunList[] =
  "|stdlib.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSysz_Stdlib_For_SunMachs (const char**)NULL
#define SYSZ_STDLIB_FOR_SUN_TEST_CT  0
#define aSysz_Stdlib_For_SunTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Sysz_Stdlib_For_Sun
 */
const char* apzSysz_Stdlib_For_SunPatch[] = { "sed",
    "-e", "s/int\tabort/void\tabort/g",
    "-e", "s/int\tfree/void\tfree/g",
    "-e", "s/char[ \t]*\\*[ \t]*calloc/void \\*\tcalloc/g",
    "-e", "s/char[ \t]*\\*[ \t]*malloc/void \\*\tmalloc/g",
    "-e", "s/char[ \t]*\\*[ \t]*realloc/void \\*\trealloc/g",
    "-e", "s/char[ \t]*\\*[ \t]*bsearch/void \\*\tbsearch/g",
    "-e", "s/int[ \t][ \t]*exit/void\texit/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Sysz_Stdtypes_For_Sun fix
 */
#define SYSZ_STDTYPES_FOR_SUN_FIXIDX     101
tSCC zSysz_Stdtypes_For_SunName[] =
     "sysz_stdtypes_for_sun";

/*
 *  File name selection pattern
 */
tSCC zSysz_Stdtypes_For_SunList[] =
  "|sys/stdtypes.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzSysz_Stdtypes_For_SunMachs (const char**)NULL
#define SYSZ_STDTYPES_FOR_SUN_TEST_CT  0
#define aSysz_Stdtypes_For_SunTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Sysz_Stdtypes_For_Sun
 */
const char* apzSysz_Stdtypes_For_SunPatch[] = { "sed",
    "-e", "/[\t ]size_t.*;/i\\\n\
#ifndef _GCC_SIZE_T\\\n\
#define _GCC_SIZE_T\n",
    "-e", "/[\t ]size_t.*;/a\\\n\
#endif\n",
    "-e", "/[\t ]ptrdiff_t.*;/i\\\n\
#ifndef _GCC_PTRDIFF_T\\\n\
#define _GCC_PTRDIFF_T\n",
    "-e", "/[\t ]ptrdiff_t.*;/a\\\n\
#endif\n",
    "-e", "/[\t ]wchar_t.*;/i\\\n\
#ifndef _GCC_WCHAR_T\\\n\
#define _GCC_WCHAR_T\n",
    "-e", "/[\t ]wchar_t.*;/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Tinfo_Cplusplus fix
 */
#define TINFO_CPLUSPLUS_FIXIDX           102
tSCC zTinfo_CplusplusName[] =
     "tinfo_cplusplus";

/*
 *  File name selection pattern
 */
tSCC zTinfo_CplusplusList[] =
  "|tinfo.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzTinfo_CplusplusMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zTinfo_CplusplusSelect0[] =
       "[ \t]_cplusplus";

#define    TINFO_CPLUSPLUS_TEST_CT  1
tTestDesc aTinfo_CplusplusTests[] = {
  { TT_EGREP,    zTinfo_CplusplusSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Tinfo_Cplusplus
 */
const char* apzTinfo_CplusplusPatch[] = { "sed",
    "-e", "s/[ \t]_cplusplus/ __cplusplus/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ultrix_Atof_Param fix
 */
#define ULTRIX_ATOF_PARAM_FIXIDX         103
tSCC zUltrix_Atof_ParamName[] =
     "ultrix_atof_param";

/*
 *  File name selection pattern
 */
tSCC zUltrix_Atof_ParamList[] =
  "|math.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzUltrix_Atof_ParamMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zUltrix_Atof_ParamSelect0[] =
       "atof\\([ \t]*char";

#define    ULTRIX_ATOF_PARAM_TEST_CT  1
tTestDesc aUltrix_Atof_ParamTests[] = {
  { TT_EGREP,    zUltrix_Atof_ParamSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Ultrix_Atof_Param
 */
const char* apzUltrix_Atof_ParamPatch[] = { "sed",
    "-e", "s@atof(\\([ \t]*char[ \t]*\\*[^)]*\\))@atof(const \\1)@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ultrix_Const fix
 */
#define ULTRIX_CONST_FIXIDX              104
tSCC zUltrix_ConstName[] =
     "ultrix_const";

/*
 *  File name selection pattern
 */
tSCC zUltrix_ConstList[] =
  "|stdio.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzUltrix_ConstMachs (const char**)NULL
#define ULTRIX_CONST_TEST_CT  0
#define aUltrix_ConstTests   (tTestDesc*)NULL

/*
 *  Fix Command Arguments for Ultrix_Const
 */
const char* apzUltrix_ConstPatch[] = { "sed",
    "-e", "s@perror( char \\*__s );@perror( const char *__s );@",
    "-e", "s@fputs( char \\*__s,@fputs( const char *__s,@",
    "-e", "s@fopen( char \\*__filename, char \\*__type );@fopen( const char *__filename, const char *__type );@",
    "-e", "s@fwrite( void \\*__ptr,@fwrite( const void *__ptr,@",
    "-e", "s@fscanf( FILE \\*__stream, char \\*__format,@fscanf( FILE *__stream, const char *__format,@",
    "-e", "s@scanf( char \\*__format,@scanf( const char *__format,@",
    "-e", "s@sscanf( char \\*__s, char \\*__format,@sscanf( const char *__s, const char *__format,@",
    "-e", "s@popen(char \\*, char \\*);@popen(const char *, const char *);@",
    "-e", "s@tempnam(char\\*,char\\*);@tempnam(const char*,const char*);@",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ultrix_Fix_Fixproto fix
 */
#define ULTRIX_FIX_FIXPROTO_FIXIDX       105
tSCC zUltrix_Fix_FixprotoName[] =
     "ultrix_fix_fixproto";

/*
 *  File name selection pattern
 */
tSCC zUltrix_Fix_FixprotoList[] =
  "|sys/utsname.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzUltrix_Fix_FixprotoMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zUltrix_Fix_FixprotoSelect0[] =
       "ULTRIX";

#define    ULTRIX_FIX_FIXPROTO_TEST_CT  1
tTestDesc aUltrix_Fix_FixprotoTests[] = {
  { TT_EGREP,    zUltrix_Fix_FixprotoSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Ultrix_Fix_Fixproto
 */
const char* apzUltrix_Fix_FixprotoPatch[] = { "sed",
    "-e", "/^[ \t]*extern[ \t]*int[ \t]*uname();$/i\\\n\
struct utsname;\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ultrix_Ifdef fix
 */
#define ULTRIX_IFDEF_FIXIDX              106
tSCC zUltrix_IfdefName[] =
     "ultrix_ifdef";

/*
 *  File name selection pattern
 */
tSCC zUltrix_IfdefList[] =
  "|sys/file.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzUltrix_IfdefMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zUltrix_IfdefSelect0[] =
       "#ifdef KERNEL[ \t]*[^ \t]";

#define    ULTRIX_IFDEF_TEST_CT  1
tTestDesc aUltrix_IfdefTests[] = {
  { TT_EGREP,    zUltrix_IfdefSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Ultrix_Ifdef
 */
const char* apzUltrix_IfdefPatch[] = { "sed",
    "-e", "s/#ifdef KERNEL/#if defined(KERNEL)/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Ultrix_Static fix
 */
#define ULTRIX_STATIC_FIXIDX             107
tSCC zUltrix_StaticName[] =
     "ultrix_static";

/*
 *  File name selection pattern
 */
tSCC zUltrix_StaticList[] =
  "|machine/cpu.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzUltrix_StaticMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zUltrix_StaticSelect0[] =
       "#include \"r[34]_cpu";

#define    ULTRIX_STATIC_TEST_CT  1
tTestDesc aUltrix_StaticTests[] = {
  { TT_EGREP,    zUltrix_StaticSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Ultrix_Static
 */
const char* apzUltrix_StaticPatch[] = { "sed",
    "-e", "s/^static struct tlb_pid_state/struct tlb_pid_state/",
    "-e", "s/^#include \"r3_cpu\\.h\"$/#include <machine\\/r3_cpu\\.h>/",
    "-e", "s/^#include \"r4_cpu\\.h\"$/#include <machine\\/r4_cpu\\.h>/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Undefine_Null fix
 */
#define UNDEFINE_NULL_FIXIDX             108
tSCC zUndefine_NullName[] =
     "undefine_null";

/*
 *  File name selection pattern
 */
#define zUndefine_NullList (char*)NULL
/*
 *  Machine/OS name selection pattern
 */
#define apzUndefine_NullMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zUndefine_NullSelect0[] =
       "^#[ \t]*define[ \t]+NULL[ \t]";

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zUndefine_NullBypass0[] =
       "#[ \t]*(ifn|un)def[ \t]+NULL($|[ \t\r])";

#define    UNDEFINE_NULL_TEST_CT  2
tTestDesc aUndefine_NullTests[] = {
  { TT_NEGREP,   zUndefine_NullBypass0, (regex_t*)NULL },
  { TT_EGREP,    zUndefine_NullSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Undefine_Null
 */
const char* apzUndefine_NullPatch[] = {
    "format",
    "#ifndef NULL%2\n\
#define NULL%1%2\n\
#endif%2\n",
    "^#[ \t]*define[ \t]*[ \t]NULL([^\r\n\
]+)([\r]*)\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Unixware7_Byteorder_Fix fix
 */
#define UNIXWARE7_BYTEORDER_FIX_FIXIDX   109
tSCC zUnixware7_Byteorder_FixName[] =
     "unixware7_byteorder_fix";

/*
 *  File name selection pattern
 */
tSCC zUnixware7_Byteorder_FixList[] =
  "|arpa/inet.h|";
/*
 *  Machine/OS name selection pattern
 */
tSCC* apzUnixware7_Byteorder_FixMachs[] = {
        "*-*-sysv4*",
        "i[34567]86-*-sysv5*",
        "i[34567]86-*-udk*",
        "i[34567]86-*-solaris2.[0-4]",
        "powerpcle-*-solaris2.[0-4]",
        "sparc-*-solaris2.[0-4]",
        (const char*)NULL };

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zUnixware7_Byteorder_FixSelect0[] =
       "in_port_t";

#define    UNIXWARE7_BYTEORDER_FIX_TEST_CT  1
tTestDesc aUnixware7_Byteorder_FixTests[] = {
  { TT_EGREP,    zUnixware7_Byteorder_FixSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Unixware7_Byteorder_Fix
 */
const char* apzUnixware7_Byteorder_FixPatch[] = { "sed",
    "-e", "/^extern.*htons.*(in_port_t)/d",
    "-e", "/^extern.*ntohs.*(in_port_t)/d",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Va_I960_Macro fix
 */
#define VA_I960_MACRO_FIXIDX             110
tSCC zVa_I960_MacroName[] =
     "va_i960_macro";

/*
 *  File name selection pattern
 */
tSCC zVa_I960_MacroList[] =
  "|arch/i960/archI960.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzVa_I960_MacroMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zVa_I960_MacroSelect0[] =
       "__(vsiz|vali|vpad|alignof__)";

#define    VA_I960_MACRO_TEST_CT  1
tTestDesc aVa_I960_MacroTests[] = {
  { TT_EGREP,    zVa_I960_MacroSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Va_I960_Macro
 */
const char* apzVa_I960_MacroPatch[] = { "sed",
    "-e", "s/__vsiz/__vxvsiz/",
    "-e", "s/__vali/__vxvali/",
    "-e", "s/__vpad/__vxvpad/",
    "-e", "s/__alignof__/__vxalignof__/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Void_Null fix
 */
#define VOID_NULL_FIXIDX                 111
tSCC zVoid_NullName[] =
     "void_null";

/*
 *  File name selection pattern
 */
tSCC zVoid_NullList[] =
  "|curses.h|dbm.h|locale.h|stdio.h|stdlib.h|string.h|time.h|unistd.h|sys/dir.h|sys/param.h|sys/types.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzVoid_NullMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zVoid_NullSelect0[] =
       "#[ \t]*define[ \t][ \t]*NULL[ \t].*void";

#define    VOID_NULL_TEST_CT  1
tTestDesc aVoid_NullTests[] = {
  { TT_EGREP,    zVoid_NullSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Void_Null
 */
const char* apzVoid_NullPatch[] = { "sed",
    "-e", "s/^#[ \t]*define[ \t]*NULL[ \t]*((void[ \t]*\\*)0)/#define NULL 0/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Vxworks_Gcc_Problem fix
 */
#define VXWORKS_GCC_PROBLEM_FIXIDX       112
tSCC zVxworks_Gcc_ProblemName[] =
     "vxworks_gcc_problem";

/*
 *  File name selection pattern
 */
tSCC zVxworks_Gcc_ProblemList[] =
  "|types/vxTypesBase.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzVxworks_Gcc_ProblemMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zVxworks_Gcc_ProblemSelect0[] =
       "__GNUC_TYPEOF_FEATURE_BROKEN_USE_DEFAULT_UNTIL_FIXED__";

#define    VXWORKS_GCC_PROBLEM_TEST_CT  1
tTestDesc aVxworks_Gcc_ProblemTests[] = {
  { TT_EGREP,    zVxworks_Gcc_ProblemSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Vxworks_Gcc_Problem
 */
const char* apzVxworks_Gcc_ProblemPatch[] = { "sed",
    "-e", "s/#ifdef __GNUC_TYPEOF_FEATURE_BROKEN_USE_DEFAULT_UNTIL_FIXED__/#if 1/",
    "-e", "/[ \t]size_t/i\\\n\
#ifndef _GCC_SIZE_T\\\n\
#define _GCC_SIZE_T\n",
    "-e", "/[ \t]size_t/a\\\n\
#endif\n",
    "-e", "/[ \t]ptrdiff_t/i\\\n\
#ifndef _GCC_PTRDIFF_T\\\n\
#define _GCC_PTRDIFF_T\n",
    "-e", "/[ \t]ptrdiff_t/a\\\n\
#endif\n",
    "-e", "/[ \t]wchar_t/i\\\n\
#ifndef _GCC_WCHAR_T\\\n\
#define _GCC_WCHAR_T\n",
    "-e", "/[ \t]wchar_t/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Vxworks_Needs_Vxtypes fix
 */
#define VXWORKS_NEEDS_VXTYPES_FIXIDX     113
tSCC zVxworks_Needs_VxtypesName[] =
     "vxworks_needs_vxtypes";

/*
 *  File name selection pattern
 */
tSCC zVxworks_Needs_VxtypesList[] =
  "|time.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzVxworks_Needs_VxtypesMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zVxworks_Needs_VxtypesSelect0[] =
       "uint_t[ \t][ \t]*_clocks_per_sec";

#define    VXWORKS_NEEDS_VXTYPES_TEST_CT  1
tTestDesc aVxworks_Needs_VxtypesTests[] = {
  { TT_EGREP,    zVxworks_Needs_VxtypesSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Vxworks_Needs_Vxtypes
 */
const char* apzVxworks_Needs_VxtypesPatch[] = { "sed",
    "-e", "s/uint_t/unsigned int/",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Vxworks_Needs_Vxworks fix
 */
#define VXWORKS_NEEDS_VXWORKS_FIXIDX     114
tSCC zVxworks_Needs_VxworksName[] =
     "vxworks_needs_vxworks";

/*
 *  File name selection pattern
 */
tSCC zVxworks_Needs_VxworksList[] =
  "|sys/stat.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzVxworks_Needs_VxworksMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zVxworks_Needs_VxworksSelect0[] =
       "#[ \t]define[ \t][ \t]*__INCstath";

/*
 *  perform the 'test' shell command - do fix on success
 */
tSCC zVxworks_Needs_VxworksTest0[] =
       " -r types/vxTypesOld.h";
tSCC zVxworks_Needs_VxworksTest1[] =
       " -n \"`egrep '#include' $file`\"";
tSCC zVxworks_Needs_VxworksTest2[] =
       " -n \"`egrep ULONG $file`\"";

#define    VXWORKS_NEEDS_VXWORKS_TEST_CT  4
tTestDesc aVxworks_Needs_VxworksTests[] = {
  { TT_TEST,     zVxworks_Needs_VxworksTest0,   0 /* unused */ },
  { TT_TEST,     zVxworks_Needs_VxworksTest1,   0 /* unused */ },
  { TT_TEST,     zVxworks_Needs_VxworksTest2,   0 /* unused */ },
  { TT_EGREP,    zVxworks_Needs_VxworksSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Vxworks_Needs_Vxworks
 */
const char* apzVxworks_Needs_VxworksPatch[] = { "sed",
    "-e", "/#[ \t]define[ \t][ \t]*__INCstath/a\\\n\
#include <types/vxTypesOld.h>\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of Vxworks_Time fix
 */
#define VXWORKS_TIME_FIXIDX              115
tSCC zVxworks_TimeName[] =
     "vxworks_time";

/*
 *  File name selection pattern
 */
tSCC zVxworks_TimeList[] =
  "|time.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzVxworks_TimeMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zVxworks_TimeSelect0[] =
       "VOIDFUNCPTR";

/*
 *  perform the 'test' shell command - do fix on success
 */
tSCC zVxworks_TimeTest0[] =
       " -r vxWorks.h";

#define    VXWORKS_TIME_TEST_CT  2
tTestDesc aVxworks_TimeTests[] = {
  { TT_TEST,     zVxworks_TimeTest0,   0 /* unused */ },
  { TT_EGREP,    zVxworks_TimeSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for Vxworks_Time
 */
const char* apzVxworks_TimePatch[] = { "sed",
    "-e", "/VOIDFUNCPTR/i\\\n\
#ifndef __gcc_VOIDFUNCPTR_defined\\\n\
#ifdef __cplusplus\\\n\
typedef void (*__gcc_VOIDFUNCPTR) (...);\\\n\
#else\\\n\
typedef void (*__gcc_VOIDFUNCPTR) ();\\\n\
#endif\\\n\
#define __gcc_VOIDFUNCPTR_defined\\\n\
#endif\n",
    "-e", "s/VOIDFUNCPTR/__gcc_VOIDFUNCPTR/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of X11_Class fix
 */
#define X11_CLASS_FIXIDX                 116
tSCC zX11_ClassName[] =
     "x11_class";

/*
 *  File name selection pattern
 */
tSCC zX11_ClassList[] =
  "|X11/ShellP.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzX11_ClassMachs (const char**)NULL

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zX11_ClassBypass0[] =
       "__cplusplus";

#define    X11_CLASS_TEST_CT  1
tTestDesc aX11_ClassTests[] = {
  { TT_NEGREP,   zX11_ClassBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for X11_Class
 */
const char* apzX11_ClassPatch[] = { "sed",
    "-e", "/char \\*class;/i\\\n\
#ifdef __cplusplus\\\n\
\tchar *c_class;\\\n\
#else\n",
    "-e", "/char \\*class;/a\\\n\
#endif\n",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of X11_Class_Usage fix
 */
#define X11_CLASS_USAGE_FIXIDX           117
tSCC zX11_Class_UsageName[] =
     "x11_class_usage";

/*
 *  File name selection pattern
 */
tSCC zX11_Class_UsageList[] =
  "|Xm/BaseClassI.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzX11_Class_UsageMachs (const char**)NULL

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zX11_Class_UsageBypass0[] =
       "__cplusplus";

#define    X11_CLASS_USAGE_TEST_CT  1
tTestDesc aX11_Class_UsageTests[] = {
  { TT_NEGREP,   zX11_Class_UsageBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for X11_Class_Usage
 */
const char* apzX11_Class_UsagePatch[] = { "sed",
    "-e", "s/ class[)]/ c_class)/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of X11_New fix
 */
#define X11_NEW_FIXIDX                   118
tSCC zX11_NewName[] =
     "x11_new";

/*
 *  File name selection pattern
 */
tSCC zX11_NewList[] =
  "|Xm/Traversal.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzX11_NewMachs (const char**)NULL

/*
 *  content bypass pattern - skip fix if pattern found
 */
tSCC zX11_NewBypass0[] =
       "__cplusplus";

#define    X11_NEW_TEST_CT  1
tTestDesc aX11_NewTests[] = {
  { TT_NEGREP,   zX11_NewBypass0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for X11_New
 */
const char* apzX11_NewPatch[] = { "sed",
    "-e", "/Widget\told, new;/i\\\n\
#ifdef __cplusplus\\\n\
\tWidget\told, c_new;\\\n\
#else\n",
    "-e", "/Widget\told, new;/a\\\n\
#endif\n",
    "-e", "s/Widget new,/Widget c_new,/g",
    (char*)NULL };

/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Description of X11_Sprintf fix
 */
#define X11_SPRINTF_FIXIDX               119
tSCC zX11_SprintfName[] =
     "x11_sprintf";

/*
 *  File name selection pattern
 */
tSCC zX11_SprintfList[] =
  "|X11/Xmu.h|X11/Xmu/Xmu.h|";
/*
 *  Machine/OS name selection pattern
 */
#define apzX11_SprintfMachs (const char**)NULL

/*
 *  content selection pattern - do fix if pattern found
 */
tSCC zX11_SprintfSelect0[] =
       "sprintf\\(\\)";

#define    X11_SPRINTF_TEST_CT  1
tTestDesc aX11_SprintfTests[] = {
  { TT_EGREP,    zX11_SprintfSelect0, (regex_t*)NULL }, };

/*
 *  Fix Command Arguments for X11_Sprintf
 */
const char* apzX11_SprintfPatch[] = { "sed",
    "-e", "s,^extern char \\*\tsprintf();$,#ifndef __STDC__\\\n\
extern char *\tsprintf();\\\n\
#endif /* !defined __STDC__ */,",
    (char*)NULL };


/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  List of all fixes
 */
#define REGEX_COUNT          111
#define MACH_LIST_SIZE_LIMIT 279
#define FIX_COUNT            120

tFixDesc fixDescList[ FIX_COUNT ] = {
  {  zAaa_Ki_IfaceName,    zAaa_Ki_IfaceList,
     apzAaa_Ki_IfaceMachs,
     AAA_KI_IFACE_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAaa_Ki_IfaceTests,   apzAaa_Ki_IfacePatch },

  {  zAaa_KiName,    zAaa_KiList,
     apzAaa_KiMachs,
     AAA_KI_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAaa_KiTests,   apzAaa_KiPatch },

  {  zAaa_Ki_CallsName,    zAaa_Ki_CallsList,
     apzAaa_Ki_CallsMachs,
     AAA_KI_CALLS_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAaa_Ki_CallsTests,   apzAaa_Ki_CallsPatch },

  {  zAaa_Ki_DefsName,    zAaa_Ki_DefsList,
     apzAaa_Ki_DefsMachs,
     AAA_KI_DEFS_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAaa_Ki_DefsTests,   apzAaa_Ki_DefsPatch },

  {  zAaa_Bad_FixesName,    zAaa_Bad_FixesList,
     apzAaa_Bad_FixesMachs,
     AAA_BAD_FIXES_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAaa_Bad_FixesTests,   apzAaa_Bad_FixesPatch },

  {  zAaa_TimeName,    zAaa_TimeList,
     apzAaa_TimeMachs,
     AAA_TIME_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAaa_TimeTests,   apzAaa_TimePatch },

  {  zAab_Dgux_Int_VarargsName,    zAab_Dgux_Int_VarargsList,
     apzAab_Dgux_Int_VarargsMachs,
     AAB_DGUX_INT_VARARGS_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAab_Dgux_Int_VarargsTests,   apzAab_Dgux_Int_VarargsPatch },

  {  zAab_Fd_Zero_Asm_Posix_Types_HName,    zAab_Fd_Zero_Asm_Posix_Types_HList,
     apzAab_Fd_Zero_Asm_Posix_Types_HMachs,
     AAB_FD_ZERO_ASM_POSIX_TYPES_H_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAab_Fd_Zero_Asm_Posix_Types_HTests,   apzAab_Fd_Zero_Asm_Posix_Types_HPatch },

  {  zAab_Fd_Zero_Gnu_Types_HName,    zAab_Fd_Zero_Gnu_Types_HList,
     apzAab_Fd_Zero_Gnu_Types_HMachs,
     AAB_FD_ZERO_GNU_TYPES_H_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAab_Fd_Zero_Gnu_Types_HTests,   apzAab_Fd_Zero_Gnu_Types_HPatch },

  {  zAab_Fd_Zero_Selectbits_HName,    zAab_Fd_Zero_Selectbits_HList,
     apzAab_Fd_Zero_Selectbits_HMachs,
     AAB_FD_ZERO_SELECTBITS_H_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAab_Fd_Zero_Selectbits_HTests,   apzAab_Fd_Zero_Selectbits_HPatch },

  {  zAab_Sun_MemcpyName,    zAab_Sun_MemcpyList,
     apzAab_Sun_MemcpyMachs,
     AAB_SUN_MEMCPY_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAab_Sun_MemcpyTests,   apzAab_Sun_MemcpyPatch },

  {  zAab_Svr4_Replace_ByteorderName,    zAab_Svr4_Replace_ByteorderList,
     apzAab_Svr4_Replace_ByteorderMachs,
     AAB_SVR4_REPLACE_BYTEORDER_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAab_Svr4_Replace_ByteorderTests,   apzAab_Svr4_Replace_ByteorderPatch },

  {  zAab_Ultrix_Ansi_CompatName,    zAab_Ultrix_Ansi_CompatList,
     apzAab_Ultrix_Ansi_CompatMachs,
     AAB_ULTRIX_ANSI_COMPAT_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
     aAab_Ultrix_Ansi_CompatTests,   apzAab_Ultrix_Ansi_CompatPatch },

  {  zAix_SyswaitName,    zAix_SyswaitList,
     apzAix_SyswaitMachs,
     AIX_SYSWAIT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aAix_SyswaitTests,   apzAix_SyswaitPatch },

  {  zAix_VolatileName,    zAix_VolatileList,
     apzAix_VolatileMachs,
     AIX_VOLATILE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aAix_VolatileTests,   apzAix_VolatilePatch },

  {  zAlpha_GetoptName,    zAlpha_GetoptList,
     apzAlpha_GetoptMachs,
     ALPHA_GETOPT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aAlpha_GetoptTests,   apzAlpha_GetoptPatch },

  {  zAlpha_ParensName,    zAlpha_ParensList,
     apzAlpha_ParensMachs,
     ALPHA_PARENS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aAlpha_ParensTests,   apzAlpha_ParensPatch },

  {  zAlpha_SbrkName,    zAlpha_SbrkList,
     apzAlpha_SbrkMachs,
     ALPHA_SBRK_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aAlpha_SbrkTests,   apzAlpha_SbrkPatch },

  {  zArm_Norcroft_HintName,    zArm_Norcroft_HintList,
     apzArm_Norcroft_HintMachs,
     ARM_NORCROFT_HINT_TEST_CT, FD_MACH_ONLY,
     aArm_Norcroft_HintTests,   apzArm_Norcroft_HintPatch },

  {  zArm_WcharName,    zArm_WcharList,
     apzArm_WcharMachs,
     ARM_WCHAR_TEST_CT, FD_MACH_ONLY,
     aArm_WcharTests,   apzArm_WcharPatch },

  {  zAux_AsmName,    zAux_AsmList,
     apzAux_AsmMachs,
     AUX_ASM_TEST_CT, FD_MACH_ONLY,
     aAux_AsmTests,   apzAux_AsmPatch },

  {  zAvoid_BoolName,    zAvoid_BoolList,
     apzAvoid_BoolMachs,
     AVOID_BOOL_TEST_CT, FD_MACH_ONLY,
     aAvoid_BoolTests,   apzAvoid_BoolPatch },

  {  zBad_LvalName,    zBad_LvalList,
     apzBad_LvalMachs,
     BAD_LVAL_TEST_CT, FD_MACH_ONLY,
     aBad_LvalTests,   apzBad_LvalPatch },

  {  zBad_Struct_TermName,    zBad_Struct_TermList,
     apzBad_Struct_TermMachs,
     BAD_STRUCT_TERM_TEST_CT, FD_MACH_ONLY,
     aBad_Struct_TermTests,   apzBad_Struct_TermPatch },

  {  zBadquoteName,    zBadquoteList,
     apzBadquoteMachs,
     BADQUOTE_TEST_CT, FD_MACH_ONLY,
     aBadquoteTests,   apzBadquotePatch },

  {  zBroken_Assert_StdioName,    zBroken_Assert_StdioList,
     apzBroken_Assert_StdioMachs,
     BROKEN_ASSERT_STDIO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aBroken_Assert_StdioTests,   apzBroken_Assert_StdioPatch },

  {  zBroken_Assert_StdlibName,    zBroken_Assert_StdlibList,
     apzBroken_Assert_StdlibMachs,
     BROKEN_ASSERT_STDLIB_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aBroken_Assert_StdlibTests,   apzBroken_Assert_StdlibPatch },

  {  zBroken_CabsName,    zBroken_CabsList,
     apzBroken_CabsMachs,
     BROKEN_CABS_TEST_CT, FD_MACH_ONLY,
     aBroken_CabsTests,   apzBroken_CabsPatch },

  {  zCtrl_Quotes_DefName,    zCtrl_Quotes_DefList,
     apzCtrl_Quotes_DefMachs,
     CTRL_QUOTES_DEF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aCtrl_Quotes_DefTests,   apzCtrl_Quotes_DefPatch },

  {  zCtrl_Quotes_UseName,    zCtrl_Quotes_UseList,
     apzCtrl_Quotes_UseMachs,
     CTRL_QUOTES_USE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aCtrl_Quotes_UseTests,   apzCtrl_Quotes_UsePatch },

  {  zCxx_UnreadyName,    zCxx_UnreadyList,
     apzCxx_UnreadyMachs,
     CXX_UNREADY_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aCxx_UnreadyTests,   apzCxx_UnreadyPatch },

  {  zDec_Intern_AsmName,    zDec_Intern_AsmList,
     apzDec_Intern_AsmMachs,
     DEC_INTERN_ASM_TEST_CT, FD_MACH_ONLY,
     aDec_Intern_AsmTests,   apzDec_Intern_AsmPatch },

  {  zEcd_CursorName,    zEcd_CursorList,
     apzEcd_CursorMachs,
     ECD_CURSOR_TEST_CT, FD_MACH_ONLY,
     aEcd_CursorTests,   apzEcd_CursorPatch },

  {  zFix_Header_BreakageName,    zFix_Header_BreakageList,
     apzFix_Header_BreakageMachs,
     FIX_HEADER_BREAKAGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aFix_Header_BreakageTests,   apzFix_Header_BreakagePatch },

  {  zHp_InlineName,    zHp_InlineList,
     apzHp_InlineMachs,
     HP_INLINE_TEST_CT, FD_MACH_ONLY,
     aHp_InlineTests,   apzHp_InlinePatch },

  {  zHp_SysfileName,    zHp_SysfileList,
     apzHp_SysfileMachs,
     HP_SYSFILE_TEST_CT, FD_MACH_ONLY,
     aHp_SysfileTests,   apzHp_SysfilePatch },

  {  zHpux11_FabsfName,    zHpux11_FabsfList,
     apzHpux11_FabsfMachs,
     HPUX11_FABSF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aHpux11_FabsfTests,   apzHpux11_FabsfPatch },

  {  zHpux8_Bogus_InlinesName,    zHpux8_Bogus_InlinesList,
     apzHpux8_Bogus_InlinesMachs,
     HPUX8_BOGUS_INLINES_TEST_CT, FD_MACH_ONLY,
     aHpux8_Bogus_InlinesTests,   apzHpux8_Bogus_InlinesPatch },

  {  zHpux11_Uint32_CName,    zHpux11_Uint32_CList,
     apzHpux11_Uint32_CMachs,
     HPUX11_UINT32_C_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aHpux11_Uint32_CTests,   apzHpux11_Uint32_CPatch },

  {  zIsc_Omits_With_StdcName,    zIsc_Omits_With_StdcList,
     apzIsc_Omits_With_StdcMachs,
     ISC_OMITS_WITH_STDC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aIsc_Omits_With_StdcTests,   apzIsc_Omits_With_StdcPatch },

  {  zIo_Quotes_DefName,    zIo_Quotes_DefList,
     apzIo_Quotes_DefMachs,
     IO_QUOTES_DEF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aIo_Quotes_DefTests,   apzIo_Quotes_DefPatch },

  {  zIo_Quotes_UseName,    zIo_Quotes_UseList,
     apzIo_Quotes_UseMachs,
     IO_QUOTES_USE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aIo_Quotes_UseTests,   apzIo_Quotes_UsePatch },

  {  zHpux_MaxintName,    zHpux_MaxintList,
     apzHpux_MaxintMachs,
     HPUX_MAXINT_TEST_CT, FD_MACH_ONLY,
     aHpux_MaxintTests,   apzHpux_MaxintPatch },

  {  zHpux_SystimeName,    zHpux_SystimeList,
     apzHpux_SystimeMachs,
     HPUX_SYSTIME_TEST_CT, FD_MACH_ONLY,
     aHpux_SystimeTests,   apzHpux_SystimePatch },

  {  zIp_Missing_SemiName,    zIp_Missing_SemiList,
     apzIp_Missing_SemiMachs,
     IP_MISSING_SEMI_TEST_CT, FD_MACH_ONLY,
     aIp_Missing_SemiTests,   apzIp_Missing_SemiPatch },

  {  zIrix_Asm_ApostropheName,    zIrix_Asm_ApostropheList,
     apzIrix_Asm_ApostropheMachs,
     IRIX_ASM_APOSTROPHE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aIrix_Asm_ApostropheTests,   apzIrix_Asm_ApostrophePatch },

  {  zIrix_Multiline_CmntName,    zIrix_Multiline_CmntList,
     apzIrix_Multiline_CmntMachs,
     IRIX_MULTILINE_CMNT_TEST_CT, FD_MACH_ONLY,
     aIrix_Multiline_CmntTests,   apzIrix_Multiline_CmntPatch },

  {  zIsc_FmodName,    zIsc_FmodList,
     apzIsc_FmodMachs,
     ISC_FMOD_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aIsc_FmodTests,   apzIsc_FmodPatch },

  {  zKandr_ConcatName,    zKandr_ConcatList,
     apzKandr_ConcatMachs,
     KANDR_CONCAT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aKandr_ConcatTests,   apzKandr_ConcatPatch },

  {  zLimits_IfndefsName,    zLimits_IfndefsList,
     apzLimits_IfndefsMachs,
     LIMITS_IFNDEFS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aLimits_IfndefsTests,   apzLimits_IfndefsPatch },

  {  zLynx_Void_IntName,    zLynx_Void_IntList,
     apzLynx_Void_IntMachs,
     LYNX_VOID_INT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aLynx_Void_IntTests,   apzLynx_Void_IntPatch },

  {  zLynxos_Fcntl_ProtoName,    zLynxos_Fcntl_ProtoList,
     apzLynxos_Fcntl_ProtoMachs,
     LYNXOS_FCNTL_PROTO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aLynxos_Fcntl_ProtoTests,   apzLynxos_Fcntl_ProtoPatch },

  {  zM88k_Bad_Hypot_OptName,    zM88k_Bad_Hypot_OptList,
     apzM88k_Bad_Hypot_OptMachs,
     M88K_BAD_HYPOT_OPT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aM88k_Bad_Hypot_OptTests,   apzM88k_Bad_Hypot_OptPatch },

  {  zM88k_Bad_S_IfName,    zM88k_Bad_S_IfList,
     apzM88k_Bad_S_IfMachs,
     M88K_BAD_S_IF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aM88k_Bad_S_IfTests,   apzM88k_Bad_S_IfPatch },

  {  zM88k_Multi_InclName,    zM88k_Multi_InclList,
     apzM88k_Multi_InclMachs,
     M88K_MULTI_INCL_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,
     aM88k_Multi_InclTests,   apzM88k_Multi_InclPatch },

  {  zMachine_Ansi_H_Va_ListName,    zMachine_Ansi_H_Va_ListList,
     apzMachine_Ansi_H_Va_ListMachs,
     MACHINE_ANSI_H_VA_LIST_TEST_CT, FD_MACH_ONLY,
     aMachine_Ansi_H_Va_ListTests,   apzMachine_Ansi_H_Va_ListPatch },

  {  zMachine_NameName,    zMachine_NameList,
     apzMachine_NameMachs,
     MACHINE_NAME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aMachine_NameTests,   apzMachine_NamePatch },

  {  zMath_ExceptionName,    zMath_ExceptionList,
     apzMath_ExceptionMachs,
     MATH_EXCEPTION_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aMath_ExceptionTests,   apzMath_ExceptionPatch },

  {  zMath_Huge_Val_From_Dbl_MaxName,    zMath_Huge_Val_From_Dbl_MaxList,
     apzMath_Huge_Val_From_Dbl_MaxMachs,
     MATH_HUGE_VAL_FROM_DBL_MAX_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,
     aMath_Huge_Val_From_Dbl_MaxTests,   apzMath_Huge_Val_From_Dbl_MaxPatch },

  {  zMath_Huge_Val_IfndefName,    zMath_Huge_Val_IfndefList,
     apzMath_Huge_Val_IfndefMachs,
     MATH_HUGE_VAL_IFNDEF_TEST_CT, FD_MACH_ONLY,
     aMath_Huge_Val_IfndefTests,   apzMath_Huge_Val_IfndefPatch },

  {  zNested_MotorolaName,    zNested_MotorolaList,
     apzNested_MotorolaMachs,
     NESTED_MOTOROLA_TEST_CT, FD_MACH_ONLY,
     aNested_MotorolaTests,   apzNested_MotorolaPatch },

  {  zNested_Sys_LimitsName,    zNested_Sys_LimitsList,
     apzNested_Sys_LimitsMachs,
     NESTED_SYS_LIMITS_TEST_CT, FD_MACH_ONLY,
     aNested_Sys_LimitsTests,   apzNested_Sys_LimitsPatch },

  {  zNested_Auth_DesName,    zNested_Auth_DesList,
     apzNested_Auth_DesMachs,
     NESTED_AUTH_DES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aNested_Auth_DesTests,   apzNested_Auth_DesPatch },

  {  zNested_UltrixName,    zNested_UltrixList,
     apzNested_UltrixMachs,
     NESTED_ULTRIX_TEST_CT, FD_MACH_ONLY,
     aNested_UltrixTests,   apzNested_UltrixPatch },

  {  zNews_Os_RecursionName,    zNews_Os_RecursionList,
     apzNews_Os_RecursionMachs,
     NEWS_OS_RECURSION_TEST_CT, FD_MACH_ONLY,
     aNews_Os_RecursionTests,   apzNews_Os_RecursionPatch },

  {  zNext_Math_PrefixName,    zNext_Math_PrefixList,
     apzNext_Math_PrefixMachs,
     NEXT_MATH_PREFIX_TEST_CT, FD_MACH_ONLY,
     aNext_Math_PrefixTests,   apzNext_Math_PrefixPatch },

  {  zNext_TemplateName,    zNext_TemplateList,
     apzNext_TemplateMachs,
     NEXT_TEMPLATE_TEST_CT, FD_MACH_ONLY,
     aNext_TemplateTests,   apzNext_TemplatePatch },

  {  zNext_VolitileName,    zNext_VolitileList,
     apzNext_VolitileMachs,
     NEXT_VOLITILE_TEST_CT, FD_MACH_ONLY,
     aNext_VolitileTests,   apzNext_VolitilePatch },

  {  zNext_Wait_UnionName,    zNext_Wait_UnionList,
     apzNext_Wait_UnionMachs,
     NEXT_WAIT_UNION_TEST_CT, FD_MACH_ONLY,
     aNext_Wait_UnionTests,   apzNext_Wait_UnionPatch },

  {  zNodeent_SyntaxName,    zNodeent_SyntaxList,
     apzNodeent_SyntaxMachs,
     NODEENT_SYNTAX_TEST_CT, FD_MACH_ONLY,
     aNodeent_SyntaxTests,   apzNodeent_SyntaxPatch },

  {  zOsf_Namespace_AName,    zOsf_Namespace_AList,
     apzOsf_Namespace_AMachs,
     OSF_NAMESPACE_A_TEST_CT, FD_MACH_ONLY,
     aOsf_Namespace_ATests,   apzOsf_Namespace_APatch },

  {  zOsf_Namespace_BName,    zOsf_Namespace_BList,
     apzOsf_Namespace_BMachs,
     OSF_NAMESPACE_B_TEST_CT, FD_MACH_ONLY,
     aOsf_Namespace_BTests,   apzOsf_Namespace_BPatch },

  {  zPthread_Page_SizeName,    zPthread_Page_SizeList,
     apzPthread_Page_SizeMachs,
     PTHREAD_PAGE_SIZE_TEST_CT, FD_MACH_ONLY,
     aPthread_Page_SizeTests,   apzPthread_Page_SizePatch },

  {  zRead_Ret_TypeName,    zRead_Ret_TypeList,
     apzRead_Ret_TypeMachs,
     READ_RET_TYPE_TEST_CT, FD_MACH_ONLY,
     aRead_Ret_TypeTests,   apzRead_Ret_TypePatch },

  {  zRs6000_DoubleName,    zRs6000_DoubleList,
     apzRs6000_DoubleMachs,
     RS6000_DOUBLE_TEST_CT, FD_MACH_ONLY,
     aRs6000_DoubleTests,   apzRs6000_DoublePatch },

  {  zRs6000_FchmodName,    zRs6000_FchmodList,
     apzRs6000_FchmodMachs,
     RS6000_FCHMOD_TEST_CT, FD_MACH_ONLY,
     aRs6000_FchmodTests,   apzRs6000_FchmodPatch },

  {  zRs6000_ParamName,    zRs6000_ParamList,
     apzRs6000_ParamMachs,
     RS6000_PARAM_TEST_CT, FD_MACH_ONLY,
     aRs6000_ParamTests,   apzRs6000_ParamPatch },

  {  zSco_Static_FuncName,    zSco_Static_FuncList,
     apzSco_Static_FuncMachs,
     SCO_STATIC_FUNC_TEST_CT, FD_MACH_ONLY,
     aSco_Static_FuncTests,   apzSco_Static_FuncPatch },

  {  zSco_Strict_AnsiName,    zSco_Strict_AnsiList,
     apzSco_Strict_AnsiMachs,
     SCO_STRICT_ANSI_TEST_CT, FD_MACH_ONLY,
     aSco_Strict_AnsiTests,   apzSco_Strict_AnsiPatch },

  {  zSco_UtimeName,    zSco_UtimeList,
     apzSco_UtimeMachs,
     SCO_UTIME_TEST_CT, FD_MACH_ONLY,
     aSco_UtimeTests,   apzSco_UtimePatch },

  {  zSony_IncludeName,    zSony_IncludeList,
     apzSony_IncludeMachs,
     SONY_INCLUDE_TEST_CT, FD_MACH_ONLY,
     aSony_IncludeTests,   apzSony_IncludePatch },

  {  zStatsswtchName,    zStatsswtchList,
     apzStatsswtchMachs,
     STATSSWTCH_TEST_CT, FD_MACH_ONLY,
     aStatsswtchTests,   apzStatsswtchPatch },

  {  zStdio_Stdarg_HName,    zStdio_Stdarg_HList,
     apzStdio_Stdarg_HMachs,
     STDIO_STDARG_H_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aStdio_Stdarg_HTests,   apzStdio_Stdarg_HPatch },

  {  zStdio_Va_ListName,    zStdio_Va_ListList,
     apzStdio_Va_ListMachs,
     STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY,
     aStdio_Va_ListTests,   apzStdio_Va_ListPatch },

  {  zStruct_FileName,    zStruct_FileList,
     apzStruct_FileMachs,
     STRUCT_FILE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aStruct_FileTests,   apzStruct_FilePatch },

  {  zStruct_SockaddrName,    zStruct_SockaddrList,
     apzStruct_SockaddrMachs,
     STRUCT_SOCKADDR_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aStruct_SockaddrTests,   apzStruct_SockaddrPatch },

  {  zSun_Auth_ProtoName,    zSun_Auth_ProtoList,
     apzSun_Auth_ProtoMachs,
     SUN_AUTH_PROTO_TEST_CT, FD_MACH_ONLY,
     aSun_Auth_ProtoTests,   apzSun_Auth_ProtoPatch },

  {  zSun_Bogus_IfdefName,    zSun_Bogus_IfdefList,
     apzSun_Bogus_IfdefMachs,
     SUN_BOGUS_IFDEF_TEST_CT, FD_MACH_ONLY,
     aSun_Bogus_IfdefTests,   apzSun_Bogus_IfdefPatch },

  {  zSun_Bogus_Ifdef_Sun4cName,    zSun_Bogus_Ifdef_Sun4cList,
     apzSun_Bogus_Ifdef_Sun4cMachs,
     SUN_BOGUS_IFDEF_SUN4C_TEST_CT, FD_MACH_ONLY,
     aSun_Bogus_Ifdef_Sun4cTests,   apzSun_Bogus_Ifdef_Sun4cPatch },

  {  zSun_CatmacroName,    zSun_CatmacroList,
     apzSun_CatmacroMachs,
     SUN_CATMACRO_TEST_CT, FD_MACH_ONLY,
     aSun_CatmacroTests,   apzSun_CatmacroPatch },

  {  zSun_MallocName,    zSun_MallocList,
     apzSun_MallocMachs,
     SUN_MALLOC_TEST_CT, FD_MACH_ONLY,
     aSun_MallocTests,   apzSun_MallocPatch },

  {  zSun_Rusers_SemiName,    zSun_Rusers_SemiList,
     apzSun_Rusers_SemiMachs,
     SUN_RUSERS_SEMI_TEST_CT, FD_MACH_ONLY,
     aSun_Rusers_SemiTests,   apzSun_Rusers_SemiPatch },

  {  zSun_SignalName,    zSun_SignalList,
     apzSun_SignalMachs,
     SUN_SIGNAL_TEST_CT, FD_MACH_ONLY,
     aSun_SignalTests,   apzSun_SignalPatch },

  {  zSunos_Matherr_DeclName,    zSunos_Matherr_DeclList,
     apzSunos_Matherr_DeclMachs,
     SUNOS_MATHERR_DECL_TEST_CT, FD_MACH_ONLY,
     aSunos_Matherr_DeclTests,   apzSunos_Matherr_DeclPatch },

  {  zSunos_StrlenName,    zSunos_StrlenList,
     apzSunos_StrlenMachs,
     SUNOS_STRLEN_TEST_CT, FD_MACH_ONLY,
     aSunos_StrlenTests,   apzSunos_StrlenPatch },

  {  zSvr4_GetcwdName,    zSvr4_GetcwdList,
     apzSvr4_GetcwdMachs,
     SVR4_GETCWD_TEST_CT, FD_MACH_ONLY,
     aSvr4_GetcwdTests,   apzSvr4_GetcwdPatch },

  {  zSvr4_ProfilName,    zSvr4_ProfilList,
     apzSvr4_ProfilMachs,
     SVR4_PROFIL_TEST_CT, FD_MACH_ONLY,
     aSvr4_ProfilTests,   apzSvr4_ProfilPatch },

  {  zSystypesName,    zSystypesList,
     apzSystypesMachs,
     SYSTYPES_TEST_CT, FD_MACH_ONLY,
     aSystypesTests,   apzSystypesPatch },

  {  zSystypes_Stdlib_Size_TName,    zSystypes_Stdlib_Size_TList,
     apzSystypes_Stdlib_Size_TMachs,
     SYSTYPES_STDLIB_SIZE_T_TEST_CT, FD_MACH_ONLY,
     aSystypes_Stdlib_Size_TTests,   apzSystypes_Stdlib_Size_TPatch },

  {  zSysv68_StringName,    zSysv68_StringList,
     apzSysv68_StringMachs,
     SYSV68_STRING_TEST_CT, FD_MACH_ONLY,
     aSysv68_StringTests,   apzSysv68_StringPatch },

  {  zSysz_Stdlib_For_SunName,    zSysz_Stdlib_For_SunList,
     apzSysz_Stdlib_For_SunMachs,
     SYSZ_STDLIB_FOR_SUN_TEST_CT, FD_MACH_ONLY,
     aSysz_Stdlib_For_SunTests,   apzSysz_Stdlib_For_SunPatch },

  {  zSysz_Stdtypes_For_SunName,    zSysz_Stdtypes_For_SunList,
     apzSysz_Stdtypes_For_SunMachs,
     SYSZ_STDTYPES_FOR_SUN_TEST_CT, FD_MACH_ONLY,
     aSysz_Stdtypes_For_SunTests,   apzSysz_Stdtypes_For_SunPatch },

  {  zTinfo_CplusplusName,    zTinfo_CplusplusList,
     apzTinfo_CplusplusMachs,
     TINFO_CPLUSPLUS_TEST_CT, FD_MACH_ONLY,
     aTinfo_CplusplusTests,   apzTinfo_CplusplusPatch },

  {  zUltrix_Atof_ParamName,    zUltrix_Atof_ParamList,
     apzUltrix_Atof_ParamMachs,
     ULTRIX_ATOF_PARAM_TEST_CT, FD_MACH_ONLY,
     aUltrix_Atof_ParamTests,   apzUltrix_Atof_ParamPatch },

  {  zUltrix_ConstName,    zUltrix_ConstList,
     apzUltrix_ConstMachs,
     ULTRIX_CONST_TEST_CT, FD_MACH_ONLY,
     aUltrix_ConstTests,   apzUltrix_ConstPatch },

  {  zUltrix_Fix_FixprotoName,    zUltrix_Fix_FixprotoList,
     apzUltrix_Fix_FixprotoMachs,
     ULTRIX_FIX_FIXPROTO_TEST_CT, FD_MACH_ONLY,
     aUltrix_Fix_FixprotoTests,   apzUltrix_Fix_FixprotoPatch },

  {  zUltrix_IfdefName,    zUltrix_IfdefList,
     apzUltrix_IfdefMachs,
     ULTRIX_IFDEF_TEST_CT, FD_MACH_ONLY,
     aUltrix_IfdefTests,   apzUltrix_IfdefPatch },

  {  zUltrix_StaticName,    zUltrix_StaticList,
     apzUltrix_StaticMachs,
     ULTRIX_STATIC_TEST_CT, FD_MACH_ONLY,
     aUltrix_StaticTests,   apzUltrix_StaticPatch },

  {  zUndefine_NullName,    zUndefine_NullList,
     apzUndefine_NullMachs,
     UNDEFINE_NULL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
     aUndefine_NullTests,   apzUndefine_NullPatch },

  {  zUnixware7_Byteorder_FixName,    zUnixware7_Byteorder_FixList,
     apzUnixware7_Byteorder_FixMachs,
     UNIXWARE7_BYTEORDER_FIX_TEST_CT, FD_MACH_ONLY,
     aUnixware7_Byteorder_FixTests,   apzUnixware7_Byteorder_FixPatch },

  {  zVa_I960_MacroName,    zVa_I960_MacroList,
     apzVa_I960_MacroMachs,
     VA_I960_MACRO_TEST_CT, FD_MACH_ONLY,
     aVa_I960_MacroTests,   apzVa_I960_MacroPatch },

  {  zVoid_NullName,    zVoid_NullList,
     apzVoid_NullMachs,
     VOID_NULL_TEST_CT, FD_MACH_ONLY,
     aVoid_NullTests,   apzVoid_NullPatch },

  {  zVxworks_Gcc_ProblemName,    zVxworks_Gcc_ProblemList,
     apzVxworks_Gcc_ProblemMachs,
     VXWORKS_GCC_PROBLEM_TEST_CT, FD_MACH_ONLY,
     aVxworks_Gcc_ProblemTests,   apzVxworks_Gcc_ProblemPatch },

  {  zVxworks_Needs_VxtypesName,    zVxworks_Needs_VxtypesList,
     apzVxworks_Needs_VxtypesMachs,
     VXWORKS_NEEDS_VXTYPES_TEST_CT, FD_MACH_ONLY,
     aVxworks_Needs_VxtypesTests,   apzVxworks_Needs_VxtypesPatch },

  {  zVxworks_Needs_VxworksName,    zVxworks_Needs_VxworksList,
     apzVxworks_Needs_VxworksMachs,
     VXWORKS_NEEDS_VXWORKS_TEST_CT, FD_MACH_ONLY,
     aVxworks_Needs_VxworksTests,   apzVxworks_Needs_VxworksPatch },

  {  zVxworks_TimeName,    zVxworks_TimeList,
     apzVxworks_TimeMachs,
     VXWORKS_TIME_TEST_CT, FD_MACH_ONLY,
     aVxworks_TimeTests,   apzVxworks_TimePatch },

  {  zX11_ClassName,    zX11_ClassList,
     apzX11_ClassMachs,
     X11_CLASS_TEST_CT, FD_MACH_ONLY,
     aX11_ClassTests,   apzX11_ClassPatch },

  {  zX11_Class_UsageName,    zX11_Class_UsageList,
     apzX11_Class_UsageMachs,
     X11_CLASS_USAGE_TEST_CT, FD_MACH_ONLY,
     aX11_Class_UsageTests,   apzX11_Class_UsagePatch },

  {  zX11_NewName,    zX11_NewList,
     apzX11_NewMachs,
     X11_NEW_TEST_CT, FD_MACH_ONLY,
     aX11_NewTests,   apzX11_NewPatch },

  {  zX11_SprintfName,    zX11_SprintfList,
     apzX11_SprintfMachs,
     X11_SPRINTF_TEST_CT, FD_MACH_ONLY,
     aX11_SprintfTests,   apzX11_SprintfPatch }
};
