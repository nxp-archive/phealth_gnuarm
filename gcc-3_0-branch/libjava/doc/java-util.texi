@deftypemethod AbstractCollection {public abstract Iterator} iterator () 
Return an Iterator over this collection. The iterator must provide the
 hasNext and next methods and should in addition provide remove if the
 collection is modifiable.
@end deftypemethod
@deftypemethod AbstractCollection {public abstract int} size () 
Return the number of elements in this collection.
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} add (java.lang.Object@w{ }@var{o}) 
Add an object to the collection. This implementation always throws an
 UnsupportedOperationException - it should be overridden if the collection
 is to be modifiable.
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} addAll (java.util.Collection@w{ }@var{c}) 
Add all the elements of a given collection to this collection. This
 implementation obtains an Iterator over the given collection and iterates
 over it, adding each element with the add(Object) method (thus this method
 will fail with an UnsupportedOperationException if the add method does).
@end deftypemethod
@deftypemethod AbstractCollection {public void} clear () 
Remove all elements from the collection. This implementation obtains an
 iterator over the collection and calls next and remove on it repeatedly
 (thus this method will fail with an UnsupportedOperationException if the
 Iterator's remove method does) until there are no more elements to remove.
 Many implementations will have a faster way of doing this.
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} contains (java.lang.Object@w{ }@var{o}) 
Test whether this collection contains a given object. That is, if the
 collection has an element e such that (o == null ? e == null :
 o.equals(e)). This implementation obtains an iterator over the collection
 and iterates over it, testing each element for equality with the given
 object. If it is equal, true is returned. Otherwise false is returned when
 the end of the collection is reached.
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} containsAll (java.util.Collection@w{ }@var{c}) 
Tests whether this collection contains all the elements in a given
 collection. This implementation iterates over the given collection,
 testing whether each element is contained in this collection. If any one
 is not, false is returned. Otherwise true is returned.
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} isEmpty () 
Test whether this collection is empty. This implementation returns
 size() == 0.
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} remove (java.lang.Object@w{ }@var{o}) 
Remove a single instance of an object from this collection. That is,
 remove one element e such that (o == null ? e == null : o.equals(e)), if
 such an element exists. This implementation obtains an iterator over the
 collection and iterates over it, testing each element for equality with
 the given object. If it is equal, it is removed by the iterator's remove
 method (thus this method will fail with an UnsupportedOperationException
 if the Iterator's remove method does). After the first element has been
 removed, true is returned; if the end of the collection is reached, false
 is returned.
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} removeAll (java.util.Collection@w{ }@var{c}) 
Remove from this collection all its elements that are contained in a given
 collection. This implementation iterates over this collection, and for
 each element tests if it is contained in the given collection. If so, it
 is removed by the Iterator's remove method (thus this method will fail
 with an UnsupportedOperationException if the Iterator's remove method
 does).
@end deftypemethod
@deftypemethod AbstractCollection {public boolean} retainAll (java.util.Collection@w{ }@var{c}) 
Remove from this collection all its elements that are not contained in a
 given collection. This implementation iterates over this collection, and
 for each element tests if it is contained in the given collection. If not,
 it is removed by the Iterator's remove method (thus this method will fail
 with an UnsupportedOperationException if the Iterator's remove method
 does).
@end deftypemethod
@deftypemethod AbstractCollection {public Object} toArray () 
Return an array containing the elements of this collection. This
 implementation creates an Object array of size size() and then iterates
 over the collection, setting each element of the array from the value
 returned by the iterator.
@end deftypemethod
@deftypemethod AbstractCollection {public Object} toArray (java.lang.Object[]@w{ }@var{a}) 
Copy the collection into a given array if it will fit, or into a
 dynamically created array of the same run-time type as the given array if
 not. If there is space remaining in the array, the first element after the
 end of the collection is set to null (this is only useful if the
 collection is known to contain no null elements, however). This
 implementation first tests whether the given array is large enough to hold
 all the elements of the collection. If not, the reflection API is used to
 allocate a new array of the same run-time type. Next an iterator is
 obtained over the collection and the elements are placed in the array as
 they are returned by the iterator. Finally the first spare element, if
 any, of the array is set to null, and the created array is returned.
@end deftypemethod
@deftypemethod AbstractCollection {public String} toString () 
Creates a String representation of the Collection. The string returned is
 of the form "[a, b, ...]" where a and b etc are the results of calling
 toString on the elements of the collection. This implementation obtains an
 Iterator over the Collection and adds each element to a StringBuffer as it
 is returned by the iterator.
@end deftypemethod
@deftypemethod AbstractList {public abstract Object} get (int@w{ }@var{index}) 

@end deftypemethod
@deftypemethod AbstractList {public void} add (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractList {public boolean} add (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractList {public boolean} addAll (int@w{ }@var{index}, java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod AbstractList {public void} clear () 

@end deftypemethod
@deftypemethod AbstractList {public boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractList {public int} hashCode () 

@end deftypemethod
@deftypemethod AbstractList {public int} indexOf (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractList {public Iterator} iterator () 

@end deftypemethod
@deftypemethod AbstractList {public int} lastIndexOf (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractList {public ListIterator} listIterator () 
Return an Iterator over this List. This implementation calls
 listIterator(0).
@end deftypemethod
@deftypemethod AbstractList {public ListIterator} listIterator (int@w{ }@var{index}) 

@end deftypemethod
@deftypemethod AbstractList {public Object} remove (int@w{ }@var{index}) 

@end deftypemethod
@deftypemethod AbstractList {protected void} removeRange (int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 
Remove a subsection of the list. This is called by the clear and
 removeRange methods of the class which implements subList, which are
 difficult for subclasses to override directly. Therefore, this method
 should be overridden instead by the more efficient implementation, if one
 exists.
 


 This implementation first checks for illegal or out of range arguments. It
 then obtains a ListIterator over the list using listIterator(fromIndex).
 It then calls next() and remove() on this iterator repeatedly, toIndex -
 fromIndex times.
@end deftypemethod
@deftypemethod AbstractList {public Object} set (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractList {public List} subList (int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod AbstractMap {public void} clear () 
Remove all entries from this Map. This default implementation calls
 entrySet().clear().
@end deftypemethod
@deftypemethod AbstractMap {public boolean} containsKey (java.lang.Object@w{ }@var{key}) 

@end deftypemethod
@deftypemethod AbstractMap {public boolean} containsValue (java.lang.Object@w{ }@var{value}) 

@end deftypemethod
@deftypemethod AbstractMap {public abstract Set} entrySet () 

@end deftypemethod
@deftypemethod AbstractMap {public boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractMap {public Object} get (java.lang.Object@w{ }@var{key}) 

@end deftypemethod
@deftypemethod AbstractMap {public int} hashCode () 

@end deftypemethod
@deftypemethod AbstractMap {public boolean} isEmpty () 

@end deftypemethod
@deftypemethod AbstractMap {public Set} keySet () 

@end deftypemethod
@deftypemethod AbstractMap {public Object} put (java.lang.Object@w{ }@var{key}, java.lang.Object@w{ }@var{value}) 

@end deftypemethod
@deftypemethod AbstractMap {public void} putAll (java.util.Map@w{ }@var{m}) 

@end deftypemethod
@deftypemethod AbstractMap {public Object} remove (java.lang.Object@w{ }@var{key}) 

@end deftypemethod
@deftypemethod AbstractMap {public int} size () 

@end deftypemethod
@deftypemethod AbstractMap {public String} toString () 

@end deftypemethod
@deftypemethod AbstractMap {public Collection} values () 

@end deftypemethod
@deftypemethod AbstractSequentialList {public abstract ListIterator} listIterator (int@w{ }@var{index}) 
Returns a ListIterator over the list, starting from position index.
 Subclasses must provide an implementation of this method.
@end deftypemethod
@deftypemethod AbstractSequentialList {public void} add (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 
Add an element to the list at a given index. This implementation obtains a
 ListIterator positioned at the specified index, and then adds the element
 using the ListIterator's add method.
@end deftypemethod
@deftypemethod AbstractSequentialList {public boolean} addAll (int@w{ }@var{index}, java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod AbstractSequentialList {public Object} get (int@w{ }@var{index}) 

@end deftypemethod
@deftypemethod AbstractSequentialList {public Iterator} iterator () 
Return an Iterator over this List. This implementation returns
 listIterator().
@end deftypemethod
@deftypemethod AbstractSequentialList {public Object} remove (int@w{ }@var{index}) 

@end deftypemethod
@deftypemethod AbstractSequentialList {public Object} set (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod AbstractSet {public boolean} equals (java.lang.Object@w{ }@var{o}) 
Tests whether the given object is equal to this Set. This implementation
 first checks whether this set <em>is</em> the given object, and returns
 true if so. Otherwise, if o is a Set and is the same size as this one, it
 returns the result of calling containsAll on the given Set. Otherwise, it
 returns false.
@end deftypemethod
@deftypemethod AbstractSet {public int} hashCode () 
Returns a hash code for this Set. The hash code of a Set is the sum of the
 hash codes of all its elements, except that the hash code of null is
 defined to be zero. This implementation obtains an Iterator over the Set,
 and sums the results.
@end deftypemethod
@deftypemethod ArrayList {public void} ensureCapacity (int@w{ }@var{minCapacity}) 
Guarantees that this list will have at least enough capacity to
 hold minCapacity elements.
@end deftypemethod
@deftypemethod ArrayList {public boolean} add (java.lang.Object@w{ }@var{e}) 
Appends the supplied element to the end of this list.
@end deftypemethod
@deftypemethod ArrayList {public Object} get (int@w{ }@var{index}) 
Retrieves the element at the user-supplied index.
@end deftypemethod
@deftypemethod ArrayList {public int} size () 
Returns the number of elements in this list
@end deftypemethod
@deftypemethod ArrayList {public Object} remove (int@w{ }@var{index}) 
Removes the element at the user-supplied index
@end deftypemethod
@deftypemethod ArrayList {protected void} removeRange (int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 
Removes all elements in the half-open interval [iFromIndex, iToIndex).
@end deftypemethod
@deftypemethod ArrayList {public void} add (int@w{ }@var{index}, java.lang.Object@w{ }@var{e}) 
Adds the supplied element at the specified index, shifting all
 elements currently at that index or higher one to the right.
@end deftypemethod
@deftypemethod ArrayList {public boolean} addAll (java.util.Collection@w{ }@var{c}) 
Add each element in the supplied Collection to this List.
@end deftypemethod
@deftypemethod ArrayList {public boolean} addAll (int@w{ }@var{index}, java.util.Collection@w{ }@var{c}) 
Add all elements in the supplied collection, inserting them beginning
 at the specified index.
@end deftypemethod
@deftypemethod ArrayList {public Object} clone () 
Creates a shallow copy of this ArrayList
@end deftypemethod
@deftypemethod ArrayList {public boolean} contains (java.lang.Object@w{ }@var{e}) 
Returns true iff oElement is in this ArrayList.
@end deftypemethod
@deftypemethod ArrayList {public int} indexOf (java.lang.Object@w{ }@var{e}) 
Returns the lowest index at which oElement appears in this List, or 
 -1 if it does not appear.
@end deftypemethod
@deftypemethod ArrayList {public int} lastIndexOf (java.lang.Object@w{ }@var{e}) 
Returns the highest index at which oElement appears in this List, or 
 -1 if it does not appear.
@end deftypemethod
@deftypemethod ArrayList {public void} clear () 
Removes all elements from this List
@end deftypemethod
@deftypemethod ArrayList {public Object} set (int@w{ }@var{index}, java.lang.Object@w{ }@var{e}) 
Sets the element at the specified index.
@end deftypemethod
@deftypemethod ArrayList {public Object} toArray () 
Returns an Object Array containing all of the elements in this ArrayList
@end deftypemethod
@deftypemethod ArrayList {public Object} toArray (java.lang.Object[]@w{ }@var{array}) 
Returns an Array whose component type is the runtime component type of
 the passed-in Array.  The returned Array is populated with all of the
 elements in this ArrayList.  If the passed-in Array is not large enough
 to store all of the elements in this List, a new Array will be created 
 and returned; if the passed-in Array is <i>larger</i> than the size
 of this List, then size() index will be set to null.
@end deftypemethod
@deftypemethod ArrayList {public void} trimToSize () 
Trims the capacity of this List to be equal to its size; 
 a memory saver.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (byte[]@w{ }@var{a}, byte@w{ }@var{key}) 
Perform a binary search of a byte array for a key. The array must be
 sorted (as by the sort() method) - if it is not, the behaviour of this
 method is undefined, and may be an infinite loop. If the array contains
 the key more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (char[]@w{ }@var{a}, char@w{ }@var{key}) 
Perform a binary search of a char array for a key. The array must be
 sorted (as by the sort() method) - if it is not, the behaviour of this
 method is undefined, and may be an infinite loop. If the array contains
 the key more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (double[]@w{ }@var{a}, double@w{ }@var{key}) 
Perform a binary search of a double array for a key. The array must be
 sorted (as by the sort() method) - if it is not, the behaviour of this
 method is undefined, and may be an infinite loop. If the array contains
 the key more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (float[]@w{ }@var{a}, float@w{ }@var{key}) 
Perform a binary search of a float array for a key. The array must be
 sorted (as by the sort() method) - if it is not, the behaviour of this
 method is undefined, and may be an infinite loop. If the array contains
 the key more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (int[]@w{ }@var{a}, int@w{ }@var{key}) 
Perform a binary search of an int array for a key. The array must be
 sorted (as by the sort() method) - if it is not, the behaviour of this
 method is undefined, and may be an infinite loop. If the array contains
 the key more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (long[]@w{ }@var{a}, long@w{ }@var{key}) 
Perform a binary search of a long array for a key. The array must be
 sorted (as by the sort() method) - if it is not, the behaviour of this
 method is undefined, and may be an infinite loop. If the array contains
 the key more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (short[]@w{ }@var{a}, short@w{ }@var{key}) 
Perform a binary search of a short array for a key. The array must be
 sorted (as by the sort() method) - if it is not, the behaviour of this
 method is undefined, and may be an infinite loop. If the array contains
 the key more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (java.lang.Object[]@w{ }@var{a}, java.lang.Object@w{ }@var{key}) 
Perform a binary search of an Object array for a key, using the natural
 ordering of the elements. The array must be sorted (as by the sort()
 method) - if it is not, the behaviour of this method is undefined, and may
 be an infinite loop. Further, the key must be comparable with every item
 in the array. If the array contains the key more than once, any one of
 them may be found. Note: although the specification allows for an infinite
 loop if the array is unsorted, it will not happen in this (JCL)
 implementation.
@end deftypemethod
@deftypemethod Arrays {public static int} binarySearch (java.lang.Object[]@w{ }@var{a}, java.lang.Object@w{ }@var{key}, java.util.Comparator@w{ }@var{c}) 
Perform a binary search of an Object array for a key, using a supplied
 Comparator. The array must be sorted (as by the sort() method with the
 same Comparator) - if it is not, the behaviour of this method is
 undefined, and may be an infinite loop. Further, the key must be
 comparable with every item in the array. If the array contains the key
 more than once, any one of them may be found. Note: although the
 specification allows for an infinite loop if the array is unsorted, it
 will not happen in this (JCL) implementation.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (byte[]@w{ }@var{a1}, byte[]@w{ }@var{a2}) 
Compare two byte arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (char[]@w{ }@var{a1}, char[]@w{ }@var{a2}) 
Compare two char arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (double[]@w{ }@var{a1}, double[]@w{ }@var{a2}) 
Compare two double arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (float[]@w{ }@var{a1}, float[]@w{ }@var{a2}) 
Compare two float arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (long[]@w{ }@var{a1}, long[]@w{ }@var{a2}) 
Compare two long arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (short[]@w{ }@var{a1}, short[]@w{ }@var{a2}) 
Compare two short arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (boolean[]@w{ }@var{a1}, boolean[]@w{ }@var{a2}) 
Compare two boolean arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (int[]@w{ }@var{a1}, int[]@w{ }@var{a2}) 
Compare two int arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static boolean} equals (java.lang.Object[]@w{ }@var{a1}, java.lang.Object[]@w{ }@var{a2}) 
Compare two Object arrays for equality.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (boolean[]@w{ }@var{a}, boolean@w{ }@var{val}) 
Fill an array with a boolean value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (boolean[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, boolean@w{ }@var{val}) 
Fill a range of an array with a boolean value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (byte[]@w{ }@var{a}, byte@w{ }@var{val}) 
Fill an array with a byte value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (byte[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, byte@w{ }@var{val}) 
Fill a range of an array with a byte value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (char[]@w{ }@var{a}, char@w{ }@var{val}) 
Fill an array with a char value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (char[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, char@w{ }@var{val}) 
Fill a range of an array with a char value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (double[]@w{ }@var{a}, double@w{ }@var{val}) 
Fill an array with a double value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (double[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, double@w{ }@var{val}) 
Fill a range of an array with a double value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (float[]@w{ }@var{a}, float@w{ }@var{val}) 
Fill an array with a float value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (float[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, float@w{ }@var{val}) 
Fill a range of an array with a float value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (int[]@w{ }@var{a}, int@w{ }@var{val}) 
Fill an array with an int value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (int[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, int@w{ }@var{val}) 
Fill a range of an array with an int value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (long[]@w{ }@var{a}, long@w{ }@var{val}) 
Fill an array with a long value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (long[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, long@w{ }@var{val}) 
Fill a range of an array with a long value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (short[]@w{ }@var{a}, short@w{ }@var{val}) 
Fill an array with a short value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (short[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, short@w{ }@var{val}) 
Fill a range of an array with a short value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (java.lang.Object[]@w{ }@var{a}, java.lang.Object@w{ }@var{val}) 
Fill an array with an Object value.
@end deftypemethod
@deftypemethod Arrays {public static void} fill (java.lang.Object[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, java.lang.Object@w{ }@var{val}) 
Fill a range of an array with an Object value.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (byte[]@w{ }@var{a}) 
Sort a byte array into ascending order. The sort algorithm is an optimised
 quicksort, as described in Jon L. Bentley and M. Douglas McIlroy's
 "Engineering a Sort Function", Software-Practice and Experience, Vol.
 23(11) P. 1249-1265 (November 1993). This algorithm gives nlog(n)
 performance on many arrays that would take quadratic time with a standard
 quicksort.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (byte[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Arrays {public static void} sort (char[]@w{ }@var{a}) 
Sort a char array into ascending order. The sort algorithm is an optimised
 quicksort, as described in Jon L. Bentley and M. Douglas McIlroy's
 "Engineering a Sort Function", Software-Practice and Experience, Vol.
 23(11) P. 1249-1265 (November 1993). This algorithm gives nlog(n)
 performance on many arrays that would take quadratic time with a standard
 quicksort.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (char[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Arrays {public static void} sort (double[]@w{ }@var{a}) 
Sort a double array into ascending order. The sort algorithm is an
 optimised quicksort, as described in Jon L. Bentley and M. Douglas
 McIlroy's "Engineering a Sort Function", Software-Practice and Experience,
 Vol. 23(11) P. 1249-1265 (November 1993). This algorithm gives nlog(n)
 performance on many arrays that would take quadratic time with a standard
 quicksort. Note that this implementation, like Sun's, has undefined
 behaviour if the array contains any NaN values.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (double[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Arrays {public static void} sort (float[]@w{ }@var{a}) 
Sort a float array into ascending order. The sort algorithm is an
 optimised quicksort, as described in Jon L. Bentley and M. Douglas
 McIlroy's "Engineering a Sort Function", Software-Practice and Experience,
 Vol. 23(11) P. 1249-1265 (November 1993). This algorithm gives nlog(n)
 performance on many arrays that would take quadratic time with a standard
 quicksort. Note that this implementation, like Sun's, has undefined
 behaviour if the array contains any NaN values.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (float[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Arrays {public static void} sort (int[]@w{ }@var{a}) 
Sort an int array into ascending order. The sort algorithm is an optimised
 quicksort, as described in Jon L. Bentley and M. Douglas McIlroy's
 "Engineering a Sort Function", Software-Practice and Experience, Vol.
 23(11) P. 1249-1265 (November 1993). This algorithm gives nlog(n)
 performance on many arrays that would take quadratic time with a standard
 quicksort.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (int[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Arrays {public static void} sort (long[]@w{ }@var{a}) 
Sort a long array into ascending order. The sort algorithm is an optimised
 quicksort, as described in Jon L. Bentley and M. Douglas McIlroy's
 "Engineering a Sort Function", Software-Practice and Experience, Vol.
 23(11) P. 1249-1265 (November 1993). This algorithm gives nlog(n)
 performance on many arrays that would take quadratic time with a standard
 quicksort.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (long[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Arrays {public static void} sort (short[]@w{ }@var{a}) 
Sort a short array into ascending order. The sort algorithm is an
 optimised quicksort, as described in Jon L. Bentley and M. Douglas
 McIlroy's "Engineering a Sort Function", Software-Practice and Experience,
 Vol. 23(11) P. 1249-1265 (November 1993). This algorithm gives nlog(n)
 performance on many arrays that would take quadratic time with a standard
 quicksort.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (short[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Arrays {public static void} sort (java.lang.Object[]@w{ }@var{a}) 
Sort an array of Objects according to their natural ordering. The sort is
 guaranteed to be stable, that is, equal elements will not be reordered.
 The sort algorithm is a mergesort with the merge omitted if the last
 element of one half comes before the first element of the other half. This
 algorithm gives guaranteed O(nlog(n)) time, at the expense of making a
 copy of the array.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (java.lang.Object[]@w{ }@var{a}, java.util.Comparator@w{ }@var{c}) 
Sort an array of Objects according to a Comparator. The sort is
 guaranteed to be stable, that is, equal elements will not be reordered.
 The sort algorithm is a mergesort with the merge omitted if the last
 element of one half comes before the first element of the other half. This
 algorithm gives guaranteed O(nlog(n)) time, at the expense of making a
 copy of the array.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (java.lang.Object[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 
Sort an array of Objects according to their natural ordering. The sort is
 guaranteed to be stable, that is, equal elements will not be reordered.
 The sort algorithm is a mergesort with the merge omitted if the last
 element of one half comes before the first element of the other half. This
 algorithm gives guaranteed O(nlog(n)) time, at the expense of making a
 copy of the array.
@end deftypemethod
@deftypemethod Arrays {public static void} sort (java.lang.Object[]@w{ }@var{a}, int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}, java.util.Comparator@w{ }@var{c}) 
Sort an array of Objects according to a Comparator. The sort is
 guaranteed to be stable, that is, equal elements will not be reordered.
 The sort algorithm is a mergesort with the merge omitted if the last
 element of one half comes before the first element of the other half. This
 algorithm gives guaranteed O(nlog(n)) time, at the expense of making a
 copy of the array.
@end deftypemethod
@deftypemethod Arrays {public static List} asList (java.lang.Object[]@w{ }@var{a}) 
Returns a list "view" of the specified array. This method is intended to
 make it easy to use the Collections API with existing array-based APIs and
 programs.
@end deftypemethod
@deftypemethod BitSet {public void} and (java.util.BitSet@w{ }@var{bs}) 
Performs the logical AND operation on this bit set and the
 given @code{set}.  This means it builds the intersection
 of the two sets.  The result is stored into this bit set.
@end deftypemethod
@deftypemethod BitSet {public void} andNot (java.util.BitSet@w{ }@var{bs}) 
Performs the logical AND operation on this bit set and the
 complement of the given @code{set}.  This means it
 selects every element in the first set, that isn't in the
 second set.  The result is stored into this bit set.
@end deftypemethod
@deftypemethod BitSet {public void} clear (int@w{ }@var{pos}) 
Removes the integer @code{bitIndex} from this set. That is
 the corresponding bit is cleared.  If the index is not in the set,
 this method does nothing.
@end deftypemethod
@deftypemethod BitSet {public Object} clone () 
Create a clone of this bit set, that is an instance of the same
 class and contains the same elements.  But it doesn't change when
 this bit set changes.
@end deftypemethod
@deftypemethod BitSet {public boolean} equals (java.lang.Object@w{ }@var{obj}) 
Returns true if the @code{obj} is a bit set that contains
 exactly the same elements as this bit set, otherwise false.
@end deftypemethod
@deftypemethod BitSet {public boolean} get (int@w{ }@var{pos}) 
Returns true if the integer @code{bitIndex} is in this bit
 set, otherwise false.
@end deftypemethod
@deftypemethod BitSet {public int} hashCode () 
Returns a hash code value for this bit set.  The hash code of 
 two bit sets containing the same integers is identical.  The algorithm
 used to compute it is as follows:

 Suppose the bits in the BitSet were to be stored in an array of
 long integers called @code{bits}, in such a manner that
 bit @code{k} is set in the BitSet (for non-negative values
 of @code{k}) if and only if

 <pre>
 ((k/64) < bits.length) && ((bits[k/64] & (1L << (bit % 64))) != 0)
 </pre>

 Then the following definition of the hashCode method
 would be a correct implementation of the actual algorithm:

 <pre>
 public int hashCode() {
     long h = 1234;
     for (int i = bits.length-1; i>=0; i--) {
         h ^= bits[i] * (i + 1);
     }
     return (int)((h >> 32) ^ h);
 }
 </pre>

 Note that the hash code values changes, if the set is changed.
@end deftypemethod
@deftypemethod BitSet {public int} length () 
Returns the logical number of bits actually used by this bit
 set.  It returns the index of the highest set bit plus one.
 Note that this method doesn't return the number of set bits.
@end deftypemethod
@deftypemethod BitSet {public void} or (java.util.BitSet@w{ }@var{bs}) 
Performs the logical OR operation on this bit set and the
 given @code{set}.  This means it builds the union
 of the two sets.  The result is stored into this bit set, which
 grows as necessary.
@end deftypemethod
@deftypemethod BitSet {public void} set (int@w{ }@var{pos}) 
Add the integer @code{bitIndex} to this set.  That is 
 the corresponding bit is set to true.  If the index was already in
 the set, this method does nothing.  The size of this structure
 is automatically increased as necessary.
@end deftypemethod
@deftypemethod BitSet {public int} size () 
Returns the number of bits actually used by this bit set.  Note
 that this method doesn't return the number of set bits.
@end deftypemethod
@deftypemethod BitSet {public String} toString () 
Returns the string representation of this bit set.  This
 consists of a comma separated list of the integers in this set
 surrounded by curly braces.  There is a space after each comma.
@end deftypemethod
@deftypemethod BitSet {public void} xor (java.util.BitSet@w{ }@var{bs}) 
Performs the logical XOR operation on this bit set and the
 given @code{set}.  This means it builds the symmetric
 remainder of the two sets (the elements that are in one set,
 but not in the other).  The result is stored into this bit set,
 which grows as necessary.
@end deftypemethod
@deftypemethod Calendar {public static synchronized Calendar} getInstance () 
Creates a calendar representing the actual time, using the default
 time zone and locale.
@end deftypemethod
@deftypemethod Calendar {public static synchronized Calendar} getInstance (java.util.TimeZone@w{ }@var{zone}) 
Creates a calendar representing the actual time, using the given
 time zone and the default locale.
@end deftypemethod
@deftypemethod Calendar {public static synchronized Calendar} getInstance (java.util.Locale@w{ }@var{locale}) 
Creates a calendar representing the actual time, using the default
 time zone and the given locale.
@end deftypemethod
@deftypemethod Calendar {public static synchronized Calendar} getInstance (java.util.TimeZone@w{ }@var{zone}, java.util.Locale@w{ }@var{locale}) 
Creates a calendar representing the actual time, using the given
 time zone and locale.
@end deftypemethod
@deftypemethod Calendar {public static synchronized Locale} getAvailableLocales () 
Gets the set of locales for which a Calendar is availiable.
@end deftypemethod
@deftypemethod Calendar {protected abstract void} computeTime () 
Converts the time field values (@code{fields}) to
 milliseconds since the epoch UTC (@code{time}).  Override
 this method if you write your own Calendar.
@end deftypemethod
@deftypemethod Calendar {protected abstract void} computeFields () 
Converts the milliseconds since the epoch UTC
 (@code{time}) to time fields
 (@code{fields}). Override this method if you write your
 own Calendar.
@end deftypemethod
@deftypemethod Calendar {public final Date} getTime () 
Converts the time represented by this object to a
 @code{Date}-Object.
@end deftypemethod
@deftypemethod Calendar {public final void} setTime (java.util.Date@w{ }@var{date}) 
Sets this Calender's time to the given Date.  All time fields
 are invalidated by this method.
@end deftypemethod
@deftypemethod Calendar {protected long} getTimeInMillis () 
Returns the time represented by this Calendar.
@end deftypemethod
@deftypemethod Calendar {protected void} setTimeInMillis (long@w{ }@var{time}) 
Sets this Calender's time to the given Time.  All time fields
 are invalidated by this method.
@end deftypemethod
@deftypemethod Calendar {public final int} get (int@w{ }@var{field}) 
Gets the value of the specified field.  They are recomputed
 if they are invalid.
@end deftypemethod
@deftypemethod Calendar {protected final int} internalGet (int@w{ }@var{field}) 
Gets the value of the specified field. This method doesn't 
 recompute the fields, if they are invalid.
@end deftypemethod
@deftypemethod Calendar {public final void} set (int@w{ }@var{field}, int@w{ }@var{value}) 
Sets the time field with the given value.  This does invalidate
 the time in milliseconds.
@end deftypemethod
@deftypemethod Calendar {public final void} set (int@w{ }@var{year}, int@w{ }@var{month}, int@w{ }@var{date}) 
Sets the fields for year, month, and date
@end deftypemethod
@deftypemethod Calendar {public final void} set (int@w{ }@var{year}, int@w{ }@var{month}, int@w{ }@var{date}, int@w{ }@var{hour}, int@w{ }@var{minute}) 
Sets the fields for year, month, date, hour, and minute
@end deftypemethod
@deftypemethod Calendar {public final void} set (int@w{ }@var{year}, int@w{ }@var{month}, int@w{ }@var{date}, int@w{ }@var{hour}, int@w{ }@var{minute}, int@w{ }@var{second}) 
Sets the fields for year, month, date, hour, and minute
@end deftypemethod
@deftypemethod Calendar {public final void} clear () 
Clears the values of all the time fields.
@end deftypemethod
@deftypemethod Calendar {public final void} clear (int@w{ }@var{field}) 
Clears the values of the specified time field.
@end deftypemethod
@deftypemethod Calendar {public final boolean} isSet (int@w{ }@var{field}) 
Determines if the specified field has a valid value.
@end deftypemethod
@deftypemethod Calendar {protected void} complete () 
Fills any unset fields in the time field list
@end deftypemethod
@deftypemethod Calendar {public boolean} equals (java.lang.Object@w{ }@var{o}) 
Compares the given calender with this.
@end deftypemethod
@deftypemethod Calendar {public int} hashCode () 
Returns a hash code for this calendar.
@end deftypemethod
@deftypemethod Calendar {public boolean} before (java.lang.Object@w{ }@var{o}) 
Compares the given calender with this.
@end deftypemethod
@deftypemethod Calendar {public boolean} after (java.lang.Object@w{ }@var{o}) 
Compares the given calender with this.
@end deftypemethod
@deftypemethod Calendar {public abstract void} add (int@w{ }@var{field}, int@w{ }@var{amount}) 
Adds the specified amount of time to the given time field.  The
 amount may be negative to subtract the time.  If the field overflows
 it does what you expect: Jan, 25 + 10 Days is Feb, 4.
@end deftypemethod
@deftypemethod Calendar {public abstract void} roll (int@w{ }@var{field}, boolean@w{ }@var{up}) 
Rolls the specified time field up or down.  This means add one
 to the specified field, but don't change the other fields.  If
 the maximum for this field is reached, start over with the 
 minimum value.  <br>

 <strong>Note:</strong> There may be situation, where the other
 fields must be changed, e.g rolling the month on May, 31. 
 The date June, 31 is automatically converted to July, 1.
@end deftypemethod
@deftypemethod Calendar {public void} roll (int@w{ }@var{field}, int@w{ }@var{amount}) 
Rolls up or down the specified time field by the given amount.
 A negative amount rolls down.  The default implementation is
 call @code{roll(int, boolean)} for the specified amount.

 Subclasses should override this method to do more intuitiv things.
@end deftypemethod
@deftypemethod Calendar {public void} setTimeZone (java.util.TimeZone@w{ }@var{zone}) 
Sets the time zone to the specified value.
@end deftypemethod
@deftypemethod Calendar {public TimeZone} getTimeZone () 
Gets the time zone of this calendar
@end deftypemethod
@deftypemethod Calendar {public void} setLenient (boolean@w{ }@var{lenient}) 
Specifies if the date/time interpretation should be lenient.
 If the flag is set, a date such as "February 30, 1996" will be
 treated as the 29th day after the February 1.  If this flag
 is false, such dates will cause an exception.
@end deftypemethod
@deftypemethod Calendar {public boolean} isLenient () 
Tells if the date/time interpretation is lenient.
@end deftypemethod
@deftypemethod Calendar {public void} setFirstDayOfWeek (int@w{ }@var{value}) 
Sets what the first day of week is.  This is used for
 WEEK_OF_MONTH and WEEK_OF_YEAR fields.
@end deftypemethod
@deftypemethod Calendar {public int} getFirstDayOfWeek () 
Gets what the first day of week is.  This is used for
 WEEK_OF_MONTH and WEEK_OF_YEAR fields.
@end deftypemethod
@deftypemethod Calendar {public void} setMinimalDaysInFirstWeek (int@w{ }@var{value}) 
Sets how many days are required in the first week of the year.
 If the first day of the year should be the first week you should
 set this value to 1.  If the first week must be a full week, set
 it to 7.
@end deftypemethod
@deftypemethod Calendar {public int} getMinimalDaysInFirstWeek () 
Gets how many days are required in the first week of the year.
@end deftypemethod
@deftypemethod Calendar {public abstract int} getMinimum (int@w{ }@var{field}) 
Gets the smallest value that is allowed for the specified field.
@end deftypemethod
@deftypemethod Calendar {public abstract int} getMaximum (int@w{ }@var{field}) 
Gets the biggest value that is allowed for the specified field.
@end deftypemethod
@deftypemethod Calendar {public abstract int} getGreatestMinimum (int@w{ }@var{field}) 
Gets the greatest minimum value that is allowed for the specified field.
@end deftypemethod
@deftypemethod Calendar {public abstract int} getLeastMaximum (int@w{ }@var{field}) 
Gets the smallest maximum value that is allowed for the
 specified field.  For example this is 28 for DAY_OF_MONTH.
@end deftypemethod
@deftypemethod Calendar {public Object} clone () 
Return a clone of this object.
@end deftypemethod
@deftypemethod Calendar {public String} toString () 
Returns a string representation of this object.  It is mainly
 for debugging purposes and its content is implementation
 specific.
@end deftypemethod
@deftypemethod Collection {public int} size () 

@end deftypemethod
@deftypemethod Collection {public boolean} isEmpty () 

@end deftypemethod
@deftypemethod Collection {public boolean} contains (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Collection {public Iterator} iterator () 

@end deftypemethod
@deftypemethod Collection {public Object} toArray () 

@end deftypemethod
@deftypemethod Collection {public Object} toArray (java.lang.Object[]@w{ }@var{a}) 

@end deftypemethod
@deftypemethod Collection {public boolean} add (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Collection {public boolean} remove (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Collection {public boolean} containsAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Collection {public boolean} addAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Collection {public boolean} removeAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Collection {public boolean} retainAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Collection {public void} clear () 

@end deftypemethod
@deftypemethod Collection {public boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Collection {public int} hashCode () 

@end deftypemethod
@deftypemethod Collections {public static int} binarySearch (java.util.List@w{ }@var{l}, java.lang.Object@w{ }@var{key}) 
Perform a binary search of a List for a key, using the natural ordering of
 the elements. The list must be sorted (as by the sort() method) - if it is
 not, the behaviour of this method is undefined, and may be an infinite
 loop. Further, the key must be comparable with every item in the list. If
 the list contains the key more than once, any one of them may be found. To
 avoid pathological behaviour on sequential-access lists, a linear search
 is used if (l instanceof AbstractSequentialList). Note: although the
 specification allows for an infinite loop if the list is unsorted, it will
 not happen in this (Classpath) implementation.
@end deftypemethod
@deftypemethod Collections {public static int} binarySearch (java.util.List@w{ }@var{l}, java.lang.Object@w{ }@var{key}, java.util.Comparator@w{ }@var{c}) 
Perform a binary search of a List for a key, using a supplied Comparator.
 The list must be sorted (as by the sort() method with the same Comparator)
 - if it is not, the behaviour of this method is undefined, and may be an
 infinite loop. Further, the key must be comparable with every item in the
 list. If the list contains the key more than once, any one of them may be
 found. To avoid pathological behaviour on sequential-access lists, a
 linear search is used if (l instanceof AbstractSequentialList). Note:
 although the specification allows for an infinite loop if the list is
 unsorted, it will not happen in this (Classpath) implementation.
@end deftypemethod
@deftypemethod Collections {public static void} copy (java.util.List@w{ }@var{dest}, java.util.List@w{ }@var{source}) 
Copy one list to another. If the destination list is longer than the
 source list, the remaining elements are unaffected. This method runs in
 linear time.
@end deftypemethod
@deftypemethod Collections {public static Enumeration} enumeration (java.util.Collection@w{ }@var{c}) 
Returns an Enumeration over a collection. This allows interoperability
 with legacy APIs that require an Enumeration as input.
@end deftypemethod
@deftypemethod Collections {public static void} fill (java.util.List@w{ }@var{l}, java.lang.Object@w{ }@var{val}) 
Replace every element of a list with a given value. This method runs in
 linear time.
@end deftypemethod
@deftypemethod Collections {public static Object} max (java.util.Collection@w{ }@var{c}) 
Find the maximum element in a Collection, according to the natural
 ordering of the elements. This implementation iterates over the
 Collection, so it works in linear time.
@end deftypemethod
@deftypemethod Collections {public static Object} max (java.util.Collection@w{ }@var{c}, java.util.Comparator@w{ }@var{order}) 
Find the maximum element in a Collection, according to a specified
 Comparator. This implementation iterates over the Collection, so it
 works in linear time.
@end deftypemethod
@deftypemethod Collections {public static Object} min (java.util.Collection@w{ }@var{c}) 
Find the minimum element in a Collection, according to the natural
 ordering of the elements. This implementation iterates over the
 Collection, so it works in linear time.
@end deftypemethod
@deftypemethod Collections {public static Object} min (java.util.Collection@w{ }@var{c}, java.util.Comparator@w{ }@var{order}) 
Find the minimum element in a Collection, according to a specified
 Comparator. This implementation iterates over the Collection, so it
 works in linear time.
@end deftypemethod
@deftypemethod Collections {public static List} nCopies (int@w{ }@var{n}, java.lang.Object@w{ }@var{o}) 
Creates an immutable list consisting of the same object repeated n times.
 The returned object is tiny, consisting of only a single reference to the
 object and a count of the number of elements. It is Serializable.
@end deftypemethod
@deftypemethod Collections {public static void} reverse (java.util.List@w{ }@var{l}) 
Reverse a given list. This method works in linear time.
@end deftypemethod
@deftypemethod Collections {public static Comparator} reverseOrder () 
Get a comparator that implements the reverse of natural ordering. This is
 intended to make it easy to sort into reverse order, by simply passing
 Collections.reverseOrder() to the sort method. The return value of this
 method is Serializable.
@end deftypemethod
@deftypemethod Collections {public static void} shuffle (java.util.List@w{ }@var{l}) 
Shuffle a list according to a default source of randomness. The algorithm
 used would result in a perfectly fair shuffle (that is, each element would
 have an equal chance of ending up in any position) with a perfect source
 of randomness; in practice the results are merely very close to perfect.
 


 This method operates in linear time on a random-access list, but may take
 quadratic time on a sequential-access list.
 Note: this (classpath) implementation will never take quadratic time, but
 it does make a copy of the list. This is in line with the behaviour of the
 sort methods and seems preferable.
@end deftypemethod
@deftypemethod Collections {public static void} shuffle (java.util.List@w{ }@var{l}, java.util.Random@w{ }@var{r}) 
Shuffle a list according to a given source of randomness. The algorithm
 used iterates backwards over the list, swapping each element with an
 element randomly selected from the elements in positions less than or
 equal to it (using r.nextInt(int)).
 


 This algorithm would result in a perfectly fair shuffle (that is, each
 element would have an equal chance of ending up in any position) if r were
 a perfect source of randomness. In practise (eg if r = new Random()) the
 results are merely very close to perfect.
 


 This method operates in linear time on a random-access list, but may take
 quadratic time on a sequential-access list.
 Note: this (classpath) implementation will never take quadratic time, but
 it does make a copy of the list. This is in line with the behaviour of the
 sort methods and seems preferable.
@end deftypemethod
@deftypemethod Collections {public static Set} singleton (java.lang.Object@w{ }@var{o}) 
Obtain an immutable Set consisting of a single element. The return value
 of this method is Serializable.
@end deftypemethod
@deftypemethod Collections {public static List} singletonList (java.lang.Object@w{ }@var{o}) 
Obtain an immutable List consisting of a single element. The return value
 of this method is Serializable.
@end deftypemethod
@deftypemethod Collections {public static Map} singletonMap (java.lang.Object@w{ }@var{key}, java.lang.Object@w{ }@var{value}) 
Obtain an immutable Map consisting of a single key value pair.
 The return value of this method is Serializable.
@end deftypemethod
@deftypemethod Collections {public static void} sort (java.util.List@w{ }@var{l}) 
Sort a list according to the natural ordering of its elements. The list
 must be modifiable, but can be of fixed size. The sort algorithm is
 precisely that used by Arrays.sort(Object[]), which offers guaranteed
 nlog(n) performance. This implementation dumps the list into an array,
 sorts the array, and then iterates over the list setting each element from
 the array.
@end deftypemethod
@deftypemethod Collections {public static void} sort (java.util.List@w{ }@var{l}, java.util.Comparator@w{ }@var{c}) 
Sort a list according to a specified Comparator. The list must be
 modifiable, but can be of fixed size. The sort algorithm is precisely that
 used by Arrays.sort(Object[], Comparator), which offers guaranteed
 nlog(n) performance. This implementation dumps the list into an array,
 sorts the array, and then iterates over the list setting each element from
 the array.
@end deftypemethod
@deftypemethod Collections {public static Collection} synchronizedCollection (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Collections {public static List} synchronizedList (java.util.List@w{ }@var{l}) 

@end deftypemethod
@deftypemethod Collections {public static Map} synchronizedMap (java.util.Map@w{ }@var{m}) 

@end deftypemethod
@deftypemethod Collections {public static Set} synchronizedSet (java.util.Set@w{ }@var{s}) 

@end deftypemethod
@deftypemethod Collections {public static SortedMap} synchronizedSortedMap (java.util.SortedMap@w{ }@var{m}) 

@end deftypemethod
@deftypemethod Collections {public static SortedSet} synchronizedSortedSet (java.util.SortedSet@w{ }@var{s}) 

@end deftypemethod
@deftypemethod Collections {public static Collection} unmodifiableCollection (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Collections {public static List} unmodifiableList (java.util.List@w{ }@var{l}) 

@end deftypemethod
@deftypemethod Collections {public static Map} unmodifiableMap (java.util.Map@w{ }@var{m}) 

@end deftypemethod
@deftypemethod Collections {public static Set} unmodifiableSet (java.util.Set@w{ }@var{s}) 

@end deftypemethod
@deftypemethod Collections {public static SortedMap} unmodifiableSortedMap (java.util.SortedMap@w{ }@var{m}) 

@end deftypemethod
@deftypemethod Collections {public static SortedSet} unmodifiableSortedSet (java.util.SortedSet@w{ }@var{s}) 

@end deftypemethod
@deftypemethod Comparator {public int} compare (java.lang.Object@w{ }@var{o1}, java.lang.Object@w{ }@var{o2}) 

@end deftypemethod
@deftypemethod Comparator {public boolean} equals (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod Date {public static long} parse (java.lang.String@w{ }@var{string}) 

@end deftypemethod
@deftypemethod Date {public boolean} after (java.util.Date@w{ }@var{when}) 

@end deftypemethod
@deftypemethod Date {public boolean} before (java.util.Date@w{ }@var{when}) 

@end deftypemethod
@deftypemethod Date {public boolean} equals (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod Date {public long} getTime () 

@end deftypemethod
@deftypemethod Date {public int} hashCode () 

@end deftypemethod
@deftypemethod Date {public void} setTime (long@w{ }@var{millis}) 

@end deftypemethod
@deftypemethod Date {public int} getYear () 

@end deftypemethod
@deftypemethod Date {public int} getMonth () 

@end deftypemethod
@deftypemethod Date {public int} getDate () 

@end deftypemethod
@deftypemethod Date {public int} getDay () 

@end deftypemethod
@deftypemethod Date {public int} getHours () 

@end deftypemethod
@deftypemethod Date {public int} getMinutes () 

@end deftypemethod
@deftypemethod Date {public int} getSeconds () 

@end deftypemethod
@deftypemethod Date {public void} setYear (int@w{ }@var{year}) 

@end deftypemethod
@deftypemethod Date {public void} setMonth (int@w{ }@var{month}) 

@end deftypemethod
@deftypemethod Date {public void} setDate (int@w{ }@var{date}) 

@end deftypemethod
@deftypemethod Date {public void} setHours (int@w{ }@var{hours}) 

@end deftypemethod
@deftypemethod Date {public void} setMinutes (int@w{ }@var{minutes}) 

@end deftypemethod
@deftypemethod Date {public void} setSeconds (int@w{ }@var{seconds}) 

@end deftypemethod
@deftypemethod Date {public int} getTimezoneOffset () 

@end deftypemethod
@deftypemethod Date {public String} toString () 

@end deftypemethod
@deftypemethod Date {public String} toGMTString () 

@end deftypemethod
@deftypemethod Date {public String} toLocaleString () 

@end deftypemethod
@deftypemethod Date {public static long} UTC (int@w{ }@var{year}, int@w{ }@var{month}, int@w{ }@var{date}, int@w{ }@var{hours}, int@w{ }@var{minutes}, int@w{ }@var{seconds}) 

@end deftypemethod
@deftypemethod Dictionary {public abstract Enumeration} elements () 

@end deftypemethod
@deftypemethod Dictionary {public abstract Object} get (java.lang.Object@w{ }@var{key}) @*throws NullPointerException

@end deftypemethod
@deftypemethod Dictionary {public abstract boolean} isEmpty () 

@end deftypemethod
@deftypemethod Dictionary {public abstract Enumeration} keys () 

@end deftypemethod
@deftypemethod Dictionary {public abstract Object} put (java.lang.Object@w{ }@var{key}, java.lang.Object@w{ }@var{elem}) @*throws NullPointerException

@end deftypemethod
@deftypemethod Dictionary {public abstract Object} remove (java.lang.Object@w{ }@var{key}) @*throws NullPointerException

@end deftypemethod
@deftypemethod Dictionary {public abstract int} size () 

@end deftypemethod
@deftypemethod Enumeration {public boolean} hasMoreElements () 

@end deftypemethod
@deftypemethod Enumeration {public Object} nextElement () @*throws NoSuchElementException

@end deftypemethod
@deftypemethod EventObject {public Object} getSource () 

@end deftypemethod
@deftypemethod EventObject {public String} toString () 

@end deftypemethod
@deftypemethod GregorianCalendar {public int} getMinimum (int@w{ }@var{calfield}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public int} getGreatestMinimum (int@w{ }@var{calfield}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public int} getMaximum (int@w{ }@var{calfield}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public int} getLeastMaximum (int@w{ }@var{calfield}) 

@end deftypemethod
@deftypemethod GregorianCalendar {protected native void} computeFields () 

@end deftypemethod
@deftypemethod GregorianCalendar {protected native void} computeTime () 

@end deftypemethod
@deftypemethod GregorianCalendar {public void} add (int@w{ }@var{fld}, int@w{ }@var{amount}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public void} roll (int@w{ }@var{fld}, boolean@w{ }@var{up}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public final Date} getGregorianChange () 

@end deftypemethod
@deftypemethod GregorianCalendar {public void} setGregorianChange (java.util.Date@w{ }@var{date}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public boolean} isLeapYear (int@w{ }@var{year}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public boolean} after (java.lang.Object@w{ }@var{cal}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public boolean} before (java.lang.Object@w{ }@var{cal}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public boolean} equals (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod GregorianCalendar {public int} hashCode () 

@end deftypemethod
@deftypemethod HashMap {public int} size () 
returns the number of kay-value mappings currently in this Map
@end deftypemethod
@deftypemethod HashMap {public boolean} isEmpty () 
returns true if there are no key-value mappings currently in this Map
@end deftypemethod
@deftypemethod HashMap {public boolean} containsValue (java.lang.Object@w{ }@var{value}) 
returns true if this HashMap contains a value <pre>o</pre>, such that
 <pre>o.equals(value)</pre>.
@end deftypemethod
@deftypemethod HashMap {public boolean} containsKey (java.lang.Object@w{ }@var{key}) 
returns true if the supplied object equals (<pre>equals()</pre>) a key
 in this HashMap
@end deftypemethod
@deftypemethod HashMap {public Object} get (java.lang.Object@w{ }@var{key}) 
return the value in this Hashtable associated with the supplied key, or <pre>null</pre>
 if the key maps to nothing
@end deftypemethod
@deftypemethod HashMap {public Object} put (java.lang.Object@w{ }@var{key}, java.lang.Object@w{ }@var{value}) 
puts the supplied value into the Map, mapped by the supplied key
@end deftypemethod
@deftypemethod HashMap {public Object} remove (java.lang.Object@w{ }@var{key}) 
removes from the HashMap and returns the value which is mapped by the 
 supplied key; if the key maps to nothing, then the HashMap remains unchanged,
 and <pre>null</pre> is returned
@end deftypemethod
@deftypemethod HashMap {public void} putAll (java.util.Map@w{ }@var{m}) 

@end deftypemethod
@deftypemethod HashMap {public void} clear () 

@end deftypemethod
@deftypemethod HashMap {public Object} clone () 
returns a shallow clone of this HashMap (i.e. the Map itself is cloned, but
 its contents are not)
@end deftypemethod
@deftypemethod HashMap {public Set} keySet () 
returns a "set view" of this HashMap's keys
@end deftypemethod
@deftypemethod HashMap {public Collection} values () 
Returns a "collection view" (or "bag view") of this HashMap's values.
@end deftypemethod
@deftypemethod HashMap {public Set} entrySet () 
Returns a "set view" of this HashMap's entries.
@end deftypemethod
@deftypemethod HashSet {public boolean} add (java.lang.Object@w{ }@var{o}) 
adds the given Object to the set if it is not already in the Set,
 returns true if teh element was added, false otherwise
@end deftypemethod
@deftypemethod HashSet {public void} clear () 
empties this Set of all elements; this is a fast operation [O(1)]
@end deftypemethod
@deftypemethod HashSet {public Object} clone () 
returns a shallow copy of this Set (the Set itself is cloned; its 
 elements are not)
@end deftypemethod
@deftypemethod HashSet {public boolean} contains (java.lang.Object@w{ }@var{o}) 
returns true if the supplied element is in this Set, false otherwise
@end deftypemethod
@deftypemethod HashSet {public boolean} isEmpty () 
returns true if this set has no elements in it (size() == 0)
@end deftypemethod
@deftypemethod HashSet {public Iterator} iterator () 
returns an Iterator over the elements of this Set; the Iterator allows
 removal of elements
@end deftypemethod
@deftypemethod HashSet {public boolean} remove (java.lang.Object@w{ }@var{o}) 
removes the supplied Object from this Set if it is in the Set; returns
 true if an element was removed, false otherwise
@end deftypemethod
@deftypemethod HashSet {public int} size () 
returns the number of elements in this Set
@end deftypemethod
@deftypemethod Hashtable {public int} size () 
Returns the number of key-value mappings currently in this Map
@end deftypemethod
@deftypemethod Hashtable {public boolean} isEmpty () 
returns true if there are no key-value mappings currently in this Map
@end deftypemethod
@deftypemethod Hashtable {public synchronized Enumeration} keys () 

@end deftypemethod
@deftypemethod Hashtable {public synchronized Enumeration} elements () 

@end deftypemethod
@deftypemethod Hashtable {public synchronized boolean} contains (java.lang.Object@w{ }@var{value}) 
returns true if this Hashtable contains a value <pre>o</pre>,
 such that <pre>o.equals(value)</pre>.

 Note: this is one of the <i>old</i> Hashtable methods which does
 not like null values; it throws NullPointerException if the
 supplied parameter is null.
@end deftypemethod
@deftypemethod Hashtable {public boolean} containsValue (java.lang.Object@w{ }@var{value}) 
returns true if this Hashtable contains a value <pre>o</pre>, such that
 <pre>o.equals(value)</pre>.
@end deftypemethod
@deftypemethod Hashtable {public synchronized boolean} containsKey (java.lang.Object@w{ }@var{key}) 
returns true if the supplied object equals (<pre>equals()</pre>) a key
 in this Hashtable
@end deftypemethod
@deftypemethod Hashtable {public synchronized Object} get (java.lang.Object@w{ }@var{key}) 
return the value in this Hashtable associated with the supplied key, or <pre>null</pre>
 if the key maps to nothing
@end deftypemethod
@deftypemethod Hashtable {public synchronized Object} put (java.lang.Object@w{ }@var{key}, java.lang.Object@w{ }@var{value}) 
puts the supplied value into the Map, mapped by the supplied key
@end deftypemethod
@deftypemethod Hashtable {public synchronized Object} remove (java.lang.Object@w{ }@var{key}) 
removes from the table and returns the value which is mapped by the 
 supplied key; if the key maps to nothing, then the table remains 
 unchanged, and <pre>null</pre> is returned
@end deftypemethod
@deftypemethod Hashtable {public synchronized void} putAll (java.util.Map@w{ }@var{m}) 

@end deftypemethod
@deftypemethod Hashtable {public synchronized void} clear () 

@end deftypemethod
@deftypemethod Hashtable {public synchronized Object} clone () 
returns a shallow clone of this Hashtable (i.e. the Map itself is cloned, 
 but its contents are not)
@end deftypemethod
@deftypemethod Hashtable {public synchronized String} toString () 

@end deftypemethod
@deftypemethod Hashtable {public Set} keySet () 
returns a "set view" of this Hashtable's keys
@end deftypemethod
@deftypemethod Hashtable {public Collection} values () 
Returns a "collection view" (or "bag view") of this Hashtable's values.
@end deftypemethod
@deftypemethod Hashtable {public Set} entrySet () 
Returns a "set view" of this Hashtable's entries.
@end deftypemethod
@deftypemethod Hashtable {public boolean} equals (java.lang.Object@w{ }@var{o}) 
returns true if this Hashtable equals the supplied Object <pre>o</pre>;
 that is:
 <pre>
 if (o instanceof Map)
 and
 o.keySet().equals(keySet())
 and
 for each key in o.keySet(), o.get(key).equals(get(key))
</pre>
@end deftypemethod
@deftypemethod Hashtable {public int} hashCode () 
a Map's hashCode is the sum of the hashCodes of all of its
Map.Entry objects
@end deftypemethod
@deftypemethod Hashtable {protected void} rehash () 
increases the size of the Hashtable and rehashes all keys to new array 
 indices; this is called when the addition of a new value would cause 
 size() > threshold. Note that the existing Entry objects are reused in 
 the new hash table.
@end deftypemethod
@deftypemethod Iterator {public boolean} hasNext () 

@end deftypemethod
@deftypemethod Iterator {public Object} next () 

@end deftypemethod
@deftypemethod Iterator {public void} remove () 

@end deftypemethod
@deftypemethod LinkedList {public Object} getFirst () 

@end deftypemethod
@deftypemethod LinkedList {public Object} getLast () 

@end deftypemethod
@deftypemethod LinkedList {public Object} removeFirst () 

@end deftypemethod
@deftypemethod LinkedList {public Object} removeLast () 

@end deftypemethod
@deftypemethod LinkedList {public void} addFirst (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public void} addLast (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public boolean} contains (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public int} size () 

@end deftypemethod
@deftypemethod LinkedList {public boolean} add (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public boolean} remove (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public boolean} addAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod LinkedList {public boolean} addAll (int@w{ }@var{index}, java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod LinkedList {public void} clear () 

@end deftypemethod
@deftypemethod LinkedList {public Object} get (int@w{ }@var{index}) 

@end deftypemethod
@deftypemethod LinkedList {public Object} set (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public void} add (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public Object} remove (int@w{ }@var{index}) 

@end deftypemethod
@deftypemethod LinkedList {public int} indexOf (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public int} lastIndexOf (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod LinkedList {public ListIterator} listIterator (int@w{ }@var{index}) 
Obtain a ListIterator over this list, starting at a given index. The
 ListIterator returned by this method supports the add, remove and set
 methods.
@end deftypemethod
@deftypemethod LinkedList {public Object} clone () 
Create a shallow copy of this LinkedList.
@end deftypemethod
@deftypemethod LinkedList {public Object} toArray () 

@end deftypemethod
@deftypemethod LinkedList {public Object} toArray (java.lang.Object[]@w{ }@var{array}) 

@end deftypemethod
@deftypemethod ListIterator {public boolean} hasNext () 

@end deftypemethod
@deftypemethod ListIterator {public Object} next () 

@end deftypemethod
@deftypemethod ListIterator {public boolean} hasPrevious () 

@end deftypemethod
@deftypemethod ListIterator {public Object} previous () 

@end deftypemethod
@deftypemethod ListIterator {public int} nextIndex () 

@end deftypemethod
@deftypemethod ListIterator {public int} previousIndex () 

@end deftypemethod
@deftypemethod ListIterator {public void} remove () 

@end deftypemethod
@deftypemethod ListIterator {public void} set (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod ListIterator {public void} add (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod List {public void} add (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 
Insert an element into the list at a given position.
@end deftypemethod
@deftypemethod List {public boolean} add (java.lang.Object@w{ }@var{o}) 
Add an element to the end of the list.
@end deftypemethod
@deftypemethod List {public boolean} addAll (int@w{ }@var{index}, java.util.Collection@w{ }@var{c}) 
Insert the contents of a collection into the list at a given position.
@end deftypemethod
@deftypemethod List {public boolean} addAll (java.util.Collection@w{ }@var{c}) 
Add the contents of a collection to the end of the list.
@end deftypemethod
@deftypemethod List {public void} clear () 
Clear the list, such that a subsequent call to isEmpty() would return
 true.
@end deftypemethod
@deftypemethod List {public boolean} contains (java.lang.Object@w{ }@var{o}) 
Test whether this list contains a given object as one of its elements.
@end deftypemethod
@deftypemethod List {public boolean} containsAll (java.util.Collection@w{ }@var{c}) 
Test whether this list contains every element in a given collection.
@end deftypemethod
@deftypemethod List {public boolean} equals (java.lang.Object@w{ }@var{o}) 
Test whether this list is equal to another object. A List is defined to be
 equal to an object if and only if that object is also a List, and the two
 lists are equal. Two lists l1 and l2 are defined to be equal if and only
 if @code{l1.size() == l2.size()}, and for every integer n between 0
 and @code{l1.size() - 1} inclusive, @code{l1.get(n) == null ?
 l2.get(n) == null : l1.get(n).equals(l2.get(n))}.
@end deftypemethod
@deftypemethod List {public Object} get (int@w{ }@var{index}) 
Get the element at a given index in this list.
@end deftypemethod
@deftypemethod List {public int} hashCode () 
Obtain a hash code for this list. In order to obey the general contract of
 the hashCode method of class Object, this value is calculated as follows:
 <pre>
   hashCode = 1;
   Iterator i = list.iterator();
   while (i.hasNext()) {
     Object obj = i.next();
     hashCode = 31*hashCode + (obj==null ? 0 : obj.hashCode());
   }
 </pre>
 This ensures that the general contract of Object.hashCode() is adhered to.
@end deftypemethod
@deftypemethod List {public int} indexOf (java.lang.Object@w{ }@var{o}) 
Obtain the first index at which a given object is to be found in this
 list.
@end deftypemethod
@deftypemethod List {public boolean} isEmpty () 
Test whether this list is empty, that is, if size() == 0.
@end deftypemethod
@deftypemethod List {public Iterator} iterator () 
Obtain an Iterator over this list.
@end deftypemethod
@deftypemethod List {public int} lastIndexOf (java.lang.Object@w{ }@var{o}) 
Obtain the last index at which a given object is to be found in this
 list.
@end deftypemethod
@deftypemethod List {public ListIterator} listIterator () 
Obtain a ListIterator over this list, starting at the beginning.
@end deftypemethod
@deftypemethod List {public ListIterator} listIterator (int@w{ }@var{index}) 
Obtain a ListIterator over this list, starting at a given position.
@end deftypemethod
@deftypemethod List {public Object} remove (int@w{ }@var{index}) 
Remove the element at a given position in this list.
@end deftypemethod
@deftypemethod List {public boolean} remove (java.lang.Object@w{ }@var{o}) 
Remove the first occurence of an object from this list. That is, remove
 the first element e such that @code{o == null ? e == null :
 o.equals(e)}.
@end deftypemethod
@deftypemethod List {public boolean} removeAll (java.util.Collection@w{ }@var{c}) 
Remove all elements of a given collection from this list. That is, remove
 every element e such that c.contains(e).
@end deftypemethod
@deftypemethod List {public boolean} retainAll (java.util.Collection@w{ }@var{c}) 
Remove all elements of this list that are not contained in a given
 collection. That is, remove every element e such that !c.contains(e).
@end deftypemethod
@deftypemethod List {public Object} set (int@w{ }@var{index}, java.lang.Object@w{ }@var{o}) 
Replace an element of this list with another object.
@end deftypemethod
@deftypemethod List {public int} size () 
Get the number of elements in this list.
@end deftypemethod
@deftypemethod List {public List} subList (int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 
Obtain a List view of a subsection of this list, from fromIndex
 (inclusive) to toIndex (exclusive). The returned list should be modifiable
 if and only if this list is modifiable. Changes to the returned list
 should be reflected in this list. If this list is structurally modified in
 any way other than through the returned list, the result of any subsequent
 operations on the returned list is undefined.
@end deftypemethod
@deftypemethod List {public Object} toArray () 
Copy the current contents of this list into an array.
@end deftypemethod
@deftypemethod List {public Object} toArray (java.lang.Object[]@w{ }@var{a}) 
Copy the current contents of this list into an array. If the array passed
 as an argument has length less than that of this list, an array of the
 same run-time type as a, and length equal to the length of this list, is
 allocated using Reflection. Otherwise, a itself is used. The elements of
 this list are copied into it, and if there is space in the array, the
 following element is set to null. The resultant array is returned.
 Note: The fact that the following element is set to null is only useful
 if it is known that this list does not contain any null elements.
@end deftypemethod
@deftypemethod ListResourceBundle {public final Object} handleGetObject (java.lang.String@w{ }@var{key}) 

@end deftypemethod
@deftypemethod ListResourceBundle {public Enumeration} getKeys () 

@end deftypemethod
@deftypemethod ListResourceBundle {protected abstract Object} getContents () 

@end deftypemethod
@deftypemethod Locale {public Object} clone () 

@end deftypemethod
@deftypemethod Locale {public boolean} equals (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod Locale {public String} getCountry () 

@end deftypemethod
@deftypemethod Locale {public String} getLanguage () 

@end deftypemethod
@deftypemethod Locale {public String} getVariant () 

@end deftypemethod
@deftypemethod Locale {public int} hashCode () 

@end deftypemethod
@deftypemethod Locale {public static Locale} getDefault () 

@end deftypemethod
@deftypemethod Locale {public static void} setDefault (java.util.Locale@w{ }@var{newLocale}) 

@end deftypemethod
@deftypemethod Locale {public String} toString () 

@end deftypemethod
@deftypemethod Map {public void} clear () 

@end deftypemethod
@deftypemethod Map {public boolean} containsKey (java.lang.Object@w{ }@var{key}) 

@end deftypemethod
@deftypemethod Map {public boolean} containsValue (java.lang.Object@w{ }@var{value}) 

@end deftypemethod
@deftypemethod Map {public Set} entrySet () 

@end deftypemethod
@deftypemethod Map {public boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Map {public Object} get (java.lang.Object@w{ }@var{key}) 

@end deftypemethod
@deftypemethod Map {public Object} put (java.lang.Object@w{ }@var{key}, java.lang.Object@w{ }@var{value}) 

@end deftypemethod
@deftypemethod Map {public int} hashCode () 

@end deftypemethod
@deftypemethod Map {public boolean} isEmpty () 

@end deftypemethod
@deftypemethod Map {public Set} keySet () 

@end deftypemethod
@deftypemethod Map {public void} putAll (java.util.Map@w{ }@var{m}) 

@end deftypemethod
@deftypemethod Map {public Object} remove (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Map {public int} size () 

@end deftypemethod
@deftypemethod Map {public Collection} values () 

@end deftypemethod
@deftypemethod Map.Entry {public Object} getKey () 

@end deftypemethod
@deftypemethod Map.Entry {public Object} getValue () 

@end deftypemethod
@deftypemethod Map.Entry {public Object} setValue (java.lang.Object@w{ }@var{value}) 

@end deftypemethod
@deftypemethod Map.Entry {public int} hashCode () 

@end deftypemethod
@deftypemethod Map.Entry {public boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod MissingResourceException {public String} getClassName () 

@end deftypemethod
@deftypemethod MissingResourceException {public String} getKey () 

@end deftypemethod
@deftypemethod Observable {public synchronized void} addObserver (java.util.Observer@w{ }@var{obs}) 

@end deftypemethod
@deftypemethod Observable {protected synchronized void} clearChanged () 

@end deftypemethod
@deftypemethod Observable {public synchronized int} countObservers () 

@end deftypemethod
@deftypemethod Observable {public synchronized void} deleteObserver (java.util.Observer@w{ }@var{obs}) 

@end deftypemethod
@deftypemethod Observable {public synchronized void} deleteObservers () 

@end deftypemethod
@deftypemethod Observable {public synchronized boolean} hasChanged () 

@end deftypemethod
@deftypemethod Observable {public void} notifyObservers () 

@end deftypemethod
@deftypemethod Observable {public void} notifyObservers (java.lang.Object@w{ }@var{arg}) 

@end deftypemethod
@deftypemethod Observable {protected synchronized void} setChanged () 

@end deftypemethod
@deftypemethod Observer {public void} update (java.util.Observable@w{ }@var{observed}, java.lang.Object@w{ }@var{arg}) 

@end deftypemethod
@deftypemethod Properties {public void} load (java.io.InputStream@w{ }@var{inStream}) @*throws IOException
Reads a property list from an input stream.  The stream should
 have the following format: <br>

 An empty line or a line starting with @code{#} or
 @code{!} is ignored.  An backslash (@code{\}) at the
 end of the line makes the line continueing on the next line
 (but make sure there is no whitespace after the backslash).
 Otherwise, each line describes a key/value pair. <br>

 The chars up to the first whitespace, = or : are the key.  You
 can include this caracters in the key, if you precede them with
 a backslash (@code{\}). The key is followed by optional
 whitespaces, optionally one @code{=} or @code{:},
 and optionally some more whitespaces.  The rest of the line is
 the resource belonging to the key. <br>

 Escape sequences @code{\t, \n, \r, \\, \", \', \!, \#, \ }(a
 space), and unicode characters with the
 @code{\}@code{u}xxxx notation are detected, and 
 converted to the corresponding single character. <br>

 <pre>
 # This is a comment
 key     = value
 k\:5      \ a string starting with space and ending with newline\n
 # This is a multiline specification; note that the value contains
 # no white space.
 weekdays: Sunday,Monday,Tuesday,Wednesday,\
           Thursday,Friday,Saturday
 # The safest way to include a space at the end of a value:
 label   = Name:\@code{}u0020
 </pre>
@end deftypemethod
@deftypemethod Properties {public void} save (java.io.OutputStream@w{ }@var{out}, java.lang.String@w{ }@var{header}) 
Calls @code{store(OutputStream out, String header)} and
 ignores the IOException that may be thrown.
@end deftypemethod
@deftypemethod Properties {public void} store (java.io.OutputStream@w{ }@var{out}, java.lang.String@w{ }@var{header}) @*throws IOException
Writes the key/value pairs to the given output stream. <br>

 If header is not null, this method writes a comment containing
 the header as first line to the stream.  The next line (or first
 line if header is null) contains a comment with the current date.
 Afterwards the key/value pairs are written to the stream in the
 following format. <br>

 Each line has the form @code{key = value}.  Newlines,
 Returns and tabs are written as @code{\n,\t,\r} resp.
 The characters @code{\, !, #, =} and @code{:} are
 preceeded by a backslash.  Spaces are preceded with a backslash,
 if and only if they are at the beginning of the key.  Characters
 that are not in the ascii range 33 to 127 are written in the
 @code{\}@code{u}xxxx Form.
@end deftypemethod
@deftypemethod Properties {public Object} setProperty (java.lang.String@w{ }@var{key}, java.lang.String@w{ }@var{value}) 
Adds the given key/value pair to this properties.  This calls
 the hashtable method put.
@end deftypemethod
@deftypemethod Properties {public String} getProperty (java.lang.String@w{ }@var{key}) 
Gets the property with the specified key in this property list.
 If the key is not found, the default property list is searched.
 If the property is not found in default or the default of
 default, null is returned.
@end deftypemethod
@deftypemethod Properties {public String} getProperty (java.lang.String@w{ }@var{key}, java.lang.String@w{ }@var{defaultValue}) 
Gets the property with the specified key in this property list.  If
 the key is not found, the default property list is searched.  If the
 property is not found in default or the default of default, the 
 specified defaultValue is returned.
@end deftypemethod
@deftypemethod Properties {public Enumeration} propertyNames () 
Returns an enumeration of all keys in this property list, including
 the keys in the default property list.
@end deftypemethod
@deftypemethod Properties {public void} list (java.io.PrintStream@w{ }@var{out}) 
Writes the key/value pairs to the given print stream.  They are
 written in the way, described in the method store.
@end deftypemethod
@deftypemethod Properties {public void} list (java.io.PrintWriter@w{ }@var{out}) 
Writes the key/value pairs to the given print writer.  They are
 written in the way, described in the method store.
@end deftypemethod
@deftypemethod PropertyPermission {public boolean} implies (java.security.Permission@w{ }@var{p}) 
Check if this permission implies p.  This returns true iff all of
 the following conditions are true:
 
@itemize @bullet

 
@item
 p is a PropertyPermission 

 
@item
 this.getName() implies p.getName(),  
  e.g. @code{java.*} implies @code{java.home} 

 
@item
 this.getActions is a subset of p.getActions 

 
@end itemize

@end deftypemethod
@deftypemethod PropertyPermission {public String} getActions () 
Returns the action string.  Note that this may differ from the string
 given at the constructor:  The actions are converted to lowercase and
 may be reordered.
@end deftypemethod
@deftypemethod PropertyPermission {public boolean} equals (java.lang.Object@w{ }@var{obj}) 
Check to see whether this object is the same as another
 PropertyPermission object.
@end deftypemethod
@deftypemethod PropertyPermission {public PermissionCollection} newPermissionCollection () 
Returns a permission collection suitable to take
 PropertyPermission objects.
@end deftypemethod
@deftypemethod PropertyResourceBundle {public Enumeration} getKeys () 

@end deftypemethod
@deftypemethod PropertyResourceBundle {public Object} handleGetObject (java.lang.String@w{ }@var{key}) 

@end deftypemethod
@deftypemethod Random {protected synchronized int} next (int@w{ }@var{bits}) 

@end deftypemethod
@deftypemethod Random {public boolean} nextBoolean () 

@end deftypemethod
@deftypemethod Random {public void} nextBytes (byte[]@w{ }@var{buf}) 

@end deftypemethod
@deftypemethod Random {public double} nextDouble () 

@end deftypemethod
@deftypemethod Random {public float} nextFloat () 

@end deftypemethod
@deftypemethod Random {public synchronized double} nextGaussian () 

@end deftypemethod
@deftypemethod Random {public int} nextInt () 

@end deftypemethod
@deftypemethod Random {public int} nextInt (int@w{ }@var{n}) 

@end deftypemethod
@deftypemethod Random {public long} nextLong () 

@end deftypemethod
@deftypemethod Random {public synchronized void} setSeed (long@w{ }@var{seed}) 

@end deftypemethod
@deftypemethod ResourceBundle {public Locale} getLocale () 

@end deftypemethod
@deftypemethod ResourceBundle {public final String} getString (java.lang.String@w{ }@var{key}) @*throws MissingResourceException

@end deftypemethod
@deftypemethod ResourceBundle {public final String} getStringArray (java.lang.String@w{ }@var{key}) @*throws MissingResourceException

@end deftypemethod
@deftypemethod ResourceBundle {public final Object} getObject (java.lang.String@w{ }@var{key}) @*throws MissingResourceException

@end deftypemethod
@deftypemethod ResourceBundle {public static final ResourceBundle} getBundle (java.lang.String@w{ }@var{baseName}) @*throws MissingResourceException

@end deftypemethod
@deftypemethod ResourceBundle {public static final ResourceBundle} getBundle (java.lang.String@w{ }@var{baseName}, java.util.Locale@w{ }@var{locale}) 

@end deftypemethod
@deftypemethod ResourceBundle {public static final ResourceBundle} getBundle (java.lang.String@w{ }@var{baseName}, java.util.Locale@w{ }@var{locale}, java.lang.ClassLoader@w{ }@var{loader}) @*throws MissingResourceException

@end deftypemethod
@deftypemethod ResourceBundle {protected void} setParent (java.util.ResourceBundle@w{ }@var{parent}) 

@end deftypemethod
@deftypemethod ResourceBundle {protected abstract Object} handleGetObject (java.lang.String@w{ }@var{key}) @*throws MissingResourceException

@end deftypemethod
@deftypemethod ResourceBundle {public abstract Enumeration} getKeys () 

@end deftypemethod
@deftypemethod Set {public boolean} add (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Set {public boolean} addAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Set {public void} clear () 

@end deftypemethod
@deftypemethod Set {public boolean} contains (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Set {public boolean} containsAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Set {public boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Set {public int} hashCode () 

@end deftypemethod
@deftypemethod Set {public boolean} isEmpty () 

@end deftypemethod
@deftypemethod Set {public Iterator} iterator () 

@end deftypemethod
@deftypemethod Set {public boolean} remove (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod Set {public boolean} removeAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Set {public boolean} retainAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Set {public int} size () 

@end deftypemethod
@deftypemethod Set {public Object} toArray () 

@end deftypemethod
@deftypemethod SimpleTimeZone {public void} setStartYear (int@w{ }@var{year}) 
Sets the first year, where daylight savings applies.  The daylight
 savings rule never apply for years in the BC era.  Note that this
 is gregorian calendar specific.
@end deftypemethod
@deftypemethod SimpleTimeZone {public void} setStartRule (int@w{ }@var{month}, int@w{ }@var{day}, int@w{ }@var{dayOfWeek}, int@w{ }@var{time}) 
Sets the daylight savings start rule.  You must also set the
 end rule with @code{setEndRule} or the result of
 getOffset is undefined.  For the parameters see the ten-argument
 constructor above.
@end deftypemethod
@deftypemethod SimpleTimeZone {public void} setEndRule (int@w{ }@var{month}, int@w{ }@var{day}, int@w{ }@var{dayOfWeek}, int@w{ }@var{time}) 
Sets the daylight savings end rule.  You must also set the
 start rule with @code{setStartRule} or the result of
 getOffset is undefined. For the parameters see the ten-argument
 constructor above.
@end deftypemethod
@deftypemethod SimpleTimeZone {public int} getOffset (int@w{ }@var{era}, int@w{ }@var{year}, int@w{ }@var{month}, int@w{ }@var{day}, int@w{ }@var{dayOfWeek}, int@w{ }@var{millis}) 
Gets the time zone offset, for current date, modified in case of 
 daylight savings.  This is the offset to add to UTC to get the local
 time.

 In the standard JDK the results given by this method may result in
 inaccurate results at the end of February or the beginning of March.
 To avoid this, you should use Calendar instead:
 <pre>
 offset = cal.get(Calendar.ZONE_OFFSET) + cal.get(Calendar.DST_OFFSET);
 </pre>
 You could also use in

 This version doesn't suffer this inaccuracy.
@end deftypemethod
@deftypemethod SimpleTimeZone {public int} getRawOffset () 
Returns the time zone offset to GMT in milliseconds, ignoring
 day light savings.
@end deftypemethod
@deftypemethod SimpleTimeZone {public void} setRawOffset (int@w{ }@var{rawOffset}) 
Sets the standard time zone offset to GMT.
@end deftypemethod
@deftypemethod SimpleTimeZone {public int} getDSTSavings () 
Gets the daylight savings offset.  This is a positive offset in
 milliseconds with respect to standard time.  Typically this
 is one hour, but for some time zones this may be half an our.
@end deftypemethod
@deftypemethod SimpleTimeZone {public boolean} useDaylightTime () 
Returns if this time zone uses daylight savings time.
@end deftypemethod
@deftypemethod SimpleTimeZone {public boolean} inDaylightTime (java.util.Date@w{ }@var{date}) 
Determines if the given date is in daylight savings time.
@end deftypemethod
@deftypemethod SimpleTimeZone {public synchronized int} hashCode () 
Generates the hashCode for the SimpleDateFormat object.  It is
 the rawOffset, possibly, if useDaylightSavings is true, xored
 with startYear, startMonth, startDayOfWeekInMonth, ..., endTime.
@end deftypemethod
@deftypemethod SimpleTimeZone {public synchronized boolean} equals (java.lang.Object@w{ }@var{o}) 

@end deftypemethod
@deftypemethod SimpleTimeZone {public boolean} hasSameRules (java.util.TimeZone@w{ }@var{other}) 
Test if the other time zone uses the same rule and only
 possibly differs in ID.  This implementation for this particular
 class will return true if the other object is a SimpleTimeZone,
 the raw offsets and useDaylight are identical and if useDaylight
 is true, also the start and end datas are identical.
@end deftypemethod
@deftypemethod SimpleTimeZone {public String} toString () 
Returns a string representation of this SimpleTimeZone object.
@end deftypemethod
@deftypemethod SortedMap {public Comparator} comparator () 

@end deftypemethod
@deftypemethod SortedMap {public Object} firstKey () 

@end deftypemethod
@deftypemethod SortedMap {public SortedMap} headMap (java.lang.Object@w{ }@var{toKey}) 

@end deftypemethod
@deftypemethod SortedMap {public Object} lastKey () 

@end deftypemethod
@deftypemethod SortedMap {public SortedMap} subMap (java.lang.Object@w{ }@var{fromKey}, java.lang.Object@w{ }@var{toKey}) 

@end deftypemethod
@deftypemethod SortedMap {public SortedMap} tailMap (java.lang.Object@w{ }@var{fromKey}) 

@end deftypemethod
@deftypemethod SortedSet {public Comparator} comparator () 

@end deftypemethod
@deftypemethod SortedSet {public Object} first () 

@end deftypemethod
@deftypemethod SortedSet {public SortedSet} headSet (java.lang.Object@w{ }@var{toElement}) 

@end deftypemethod
@deftypemethod SortedSet {public Object} last () 

@end deftypemethod
@deftypemethod SortedSet {public SortedSet} subSet (java.lang.Object@w{ }@var{fromElement}, java.lang.Object@w{ }@var{toElement}) 

@end deftypemethod
@deftypemethod SortedSet {public SortedSet} tailSet (java.lang.Object@w{ }@var{fromElement}) 

@end deftypemethod
@deftypemethod Stack {public boolean} empty () 

@end deftypemethod
@deftypemethod Stack {public synchronized Object} peek () 

@end deftypemethod
@deftypemethod Stack {public synchronized Object} pop () 

@end deftypemethod
@deftypemethod Stack {public Object} push (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod Stack {public synchronized int} search (java.lang.Object@w{ }@var{obj}) 

@end deftypemethod
@deftypemethod StringTokenizer {public int} countTokens () 

@end deftypemethod
@deftypemethod StringTokenizer {public boolean} hasMoreElements () 

@end deftypemethod
@deftypemethod StringTokenizer {public boolean} hasMoreTokens () 

@end deftypemethod
@deftypemethod StringTokenizer {public Object} nextElement () 

@end deftypemethod
@deftypemethod StringTokenizer {public String} nextToken () 

@end deftypemethod
@deftypemethod StringTokenizer {public String} nextToken (java.lang.String@w{ }@var{delims}) 

@end deftypemethod
@deftypemethod Timer {public void} cancel () 
Cancels the execution of the scheduler. If a task is executing it will
 normally finish execution, but no other tasks will be executed and no
 more tasks can be scheduled.
@end deftypemethod
@deftypemethod Timer {public void} schedule (java.util.TimerTask@w{ }@var{task}, java.util.Date@w{ }@var{date}) 
Schedules the task at the specified data for one time execution.
@end deftypemethod
@deftypemethod Timer {public void} schedule (java.util.TimerTask@w{ }@var{task}, java.util.Date@w{ }@var{date}, long@w{ }@var{period}) 
Schedules the task at the specified date and reschedules the task every
 period milliseconds after the last execution of the task finishes until
 this timer or the task is canceled.
@end deftypemethod
@deftypemethod Timer {public void} schedule (java.util.TimerTask@w{ }@var{task}, long@w{ }@var{delay}) 
Schedules the task after the specified delay milliseconds for one time
 execution.
@end deftypemethod
@deftypemethod Timer {public void} schedule (java.util.TimerTask@w{ }@var{task}, long@w{ }@var{delay}, long@w{ }@var{period}) 
Schedules the task after the delay milliseconds and reschedules the
 task every period milliseconds after the last execution of the task
 finishes until this timer or the task is canceled.
@end deftypemethod
@deftypemethod Timer {public void} scheduleAtFixedRate (java.util.TimerTask@w{ }@var{task}, java.util.Date@w{ }@var{date}, long@w{ }@var{period}) 
Schedules the task at the specified date and reschedules the task at a
 fixed rate every period milliseconds until this timer or the task is
 canceled.
@end deftypemethod
@deftypemethod Timer {public void} scheduleAtFixedRate (java.util.TimerTask@w{ }@var{task}, long@w{ }@var{delay}, long@w{ }@var{period}) 
Schedules the task after the delay milliseconds and reschedules the task
 at a fixed rate every period milliseconds until this timer or the task
 is canceled.
@end deftypemethod
@deftypemethod Timer {protected void} finalize () 
Tells the scheduler that the Timer task died
 so there will be no more new tasks scheduled.
@end deftypemethod
@deftypemethod TimerTask {public boolean} cancel () 
Marks the task as canceled and prevents any further execution.
 Returns true if the task was scheduled for any execution in the future
 and this cancel operation prevents that execution from happening.
 


 A task that has been canceled can never be scheduled again.
 


 In this implementation the TimerTask it is possible that the Timer does
 keep a reference to the TimerTask until the first time the TimerTask
 is actually scheduled. But the reference will disappear immediatly when
 cancel is called from within the TimerTask run method.
@end deftypemethod
@deftypemethod TimerTask {public abstract void} run () 
Method that is called when this task is scheduled for execution.
@end deftypemethod
@deftypemethod TimerTask {public long} scheduledExecutionTime () 
Returns the last time this task was scheduled or (when called by the
 task from the run method) the time the current execution of the task
 was scheduled. When the task has not yet run the return value is
 undefined.
 


 Can be used (when the task is scheduled at fixed rate) to see the
 difference between the requested schedule time and the actual time
 that can be found with @code{System.currentTimeMillis()}.
@end deftypemethod
@deftypemethod TimeZone {public abstract int} getOffset (int@w{ }@var{era}, int@w{ }@var{year}, int@w{ }@var{month}, int@w{ }@var{day}, int@w{ }@var{dayOfWeek}, int@w{ }@var{milliseconds}) 
Gets the time zone offset, for current date, modified in case of 
 daylight savings.  This is the offset to add to UTC to get the local
 time.
@end deftypemethod
@deftypemethod TimeZone {public abstract int} getRawOffset () 
Gets the time zone offset, ignoring daylight savings.  This is
 the offset to add to UTC to get the local time.
@end deftypemethod
@deftypemethod TimeZone {public abstract void} setRawOffset (int@w{ }@var{offsetMillis}) 
Sets the time zone offset, ignoring daylight savings.  This is
 the offset to add to UTC to get the local time.
@end deftypemethod
@deftypemethod TimeZone {public String} getID () 
Gets the identifier of this time zone. For instance, PST for
 Pacific Standard Time.
@end deftypemethod
@deftypemethod TimeZone {public void} setID (java.lang.String@w{ }@var{id}) 
Sets the identifier of this time zone. For instance, PST for
 Pacific Standard Time.
@end deftypemethod
@deftypemethod TimeZone {public final String} getDisplayName () 
This method returns a string name of the time zone suitable
 for displaying to the user.  The string returned will be the long
 description of the timezone in the current locale.  The name
 displayed will assume daylight savings time is not in effect.
@end deftypemethod
@deftypemethod TimeZone {public final String} getDisplayName (java.util.Locale@w{ }@var{locale}) 
This method returns a string name of the time zone suitable
 for displaying to the user.  The string returned will be the long
 description of the timezone in the specified locale. The name
 displayed will assume daylight savings time is not in effect.
@end deftypemethod
@deftypemethod TimeZone {public final String} getDisplayName (boolean@w{ }@var{dst}, int@w{ }@var{style}) 
This method returns a string name of the time zone suitable
 for displaying to the user.  The string returned will be of the
 specified type in the current locale.
@end deftypemethod
@deftypemethod TimeZone {public String} getDisplayName (boolean@w{ }@var{dst}, int@w{ }@var{style}, java.util.Locale@w{ }@var{locale}) 
This method returns a string name of the time zone suitable
 for displaying to the user.  The string returned will be of the
 specified type in the specified locale.
@end deftypemethod
@deftypemethod TimeZone {public abstract boolean} useDaylightTime () 
Returns true, if this time zone uses Daylight Savings Time.
@end deftypemethod
@deftypemethod TimeZone {public abstract boolean} inDaylightTime (java.util.Date@w{ }@var{date}) 
Returns true, if the given date is in Daylight Savings Time in this
 time zone.
@end deftypemethod
@deftypemethod TimeZone {public static TimeZone} getTimeZone (java.lang.String@w{ }@var{ID}) 
Gets the TimeZone for the given ID.
@end deftypemethod
@deftypemethod TimeZone {public static String} getAvailableIDs (int@w{ }@var{rawOffset}) 
Gets the available IDs according to the given time zone
 offset.
@end deftypemethod
@deftypemethod TimeZone {public static String} getAvailableIDs () 
Gets all available IDs.
@end deftypemethod
@deftypemethod TimeZone {public static TimeZone} getDefault () 
Returns the time zone under which the host is running.  This
 can be changed with setDefault.
@end deftypemethod
@deftypemethod TimeZone {public static void} setDefault (java.util.TimeZone@w{ }@var{zone}) 

@end deftypemethod
@deftypemethod TimeZone {public boolean} hasSameRules (java.util.TimeZone@w{ }@var{other}) 
Test if the other time zone uses the same rule and only
 possibly differs in ID.  This implementation for this particular
 class will return true if the raw offsets are identical.  Subclasses
 should override this method if they use daylight savings.
@end deftypemethod
@deftypemethod TimeZone {public Object} clone () 
Returns a clone of this object.  I can't imagine, why this is
 useful for a time zone.
@end deftypemethod
@deftypemethod Vector {public synchronized void} copyInto (java.lang.Object[]@w{ }@var{anArray}) 
Copies the contents of a provided array into the Vector.  If the 
 array is too large to fit in the Vector, an ArrayIndexOutOfBoundsException
 is thrown.  Old elements in the Vector are overwritten by the new
 elements
@end deftypemethod
@deftypemethod Vector {public synchronized void} trimToSize () 
Trims the Vector down to size.  If the internal data array is larger
 than the number of Objects its holding, a new array is constructed
 that precisely holds the elements.
@end deftypemethod
@deftypemethod Vector {public synchronized void} ensureCapacity (int@w{ }@var{minCapacity}) 
Ensures that <b>minCapacity</b> elements can fit within this Vector.
 If it cannot hold this many elements, the internal data array is expanded
 in the following manner.  If the current size plus the capacityIncrement
 is sufficient, the internal array is expanded by capacityIncrement.  
 If capacityIncrement is non-positive, the size is doubled.  If 
 neither is sufficient, the internal array is expanded to size minCapacity
@end deftypemethod
@deftypemethod Vector {public synchronized void} setSize (int@w{ }@var{newSize}) 
Explicitly sets the size of the internal data array, copying the 
 old values to the new internal array.  If the new array is smaller
 than the old one, old values that don't fit are lost. If the new size
 is larger than the old one, the vector is padded with null entries.
@end deftypemethod
@deftypemethod Vector {public int} capacity () 
Returns the size of the internal data array (not the amount of elements
 contained in the Vector)
@end deftypemethod
@deftypemethod Vector {public int} size () 
Returns the number of elements stored in this Vector
@end deftypemethod
@deftypemethod Vector {public boolean} isEmpty () 
Returns true if this Vector is empty, false otherwise
@end deftypemethod
@deftypemethod Vector {public synchronized int} indexOf (java.lang.Object@w{ }@var{e}, int@w{ }@var{index}) 
Searches the vector starting at <b>index</b> for object <b>elem</b>
 and returns the index of the first occurence of this Object.  If
 the object is not found, -1 is returned
@end deftypemethod
@deftypemethod Vector {public int} indexOf (java.lang.Object@w{ }@var{elem}) 
Returns the first occurence of <b>elem</b> in the Vector, or -1 if
 <b>elem</b> is not found.
@end deftypemethod
@deftypemethod Vector {public boolean} contains (java.lang.Object@w{ }@var{elem}) 
Returns true if <b>elem</b> is contained in this Vector, false otherwise.
@end deftypemethod
@deftypemethod Vector {public synchronized int} lastIndexOf (java.lang.Object@w{ }@var{e}, int@w{ }@var{index}) 
Returns the index of the first occurence of <b>elem</b>, when searching
 backwards from <b>index</b>.  If the object does not occur in this Vector,
 -1 is returned.
@end deftypemethod
@deftypemethod Vector {public int} lastIndexOf (java.lang.Object@w{ }@var{elem}) 
Returns the last index of <b>elem</b> within this Vector, or -1
 if the object is not within the Vector
@end deftypemethod
@deftypemethod Vector {public synchronized Object} elementAt (int@w{ }@var{index}) 
Returns the Object stored at <b>index</b>.  If index is out of range
 an ArrayIndexOutOfBoundsException is thrown.
@end deftypemethod
@deftypemethod Vector {public synchronized Object} firstElement () 
Returns the first element in the Vector.  If there is no first Object 
 (The vector is empty), a NoSuchElementException is thrown.
@end deftypemethod
@deftypemethod Vector {public synchronized Object} lastElement () 
Returns the last element in the Vector.  If the Vector has no last element
 (The vector is empty), a NoSuchElementException is thrown.
@end deftypemethod
@deftypemethod Vector {public synchronized void} setElementAt (java.lang.Object@w{ }@var{obj}, int@w{ }@var{index}) 
Places <b>obj</b> at <b>index</b> within the Vector.  If <b>index</b>
 refers to an index outside the Vector, an ArrayIndexOutOfBoundsException
 is thrown.
@end deftypemethod
@deftypemethod Vector {public synchronized Object} set (int@w{ }@var{index}, java.lang.Object@w{ }@var{element}) 
Puts <b>element</b> into the Vector at position <b>index</b> and returns
 the Object that previously occupied that position.
@end deftypemethod
@deftypemethod Vector {public synchronized void} removeElementAt (int@w{ }@var{index}) 
Removes the element at <b>index</b>, and shifts all elements at
 positions greater than index to their index - 1.
@end deftypemethod
@deftypemethod Vector {public void} insertElementAt (java.lang.Object@w{ }@var{obj}, int@w{ }@var{index}) 
Inserts a new element into the Vector at <b>index</b>.  Any elements
 at or greater than index are shifted up one position.
@end deftypemethod
@deftypemethod Vector {public synchronized void} addElement (java.lang.Object@w{ }@var{obj}) 
Adds an element to the Vector at the end of the Vector.  If the vector
 cannot hold the element with its present capacity, its size is increased
 based on the same rules followed if ensureCapacity was called with the
 argument currentSize+1.
@end deftypemethod
@deftypemethod Vector {public synchronized boolean} removeElement (java.lang.Object@w{ }@var{obj}) 
Removes the first occurence of the given object from the Vector.
 If such a remove was performed (the object was found), true is returned.
 If there was no such object, false is returned.
@end deftypemethod
@deftypemethod Vector {public synchronized void} removeAllElements () 
Removes all elements from the Vector.  Note that this does not
 resize the internal data array.
@end deftypemethod
@deftypemethod Vector {public synchronized Object} clone () 
Creates a new Vector with the same contents as this one.
@end deftypemethod
@deftypemethod Vector {public synchronized Object} toArray () 
Returns an Object array with the contents of this Vector, in the order
 they are stored within this Vector.  Note that the Object array returned 
 is not the internal data array, and that it holds only the elements 
 within the Vector.  This is similar to creating a new Object[] with the 
 size of this Vector, then calling Vector.copyInto(yourArray).
@end deftypemethod
@deftypemethod Vector {public synchronized Object} toArray (java.lang.Object[]@w{ }@var{array}) 
Returns an array containing the contents of this Vector.  
 If the provided array is large enough, the contents are copied
 into that array, and a null is placed in the position size(). 
 In this manner, you can obtain the size of a Vector by the position
 of the null element.  If the type of the provided array cannot 
 hold the elements, an ArrayStoreException is thrown.
 
 If the provided array is not large enough,
 a new one is created with the contents of the Vector, and no null 
 element.  The new array is of the same runtime type as the provided
 array.
@end deftypemethod
@deftypemethod Vector {public synchronized Object} get (int@w{ }@var{index}) 
Returns the element at position <b>index</b>
@end deftypemethod
@deftypemethod Vector {public boolean} remove (java.lang.Object@w{ }@var{o}) 
Removes the given Object from the Vector.  If it exists, true
 is returned, if not, false is returned.
@end deftypemethod
@deftypemethod Vector {public synchronized boolean} add (java.lang.Object@w{ }@var{o}) 
Adds an object to the Vector.
@end deftypemethod
@deftypemethod Vector {public void} add (int@w{ }@var{index}, java.lang.Object@w{ }@var{element}) 
Adds an object at the specified index.  Elements at or above
 index are shifted up one position.
@end deftypemethod
@deftypemethod Vector {public synchronized Object} remove (int@w{ }@var{index}) 
Removes the element at the specified index, and returns it.
@end deftypemethod
@deftypemethod Vector {public void} clear () 
Clears all elements in the Vector and sets its size to 0
@end deftypemethod
@deftypemethod Vector {public synchronized boolean} containsAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Vector {public synchronized boolean} addAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Vector {public synchronized boolean} removeAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Vector {public synchronized boolean} retainAll (java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Vector {public synchronized boolean} addAll (int@w{ }@var{index}, java.util.Collection@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Vector {public synchronized boolean} equals (java.lang.Object@w{ }@var{c}) 

@end deftypemethod
@deftypemethod Vector {public synchronized int} hashCode () 

@end deftypemethod
@deftypemethod Vector {public synchronized String} toString () 
Returns a string representation of this Vector in the form 
 [element0, element1, ... elementN]
@end deftypemethod
@deftypemethod Vector {public synchronized Enumeration} elements () 
Returns an Enumeration of the elements of this List.
 The Enumeration returned is compatible behavior-wise with
 the 1.1 elements() method, in that it does not check for
 concurrent modification.
@end deftypemethod
@deftypemethod Vector {public List} subList (int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod Vector {protected synchronized void} removeRange (int@w{ }@var{fromIndex}, int@w{ }@var{toIndex}) 

@end deftypemethod
@deftypemethod WeakHashMap {public int} size () 
Returns the size of this hash map.  Note that the size() may shrink
 spontanously, if the some of the keys were only weakly reachable.
@end deftypemethod
@deftypemethod WeakHashMap {public boolean} isEmpty () 
Tells if the map is empty.  Note that the result may change
 spontanously, if all of the keys were only weakly reachable.
@end deftypemethod
@deftypemethod WeakHashMap {public boolean} containsKey (java.lang.Object@w{ }@var{key}) 
Tells if the map contains the given key.  Note that the result
 may change spontanously, if all the key was only weakly
 reachable.
@end deftypemethod
@deftypemethod WeakHashMap {public Object} get (java.lang.Object@w{ }@var{key}) 
Gets the value the key will be mapped to.
@end deftypemethod
@deftypemethod WeakHashMap {public Object} put (java.lang.Object@w{ }@var{key}, java.lang.Object@w{ }@var{value}) 
Adds a new key/value mapping to this map.
@end deftypemethod
@deftypemethod WeakHashMap {public Object} remove (java.lang.Object@w{ }@var{key}) 
Removes the key and the corresponding value from this map.
@end deftypemethod
@deftypemethod WeakHashMap {public Set} entrySet () 
Returns a set representation of the entries in this map.  This
 set will not have strong references to the keys, so they can be
 silently removed.  The returned set has therefore the same
 strange behaviour (shrinking size(), disappearing entries) as
 this weak hash map.
@end deftypemethod
