@deftypemethod Array {public String} getBaseTypeName () @*throws SQLException
This method returns the name of the SQL type of the elements in this
 array.  This name is database specific.
@end deftypemethod
@deftypemethod Array {public int} getBaseType () @*throws SQLException
This method returns the JDBC type identifier of the elements in this
 array.  This will be one of the values defined in the @code{Types}
 class.
@end deftypemethod
@deftypemethod Array {public Object} getArray () @*throws SQLException
This method returns the contents of this array.  This object returned
 will be an array of Java objects of the appropriate types.
@end deftypemethod
@deftypemethod Array {public Object} getArray (java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns the contents of this array.  The specified
 @code{Map} will be used to override selected mappings between
 SQL types and Java classes.
@end deftypemethod
@deftypemethod Array {public Object} getArray (long@w{ }@var{offset}, int@w{ }@var{count}) @*throws SQLException
This method returns a portion of this array starting at index
 @code{offset} into the array and continuing for @code{length}
 elements.  Fewer than the requested number of elements will be
 returned if the array does not contain the requested number of elements.
 The object returned will be an array of Java objects of
 the appropriate types.
@end deftypemethod
@deftypemethod Array {public Object} getArray (long@w{ }@var{index}, int@w{ }@var{count}, java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns a portion of this array starting at index
 @code{offset} into the array and continuing for @code{length}
 elements.  Fewer than the requested number of elements will be
 returned if the array does not contain the requested number of elements.
 The object returned will be an array of Java objects.  The specified
 @code{Map} will be used for overriding selected SQL type to
 Java class mappings.
@end deftypemethod
@deftypemethod Array {public ResultSet} getResultSet () @*throws SQLException
This method returns the elements in the array as a @code{ResultSet}.
 Each row of the result set will have two columns.  The first will be
 the index into the array of that row's contents.  The second will be
 the actual value of that array element.
@end deftypemethod
@deftypemethod Array {public ResultSet} getResultSet (java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns the elements in the array as a @code{ResultSet}.
 Each row of the result set will have two columns.  The first will be
 the index into the array of that row's contents.  The second will be
 the actual value of that array element.  The specified @code{Map}
 will be used to override selected default mappings of SQL types to
 Java classes.
@end deftypemethod
@deftypemethod Array {public ResultSet} getResultSet (long@w{ }@var{index}, int@w{ }@var{count}) @*throws SQLException
This method returns a portion of the array as a @code{ResultSet}.
 The returned portion will start at index @code{offset} into the
 array and up to @code{length} elements will be returned.
 


 Each row of the result set will have two columns.  The first will be
 the index into the array of that row's contents.  The second will be
 the actual value of that array element.
@end deftypemethod
@deftypemethod Array {public ResultSet} getResultSet (long@w{ }@var{index}, int@w{ }@var{count}, java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns a portion of the array as a @code{ResultSet}.
 The returned portion will start at index @code{offset} into the
 array and up to @code{length} elements will be returned.
 


 Each row of the result set will have two columns.  The first will be
 the index into the array of that row's contents.  The second will be
 the actual value of that array element.  The specified @code{Map}
 will be used to override selected default mappings of SQL types to
 Java classes.
@end deftypemethod
@deftypemethod BatchUpdateException {public int} getUpdateCounts () 
This method returns the update count information for this error.  If
 not @code{null} this is an array of @code{int}'s that are
 the update accounts for each command that was successfully executed.
 The array elements are in the order that the commands were executed.
@end deftypemethod
@deftypemethod Blob {public long} length () @*throws SQLException
This method returns the number of bytes in the BLOB.
@end deftypemethod
@deftypemethod Blob {public byte} getBytes (long@w{ }@var{offset}, int@w{ }@var{length}) @*throws SQLException
This method returns up to the requested bytes of this BLOB as a 
 @code{byte} array.
@end deftypemethod
@deftypemethod Blob {public InputStream} getBinaryStream () @*throws SQLException
This method returns a stream that will read the bytes of the BLOB.
@end deftypemethod
@deftypemethod Blob {public long} position (byte[]@w{ }@var{pattern}, long@w{ }@var{offset}) @*throws SQLException
This method returns the index into the BLOB at which the first instance
 of the specified bytes occur.  The searching starts at the specified
 index into the BLOB.
@end deftypemethod
@deftypemethod Blob {public long} position (java.sql.Blob@w{ }@var{pattern}, long@w{ }@var{offset}) @*throws SQLException
This method returns the index into the BLOB at which the first instance
 of the specified pattern occurs.  The searching starts at the specified
 index into this BLOB.  The bytes in the specified @code{Blob} are
 used as the search pattern.
@end deftypemethod
@deftypemethod CallableStatement {public boolean} wasNull () @*throws SQLException
This method tests whether the value of the last parameter that was fetched
 was actually a SQL NULL value.
@end deftypemethod
@deftypemethod CallableStatement {public String} getString (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{String}.
@end deftypemethod
@deftypemethod CallableStatement {public Object} getObject (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{Object}.
@end deftypemethod
@deftypemethod CallableStatement {public Object} getObject (int@w{ }@var{index}, java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{Object}.
@end deftypemethod
@deftypemethod CallableStatement {public boolean} getBoolean (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{boolean}.
@end deftypemethod
@deftypemethod CallableStatement {public byte} getByte (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{byte}.
@end deftypemethod
@deftypemethod CallableStatement {public short} getShort (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{short}.
@end deftypemethod
@deftypemethod CallableStatement {public int} getInt (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{int}.
@end deftypemethod
@deftypemethod CallableStatement {public long} getLong (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{long}.
@end deftypemethod
@deftypemethod CallableStatement {public float} getFloat (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{float}.
@end deftypemethod
@deftypemethod CallableStatement {public double} getDouble (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{double}.
@end deftypemethod
@deftypemethod CallableStatement {public BigDecimal} getBigDecimal (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{BigDecimal}.
@end deftypemethod
@deftypemethod CallableStatement {public BigDecimal} getBigDecimal (int@w{ }@var{index}, int@w{ }@var{scale}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{BigDecimal}.
@end deftypemethod
@deftypemethod CallableStatement {public byte} getBytes (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 byte array.
@end deftypemethod
@deftypemethod CallableStatement {public Date} getDate (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{java.sql.Date}.
@end deftypemethod
@deftypemethod CallableStatement {public Date} getDate (int@w{ }@var{index}, java.util.Calendar@w{ }@var{calendar}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{java.sql.Date}.
@end deftypemethod
@deftypemethod CallableStatement {public Time} getTime (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{java.sql.Time}.
@end deftypemethod
@deftypemethod CallableStatement {public Time} getTime (int@w{ }@var{index}, java.util.Calendar@w{ }@var{calendar}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{java.sql.Time}.
@end deftypemethod
@deftypemethod CallableStatement {public Timestamp} getTimestamp (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{java.sql.Timestamp}.
@end deftypemethod
@deftypemethod CallableStatement {public Timestamp} getTimestamp (int@w{ }@var{index}, java.util.Calendar@w{ }@var{calendar}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{java.sql.Timestamp}.
@end deftypemethod
@deftypemethod CallableStatement {public Ref} getRef (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{Ref}.
@end deftypemethod
@deftypemethod CallableStatement {public Blob} getBlob (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{Blob}.
@end deftypemethod
@deftypemethod CallableStatement {public Clob} getClob (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{Clob}.
@end deftypemethod
@deftypemethod CallableStatement {public Array} getArray (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified parameter as a Java
 @code{Array}.
@end deftypemethod
@deftypemethod CallableStatement {public void} registerOutParameter (int@w{ }@var{index}, int@w{ }@var{type}) @*throws SQLException
This method registers the specified parameter as an output parameter
 of the specified SQL type.
@end deftypemethod
@deftypemethod CallableStatement {public void} registerOutParameter (int@w{ }@var{index}, int@w{ }@var{type}, java.lang.String@w{ }@var{name}) @*throws SQLException
This method registers the specified parameter as an output parameter
 of the specified SQL type.
@end deftypemethod
@deftypemethod CallableStatement {public void} registerOutParameter (int@w{ }@var{index}, int@w{ }@var{type}, int@w{ }@var{scale}) @*throws SQLException
This method registers the specified parameter as an output parameter
 of the specified SQL type and scale.
@end deftypemethod
@deftypemethod Clob {public long} length () @*throws SQLException
This method returns the number of characters in the CLOB.
@end deftypemethod
@deftypemethod Clob {public String} getSubString (long@w{ }@var{offset}, int@w{ }@var{length}) @*throws SQLException
This method returns the specified portion of the CLOB as a 
 @code{String}.
@end deftypemethod
@deftypemethod Clob {public InputStream} getAsciiStream () @*throws SQLException
This method returns a byte stream that reads the contents of the
 CLOB as a series of ASCII bytes.
@end deftypemethod
@deftypemethod Clob {public Reader} getCharacterStream () @*throws SQLException
This method returns a character stream that reads the contents of the
 CLOB.
@end deftypemethod
@deftypemethod Clob {public long} position (java.lang.String@w{ }@var{pattern}, long@w{ }@var{offset}) @*throws SQLException
This method returns the index into the CLOB of the first occurrence of
 the specified character pattern (supplied by the caller as a
 @code{String}).  The search begins at the specified index.
@end deftypemethod
@deftypemethod Clob {public long} position (java.sql.Clob@w{ }@var{pattern}, long@w{ }@var{offset}) @*throws SQLException
This method returns the index into the CLOB of the first occurrence of
 the specified character pattern (supplied by the caller as a
 @code{Clob}).  The search begins at the specified index.
@end deftypemethod
@deftypemethod Connection {public Statement} createStatement () @*throws SQLException
This method creates a new SQL statement.  The default result set type
 and concurrency will be used.
@end deftypemethod
@deftypemethod Connection {public Statement} createStatement (int@w{ }@var{resultSetType}, int@w{ }@var{resultSetConcurrency}) @*throws SQLException
This method creates a new SQL statement with the specified type and
 concurrency.  Valid values for these parameters are specified in the
 @code{ResultSet} class.
@end deftypemethod
@deftypemethod Connection {public PreparedStatement} prepareStatement (java.lang.String@w{ }@var{sql}) @*throws SQLException
This method creates a new @code{PreparedStatement} for the specified
 SQL string.  This method is designed for use with parameterized
 statements.  The default result set type and concurrency will be used.
@end deftypemethod
@deftypemethod Connection {public PreparedStatement} prepareStatement (java.lang.String@w{ }@var{sql}, int@w{ }@var{resultSetType}, int@w{ }@var{resultSetConcurrency}) @*throws SQLException
This method creates a new @code{PreparedStatement} for the specified
 SQL string.  This method is designed for use with parameterized
 statements.  The specified result set type and concurrency will be used.
 Valid values for these parameters are specified in the
 @code{ResultSet} class.
@end deftypemethod
@deftypemethod Connection {public CallableStatement} prepareCall (java.lang.String@w{ }@var{sql}) @*throws SQLException
This method creates a new @code{CallableStatement} for the 
 specified SQL string.  Thie method is designed to be used with
 stored procedures.  The default result set type and concurrency
 will be used.
@end deftypemethod
@deftypemethod Connection {public CallableStatement} prepareCall (java.lang.String@w{ }@var{sql}, int@w{ }@var{resultSetType}, int@w{ }@var{resultSetConcurrency}) @*throws SQLException
This method creates a new @code{CallableStatement} for the 
 specified SQL string.  Thie method is designed to be used with
 stored procedures.  The specified result set type and concurrency
 will be used.  Valid values for these parameters are specified in the
 @code{ResultSet} class.
@end deftypemethod
@deftypemethod Connection {public String} nativeSQL (java.lang.String@w{ }@var{sql}) @*throws SQLException
This method converts the specified generic SQL statement into the
 native grammer of the database this object is connected to.
@end deftypemethod
@deftypemethod Connection {public boolean} getAutoCommit () @*throws SQLException
This method tests whether or not auto commit mode is currently enabled.
 In auto commit mode,  every SQL statement is committed its own transaction.
 Otherwise a transaction must be explicitly committed or rolled back.
@end deftypemethod
@deftypemethod Connection {public void} setAutoCommit (boolean@w{ }@var{autoCommit}) @*throws SQLException
This method turns auto commit mode on or off.  In auto commit mode,
 every SQL statement is committed its own transaction.  Otherwise a
 transaction must be explicitly committed or rolled back.
@end deftypemethod
@deftypemethod Connection {public void} commit () @*throws SQLException
This method commits any SQL statements executed on this connection since 
 the last commit or rollback.
@end deftypemethod
@deftypemethod Connection {public void} rollback () @*throws SQLException
This method rolls back any SQL statements executed on this connection
 since the last commit or rollback.
@end deftypemethod
@deftypemethod Connection {public void} close () @*throws SQLException
This method immediately closes this database connection.
@end deftypemethod
@deftypemethod Connection {public boolean} isClosed () @*throws SQLException
This method tests whether or not this connection has been closed.
@end deftypemethod
@deftypemethod Connection {public DatabaseMetaData} getMetaData () @*throws SQLException
This method returns the meta data for this database connection.
@end deftypemethod
@deftypemethod Connection {public boolean} isReadOnly () @*throws SQLException
This method tests whether or not this connection is in read only mode.
@end deftypemethod
@deftypemethod Connection {public void} setReadOnly (boolean@w{ }@var{readOnly}) @*throws SQLException
This method turns read only mode on or off.  It may not be called while
 a transaction is in progress.
@end deftypemethod
@deftypemethod Connection {public String} getCatalog () @*throws SQLException
This method returns the name of the catalog in use by this connection,
 if any.
@end deftypemethod
@deftypemethod Connection {public void} setCatalog (java.lang.String@w{ }@var{catalog}) @*throws SQLException
This method sets the name of the catalog in use by this connection.
 Note that this method does nothing if catalogs are not supported by
 this database.
@end deftypemethod
@deftypemethod Connection {public int} getTransactionIsolation () @*throws SQLException
This method returns the current transaction isolation mode.  This will
 be one of the constants defined in this interface.
@end deftypemethod
@deftypemethod Connection {public void} setTransactionIsolation (int@w{ }@var{level}) @*throws SQLException
This method sets the current transaction isolation mode.  This must
 be one of the constants defined in this interface.
@end deftypemethod
@deftypemethod Connection {public SQLWarning} getWarnings () @*throws SQLException
This method returns the first warning that occurred on this connection,
 if any.  If there were any subsequence warnings, they will be chained
 to the first one.
@end deftypemethod
@deftypemethod Connection {public void} clearWarnings () @*throws SQLException
This method clears all warnings that have occurred on this connection.
@end deftypemethod
@deftypemethod Connection {public Map} getTypeMap () @*throws SQLException
This method returns the mapping of SQL types to Java classes
 currently in use by this connection.  This mapping will have no
 entries unless they have been manually added.
@end deftypemethod
@deftypemethod Connection {public void} setTypeMap (java.util.Map@w{ }@var{map}) @*throws SQLException
This method sets the mapping table for SQL types to Java classes.
 Any entries in this map override the defaults.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} allProceduresAreCallable () @*throws SQLException
This method tests whether or not all the procedures returned by
 the @code{getProcedures} method can be called by this user.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} allTablesAreSelectable () @*throws SQLException
This method tests whether or not all the table returned by the
 @code{getTables} method can be selected by this user.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getURL () @*throws SQLException
This method returns the URL for this database.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getUserName () @*throws SQLException
This method returns the database username for this connection.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} isReadOnly () @*throws SQLException
This method tests whether or not the database is in read only mode.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} nullsAreSortedHigh () @*throws SQLException
This method tests whether or not NULL's sort as high values.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} nullsAreSortedLow () @*throws SQLException
This method tests whether or not NULL's sort as low values.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} nullsAreSortedAtStart () @*throws SQLException
This method test whether or not NULL's are sorted to the beginning
 of the list regardless of ascending or descending sort order.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} nullsAreSortedAtEnd () @*throws SQLException
This method test whether or not NULL's are sorted to the end
 of the list regardless of ascending or descending sort order.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getDatabaseProductName () @*throws SQLException
This method returns the name of the database product.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getDatabaseProductVersion () @*throws SQLException
This method returns the version of the database product.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getDriverName () @*throws SQLException
This method returns the name of the JDBC driver.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getDriverVersion () @*throws SQLException
This method returns the version of the JDBC driver.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getDriverMajorVersion () 
This method returns the major version number of the JDBC driver.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getDriverMinorVersion () 
This method returns the minor version number of the JDBC driver.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} usesLocalFiles () @*throws SQLException
This method tests whether or not the database uses local files to
 store tables.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} usesLocalFilePerTable () @*throws SQLException
This method tests whether or not the database uses a separate file for
 each table.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsMixedCaseIdentifiers () @*throws SQLException
This method tests whether or not the database supports identifiers
 with mixed case.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} storesUpperCaseIdentifiers () @*throws SQLException
This method tests whether or not the database treats mixed case
 identifiers as all upper case.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} storesLowerCaseIdentifiers () @*throws SQLException
This method tests whether or not the database treats mixed case
 identifiers as all lower case.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} storesMixedCaseIdentifiers () @*throws SQLException
This method tests whether or not the database stores mixed case 
 identifers even if it treats them as case insensitive.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsMixedCaseQuotedIdentifiers () @*throws SQLException
This method tests whether or not the database supports quoted identifiers
 with mixed case.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} storesUpperCaseQuotedIdentifiers () @*throws SQLException
This method tests whether or not the database treats mixed case
 quoted identifiers as all upper case.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} storesLowerCaseQuotedIdentifiers () @*throws SQLException
This method tests whether or not the database treats mixed case
 quoted identifiers as all lower case.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} storesMixedCaseQuotedIdentifiers () @*throws SQLException
This method tests whether or not the database stores mixed case 
 quoted identifers even if it treats them as case insensitive.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getIdentifierQuoteString () @*throws SQLException
This metohd returns the quote string for SQL identifiers.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getSQLKeywords () @*throws SQLException
This method returns a comma separated list of all the SQL keywords in
 the database that are not in SQL92.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getNumericFunctions () @*throws SQLException
This method returns a comma separated list of math functions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getStringFunctions () @*throws SQLException
This method returns a comma separated list of string functions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getSystemFunctions () @*throws SQLException
This method returns a comma separated list of of system functions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getTimeDateFunctions () @*throws SQLException
This method returns comma separated list of time/date functions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getSearchStringEscape () @*throws SQLException
This method returns the string used to escape wildcards in search strings.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getExtraNameCharacters () @*throws SQLException
This methods returns non-standard characters that can appear in 
 unquoted identifiers.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsAlterTableWithAddColumn () @*throws SQLException
This method tests whether or not the database supports
 "ALTER TABLE ADD COLUMN"
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsAlterTableWithDropColumn () @*throws SQLException
This method tests whether or not the database supports
 "ALTER TABLE DROP COLUMN"
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsColumnAliasing () @*throws SQLException
This method tests whether or not column aliasing is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} nullPlusNonNullIsNull () @*throws SQLException
This method tests whether the concatenation of a NULL and non-NULL
 value results in a NULL.  This will always be true in fully JDBC compliant
 drivers.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsConvert () @*throws SQLException
Tests whether or not CONVERT is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsConvert (int@w{ }@var{fromType}, int@w{ }@var{toType}) @*throws SQLException
This method tests whether or not CONVERT can be performed between the
 specified types.  The types are contants from @code{Types}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsTableCorrelationNames () @*throws SQLException
This method tests whether or not table correlation names are 
 supported.  This will be always be @code{true} in a fully JDBC
 compliant driver.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsDifferentTableCorrelationNames () @*throws SQLException
This method tests whether correlation names must be different from the
 name of the table.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsExpressionsInOrderBy () @*throws SQLException
This method tests whether or not expressions are allowed in an
 ORDER BY lists.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsOrderByUnrelated () @*throws SQLException
This method tests whether or ORDER BY on a non-selected column is
 allowed.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsGroupBy () @*throws SQLException
This method tests whether or not GROUP BY is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsGroupByUnrelated () @*throws SQLException
This method tests whether GROUP BY on a non-selected column is
 allowed.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsGroupByBeyondSelect () @*throws SQLException
This method tests whether or not a GROUP BY can add columns not in the
 select if it includes all the columns in the select.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsLikeEscapeClause () @*throws SQLException
This method tests whether or not the escape character is supported in
 LIKE expressions.  A fully JDBC compliant driver will always return
 @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsMultipleResultSets () @*throws SQLException
This method tests whether multiple result sets for a single statement are
 supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsMultipleTransactions () @*throws SQLException
This method test whether or not multiple transactions may be open
 at once, as long as they are on different connections.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsNonNullableColumns () @*throws SQLException
This method tests whether or not columns can be defined as NOT NULL.  A
 fully JDBC compliant driver always returns @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsMinimumSQLGrammar () @*throws SQLException
This method tests whether or not the minimum grammer for ODBC is supported.
 A fully JDBC compliant driver will always return @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsCoreSQLGrammar () @*throws SQLException
This method tests whether or not the core grammer for ODBC is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsExtendedSQLGrammar () @*throws SQLException
This method tests whether or not the extended grammer for ODBC is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsANSI92EntryLevelSQL () @*throws SQLException
This method tests whether or not the ANSI92 entry level SQL
 grammar is supported.  A fully JDBC compliant drivers must return
 @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsANSI92IntermediateSQL () @*throws SQLException
This method tests whether or not the ANSI92 intermediate SQL
 grammar is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsANSI92FullSQL () @*throws SQLException
This method tests whether or not the ANSI92 full SQL
 grammar is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsIntegrityEnhancementFacility () @*throws SQLException
This method tests whether or not the SQL integrity enhancement
 facility is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsOuterJoins () @*throws SQLException
This method tests whether or not the database supports outer joins.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsFullOuterJoins () @*throws SQLException
This method tests whether or not the database supports full outer joins.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsLimitedOuterJoins () @*throws SQLException
This method tests whether or not the database supports limited outer joins.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getSchemaTerm () @*throws SQLException
This method returns the vendor's term for "schema".
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getProcedureTerm () @*throws SQLException
This method returns the vendor's term for "procedure".
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getCatalogTerm () @*throws SQLException
This method returns the vendor's term for "catalog".
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} isCatalogAtStart () @*throws SQLException
This method tests whether a catalog name appears at the beginning of
 a fully qualified table name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public String} getCatalogSeparator () @*throws SQLException
This method returns the separator between the catalog name and the
 table name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSchemasInDataManipulation () @*throws SQLException
This method tests whether a catalog name can appear in a data
 manipulation statement.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSchemasInProcedureCalls () @*throws SQLException
This method tests whether a catalog name can appear in a procedure
 call
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSchemasInTableDefinitions () @*throws SQLException
This method tests whether a catalog name can appear in a table definition.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSchemasInIndexDefinitions () @*throws SQLException
This method tests whether a catalog name can appear in an index definition.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSchemasInPrivilegeDefinitions () @*throws SQLException
This method tests whether a catalog name can appear in privilege definitions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsCatalogsInDataManipulation () @*throws SQLException
This method tests whether a catalog name can appear in a data
 manipulation statement.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsCatalogsInProcedureCalls () @*throws SQLException
This method tests whether a catalog name can appear in a procedure
 call
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsCatalogsInTableDefinitions () @*throws SQLException
This method tests whether a catalog name can appear in a table definition.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsCatalogsInIndexDefinitions () @*throws SQLException
This method tests whether a catalog name can appear in an index definition.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsCatalogsInPrivilegeDefinitions () @*throws SQLException
This method tests whether a catalog name can appear in privilege definitions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsPositionedDelete () @*throws SQLException
This method tests whether or not that database supports positioned
 deletes.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsPositionedUpdate () @*throws SQLException
This method tests whether or not that database supports positioned
 updates.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSelectForUpdate () @*throws SQLException
This method tests whether or not SELECT FOR UPDATE is supported by the
 database.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsStoredProcedures () @*throws SQLException
This method tests whether or not stored procedures are supported on
 this database.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSubqueriesInComparisons () @*throws SQLException
This method tests whether or not subqueries are allowed in comparisons.
 A fully JDBC compliant driver will always return @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSubqueriesInExists () @*throws SQLException
This method tests whether or not subqueries are allowed in exists
 expressions.  A fully JDBC compliant driver will always return
 @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSubqueriesInIns () @*throws SQLException
This method tests whether subqueries are allowed in IN statements.
 A fully JDBC compliant driver will always return @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsSubqueriesInQuantifieds () @*throws SQLException
This method tests whether or not subqueries are allowed in quantified
 expressions.  A fully JDBC compliant driver will always return
 @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsCorrelatedSubqueries () @*throws SQLException
This method test whether or not correlated subqueries are allowed. A
 fully JDBC compliant driver will always return @code{true}.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsUnion () @*throws SQLException
This method tests whether or not the UNION statement is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsUnionAll () @*throws SQLException
This method tests whether or not the UNION ALL statement is supported.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsOpenCursorsAcrossCommit () @*throws SQLException
This method tests whether or not the database supports cursors
 remaining open across commits.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsOpenCursorsAcrossRollback () @*throws SQLException
This method tests whether or not the database supports cursors
 remaining open across rollbacks.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsOpenStatementsAcrossCommit () @*throws SQLException
This method tests whether or not the database supports statements
 remaining open across commits.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsOpenStatementsAcrossRollback () @*throws SQLException
This method tests whether or not the database supports statements
 remaining open across rollbacks.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxBinaryLiteralLength () @*throws SQLException
This method returns the number of hex characters allowed in an inline
 binary literal.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxCharLiteralLength () @*throws SQLException
This method returns the maximum length of a character literal.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxColumnNameLength () @*throws SQLException
This method returns the maximum length of a column name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxColumnsInGroupBy () @*throws SQLException
This method returns the maximum number of columns in a GROUP BY statement.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxColumnsInIndex () @*throws SQLException
This method returns the maximum number of columns in an index.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxColumnsInOrderBy () @*throws SQLException
This method returns the maximum number of columns in an ORDER BY statement.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxColumnsInSelect () @*throws SQLException
This method returns the maximum number of columns in a SELECT statement.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxColumnsInTable () @*throws SQLException
This method returns the maximum number of columns in a table.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxConnections () @*throws SQLException
This method returns the maximum number of connections this client
 can have to the database.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxCursorNameLength () @*throws SQLException
This method returns the maximum length of a cursor name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxIndexLength () @*throws SQLException
This method returns the maximum length of an index.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxSchemaNameLength () @*throws SQLException
This method returns the maximum length of a schema name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxProcedureNameLength () @*throws SQLException
This method returns the maximum length of a procedure name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxCatalogNameLength () @*throws SQLException
This method returns the maximum length of a catalog name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxRowSize () @*throws SQLException
This method returns the maximum size of a row in bytes.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} doesMaxRowSizeIncludeBlobs () @*throws SQLException
This method tests whether or not the maximum row size includes BLOB's
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxStatementLength () @*throws SQLException
This method includes the maximum length of a SQL statement.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxStatements () @*throws SQLException
This method returns the maximum number of statements that can be
 active at any time.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxTableNameLength () @*throws SQLException
This method returns the maximum length of a table name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxTablesInSelect () @*throws SQLException
This method returns the maximum number of tables that may be referenced
 in a SELECT statement.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getMaxUserNameLength () @*throws SQLException
This method returns the maximum length of a user name.
@end deftypemethod
@deftypemethod DatabaseMetaData {public int} getDefaultTransactionIsolation () @*throws SQLException
This method returns the default transaction isolation level of the
 database.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsTransactions () @*throws SQLException
This method tests whether or not the database supports transactions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsTransactionIsolationLevel (int@w{ }@var{level}) @*throws SQLException
This method tests whether or not the database supports the specified
 transaction isolation level.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsDataDefinitionAndDataManipulationTransactions () @*throws SQLException
This method tests whether or not DDL and DML statements allowed within 
 the same transaction.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsDataManipulationTransactionsOnly () @*throws SQLException
This method tests whether or not only DML statement are allowed
 inside a transaction.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} dataDefinitionCausesTransactionCommit () @*throws SQLException
This method tests whether or not a DDL statement will cause the
 current transaction to be automatically committed.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} dataDefinitionIgnoredInTransactions () @*throws SQLException
This method tests whether or not DDL statements are ignored in
 transactions.
@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getProcedures (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schemaPattern}, java.lang.String@w{ }@var{namePattern}) @*throws SQLException
This method returns a list of all the stored procedures matching the
 specified pattern in the given schema and catalog.  This is returned
 a @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
PROCEDURE_CAT - The catalog the procedure is in, which may be 
 @code{null}.
 
@item
PROCEDURE_SCHEM - The schema the procedures is in, which may be
 @code{null}.
 
@item
PROCEDURE_NAME - The name of the procedure.
 
@item
Unused
 
@item
Unused
 
@item
Unused
 
@item
REMARKS - A description of the procedure
 
@item
PROCEDURE_TYPE - Indicates the return type of the procedure, which 
 is one of the contstants defined in this class 
 (@code{procedureResultUnknown}, @code{procedureNoResult}, or
 @code{procedureReturnsResult}).
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getProcedureColumns (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schemaPattern}, java.lang.String@w{ }@var{namePattern}, java.lang.String@w{ }@var{columnPattern}) @*throws SQLException
This method returns a list of the parameter and result columns for
 the requested stored procedures.  This is returned in the form of a
 @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
PROCEDURE_CAT - The catalog the procedure is in, which may be 
 @code{null}.
 
@item
PROCEDURE_SCHEM - The schema the procedures is in, which may be
 @code{null}.
 
@item
PROCEDURE_NAME - The name of the procedure.
 
@item
COLUMN_NAME - The name of the column
 
@item
COLUMN_TYPE - The type of the column, which will be one of the
 contants defined in this class (@code{procedureColumnUnknown},
 @code{procedureColumnIn}, @code{procedureColumnInOut},
 @code{procedureColumnOut}, @code{procedureColumnReturn},
 or @code{procedureColumnResult}).
 
@item
DATA_TYPE - The SQL type of the column. This is one of the constants
 defined in @code{Types}.
 
@item
TYPE_NAME - The string name of the data type for this column.
 
@item
PRECISION - The precision of the column.
 
@item
LENGTH - The length of the column in bytes
 
@item
SCALE - The scale of the column.
 
@item
RADIX - The radix of the column.
 
@item
NULLABLE - Whether or not the column is NULLABLE.  This is one of
 the constants defined in this class (@code{procedureNoNulls},
 @code{procedureNullable}, or @code{procedureNullableUnknown})
 
@item
REMARKS - A description of the column.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getTables (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schemaPattern}, java.lang.String@w{ }@var{namePattern}, java.lang.String[]@w{ }@var{types}) @*throws SQLException
This method returns a list of the requested table as a   
 @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
TABLE_CAT - The catalog the table is in, which may be @code{null}.
 
@item
TABLE_SCHEM - The schema the table is in, which may be @code{null}.
 
@item
TABLE_NAME - The name of the table.
 
@item
TABLE_TYPE - A string describing the table type.  This will be one
 of the values returned by the @code{getTableTypes()} method.
 
@item
REMARKS - Comments about the table.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getSchemas () @*throws SQLException
This method returns the list of database schemas as a 
 @code{ResultSet}, with one column - TABLE_SCHEM - that is the
 name of the schema.
@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getCatalogs () @*throws SQLException
This method returns the list of database catalogs as a
 @code{ResultSet} with one column - TABLE_CAT - that is the
 name of the catalog.
@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getTableTypes () @*throws SQLException
This method returns the list of database table types as a
 @code{ResultSet} with one column - TABLE_TYPE - that is the
 name of the table type.
@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getColumns (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schemaPattern}, java.lang.String@w{ }@var{namePattern}, java.lang.String@w{ }@var{columnPattern}) @*throws SQLException
This method returns a list of the tables columns for
 the requested tables.  This is returned in the form of a
 @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
TABLE_CAT - The catalog the table is in, which may be 
 @code{null}.
 
@item
TABLE_SCHEM - The schema the tables is in, which may be
 @code{null}.
 
@item
TABLE_NAME - The name of the table.
 
@item
COLUMN_NAME - The name of the column
 
@item
DATA_TYPE - The SQL type of the column. This is one of the constants
 defined in @code{Types}.
 
@item
TYPE_NAME - The string name of the data type for this column.
 
@item
COLUMN_SIZE - The size of the column.
 
@item
Unused
 
@item
NUM_PREC_RADIX - The radix of the column.
 
@item
NULLABLE - Whether or not the column is NULLABLE.  This is one of
 the constants defined in this class (@code{tableNoNulls},
 @code{tableNullable}, or @code{tableNullableUnknown})
 
@item
REMARKS - A description of the column.
 
@item
COLUMN_DEF - The default value for the column, may be @code{null}.
 
@item
SQL_DATA_TYPE - Unused
 
@item
SQL_DATETIME_SUB - Unused
 
@item
CHAR_OCTET_LENGTH - For character columns, the maximum number of bytes
 in the column.
 
@item
ORDINAL_POSITION - The index of the column in the table.
 
@item
IS_NULLABLE - "NO" means no, "YES" means maybe, and an empty string
 means unknown.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getColumnPrivileges (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}, java.lang.String@w{ }@var{columnPattern}) @*throws SQLException
This method returns the access rights that have been granted to the
 requested columns.  This information is returned as a @code{ResultSet}
 with the following columns:
 


 
@itemize @bullet

 
@item
TABLE_CAT - The catalog the table is in, which may be 
 @code{null}.
 
@item
TABLE_SCHEM - The schema the tables is in, which may be
 @code{null}.
 
@item
TABLE_NAME - The name of the table.
 
@item
COLUMN_NAME - The name of the column.
 
@item
GRANTOR - The entity that granted the access.
 
@item
GRANTEE - The entity granted the access.
 
@item
PRIVILEGE - The name of the privilege granted.
 
@item
IS_GRANTABLE - "YES" if the grantee can grant the privilege to
 others, "NO" if not, and @code{null} if unknown.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getTablePrivileges (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}) @*throws SQLException
This method returns the access rights that have been granted to the
 requested tables.  This information is returned as a @code{ResultSet}
 with the following columns:
 


 
@itemize @bullet

 
@item
TABLE_CAT - The catalog the table is in, which may be 
 @code{null}.
 
@item
TABLE_SCHEM - The schema the tables is in, which may be
 @code{null}.
 
@item
TABLE_NAME - The name of the table.
 
@item
GRANTOR - The entity that granted the access.
 
@item
GRANTEE - The entity granted the access.
 
@item
PRIVILEGE - The name of the privilege granted.
 
@item
IS_GRANTABLE - "YES" if the grantee can grant the privilege to
 others, "NO" if not, and @code{null} if unknown.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getBestRowIdentifier (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}, int@w{ }@var{scope}, boolean@w{ }@var{nullable}) @*throws SQLException
This method returns the best set of columns for uniquely identifying
 a row.  It returns this information as a @code{ResultSet} with
 the following columns:
 


 
@itemize @bullet

 
@item
SCOPE - The scope of the results returned.  This is one of the 
 constants defined in this class (@code{bestRowTemporary},
 @code{bestRowTransaction}, or @code{bestRowSession}).
 
@item
COLUMN_NAME - The name of the column.
 
@item
DATA_TYPE - The SQL type of the column. This is one of the constants
 defined in @code{Types}.
 
@item
TYPE_NAME - The string name of the data type for this column.
 
@item
COLUMN_SIZE - The precision of the columns
 
@item
BUFFER_LENGTH - Unused
 
@item
DECIMAL_DIGITS - The scale of the column.
 
@item
PSEUDO_COLUMN - Whether or not the best row identifier is a
 pseudo_column.  This is one of the constants defined in this class 
 (@code{bestRowUnknown}, @code{bestRowNotPseudo}, or
 @code{bestRowPseudo}).
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getVersionColumns (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}) @*throws SQLException
This method returns the set of columns that are automatically updated
 when the row is update. It returns this information as a 
 @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
SCOPE - Unused
 
@item
COLUMN_NAME - The name of the column.
 
@item
DATA_TYPE - The SQL type of the column. This is one of the constants
 defined in @code{Types}.
 
@item
TYPE_NAME - The string name of the data type for this column.
 
@item
COLUMN_SIZE - The precision of the columns
 
@item
BUFFER_LENGTH - Unused
 
@item
DECIMAL_DIGITS - The scale of the column.
 
@item
PSEUDO_COLUMN - Whether or not the best row identifier is a
 pseudo_column.  This is one of the constants defined in this class 
 (@code{versionRowUnknown}, @code{versionRowNotPseudo}, or
 @code{versionRowPseudo}).
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getPrimaryKeys (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}) @*throws SQLException
This method returns a list of a table's primary key columns.  These
 are returned as a @code{ResultSet} with the following columns.
 


 
@itemize @bullet

 
@item
TABLE_CAT - The catalog of the table, which may be @code{null}.
 
@item
TABLE_SCHEM - The schema of the table, which may be @code{null}.
 
@item
TABLE_NAME - The name of the table.
 
@item
COLUMN_NAME - The name of the column.
 
@item
KEY_SEQ - The sequence number of the column within the primary key.
 
@item
PK_NAME - The name of the primary key, which may be @code{null}.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getImportedKeys (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}) @*throws SQLException
This method returns a list of the table's foreign keys.  These are
 returned as a @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
PKTABLE_CAT - The catalog of the table the key was imported from.
 
@item
PKTABLE_SCHEM - The schema of the table the key was imported from.
 
@item
PKTABLE_NAME - The name of the table the key was imported from.
 
@item
PKCOLUMN_NAME - The name of the column that was imported.
 
@item
FKTABLE_CAT - The foreign key catalog name.
 
@item
FKTABLE_SCHEM - The foreign key schema name.
 
@item
FKTABLE_NAME - The foreign key table name.
 
@item
FKCOLUMN_NAME - The foreign key column name.
 
@item
KEY_SEQ - The sequence number of the column within the foreign key.
 
@item
UPDATE_RULE - How the foreign key behaves when the primary key is
 updated.  This is one of the constants defined in this class 
 (@code{importedNoAction}, @code{importedKeyCascade},
 @code{importedKeySetNull}, @code{importedKeySetDefault}, or
 @code{importedKeyRestrict}).
 
@item
DELETE_RULE - How the foreign key behaves when the primary key is
 deleted.  This is one of the constants defined in this class 
 (@code{importedNoAction}, @code{importedKeyCascade},
 @code{importedKeySetNull}, or @code{importedKeySetDefault})
 
@item
FK_NAME - The name of the foreign key.
 
@item
PK_NAME - The name of the primary key.
 
@item
DEFERRABILITY - The deferrability value.  This is one of the
 constants defined in this table (@code{importedKeyInitiallyDeferred},
 @code{importedKeyInitiallyImmediate}, or
 @code{importedKeyNotDeferrable}).
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getExportedKeys (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}) @*throws SQLException
This method returns a list of the table's which use this table's
 primary key as a foreign key.  The information is
 returned as a @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
PKTABLE_CAT - The catalog of the table the key was imported from.
 
@item
PKTABLE_SCHEM - The schema of the table the key was imported from.
 
@item
PKTABLE_NAME - The name of the table the key was imported from.
 
@item
PKCOLUMN_NAME - The name of the column that was imported.
 
@item
FKTABLE_CAT - The foreign key catalog name.
 
@item
FKTABLE_SCHEM - The foreign key schema name.
 
@item
FKTABLE_NAME - The foreign key table name.
 
@item
FKCOLUMN_NAME - The foreign key column name.
 
@item
KEY_SEQ - The sequence number of the column within the foreign key.
 
@item
UPDATE_RULE - How the foreign key behaves when the primary key is
 updated.  This is one of the constants defined in this class 
 (@code{importedNoAction}, @code{importedKeyCascade},
 @code{importedKeySetNull}, @code{importedKeySetDefault}, or
 @code{importedKeyRestrict}).
 
@item
DELETE_RULE - How the foreign key behaves when the primary key is
 deleted.  This is one of the constants defined in this class 
 (@code{importedNoAction}, @code{importedKeyCascade},
 @code{importedKeySetNull}, or @code{importedKeySetDefault})
 
@item
FK_NAME - The name of the foreign key.
 
@item
PK_NAME - The name of the primary key.
 
@item
DEFERRABILITY - The deferrability value.  This is one of the
 constants defined in this table (@code{importedKeyInitiallyDeferred},
 @code{importedKeyInitiallyImmediate}, or
 @code{importedKeyNotDeferrable}).
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getCrossReference (java.lang.String@w{ }@var{primCatalog}, java.lang.String@w{ }@var{primSchema}, java.lang.String@w{ }@var{primTable}, java.lang.String@w{ }@var{forCatalog}, java.lang.String@w{ }@var{forSchema}, java.lang.String@w{ }@var{forTable}) @*throws SQLException
This method returns a description of how one table imports another
 table's primary key as a foreign key.  The information is
 returned as a @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
PKTABLE_CAT - The catalog of the table the key was imported from.
 
@item
PKTABLE_SCHEM - The schema of the table the key was imported from.
 
@item
PKTABLE_NAME - The name of the table the key was imported from.
 
@item
PKCOLUMN_NAME - The name of the column that was imported.
 
@item
FKTABLE_CAT - The foreign key catalog name.
 
@item
FKTABLE_SCHEM - The foreign key schema name.
 
@item
FKTABLE_NAME - The foreign key table name.
 
@item
FKCOLUMN_NAME - The foreign key column name.
 
@item
KEY_SEQ - The sequence number of the column within the foreign key.
 
@item
UPDATE_RULE - How the foreign key behaves when the primary key is
 updated.  This is one of the constants defined in this class 
 (@code{importedNoAction}, @code{importedKeyCascade},
 @code{importedKeySetNull}, @code{importedKeySetDefault}, or
 @code{importedKeyRestrict}).
 
@item
DELETE_RULE - How the foreign key behaves when the primary key is
 deleted.  This is one of the constants defined in this class 
 (@code{importedNoAction}, @code{importedKeyCascade},
 @code{importedKeySetNull}, or @code{importedKeySetDefault})
 
@item
FK_NAME - The name of the foreign key.
 
@item
PK_NAME - The name of the primary key.
 
@item
DEFERRABILITY - The deferrability value.  This is one of the
 constants defined in this table (@code{importedKeyInitiallyDeferred},
 @code{importedKeyInitiallyImmediate}, or
 @code{importedKeyNotDeferrable}).
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getTypeInfo () @*throws SQLException
This method returns a list of the SQL types supported by this
 database.  The information is returned as a @code{ResultSet}
 with the following columns:
 


 
@itemize @bullet

 
@item
TYPE_NAME - The name of the data type.
 
@item
DATA_TYPE - A data type constant from @code{Types} for this
 type.
 
@item
PRECISION - The maximum precision of this type.
 
@item
LITERAL_PREFIX - Prefix value used to quote a literal, which may be
 @code{null}.
 
@item
LITERAL_SUFFIX - Suffix value used to quote a literal, which may be
 @code{null}.
 
@item
CREATE_PARAMS - The parameters used to create the type, which may be
 @code{null}.
 
@item
NULLABLE - Whether or not this type supports NULL values.  This will
 be one of the constants defined in this interface 
 (@code{typeNoNulls}, @code{typeNullable}, or
 @code{typeNullableUnknown}).
 
@item
CASE_SENSITIVE - Whether or not the value is case sensitive.
 
@item
SEARCHABLE - Whether or not "LIKE" expressions are supported in
 WHERE clauses for this type.  This will be one of the constants defined
 in this interface (@code{typePredNone}, @code{typePredChar},
 @code{typePredBasic}, or @code{typeSearchable}).
 
@item
UNSIGNED_ATTRIBUTE - Is the value of this type unsigned.
 
@item
FIXED_PREC_SCALE - Whether or not this type can be used for money.
 
@item
AUTO_INCREMENT - Whether or not this type supports auto-incrementing.
 
@item
LOCAL_TYPE_NAME - A localized name for this data type.
 
@item
MINIMUM_SCALE - The minimum scale supported by this type.
 
@item
MAXIMUM_SCALE - The maximum scale supported by this type.
 
@item
SQL_DATA_TYPE - Unused.
 
@item
SQL_DATETIME_SUB - Unused.
 
@item
NUM_PREC_RADIX - The radix of this data type.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getIndexInfo (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{table}, boolean@w{ }@var{unique}, boolean@w{ }@var{approx}) @*throws SQLException
This method returns information about a tables indices and statistics.
 It is returned as a @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
TABLE_CAT - The catalog of the table, which may be @code{null}.
 
@item
TABLE_SCHEM - The schema of the table, which may be @code{null}.
 
@item
TABLE_NAME - The name of the table.
 
@item
NON_UNIQUE - Are index values non-unique?
 
@item
INDEX_QUALIFIER The index catalog, which may be @code{null}
 
@item
INDEX_NAME - The name of the index.
 
@item
TYPE - The type of index, which will be one of the constants defined
 in this interface (@code{tableIndexStatistic},
 @code{tableIndexClustered}, @code{tableIndexHashed}, or
 @code{tableIndexOther}).
 
@item
ORDINAL_POSITION - The sequence number of this column in the index.
 This will be 0 when the index type is @code{tableIndexStatistic}.
 
@item
COLUMN_NAME - The name of this column in the index.
 
@item
ASC_OR_DESC - "A" for an ascending sort sequence, "D" for a
 descending sort sequence or @code{null} if a sort sequence is not
 supported.
 
@item
CARDINALITY - The number of unique rows in the index, or the number
 of rows in the table if the index type is @code{tableIndexStatistic}.
 
@item
PAGES - The number of pages used for the index, or the number of pages
 in the table if the index type is @code{tableIndexStatistic}.
 
@item
FILTER_CONDITION - The filter condition for this index, which may be
 @code{null}.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsResultSetType (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the datbase supports the specified
 result type.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsResultSetConcurrency (int@w{ }@var{type}, int@w{ }@var{concur}) @*throws SQLException
This method tests whether the specified result set type and result set
 concurrency type are supported by the database.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} ownUpdatesAreVisible (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type sees its
 own updates.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} ownDeletesAreVisible (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type sees its
 own deletes.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} ownInsertsAreVisible (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type sees its
 own inserts.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} othersUpdatesAreVisible (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type sees 
 updates committed by others.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} othersDeletesAreVisible (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type sees 
 deletes committed by others.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} othersInsertsAreVisible (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type sees 
 inserts committed by others.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} updatesAreDetected (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type can detect
 a visible update by calling the @code{rowUpdated} method.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} deletesAreDetected (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type can detect
 a visible delete by calling the @code{rowUpdated} method.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} insertsAreDetected (int@w{ }@var{type}) @*throws SQLException
This method tests whether or not the specified result set type can detect
 a visible insert by calling the @code{rowUpdated} method.
@end deftypemethod
@deftypemethod DatabaseMetaData {public boolean} supportsBatchUpdates () @*throws SQLException
This method tests whether or not the database supports batch updates.
@end deftypemethod
@deftypemethod DatabaseMetaData {public ResultSet} getUDTs (java.lang.String@w{ }@var{catalog}, java.lang.String@w{ }@var{schema}, java.lang.String@w{ }@var{typePattern}, int[]@w{ }@var{types}) @*throws SQLException
This method returns the list of user defined data types in use.  These
 are returned as a @code{ResultSet} with the following columns:
 


 
@itemize @bullet

 
@item
TYPE_CAT - The catalog name, which may be @code{null}.
 
@item
TYPE_SCEHM - The schema name, which may be @code{null}.
 
@item
TYPE_NAME - The user defined data type name.
 
@item
CLASS_NAME - The Java class name this type maps to.
 
@item
DATA_TYPE - A type identifer from @code{Types} for this type.
 This will be one of @code{JAVA_OBJECT}, @code{STRUCT}, or
 @code{DISTINCT}.
 
@item
REMARKS - Comments about this data type.
 
@end itemize

@end deftypemethod
@deftypemethod DatabaseMetaData {public Connection} getConnection () @*throws SQLException
This method returns the @code{Connection} object that was used
 to generate the metadata in this object.
@end deftypemethod
@deftypemethod DataTruncation {public int} getIndex () 
This method returns the index of the column or parameter that was
 truncated.
@end deftypemethod
@deftypemethod DataTruncation {public boolean} getParameter () 
This method determines whether or not it was a parameter that was
 truncated.
@end deftypemethod
@deftypemethod DataTruncation {public boolean} getRead () 
This method determines whether or not it was a column that was
 truncated.
@end deftypemethod
@deftypemethod DataTruncation {public int} getDataSize () 
This method returns the original size of the parameter or column that
 was truncated.
@end deftypemethod
@deftypemethod DataTruncation {public int} getTransferSize () 
This method returns the size of the parameter or column after it was
 truncated.
@end deftypemethod
@deftypemethod Date {public static Date} valueOf (java.lang.String@w{ }@var{str}) 
This method returns a new instance of this class by parsing a
 date in JDBC format into a Java date.
@end deftypemethod
@deftypemethod Date {public String} toString () 
This method returns this date in JDBC format.
@end deftypemethod
@deftypemethod Driver {public int} getMajorVersion () 
This method returns the major version number of the driver.
@end deftypemethod
@deftypemethod Driver {public int} getMinorVersion () 
This method returns the minor version number of the driver.
@end deftypemethod
@deftypemethod Driver {public boolean} jdbcCompliant () 
This method tests whether or not the driver is JDBC compliant.  This
 method should only return @code{true} if the driver has been
 certified as JDBC compliant.
@end deftypemethod
@deftypemethod Driver {public DriverPropertyInfo} getPropertyInfo (java.lang.String@w{ }@var{url}, java.util.Properties@w{ }@var{properties}) @*throws SQLException
This method returns an array of possible properties that could be
 used to connect to the specified database.
@end deftypemethod
@deftypemethod Driver {public boolean} acceptsURL (java.lang.String@w{ }@var{url}) @*throws SQLException
This method tests whether or not the driver believes it can connect to
 the specified database.  The driver should only test whether it 
 understands and accepts the URL. It should not necessarily attempt to 
 probe the database for a connection.
@end deftypemethod
@deftypemethod Driver {public Connection} connect (java.lang.String@w{ }@var{url}, java.util.Properties@w{ }@var{properties}) @*throws SQLException
This method connects to the specified database using the connection
 properties supplied.  If the driver does not understand the database
 URL, it should return @code{null} instead of throwing an
 exception since the @code{DriverManager} will probe a driver
 in this manner.
@end deftypemethod
@deftypemethod DriverManager {public static int} getLoginTimeout () 
This method returns the login timeout in use by JDBC drivers systemwide.
@end deftypemethod
@deftypemethod DriverManager {public static void} setLoginTimeout (int@w{ }@var{login_timeout}) 
This method set the login timeout used by JDBC drivers.  This is a
 system-wide parameter that applies to all drivers.
@end deftypemethod
@deftypemethod DriverManager {public static PrintWriter} getLogWriter () 
This method returns the log writer being used by all JDBC drivers.
 This method should be used in place of the deprecated
 @code{getLogStream} method.
@end deftypemethod
@deftypemethod DriverManager {public static void} setLogWriter (java.io.PrintWriter@w{ }@var{log_writer}) 
This method sets the log writer being used by JDBC drivers.  This is a
 system-wide parameter that affects all drivers.  Note that since there
 is no way to retrieve a @code{PrintStream} from a 
 @code{PrintWriter}, this method cannot set the log stream in
 use by JDBC.  Thus any older drivers may not see this setting.
@end deftypemethod
@deftypemethod DriverManager {public static PrintStream} getLogStream () 
This method returns the log stream in use by JDBC.
@end deftypemethod
@deftypemethod DriverManager {public static void} setLogStream (java.io.PrintStream@w{ }@var{log_stream}) 
This method sets the log stream in use by JDBC.
@end deftypemethod
@deftypemethod DriverManager {public static void} println (java.lang.String@w{ }@var{str}) 
This method prints the specified line to the log stream.
@end deftypemethod
@deftypemethod DriverManager {public static void} registerDriver (java.sql.Driver@w{ }@var{driver}) @*throws SQLException
This method registers a new driver with the manager.  This is normally
 called by the driver itself in a static initializer.
@end deftypemethod
@deftypemethod DriverManager {public static void} deregisterDriver (java.sql.Driver@w{ }@var{driver}) @*throws SQLException
This method de-registers a driver from the manager.
@end deftypemethod
@deftypemethod DriverManager {public static Enumeration} getDrivers () 
This method returns a list of all the currently registered JDBC drivers
 that were loaded by the current @code{ClassLoader}.
@end deftypemethod
@deftypemethod DriverManager {public static Driver} getDriver (java.lang.String@w{ }@var{url}) @*throws SQLException
This method returns a driver that can connect to the specified
 JDBC URL string.  This will be selected from among drivers loaded
 at initialization time and those drivers manually loaded by the
 same class loader as the caller.
@end deftypemethod
@deftypemethod DriverManager {public static Connection} getConnection (java.lang.String@w{ }@var{url}) @*throws SQLException
This method attempts to return a connection to the specified
 JDBC URL string.
@end deftypemethod
@deftypemethod DriverManager {public static Connection} getConnection (java.lang.String@w{ }@var{url}, java.lang.String@w{ }@var{user}, java.lang.String@w{ }@var{password}) @*throws SQLException
This method attempts to return a connection to the specified
 JDBC URL string using the specified username and password.
@end deftypemethod
@deftypemethod DriverManager {public static Connection} getConnection (java.lang.String@w{ }@var{url}, java.util.Properties@w{ }@var{properties}) @*throws SQLException
This method attempts to return a connection to the specified
 JDBC URL string using the specified connection properties.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setNull (int@w{ }@var{index}, int@w{ }@var{type}) @*throws SQLException
This method populates the specified parameter with a SQL NULL value
 for the specified type.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setNull (int@w{ }@var{index}, int@w{ }@var{type}, java.lang.String@w{ }@var{name}) @*throws SQLException
This method populates the specified parameter with a SQL NULL value
 for the specified type.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setBoolean (int@w{ }@var{index}, boolean@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{boolean} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setByte (int@w{ }@var{index}, byte@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{byte} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setShort (int@w{ }@var{index}, short@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{short} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setInt (int@w{ }@var{index}, int@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{int} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setLong (int@w{ }@var{index}, long@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{long} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setFloat (int@w{ }@var{index}, float@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{float} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setDouble (int@w{ }@var{index}, double@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{double} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setString (int@w{ }@var{index}, java.lang.String@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{String} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setBytes (int@w{ }@var{index}, byte[]@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{byte} array value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setBigDecimal (int@w{ }@var{index}, java.math.BigDecimal@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{java.math.BigDecimal} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setDate (int@w{ }@var{index}, java.sql.Date@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{java.sql.Date} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setDate (int@w{ }@var{index}, java.sql.Date@w{ }@var{value}, java.util.Calendar@w{ }@var{calendar}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{java.sql.Date} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setTime (int@w{ }@var{index}, java.sql.Time@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{java.sql.Time} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setTime (int@w{ }@var{index}, java.sql.Time@w{ }@var{value}, java.util.Calendar@w{ }@var{calendar}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{java.sql.Time} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setTimestamp (int@w{ }@var{index}, java.sql.Timestamp@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{java.sql.Timestamp} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setTimestamp (int@w{ }@var{index}, java.sql.Timestamp@w{ }@var{value}, java.util.Calendar@w{ }@var{calendar}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{java.sql.Timestamp} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setAsciiStream (int@w{ }@var{index}, java.io.InputStream@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method sets the specified parameter from the given Java
 ASCII @code{InputStream} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setUnicodeStream (int@w{ }@var{index}, java.io.InputStream@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method sets the specified parameter from the given Java
 Unicode UTF-8 @code{InputStream} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setBinaryStream (int@w{ }@var{index}, java.io.InputStream@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method sets the specified parameter from the given Java
 binary @code{InputStream} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setCharacterStream (int@w{ }@var{index}, java.io.Reader@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method sets the specified parameter from the given Java
 character @code{Reader} value.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setRef (int@w{ }@var{index}, java.sql.Ref@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{Ref} value.  The default object type to SQL type mapping
 will be used.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setBlob (int@w{ }@var{index}, java.sql.Blob@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{Blob} value.  The default object type to SQL type mapping
 will be used.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setClob (int@w{ }@var{index}, java.sql.Clob@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{Clob} value.  The default object type to SQL type mapping
 will be used.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setArray (int@w{ }@var{index}, java.sql.Array@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{Array} value.  The default object type to SQL type mapping
 will be used.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setObject (int@w{ }@var{index}, java.lang.Object@w{ }@var{value}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{Object} value.  The default object type to SQL type mapping
 will be used.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setObject (int@w{ }@var{index}, java.lang.Object@w{ }@var{value}, int@w{ }@var{type}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{Object} value.  The specified SQL object type will be used.
@end deftypemethod
@deftypemethod PreparedStatement {public void} setObject (int@w{ }@var{index}, java.lang.Object@w{ }@var{value}, int@w{ }@var{type}, int@w{ }@var{scale}) @*throws SQLException
This method sets the specified parameter from the given Java
 @code{Object} value.  The specified SQL object type will be used.
@end deftypemethod
@deftypemethod PreparedStatement {public void} addBatch () @*throws SQLException
This method adds a set of parameters to the batch for JDBC 2.0.
@end deftypemethod
@deftypemethod PreparedStatement {public void} clearParameters () @*throws SQLException
This method clears all of the input parameter that have been
 set on this statement.
@end deftypemethod
@deftypemethod PreparedStatement {public ResultSetMetaData} getMetaData () @*throws SQLException
This method returns meta data for the result set from this statement.
@end deftypemethod
@deftypemethod PreparedStatement {public boolean} execute () @*throws SQLException
This method executes a prepared SQL query.
 Some prepared statements return multiple results; the execute method
 handles these complex statements as well as the simpler form of
 statements handled by executeQuery and executeUpdate.
@end deftypemethod
@deftypemethod PreparedStatement {public ResultSet} executeQuery () @*throws SQLException
This method executes a prepared SQL query and returns its ResultSet.
@end deftypemethod
@deftypemethod PreparedStatement {public int} executeUpdate () @*throws SQLException
This method executes an SQL INSERT, UPDATE or DELETE statement.  SQL
 statements that return nothing such as SQL DDL statements can be executed.
@end deftypemethod
@deftypemethod Ref {public String} getBaseTypeName () @*throws SQLException
This method returns the fully qualified name of the SQL structured
 type of the referenced item.
@end deftypemethod
@deftypemethod ResultSet {public boolean} next () @*throws SQLException
This method advances to the next row in the result set.  Any streams
 open on the current row are closed automatically.
@end deftypemethod
@deftypemethod ResultSet {public boolean} previous () @*throws SQLException
This method moves the current position to the previous row in the
 result set.
@end deftypemethod
@deftypemethod ResultSet {public void} close () @*throws SQLException
This method closes the result set and frees any associated resources.
@end deftypemethod
@deftypemethod ResultSet {public boolean} wasNull () @*throws SQLException
This method tests whether the value of the last column that was fetched
 was actually a SQL NULL value.
@end deftypemethod
@deftypemethod ResultSet {public String} getString (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{String}.
@end deftypemethod
@deftypemethod ResultSet {public Object} getObject (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{Object}.
@end deftypemethod
@deftypemethod ResultSet {public boolean} getBoolean (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{boolean}.
@end deftypemethod
@deftypemethod ResultSet {public byte} getByte (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{byte}.
@end deftypemethod
@deftypemethod ResultSet {public short} getShort (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{short}.
@end deftypemethod
@deftypemethod ResultSet {public int} getInt (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{int}.
@end deftypemethod
@deftypemethod ResultSet {public long} getLong (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{long}.
@end deftypemethod
@deftypemethod ResultSet {public float} getFloat (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{float}.
@end deftypemethod
@deftypemethod ResultSet {public double} getDouble (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{double}.
@end deftypemethod
@deftypemethod ResultSet {public BigDecimal} getBigDecimal (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{BigDecimal}.
@end deftypemethod
@deftypemethod ResultSet {public BigDecimal} getBigDecimal (int@w{ }@var{index}, int@w{ }@var{scale}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{BigDecimal}.
@end deftypemethod
@deftypemethod ResultSet {public byte} getBytes (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 byte array.
@end deftypemethod
@deftypemethod ResultSet {public Date} getDate (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{java.sql.Date}.
@end deftypemethod
@deftypemethod ResultSet {public Time} getTime (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{java.sql.Time}.
@end deftypemethod
@deftypemethod ResultSet {public Timestamp} getTimestamp (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{java.sql.Timestamp}.
@end deftypemethod
@deftypemethod ResultSet {public InputStream} getAsciiStream (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as an ASCII 
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public InputStream} getUnicodeStream (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a Unicode UTF-8
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public InputStream} getBinaryStream (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a raw byte
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public Reader} getCharacterStream (int@w{ }@var{index}) @*throws SQLException
This method returns the value of the specified column as a character
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public String} getString (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{String}.
@end deftypemethod
@deftypemethod ResultSet {public Object} getObject (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{Object}.
@end deftypemethod
@deftypemethod ResultSet {public boolean} getBoolean (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{boolean}.
@end deftypemethod
@deftypemethod ResultSet {public byte} getByte (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{byte}.
@end deftypemethod
@deftypemethod ResultSet {public short} getShort (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{short}.
@end deftypemethod
@deftypemethod ResultSet {public int} getInt (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{int}.
@end deftypemethod
@deftypemethod ResultSet {public long} getLong (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{long}.
@end deftypemethod
@deftypemethod ResultSet {public float} getFloat (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{float}.
@end deftypemethod
@deftypemethod ResultSet {public double} getDouble (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{double}.
@end deftypemethod
@deftypemethod ResultSet {public BigDecimal} getBigDecimal (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{BigDecimal}.
@end deftypemethod
@deftypemethod ResultSet {public BigDecimal} getBigDecimal (java.lang.String@w{ }@var{column}, int@w{ }@var{scale}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{BigDecimal}.
@end deftypemethod
@deftypemethod ResultSet {public byte} getBytes (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 byte array.
@end deftypemethod
@deftypemethod ResultSet {public Date} getDate (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{java.sql.Date}.
@end deftypemethod
@deftypemethod ResultSet {public Time} getTime (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{java.sql.Time}.
@end deftypemethod
@deftypemethod ResultSet {public Timestamp} getTimestamp (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{java.sql.Timestamp}.
@end deftypemethod
@deftypemethod ResultSet {public InputStream} getAsciiStream (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as an ASCII 
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public InputStream} getUnicodeStream (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a Unicode UTF-8
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public InputStream} getBinaryStream (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a raw byte
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public Reader} getCharacterStream (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the value of the specified column as a character
 stream.  Note that all the data from this stream must be read before
 fetching the value of any other column.  Please also be aware that 
 calling @code{next()} or @code{close()} on this result set
 will close this stream as well.
@end deftypemethod
@deftypemethod ResultSet {public SQLWarning} getWarnings () @*throws SQLException
This method returns the first SQL warning associated with this result
 set.  Any additional warnings will be chained to this one.
@end deftypemethod
@deftypemethod ResultSet {public void} clearWarnings () @*throws SQLException
This method clears all warnings associated with this result set.
@end deftypemethod
@deftypemethod ResultSet {public String} getCursorName () @*throws SQLException
This method returns the name of the database cursor used by this
 result set.
@end deftypemethod
@deftypemethod ResultSet {public ResultSetMetaData} getMetaData () @*throws SQLException
This method returns data about the columns returned as part of the
 result set as a @code{ResultSetMetaData} instance.
@end deftypemethod
@deftypemethod ResultSet {public int} findColumn (java.lang.String@w{ }@var{column}) @*throws SQLException
This method returns the column index of the specified named column.
@end deftypemethod
@deftypemethod ResultSet {public boolean} isBeforeFirst () @*throws SQLException
This method tests whether or not the cursor is before the first row
 in the result set.
@end deftypemethod
@deftypemethod ResultSet {public boolean} isAfterLast () @*throws SQLException
This method tests whether or not the cursor is after the last row
 in the result set.
@end deftypemethod
@deftypemethod ResultSet {public boolean} isFirst () @*throws SQLException
This method tests whether or not the cursor is positioned on the first
 row in the result set.
@end deftypemethod
@deftypemethod ResultSet {public boolean} isLast () @*throws SQLException
This method tests whether or not the cursor is on the last row
 in the result set.
@end deftypemethod
@deftypemethod ResultSet {public void} beforeFirst () @*throws SQLException
This method repositions the cursor to before the first row in the
 result set.
@end deftypemethod
@deftypemethod ResultSet {public void} afterLast () @*throws SQLException
This method repositions the cursor to after the last row in the result
 set.
@end deftypemethod
@deftypemethod ResultSet {public boolean} first () @*throws SQLException
This method repositions the cursor on the first row in the
 result set.
@end deftypemethod
@deftypemethod ResultSet {public boolean} last () @*throws SQLException
This method repositions the cursor on the last row in the result
 set.
@end deftypemethod
@deftypemethod ResultSet {public int} getRow () @*throws SQLException
This method returns the current row number in the cursor.  Numbering
 begins at index 1.
@end deftypemethod
@deftypemethod ResultSet {public boolean} absolute (int@w{ }@var{row}) @*throws SQLException
This method positions the result set to the specified absolute row.
 Positive numbers are row offsets from the beginning of the result
 set (numbering starts from row 1) and negative numbers are row offsets
 from the end of the result set (numbering starts from -1).
@end deftypemethod
@deftypemethod ResultSet {public boolean} relative (int@w{ }@var{row}) @*throws SQLException
This method moves the result set position relative to the current row.
 The offset can be positive or negative.
@end deftypemethod
@deftypemethod ResultSet {public void} setFetchDirection (int@w{ }@var{direction}) @*throws SQLException
This method provides a hint to the driver about which direction the
 result set will be processed in.
@end deftypemethod
@deftypemethod ResultSet {public int} getFetchDirection () @*throws SQLException
This method returns the current fetch direction for this result set.
@end deftypemethod
@deftypemethod ResultSet {public void} setFetchSize (int@w{ }@var{rows}) @*throws SQLException
This method provides a hint to the driver about how many rows at a
 time it should fetch from the database.
@end deftypemethod
@deftypemethod ResultSet {public int} getFetchSize () @*throws SQLException
This method returns the current number of rows that will be fetched 
 from the database at a time.
@end deftypemethod
@deftypemethod ResultSet {public int} getType () @*throws SQLException
This method returns the result set type of this result set.  This will
 be one of the TYPE_* constants defined in this interface.
@end deftypemethod
@deftypemethod ResultSet {public int} getConcurrency () @*throws SQLException
This method returns the concurrency type of this result set.  This will
 be one of the CONCUR_* constants defined in this interface.
@end deftypemethod
@deftypemethod ResultSet {public boolean} rowUpdated () @*throws SQLException
This method tests whether or not the current row in the result set
 has been updated.  Updates must be visible in order of this method to
 detect the update.
@end deftypemethod
@deftypemethod ResultSet {public boolean} rowInserted () @*throws SQLException
This method tests whether or not the current row in the result set
 has been inserted.  Inserts must be visible in order of this method to
 detect the insert.
@end deftypemethod
@deftypemethod ResultSet {public boolean} rowDeleted () @*throws SQLException
This method tests whether or not the current row in the result set
 has been deleted.  Deletes must be visible in order of this method to
 detect the deletion.
@end deftypemethod
@deftypemethod ResultSet {public void} updateNull (int@w{ }@var{index}) @*throws SQLException
This method updates the specified column to have a NULL value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBoolean (int@w{ }@var{index}, boolean@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a boolean value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateByte (int@w{ }@var{index}, byte@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a byte value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateShort (int@w{ }@var{index}, short@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a short value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateInt (int@w{ }@var{index}, int@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have an int value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateLong (int@w{ }@var{index}, long@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a long value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateFloat (int@w{ }@var{index}, float@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a float value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateDouble (int@w{ }@var{index}, double@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a double value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBigDecimal (int@w{ }@var{index}, java.math.BigDecimal@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a BigDecimal value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateString (int@w{ }@var{index}, java.lang.String@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a String value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBytes (int@w{ }@var{index}, byte[]@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a byte array value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateDate (int@w{ }@var{index}, java.sql.Date@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a java.sql.Date value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateTime (int@w{ }@var{index}, java.sql.Time@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a java.sql.Time value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateTimestamp (int@w{ }@var{index}, java.sql.Timestamp@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a java.sql.Timestamp value.  
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateAsciiStream (int@w{ }@var{index}, java.io.InputStream@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method updates the specified column from an ASCII text stream.
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBinaryStream (int@w{ }@var{index}, java.io.InputStream@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method updates the specified column from a binary stream.
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateCharacterStream (int@w{ }@var{index}, java.io.Reader@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method updates the specified column from a character stream.
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateObject (int@w{ }@var{index}, java.lang.Object@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have an Object value.  
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateObject (int@w{ }@var{index}, java.lang.Object@w{ }@var{value}, int@w{ }@var{scale}) @*throws SQLException
This method updates the specified column to have an Object value.  
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateNull (java.lang.String@w{ }@var{name}) @*throws SQLException
This method updates the specified column to have a NULL value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBoolean (java.lang.String@w{ }@var{name}, boolean@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a boolean value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateByte (java.lang.String@w{ }@var{name}, byte@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a byte value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateShort (java.lang.String@w{ }@var{name}, short@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a short value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateInt (java.lang.String@w{ }@var{name}, int@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have an int value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateLong (java.lang.String@w{ }@var{name}, long@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a long value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateFloat (java.lang.String@w{ }@var{name}, float@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a float value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateDouble (java.lang.String@w{ }@var{name}, double@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a double value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBigDecimal (java.lang.String@w{ }@var{name}, java.math.BigDecimal@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a BigDecimal value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateString (java.lang.String@w{ }@var{name}, java.lang.String@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a String value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBytes (java.lang.String@w{ }@var{name}, byte[]@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a byte array value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateDate (java.lang.String@w{ }@var{name}, java.sql.Date@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a java.sql.Date value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateTime (java.lang.String@w{ }@var{name}, java.sql.Time@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a java.sql.Time value.  This
 does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateTimestamp (java.lang.String@w{ }@var{name}, java.sql.Timestamp@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have a java.sql.Timestamp value.  
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateAsciiStream (java.lang.String@w{ }@var{name}, java.io.InputStream@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method updates the specified column from an ASCII text stream.
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateBinaryStream (java.lang.String@w{ }@var{name}, java.io.InputStream@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method updates the specified column from a binary stream.
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateCharacterStream (java.lang.String@w{ }@var{name}, java.io.Reader@w{ }@var{value}, int@w{ }@var{length}) @*throws SQLException
This method updates the specified column from a character stream.
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateObject (java.lang.String@w{ }@var{name}, java.lang.Object@w{ }@var{value}) @*throws SQLException
This method updates the specified column to have an Object value.  
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} updateObject (java.lang.String@w{ }@var{name}, java.lang.Object@w{ }@var{value}, int@w{ }@var{scale}) @*throws SQLException
This method updates the specified column to have an Object value.  
 This does not update the actual database.  @code{updateRow} must be
 called in order to do that.
@end deftypemethod
@deftypemethod ResultSet {public void} insertRow () @*throws SQLException
This method inserts the current row into the database.  The result set
 must be positioned on the insert row in order to call this method
 successfully.
@end deftypemethod
@deftypemethod ResultSet {public void} updateRow () @*throws SQLException
This method updates the current row in the database.
@end deftypemethod
@deftypemethod ResultSet {public void} deleteRow () @*throws SQLException
This method deletes the current row in the database.
@end deftypemethod
@deftypemethod ResultSet {public void} refreshRow () @*throws SQLException
This method refreshes the contents of the current row from the database.
@end deftypemethod
@deftypemethod ResultSet {public void} cancelRowUpdates () @*throws SQLException
This method cancels any changes that have been made to a row.  If 
 the @code{rowUpdate} method has been called, then the changes
 cannot be undone.
@end deftypemethod
@deftypemethod ResultSet {public void} moveToInsertRow () @*throws SQLException
This method positions the result set to the "insert row", which allows
 a new row to be inserted into the database from the result set.
@end deftypemethod
@deftypemethod ResultSet {public void} moveToCurrentRow () @*throws SQLException
This method moves the result set position from the insert row back to
 the current row that was selected prior to moving to the insert row.
@end deftypemethod
@deftypemethod ResultSet {public Statement} getStatement () @*throws SQLException
This method returns a the @code{Statement} that was used to
 produce this result set.
@end deftypemethod
@deftypemethod ResultSet {public Object} getObject (int@w{ }@var{index}, java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{Object} using the specified SQL type to Java type map.
@end deftypemethod
@deftypemethod ResultSet {public Ref} getRef (int@w{ }@var{index}) @*throws SQLException
This method returns a @code{Ref} for the specified column which
 represents the structured type for the column.
@end deftypemethod
@deftypemethod ResultSet {public Blob} getBlob (int@w{ }@var{index}) @*throws SQLException
This method returns the specified column value as a BLOB.
@end deftypemethod
@deftypemethod ResultSet {public Clob} getClob (int@w{ }@var{index}) @*throws SQLException
This method returns the specified column value as a CLOB.
@end deftypemethod
@deftypemethod ResultSet {public Array} getArray (int@w{ }@var{index}) @*throws SQLException
This method returns the specified column value as an @code{Array}.
@end deftypemethod
@deftypemethod ResultSet {public Object} getObject (java.lang.String@w{ }@var{name}, java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns the value of the specified column as a Java
 @code{Object} using the specified SQL type to Java type map.
@end deftypemethod
@deftypemethod ResultSet {public Ref} getRef (java.lang.String@w{ }@var{name}) @*throws SQLException
This method returns a @code{Ref} for the specified column which
 represents the structured type for the column.
@end deftypemethod
@deftypemethod ResultSet {public Blob} getBlob (java.lang.String@w{ }@var{name}) @*throws SQLException
This method returns the specified column value as a BLOB.
@end deftypemethod
@deftypemethod ResultSet {public Clob} getClob (java.lang.String@w{ }@var{name}) @*throws SQLException
This method returns the specified column value as a CLOB.
@end deftypemethod
@deftypemethod ResultSet {public Array} getArray (java.lang.String@w{ }@var{name}) @*throws SQLException
This method returns the specified column value as an @code{Array}.
@end deftypemethod
@deftypemethod ResultSet {public Date} getDate (int@w{ }@var{index}, java.util.Calendar@w{ }@var{cal}) @*throws SQLException
This method returns the specified column value as a 
 @code{java.sql.Date}.  The specified @code{Calendar} is used
 to generate a value for the date if the database does not support
 timezones.
@end deftypemethod
@deftypemethod ResultSet {public Time} getTime (int@w{ }@var{index}, java.util.Calendar@w{ }@var{cal}) @*throws SQLException
This method returns the specified column value as a 
 @code{java.sql.Time}.  The specified @code{Calendar} is used
 to generate a value for the time if the database does not support
 timezones.
@end deftypemethod
@deftypemethod ResultSet {public Timestamp} getTimestamp (int@w{ }@var{index}, java.util.Calendar@w{ }@var{cal}) @*throws SQLException
This method returns the specified column value as a 
 @code{java.sql.Timestamp}.  The specified @code{Calendar} is used
 to generate a value for the timestamp if the database does not support
 timezones.
@end deftypemethod
@deftypemethod ResultSet {public Date} getDate (java.lang.String@w{ }@var{name}, java.util.Calendar@w{ }@var{cal}) @*throws SQLException
This method returns the specified column value as a 
 @code{java.sql.Date}.  The specified @code{Calendar} is used
 to generate a value for the date if the database does not support
 timezones.
@end deftypemethod
@deftypemethod ResultSet {public Time} getTime (java.lang.String@w{ }@var{name}, java.util.Calendar@w{ }@var{cal}) @*throws SQLException
This method returns the specified column value as a 
 @code{java.sql.Time}.  The specified @code{Calendar} is used
 to generate a value for the time if the database does not support
 timezones.
@end deftypemethod
@deftypemethod ResultSet {public Timestamp} getTimestamp (java.lang.String@w{ }@var{name}, java.util.Calendar@w{ }@var{cal}) @*throws SQLException
This method returns the specified column value as a 
 @code{java.sql.Timestamp}.  The specified @code{Calendar} is used
 to generate a value for the timestamp if the database does not support
 timezones.
@end deftypemethod
@deftypemethod ResultSetMetaData {public int} getColumnCount () @*throws SQLException
This method returns the number of columns in the result set.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isAutoIncrement (int@w{ }@var{index}) @*throws SQLException
This method test whether or not the column is an auto-increment column.
 Auto-increment columns are read-only.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isCaseSensitive (int@w{ }@var{index}) @*throws SQLException
This method tests whether or not a column is case sensitive in its values.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isSearchable (int@w{ }@var{index}) @*throws SQLException
This method tests whether not the specified column can be used in 
 a WHERE clause.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isCurrency (int@w{ }@var{index}) @*throws SQLException
This method tests whether or not the column stores a monetary value.
@end deftypemethod
@deftypemethod ResultSetMetaData {public int} isNullable (int@w{ }@var{index}) @*throws SQLException
This method returns a value indicating whether or not the specified
 column may contain a NULL value.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isSigned (int@w{ }@var{index}) @*throws SQLException
This method tests whether or not the value of the specified column
 is signed or unsigned.
@end deftypemethod
@deftypemethod ResultSetMetaData {public int} getColumnDisplaySize (int@w{ }@var{index}) @*throws SQLException
This method returns the maximum number of characters that can be used
 to display a value in this column.
@end deftypemethod
@deftypemethod ResultSetMetaData {public String} getColumnLabel (int@w{ }@var{index}) @*throws SQLException
This method returns a string that should be used as a caption for this
 column for user display purposes.
@end deftypemethod
@deftypemethod ResultSetMetaData {public String} getColumnName (int@w{ }@var{index}) @*throws SQLException
This method returns the name of the specified column.
@end deftypemethod
@deftypemethod ResultSetMetaData {public String} getSchemaName (int@w{ }@var{index}) @*throws SQLException
This method returns the name of the schema that contains the specified
 column.
@end deftypemethod
@deftypemethod ResultSetMetaData {public int} getPrecision (int@w{ }@var{index}) @*throws SQLException
This method returns the precision of the specified column, which is the
 number of decimal digits it contains.
@end deftypemethod
@deftypemethod ResultSetMetaData {public int} getScale (int@w{ }@var{index}) @*throws SQLException
This method returns the scale of the specified column, which is the
 number of digits to the right of the decimal point.
@end deftypemethod
@deftypemethod ResultSetMetaData {public String} getTableName (int@w{ }@var{index}) @*throws SQLException
This method returns the name of the table containing the specified
 column.
@end deftypemethod
@deftypemethod ResultSetMetaData {public String} getCatalogName (int@w{ }@var{index}) @*throws SQLException
This method returns the name of the catalog containing the specified
 column.
@end deftypemethod
@deftypemethod ResultSetMetaData {public int} getColumnType (int@w{ }@var{index}) @*throws SQLException
This method returns the SQL type of the specified column.  This will
 be one of the constants from @code{Types}.
@end deftypemethod
@deftypemethod ResultSetMetaData {public String} getColumnTypeName (int@w{ }@var{index}) @*throws SQLException
This method returns the name of the SQL type for this column.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isReadOnly (int@w{ }@var{index}) @*throws SQLException
This method tests whether or not the specified column is read only.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isWritable (int@w{ }@var{index}) @*throws SQLException
This method tests whether or not the column may be writable.  This
 does not guarantee that a write will be successful.
@end deftypemethod
@deftypemethod ResultSetMetaData {public boolean} isDefinitelyWritable (int@w{ }@var{index}) @*throws SQLException
This method tests whether or not the column is writable.  This
 does guarantee that a write will be successful.
@end deftypemethod
@deftypemethod ResultSetMetaData {public String} getColumnClassName (int@w{ }@var{index}) @*throws SQLException
This method returns the name of the Java class which will be used to
 create objects representing the data in this column.
@end deftypemethod
@deftypemethod SQLData {public String} getSQLTypeName () @*throws SQLException
This method returns the user defined datatype name for this object.
@end deftypemethod
@deftypemethod SQLData {public void} readSQL (java.sql.SQLInput@w{ }@var{stream}, java.lang.String@w{ }@var{name}) @*throws SQLException
This method populates the data in the object from the specified stream.
@end deftypemethod
@deftypemethod SQLData {public void} writeSQL (java.sql.SQLOutput@w{ }@var{stream}) @*throws SQLException
This method writes the data in this object to the specified stream.
@end deftypemethod
@deftypemethod SQLException {public String} getSQLState () 
This method returns the SQLState information associated with this
 error.  The value returned is a @code{String} which is formatted
 using the XOPEN SQL state conventions.
@end deftypemethod
@deftypemethod SQLException {public int} getErrorCode () 
This method returns the vendor specific error code associated with 
 this error.
@end deftypemethod
@deftypemethod SQLException {public SQLException} getNextException () 
This method returns the exception that is chained to this object.
@end deftypemethod
@deftypemethod SQLException {public void} setNextException (java.sql.SQLException@w{ }@var{e}) 
This method adds a new exception to the end of the chain of exceptions
 that are chained to this object.
@end deftypemethod
@deftypemethod SQLInput {public String} readString () @*throws SQLException
This method reads the next item from the stream a Java
 @code{String}.
@end deftypemethod
@deftypemethod SQLInput {public boolean} readBoolean () @*throws SQLException
This method reads the next item from the stream a Java
 @code{boolean}.
@end deftypemethod
@deftypemethod SQLInput {public byte} readByte () @*throws SQLException
This method reads the next item from the stream a Java
 @code{byte}.
@end deftypemethod
@deftypemethod SQLInput {public short} readShort () @*throws SQLException
This method reads the next item from the stream a Java
 @code{short}.
@end deftypemethod
@deftypemethod SQLInput {public int} readInt () @*throws SQLException
This method reads the next item from the stream a Java
 @code{int}.
@end deftypemethod
@deftypemethod SQLInput {public long} readLong () @*throws SQLException
This method reads the next item from the stream a Java
 @code{long}.
@end deftypemethod
@deftypemethod SQLInput {public float} readFloat () @*throws SQLException
This method reads the next item from the stream a Java
 @code{float}.
@end deftypemethod
@deftypemethod SQLInput {public double} readDouble () @*throws SQLException
This method reads the next item from the stream a Java
 @code{double}.
@end deftypemethod
@deftypemethod SQLInput {public BigDecimal} readBigDecimal () @*throws SQLException
This method reads the next item from the stream a Java
 @code{BigDecimal}.
@end deftypemethod
@deftypemethod SQLInput {public byte} readBytes () @*throws SQLException
This method reads the next item from the stream a Java
 byte array
@end deftypemethod
@deftypemethod SQLInput {public Date} readDate () @*throws SQLException
This method reads the next item from the stream a Java
 @code{java.sql.Date}.
@end deftypemethod
@deftypemethod SQLInput {public Time} readTime () @*throws SQLException
This method reads the next item from the stream a Java
 @code{java.sql.Time}.
@end deftypemethod
@deftypemethod SQLInput {public Timestamp} readTimestamp () @*throws SQLException
This method reads the next item from the stream a Java
 @code{java.sql.Timestamp}.
@end deftypemethod
@deftypemethod SQLInput {public InputStream} readAsciiStream () @*throws SQLException
This method reads the next item from the stream a ASCII text
 @code{InputStream}.
@end deftypemethod
@deftypemethod SQLInput {public InputStream} readBinaryStream () @*throws SQLException
This method reads the next item from the stream a binary
 @code{InputStream}.
@end deftypemethod
@deftypemethod SQLInput {public Reader} readCharacterStream () @*throws SQLException
This method reads the next item from the stream a character
 @code{Reader}.
@end deftypemethod
@deftypemethod SQLInput {public Object} readObject () @*throws SQLException
This method reads the next item from the stream a Java
 @code{Object}.
@end deftypemethod
@deftypemethod SQLInput {public Ref} readRef () @*throws SQLException
This method reads the next item from the stream a Java SQL
 @code{Ref}.
@end deftypemethod
@deftypemethod SQLInput {public Blob} readBlob () @*throws SQLException
This method reads the next item from the stream a Java SQL
 @code{Blob}.
@end deftypemethod
@deftypemethod SQLInput {public Clob} readClob () @*throws SQLException
This method reads the next item from the stream a Java SQL
 @code{Clob}.
@end deftypemethod
@deftypemethod SQLInput {public Array} readArray () @*throws SQLException
This method reads the next item from the stream a Java SQL
 @code{Array}.
@end deftypemethod
@deftypemethod SQLInput {public boolean} wasNull () @*throws SQLException
This method tests whether or not the last value read was a SQL
 NULL value.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeString (java.lang.String@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{String}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeBoolean (boolean@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{boolean}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeByte (byte@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{byte}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeShort (short@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{short}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeInt (int@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{int}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeLong (long@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{long}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeFloat (float@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{float}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeDouble (double@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{double}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeBigDecimal (java.math.BigDecimal@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{BigDecimal}
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeBytes (byte[]@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{byte} array
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeDate (java.sql.Date@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{java.sql.Date} 
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeTime (java.sql.Time@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{java.sql.Time} 
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeTimestamp (java.sql.Timestamp@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{java.sql.Timestamp} 
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeCharacterStream (java.io.Reader@w{ }@var{value}) @*throws SQLException
This method writes the specified Java character stream
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeBinaryStream (java.io.InputStream@w{ }@var{value}) @*throws SQLException
This method writes the specified uninterpreted binary byte stream
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeAsciiStream (java.io.InputStream@w{ }@var{value}) @*throws SQLException
This method writes the specified ASCII text stream
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeObject (java.sql.SQLData@w{ }@var{value}) @*throws SQLException
This method writes the specified Java @code{SQLData} object
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeRef (java.sql.Ref@w{ }@var{value}) @*throws SQLException
This method writes the specified Java SQL @code{Ref} object
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeBlob (java.sql.Blob@w{ }@var{value}) @*throws SQLException
This method writes the specified Java SQL @code{Blob} object
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeClob (java.sql.Clob@w{ }@var{value}) @*throws SQLException
This method writes the specified Java SQL @code{Clob} object
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeStruct (java.sql.Struct@w{ }@var{value}) @*throws SQLException
This method writes the specified Java SQL @code{Struct} object
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLOutput {public void} writeArray (java.sql.Array@w{ }@var{value}) @*throws SQLException
This method writes the specified Java SQL @code{Array} object
 to the SQL stream.
@end deftypemethod
@deftypemethod SQLWarning {public SQLWarning} getNextWarning () 
This method returns the exception that is chained to this object.
@end deftypemethod
@deftypemethod SQLWarning {public void} setNextWarning (java.sql.SQLWarning@w{ }@var{e}) 
This method adds a new exception to the end of the chain of exceptions
 that are chained to this object.
@end deftypemethod
@deftypemethod Statement {public ResultSet} executeQuery (java.lang.String@w{ }@var{sql}) @*throws SQLException
This method executes the specified SQL SELECT statement and returns a
 (possibly empty) @code{ResultSet} with the results of the query.
@end deftypemethod
@deftypemethod Statement {public int} executeUpdate (java.lang.String@w{ }@var{sql}) @*throws SQLException
This method executes the specified SQL INSERT, UPDATE, or DELETE statement
 and returns the number of rows affected, which may be 0.
@end deftypemethod
@deftypemethod Statement {public void} close () @*throws SQLException
This method closes the statement and frees any associated resources.
@end deftypemethod
@deftypemethod Statement {public int} getMaxFieldSize () @*throws SQLException
This method returns the maximum length of any column value in bytes.
@end deftypemethod
@deftypemethod Statement {public void} setMaxFieldSize (int@w{ }@var{maxsize}) @*throws SQLException
This method sets the limit for the maximum length of any column in bytes.
@end deftypemethod
@deftypemethod Statement {public int} getMaxRows () @*throws SQLException
This method returns the maximum possible number of rows in a result set.
@end deftypemethod
@deftypemethod Statement {public void} setMaxRows (int@w{ }@var{maxrows}) @*throws SQLException
This method sets the maximum number of rows that can be present in a
 result set.
@end deftypemethod
@deftypemethod Statement {public void} setEscapeProcessing (boolean@w{ }@var{esacpe}) @*throws SQLException
This method sets the local escape processing mode on or off.  The
 default value is on.
@end deftypemethod
@deftypemethod Statement {public int} getQueryTimeout () @*throws SQLException
The method returns the number of seconds a statement may be in process
 before timing out.  A value of 0 means there is no timeout.
@end deftypemethod
@deftypemethod Statement {public void} setQueryTimeout (int@w{ }@var{timeout}) @*throws SQLException
This method sets the number of seconds a statement may be in process
 before timing out.  A value of 0 means there is no timeout.
@end deftypemethod
@deftypemethod Statement {public void} cancel () @*throws SQLException
This method cancels an outstanding statement, if the database supports
 that operation.
@end deftypemethod
@deftypemethod Statement {public SQLWarning} getWarnings () @*throws SQLException
This method returns the first SQL warning attached to this statement.
 Subsequent warnings will be chained to this one.
@end deftypemethod
@deftypemethod Statement {public void} clearWarnings () @*throws SQLException
This method clears any SQL warnings that have been attached to this
 statement.
@end deftypemethod
@deftypemethod Statement {public void} setCursorName (java.lang.String@w{ }@var{name}) @*throws SQLException
This method sets the cursor name that will be used by the result set.
@end deftypemethod
@deftypemethod Statement {public boolean} execute (java.lang.String@w{ }@var{sql}) @*throws SQLException
This method executes an arbitrary SQL statement of any time.  The
 methods @code{getResultSet}, @code{getMoreResults} and
 @code{getUpdateCount} retrieve the results.
@end deftypemethod
@deftypemethod Statement {public ResultSet} getResultSet () @*throws SQLException
This method returns the result set of the SQL statement that was
 executed.  This should be called only once per result set returned.
@end deftypemethod
@deftypemethod Statement {public int} getUpdateCount () @*throws SQLException
This method returns the update count of the SQL statement that was
 executed.  This should be called only once per executed SQL statement.
@end deftypemethod
@deftypemethod Statement {public boolean} getMoreResults () @*throws SQLException
This method advances the result set pointer to the next result set, 
 which can then be retrieved using @code{getResultSet}
@end deftypemethod
@deftypemethod Statement {public int} getFetchDirection () @*throws SQLException
This method returns the current direction that the driver thinks the
 result set will be accessed int.
@end deftypemethod
@deftypemethod Statement {public void} setFetchDirection (int@w{ }@var{direction}) @*throws SQLException
This method informs the driver which direction the result set will
 be accessed in.
@end deftypemethod
@deftypemethod Statement {public int} getFetchSize () @*throws SQLException
This method returns the number of rows the driver believes should be
 fetched from the database at a time.
@end deftypemethod
@deftypemethod Statement {public void} setFetchSize (int@w{ }@var{numrows}) @*throws SQLException
This method informs the driver how many rows it should fetch from the
 database at a time.
@end deftypemethod
@deftypemethod Statement {public int} getResultSetConcurrency () @*throws SQLException
This method returns the concurrency type of the result set for this
 statement. This will be one of the concurrency types defined in
 @code{ResultSet}.
@end deftypemethod
@deftypemethod Statement {public int} getResultSetType () @*throws SQLException
This method returns the result set type for this statement.  This will
 be one of the result set types defined in @code{ResultSet}.
@end deftypemethod
@deftypemethod Statement {public void} addBatch (java.lang.String@w{ }@var{sql}) @*throws SQLException
This method adds a SQL statement to a SQL batch.  A driver is not
 required to implement this method.
@end deftypemethod
@deftypemethod Statement {public void} clearBatch () @*throws SQLException
This method clears out any SQL statements that have been populated in
 the current batch.  A driver is not required to implement this method.
@end deftypemethod
@deftypemethod Statement {public int} executeBatch () @*throws SQLException
This method executes the SQL batch and returns an array of update
 counts - one for each SQL statement in the batch - ordered in the same
 order the statements were added to the batch.  A driver is not required
 to implement this method.
@end deftypemethod
@deftypemethod Statement {public Connection} getConnection () @*throws SQLException
This method returns the @code{Connection} instance that was
 used to create this object.
@end deftypemethod
@deftypemethod Struct {public String} getSQLTypeName () @*throws SQLException
This method returns the name of the SQL structured type for this
 object.
@end deftypemethod
@deftypemethod Struct {public Object} getAttributes () @*throws SQLException
This method returns the attributes of this SQL structured type.
@end deftypemethod
@deftypemethod Struct {public Object} getAttributes (java.util.Map@w{ }@var{map}) @*throws SQLException
This method returns the attributes of this SQL structured type.
 The specified map of type mappings overrides the default mappings.
@end deftypemethod
@deftypemethod Time {public static Time} valueOf (java.lang.String@w{ }@var{str}) 
This method returns a new instance of this class by parsing a
 date in JDBC format into a Java date.
@end deftypemethod
@deftypemethod Time {public String} toString () 
This method returns this date in JDBC format.
@end deftypemethod
@deftypemethod Timestamp {public static Timestamp} valueOf (java.lang.String@w{ }@var{str}) 
This method returns a new instance of this class by parsing a
 date in JDBC format into a Java date.
@end deftypemethod
@deftypemethod Timestamp {public String} toString () 
This method returns this date in JDBC format.
@end deftypemethod
@deftypemethod Timestamp {public int} getNanos () 
This method returns the nanosecond value for this object.
@end deftypemethod
@deftypemethod Timestamp {public void} setNanos (int@w{ }@var{nanos}) 
This method sets the nanosecond value for this object.
@end deftypemethod
@deftypemethod Timestamp {public boolean} before (java.sql.Timestamp@w{ }@var{ts}) 
This methods tests whether this object is earlier than the specified
 object.
@end deftypemethod
@deftypemethod Timestamp {public boolean} after (java.sql.Timestamp@w{ }@var{ts}) 
This methods tests whether this object is later than the specified
 object.
@end deftypemethod
@deftypemethod Timestamp {public boolean} equals (java.lang.Object@w{ }@var{obj}) 
This method these the specified @code{Object} for equality
 against this object.  This will be true if an only if the specified
 object is an instance of @code{Timestamp} and has the same
 time value fields.
@end deftypemethod
@deftypemethod Timestamp {public boolean} equals (java.sql.Timestamp@w{ }@var{ts}) 
This method tests the specified timestamp for equality against this
 object.  This will be true if and only if the specified object is
 not @code{null} and contains all the same time value fields
 as this object.
@end deftypemethod
