2008-08-26  Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>
	
	Fix hbrp issues.

	* haifa-sched.c (sched_emit_insn) : Define.
	* sched-int.h (sched_emit_insn) : Add prototype.
	* config/spu/spu.c (spu_sched_reorder) : Use sched_emit_insn.
	(insert_hbrp_for_ilb_runout) : Put nops between hbr and hbrp insns.

2008-08-19  Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>

	Improved branch hints, safe hints, and scheduling.

	* doc/invoke.texi (-mdual-nops, -mhint-max-nops,
	-mhint-max-distance -msafe-hints) : Document.
	* config/spu/spu.c (spu_flag_var_tracking): New.
	(TARGET_SCHED_INIT_GLOBAL, TARGET_SCHED_INIT,
	TARGET_SCHED_REORDER, TARGET_SCHED_REORDER2,
	TARGET_ASM_FILE_START): Define.
	(TARGET_SCHED_ADJUST_PRIORITY): Remove.
	(STOP_HINT_P, HINTED_P, SCHED_ON_EVEN_P): Define.
	(spu_emit_branch_hint) Add blocks argument.
	(insert_branch_hints, insert_nops) Remove. 
	(pad_bb, insert_hbrp_for_ilb_runout, insert_hbrp, in_spu_reorg,
	uses_ls_unit, spu_sched_init_global, spu_sched_init,
	spu_sched_reorder, asm_file_start) New functions.
	(clock_var, spu_sched_length, pipe0_clock, 
	pipe1_clock, prev_clock_var, prev_priority,
	spu_ls_first, prev_ls_clock) New static variables.
	* config/spu/spu.h (TARGET_DEFAULT): Add MASK_SAFE_HINTS
	* config/spu.md (iprefetch): Add operand, make it clobber MEM.
	(nopn_nv): Add a non-volatile version of nop.
	* config/spu/spu.opt (-mdual-nops, -mhint-max-nops,
	-mhint-max-distance, -msafe-hints): New options.        

2008-08-27  Ben Elliston  <bje@au.ibm.com>

	* gcc/tree.h (check_qualified_type): Use CONST_CAST_TREE as
	needed.
	* gcc/langhooks.c (lhd_tree_dump_type_quals): Likewise.
	* gcc/c-typeck.c (comptypes_internal): Likewise.
	* gcc/cp/typeck.c (cp_type_quals): Likewise.

2008-08-26  Ben Elliston  <bje@au.ibm.com>

	* gcc/config/spu/spu.c (spu_valid_addr_space): Take a
	const_tree argument.

2008-08-26  Ben Elliston  <bje@au.ibm.com>
	    Alan Modra  <amodra@au.ibm.com>

	* gcc/c-decl.c (start_decl): Set DECL_SECTION_NAME to "._ea" for
	__ea variable definitions.
	(grokdeclarator): Allow static and global __ea variable
	definitions.
	* gcc/config/spu/spu.c (TARGET_SECTION_TYPE_FLAGS): Define.
	(spu_section_type_flags): New function.
	(ea_symbol_ref): Convert to for_each_rtx predicate.
	(spu_legitimate_constant_p): Reject __ea symbol refs wrapped in
	const.
	(spu_legitimate_address): Likewise.
	* gcc/config/spu/spu.h (TEXT_SECTION_ASM_OP): Add a tab.
	(DATA_SECTION_ASM_OP): Likewise.
	* gcc/config/spu/spu.opt: Add -mall-ea.
	* gcc/c-typeck.c (build_array_ref): Do not strip qualifiers from
	the array element type.  (PR 33726)

	* gcc/c-common.h (strip_array_types): Move declaration to..
	* gcc/tree.h: ..here.
	(OTHER_ADDR_SPACE_POINTER_TYPE_P,
	GENERIC_ADDR_SPACE_POINTER_TYPE_P, TYPE_QUALS): Invoke
	strip_array_types on TYPE_ADDR_SPACE argument.
	* gcc/c-objc-common.c (c_types_compatible_p): Likewise.
	* gcc/config/spu/spu.h (ASM_OUTPUT_SYMBOL_REF): Likewise.
	* gcc/config/spu/spu.c (ea_symbol_ref): Likewise.
	* gcc/convert.c (convert_to_integer): Likewise.
	* gcc/c-parser.c (c_parser_postfix_expression_after_paren_type): Ditto.
	* gcc/dwarf2out.c (modified_type_die): Likewise.
	* gcc/emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.
	* gcc/varasm (make_decl_rtl): Likewise.
	* gcc/tree.c (build_pointer_type): Likewise.
	(strip_array_types): Move from here ..
	* gcc/c-common.c: .. to here.
	* gcc/testsuite/gcc.target/spu/ea/compile.c: Update test.
	* gcc/testsuite/gcc.target/spu/ea/errors.c: Likewise.
	* gcc/testsuite/gcc.target/spu/cache.c: Likewise.

2008-08-25  Ben Elliston  <bje@au.ibm.com>

	* gcc/fwprop.c (PR_HANDLE_MEM): Remove trailing comma.

2008-08-25  Ulrich Weigand  <uweigand@de.ibm.com>

	* gcc/config/spu/cachemgr.c: Make interrupt safe and respect tag
	mask policy.

2008-08-20  Ben Elliston  <bje@au.ibm.com>

	Backport from FSF mainline:
	2008-08-20  Ben Elliston  <bje@au.ibm.com>

	* c-decl.c: Include targhooks.h.
	(shadow_tag_warned): Include declspecs->address_space.
	(quals_from_declspecs): Encode address space number into quals.
	(grokdeclarator): Warn about duplicate address space qualifiers.
	Issue various diagnostics as specified by N1169.
	(build_null_declspecs): Clear ret->address_space.
	(declspecs_add_addrspace): New function.
	* c-objc-common.c (c_types_compatible_p): Two types in different
	address spaces are not compatible.
	* c-parser.c (enum c_id_kind): Add C_ID_ADDRSPACE.
	(c_lex_one_token): Set token->id_kind to C_ID_ADDRSPACE if the
	token is a recognised address space.
	(c_token_starts_typename): Return true for C_ID_ADDRSPACE.
	(c_token_starts_declspecs): Likewise.
	(c_parser_declspecs): Handle C_ID_ADDRSPACE.
	(c_parser_postfix_expression_after_paren_type): Reject compound
	literals qualified by an address space qualifier.	
	* c-pretty-print.c: Include target.h and target-def.h.
	(pp_c_type_qualifier_list): Print address space if non-zero.
	* c-tree.h (struct c_declspecs): Add address_space field.
	* c-typeck.c (build_binary_op): If an operand is a pointer into
	another address space, make the result of the comparison such a
	pointer also.
	* convert.c: Include target.h.
	(convert_to_pointer): Use targetm.addr_space_pointer_mode to
	calculate the width of a pointer.
	(convert_to_integer): Likewise.
	* dwarf2out.c (modified_type_die): Set the DW_AT_address_class
	attribute to the address space number for pointer and reference
	types, if the type is in a non-generic address space.
	* emit-rtl.c (get_mem_attrs): Add address space parameter.
	(set_mem_attributes_minus_bitpos, set_mem_attrs_from_reg,
	set_mem_alias_set, set_mem_align, set_mem_expr, set_mem_offset,
	set_mem_size, change_address, adjust_address_1, offset_address,
	widen_memory_access): Update all callers.
	(set_mem_addr_space): New function.
	* emit-rtl.h (set_mem_addr_space): Declare.
	* explow.c (memory_address): Only convert memory addresses to
	Pmode if they are not valid pointer modes.
	* expr.c (expand_expr_addr_expr): Do not assume the target mode is
	Pmode.
	(expand_expr_real_1): Handle casts of pointers to/from non-generic
	address spaces.
	* fold-const.c (fit_double_type): Do not assume the type precision
	of a pointer is POINTER_SIZE.
	(fold_convert_const): Return NULL_TREE for non-generic pointers.
	* output.h (default_addr_space_pointer_mode): Declare.
	* print-rtl.c (print_rtx): Output the address space number, if
	non-zero.
	* rtl.h (struct mem_attrs): Add addrspace field.
	(MEM_ADDR_SPACE): New macro.
	* target-def.h (TARGET_ADDR_SPACE_POINTER_MODE): New target hook.
	(TARGET_ADDR_SPACE_NAME): Likewise.
	(TARGET_ADDR_SPACE_NUMBER): Likewise.
	(TARGET_ADDR_SPACE_CONVERSION_RTL): Likewise.
	(TARGET_VALID_ADDR_SPACE): Likewise.
	(TARGET_INITIALIZER): Incorporate the hooks above.
	* target.h (struct gcc_target): Add addr_space_pointer_mode,
	addr_space_name, addr_space_number, addr_space_conversion_rtl,
	valid_addr_space callbacks.
	* targhooks.h (default_addr_space_name): Declare.
	(default_addr_space_number): Likewise.
	(default_addr_space_conversion_rtl): Likewise.
	* targhooks.c (default_addr_space_name): New.
	(default_addr_space_conversion_rtl): Likewise.
	(default_addr_space_number): Likewise.
	* tree-pretty-print.c: Include target.h and target-def.h.
	(dump_generic_node): Output address space information.
	* tree-ssa-loop-ivopts.c (generic_type_for): If the pointer
	belongs to another address space, include that qualification in
	the type for the pointer returned.
	* tree-ssa.c (useless_type_conversion_p_1): Casts between pointers
	in different address spaces are never useless.
	(useless_type_conversion_p): Casts between two generic void
	pointers are useless.
	* tree.c (integer_pow2p): Handle non-generic pointer sizes.
	(tree_log2): Likewise.
	(tree_floor_log2): Likewise.
	(set_type_quals): Set TYPE_ADDR_SPACE.
	(build_pointer_type): Do not assume pointers are ptr_mode.
	* tree.h (OTHER_ADDR_SPACE_POINTER): New macro.
	(GENERIC_ADDR_SPACE_POINTER): Likewise.
	(TYPE_ADDR_SPACE): Likewise.
	(ENCODE_QUAL_ADDR_SPACE): Likewise.
	(DECODE_QUAL_ADDR_SPACE): Likewise.
	(TYPE_QUALS): Encode the address space in the qualifiers.
	(struct tree_type): Add address_space field.
	* varasm.c (make_decl_rtl): Use the address space pointer mode,
	not necessarily Pmode.
	(default_addr_space_pointer_mode): New function.
	* doc/extend.texi (Named Address Spaces): New node.
	* doc/rtl.texi (Special Accessors): Document MEM_ADDR_SPACE.
	* doc/tm.texi (Misc): Document these new target hooks.

	* config.gcc (spu-*-elf*): Add spu_cache.h to extra_headers.
	* config/spu/spu-c.c (spu_cpu_cpp_builtins): Define __EA32__ or
	__EA64__, depending on the ea pointer size.  *
	* config/spu/spu-elf.h (DRIVER_SELF_SPECS): Link the right
	gcc_cache library depending on the -mcache-size and
	-matomic-updates option given.
	(LIB_SPEC): Link gcc_cachemgr library.
	* config/spu/spu.c (struct spu_address_space): New.
	(spu_address_spaces): New table.
	(TARGET_ADDR_SPACE_POINTER_MODE): Define.
	(TARGET_ADDR_SPACE_NUMBER): Likewise.
	(TARGET_ADDR_SPACE_CONVERSION_RTL): Likewise.
	(TARGET_VALID_POINTER_MODE): Likewise.
	(TARGET_VALID_ADDR_SPACE): Likewise.
	(TARGET_ASM_UNALIGNED_DI_OP): Remove.
	(TARGET_ASM_ALIGNED_DI_OP): Define instead.
	(ea_symbol_ref): New.
	(spu_legitimate_constant_p): Reject __ea qualified references.
	(spu_legitimate_address): Keep __ea references until reload.
	(EAmode): Define.
	(cache_fetch, cache_fetch_dirty, ea_alias_set): New variables.
	(ea_load_store): New function.
	(ea_load_store_inline): Likewise.
	(expand_ea_mem): Likewise.
	(spu_expand_mov): Handle __ea memory operands.
	(spu_ea_pointer_mode): New function.
	(spu_valid_pointer_mode): Likewise.
	(spu_addr_space_name): Likewise.
	(spu_addr_space_conversion_rtl): Likewise.
	(spu_valid_addr_space): Likewise.
	(spu_addr_space_number): Likewise.
	* config/spu/spu.h (ASM_OUTPUT_SYMBOL_REF): New macro.
	* config/spu/spu.md (to_ea): New expander.
	(from_ea): Likewise.
	* config/spu/spu.opt (mea32, mea64): New options.
	* config/spu/spu_mfcio.h: New typedef.
	* config/spu/t-spu-elf (MULTILIB_OPTIONS): Add mea64.
	(EXTRA_MULTILIB_PARTS): Add cache libraries.
	(cachemgr.o, %/cachemgr.o): New targets.
	(cachemgr_nonatomic.o, %/cachemgr_nonatomic.o): Likewise.
	(libgcc_%.a, %/libgcc_%.a): Likewise.
	(cache8k.o, cache16k.o, cache32k.o, etc): Likewise.
	(%/cache8k.o, %/cache16k.o, %/cache32k.o, etc): Likewise.
	* config/spu/cache.S: New file.
	* config/spu/cachemgr.c: Likewise.
	* config/spu/spu_cache.h: Likewise.
	* doc/invoke.texi (SPU Options): Document -mea32, -mea64,
	-mcache-size and -matomic-updates options.

2008-05-20  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	* Created "cell-4_3-branch".

