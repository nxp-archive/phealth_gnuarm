2006-11-17  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-operands.h (prune_stale_vops): Declare.
	* tree-into-ssa.c (rewrite_vops): Set VUSE_OPS and VDEF_OPS
	after rewriting the corresponding virtual operator.
	(rewrite_update_stmt_vops): Only preserve names that do not
	match symbols marked for renaming.
	(rewrite_update_phi_arguments): Always use the symbol on the
	LHS when not dealing with a factored PHI.
	(prepare_block_for_update): Only examine real uses if there are
	register symbols to rename.
	Call prune_stale_vops.
	* tree-ssa-copy.c (may_propagate_copy): Allow copies between
	different SSA names for the same memory partition.
	* tree-ssa.c (verify_use): Verify that the same memory symbol
	does not appear more than once in the same virtual operator.
	Do not call verify_ssa_name.
	(verify_ssa): Call verify_ssa_name for memory symbols and
	register symbols separately.
	* tree-ssa-operands.c (pop_stmt_changes): If a default .MEM
	definition is found, consider all the memory symbols matched.
	(is_active_vop): New.
	(prune_stale_vops): New.
	(get_mpt_for): Put symbols with compatible alias sets in the
	same partition.

2006-11-13  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (get_reaching_def): Do not use .MEM's
	default definition for every memory symbol.
	(rewrite_update_stmt_vops): Simplify logic used to keep
	existing SSA names in virtual operands.
	(rewrite_update_memory_stmt): Check if memory loads and stores
	against mem_syms_to_rename instead of syms_to_rename.
	(replace_factored_phi_argument): Do no insert a SIGMA node if
	all the reaching definitions are default definitions.
	* tree.c (needs_to_live_in_memory): Revert predicate to the
	same predicate used in mainline.
	* tree.h (SSA_NAME_IS_DEFAULT_DEF): Define.
	Change every check using the call to default_def to use this.
	* tree-ssa-dse.c (dse_possible_dead_store_p): Adapt to support
	virtual operators with multiple operands.
	(dse_optimize_stmt): Likewise.
	(tree_ssa_dse): Re-enable DSE.
	* tree-ssa-alias.c (compute_memory_partitions): New.
	(compute_may_aliases): Call it.
	(dump_alias_info): Call dump_memory_partitions.
	(may_be_aliased): Revert changes to use the same predicate
	used in mainline.
	* tree-dfa.c (dump_referenced_vars): Call
	dump_memory_partitions.
	(set_default_def): Set/clear SSA_NAME_IS_DEFAULT_DEF.
	* tree-ssa-pre.c: Include tree-ssa-propagate.h
	(compute_vuse_representatives): Merge with mainline.
	(create_expression_by_pieces): Likewise.
	(insert_into_preds_of_block): Likewise.
	(try_look_through_load): Call stmt_makes_single_store to
	determine if DEF_STMT is storing an interesting value.
	* tree-ssa-copy.c (may_propagate_copy): Handle copies between
	memory symbols and memory partitions.
	(merge_alias_info): Likewise.
	* tree-ssa.c (verify_ssa_name): Verify that default names have
	an empty definition statement.
	* Makefile.in (tree-ssa-pre.o): Add dependency on
	tree-ssa-propagate.h.
	* tree-ssanames.c (make_ssa_name): Initialize
	SSA_NAME_IS_DEFAULT_DEF.
	* tree-ssa-operands.c (get_mem_symbols_in_aggregate): Ignore
	REF if it is an SSA name for a register.
	(parse_ssa_operands): Assert that the caller is not trying to
	gather loads and stores for SIGMA nodes.
	(pop_stmt_changes): Handle memory partitions.
	(dump_memory_partitions): Add title.

2006-11-10  Diego Novillo  <dnovillo@redhat.com>

	Initial support for memory partitions.
	Reverted full dynamic grouping of memory PHIs.

	* tree-ssa-operands.h (get_mpt_for): Declare.
	(dump_memory_partitions): Declare.
	(debug_memory_partitions): Declare.
	* tree-into-ssa.c (mpt_to_rename): Declare.
	(need_to_update_vops_p): Remove.
	(sturct ssa_name_info): Remove fields 'reached_syms' and
	'factored_syms'.
	(syms_with_phi_in_bb): Remove.  Update all users.
	(struct unfactored_phis_d): Likewise.
	(first_unfactored_phi): Likewise.
	(last_unfactored_phi): Likewise.
	(unfactored_phis): Likewise.
	(last_dom_num): Likewise.
	(dump_syms_with_phi): Likewise.
	(debug_syms_with_phi): Likewise.
	(dump_unfactored_phis): Likewise.
	(debug_unfactored_phis): Likewise.
	(dump_unfactored_phi): Likewise.
	(debug_unfactored_phi): Likewise.
	(get_dom_num): Likewise.
	(get_name_dom_num): Likewise.
	(set_next_dom_num): Likewise.
	(unfactored_phis_hash): Likewise.
	(unfactored_phis_eq): Likewise.
	(unfactored_phis_free): Likewise.
	(add_syms_with_phi): Likewise.
	(add_sym_with_phi): Likewise.
	(add_reached_sym): Likewise.
	(lookup_unfactored_phi): Likewise.
	(get_unfactored_phi): Likewise.
	(split_factored_phi): Likewise.
	(add_to_fixup_queues): Likewise.
	(add_imm_uses_to_fixup_queues): Likewise.
	(compute_currdefs_for): Likewise.
	(fixup_unfactored_phis): Likewise.
	(rewrite_update_stmt_vops): Discard names for symbols not
	loaded/stored by the statement.
	(register_new_vdef_name): Use MPTs when setting the LHS for
	SIGMA nodes.
	(rewrite_update_memory_stmt): Remove argument SET_CURRDEF_P.
	Update all users.
	(replace_factored_phi_argument): When a PHI argument needs
	more than one reaching definition, insert a SIGMA node in the
	feeding block.
	(prepare_block_for_update): If the last statement of the block
	is a block terminator and stores to memory, add all the
	memory partitions to its set of stores.
	(init_update_ssa): Initialize MPT_TO_RENAME.
	(delete_update_ssa): Free MPT_TO_RENAME.
	(insert_updated_phi_nodes_for): Do not force full rewrite when
	there are memory name mappings.
	(update_ssa): Initializes MPT_TO_RENAME.
	Insert PHI nodes for all the partitions in MPT_TO_RENAME.
	* tree-pretty-print.c (dump_sigma_node): New.
	(dump_generic_node): Do not call dump_vops on SIGMA_NODEs.
	Handle SIGMA_NODE.
	(dump_vops): Remove dead code.
	* tree.c (init_ttree): Add MEMORY_PARTITION_TAG to
	tree_contains_struct.
	(tree_code_size): Handle MEMORY_PARTITION_TAG.
	(tree_node_structure): Likewise.
	* tree.h (MTAG_P): Likewise.
	(SIGMA_MPT): Define.
	(struct tree_memory_tag): Remove field 'old_used_alone'.
	(SMT_OLD_USED_ALONE): Remove.
	(struct tree_memory_partition_tag): Declare.
	(MPT_SYMBOLS): Define.
	(union tree_node): Add field 'mpt'.
	* tree-phinodes.c (create_phi_node_1): Move body ...
	(create_phi_node): ... here.
	(create_factored_phi_node): Remove.
	* tree-gimple.c (is_gimple_stmt): Handle SIGMA_NODE.
	* tree-ssa-alias.c (mark_non_addressable): Move from
	tree-flow-inline.h.
	Remove the variable from its memory partition.
	(compute_may_aliases): Compute memory partitions for memory
	variables.
	(setup_pointers_and_addressables): Remove variable N_VARS.
	Mark the memory partition for renaming when a variable is
	marked non-addressable.
	* gimple-low.c (lower_stmt): Handle SIGMA_NODE.
	* tree-ssa-sink.c (is_hidden_global_store): Return false on
	SIGMA_NODEs.
	* expr.c (expand_expr_real_1): Discard SIGMA_NODEs.
	* timevar.def (TV_TREE_SSA_PHI_UNFACTOR): Remove.
	(TV_TREE_SSA_FIX_UNFACTORED_UD): Remove.
	* treestruct.def (TS_MEMORY_PARTITION_TAG): Define.
	* tree-data-ref.c (find_data_references_in_loop): Ignore
	SIGMA_NODE.
	* tree-flow-inline.h (memory_partition): New.
	(set_memory_partition): New.
	(factoring_name_p): New.
	(symbol_mem_tag): New.  Update all users that were accessing
	the field 'symbol_mem_tag' directly.
	(set_symbol_mem_tag): New.
	* tree-vect-analyze.c (vect_stmt_relevant_p): Handle
	SIGMA_NODE the same way as PHI_NODE.
	* tree.def (MEMORY_PARTITION_TAG): Define.
	(SIGMA_NODE): Define.
	* tree-ssa-pre.c (pass_fre): Add TODO_update_ssa_only_virtuals.
	* tree-ssa.c (verify_phi_args): Update verification of memory
	PHI nodes.
	(verify_symbols): Remove.
	(verify_loads_and_stores): Remove.
	* tree-inline.c (estimate_num_insns_1): Handle SIGMA_NODE.
	* tree-iterator.h (tsi_start): If T is NULL set i.ptr to NULL.
	* tree-flow.h (struct var_ann_d): Add field 'mpt'.
	(create_tag_raw): Declare.
	* tree-ssa-operands.c (mpt_table): Declare.
	(mem_syms_free): Do not free loads/stores for SIGMA_NODEs nor
	PHI_NODEs for memory partitions.
	(init_ssa_operands): Assert that MPT_TABLE is NULL.
	(fini_ssa_operands): Free MPT_TABLE.
	(parse_ssa_operands): Handle SIGMA_NODE.
	(get_loads_and_stores): Handle SIGMA_NODE.
	(add_loads_and_stores): Remove.
	(move_loads_and_stores): Handle SIGMA_NODE.
	(update_loads_and_stores): Handle SIGMA_NODE.
	(get_mpt_for): New.
	(dump_memory_partitions): New.
	(debug_memory_partitions): New.

2006-11-02  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (struct ssa_name_info): Add field 'factored_syms'.
	(get_ssa_name_ann): Initialize it.
	(repl_map_free): Free it.
	(add_new_name_mapping): Collect stored memory symbols from
	OLD's definition statement and add them to 'factored_syms' in
	OLD's annotation.
	(insert_phi_nodes_for): Initialize set of symbols for factored
	PHI nodes using the factored symbols stored in VAR's
	annotation.
	Do not create PHI nodes with empty factored sets.
	(replace_use): Remove.
	Update every caller to use SET_USE instead.
	(rewrite_update_memory_stmt): Only rewrite virtual operands
	that affect symbols marked for renaming.
	(init_ssa_renamer): Move initialization of
	syms_with_phi_in_bb, last_dom_num, regs_to_rename and
	mem_syms_to_rename ...
	(update_ssa): ... here.
	Do not call init_ssa_renamer.
	(mark_def_interesting): Prevent PHI nodes for memory symbols
	to mark the holding block as a PHI block form .MEM.
	(prepare_block_for_update): Fix logic for adding symbols to
	syms_with_phi_in_bb.
	When processing PHI nodes for regular symbols, consider the
	PHI node as an interesting site for .MEM, not for the symbol.
	(switch_virtuals_to_full_rewrite_p): Always force rewriting
	memory symbols from scratch.
	* tree-phinodes.c (create_factored_phi_node): Assert that the
	set of factored symbols is not empty.
	* tree-ssa.c (verify_phi_args): Add argument
	PHI_FACTORED_SYMS.  Update callers.
	Check that no factored PHI factors symbols that already have
	other PHIs in the block.

2006-10-23  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (insert_phi_nodes_for): PHI nodes for
	factored SSA names start with an empty set of factored
	symbols.
	(replace_use): Add argument RDEF.
	Do not call get_reaching_def.  Update all callers.
	When replacing a factored SSA name whose
	definition statement is a PHI node, add the symbols loaded by
	the statement into the defining PHI node.
	Update every user of SET_USE to call this function instead.
	(name_marked_for_release_p): Make extern.
	(rewrite_vops): Assert that NUM_RDEFS > 0.
	(compute_currdefs_for): Only compute the current definition
	for symbols that also exist in MEM_SYMS_TO_RENAME.
	(fixup_unfactored_phis): Save a copy of MEM_SYMS_TO_RENAME
	(update_ssa): Add to the list of unfactored PHI nodes any
	new SSA name generated by an unfactored PHI node.
	* tree-phinodes.c (create_factored_phi_node): Allow empty
	factored symbols.
	* tree-ssa.c (verify_symbols): New.
	(verify_loads_and_stores): New.
	(verify_ssa): Call it.
	* tree-flow.h (name_marked_for_release_p): Declare.
	* tree-ssa-operands.c (add_mem_symbols_in_decl): Assert that
	we are not trying to add .MEM to the set.
	(add_call_clobbered_mem_symbols): Remove unused local
	added_symbols_p.
	(add_call_read_mem_symbols): Likewise.
	Do not try to add .MEM to the set of symbols.
	(pop_stmt_changes): Mark for renaming any symbol that is
	no longer factored by any of the SSA names in VOPS.

2006-10-20  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (fixup_unfactored_phis): Do not release the
	LHS of removed PHIs right away.  Add the LHS to the list of
	names to be released after renaming.

2006-10-20  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (prepare_block_for_update): If a factored
	PHI node is now completely unfactored, add it to the list of
	unfactored PHI nodes to process after renaming.
	(replace_stale_ssa_names): Handle stale SSA names that come
	from PHI nodes.
	Update SSA_NAME_OCCURS_IN_ABNORMAL_PHI for the new name if
	necessary.
	(fixup_unfactored_phis): Remove unfactored PHI nodes that end
	up with no factored symbols.
	Convert to regular memory PHI nodes those factored PHI nodes
	that end up factoring a single symbol.
	(update_ssa): Call fixup_unfactored_phis before
	replace_stale_ssa_names.
	* tree-phinodes.c (create_factored_phi_node): Do not allow
	empty symbol sets.
	* tree-ssa.c (verify_ssa_name): Remove #if0 code.
	(verify_phi_args): Check that every memory PHI has a set of
	symbols.
	Check that factored PHI nodes factor more than one symbol.
	* tree-cfg.c (bsi_remove): Always call delete_loads_and_stores.
	(bsi_replace): Likewise.
	* tree-ssa-operands.c (dump_immediate_uses_for): Add
	TDF_MEMSYMS when dumping memory statements.

2006-10-20  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-dce.c: Remove forward declarations for static
	functions.  Re-arrange functions bodies as needed.
	(find_obviously_necessary_stmts): Never mark PHI nodes as
	obviously necessary.
	(mark_operand_necessary): Remove argument PHIONLY.  Update
	users.

2006-10-18  Diego Novillo  <dnovillo@redhat.com>

	* tree-complex.c (expand_complex_move): Mark symbols for
	renaming on the newly created assignment.

2006-10-18  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (mem_syms_to_rename): New local variable.
	(syms_stored_in_bb): Remove.  Update all users.
	(syms_to_factor_in_bb): Remove.  Update all users.
	(dump_syms_with_phi): Rename from dump_stored_syms.
	(debug_syms_with_phi): Rename from debug_stored_syms.
	(add_stored_syms): Remove.  Update all users.
	(add_stored_sym): Remove.  Update all users.
	(compute_idf): Remove first argument.  Update all users.
	Do not propagate sets of stored symbols to dominance frontier.
	(insert_phi_nodes_for): When creating factored PHI nodes, use
	the symbols in MEM_SYMS_TO_RENAME to initialize the set of
	factored symbols.  Prune the set with SYMS_WITH_PHI_IN_BB if
	necessary.
	(init_ssa_renamer): Set MEM_SYMS_TO_RENAME from SYMS_TO_RENAME
	and REGS_TO_RENAME.
	(init_update_ssa): Allocate MEM_SYMS_TO_RENAME.
	(delete_update_ssa): Free MEM_SYMS_TO_RENAME.

2006-10-17  Diego Novillo  <dnovillo@redhat.com>

	* tree-stdarg.c (check_all_va_list_escapes): Remove unused
	locals 'loads' and 'stores'.
	If the statement references memory and any of its loaded or
	stored symbols are in the escaping set, move on to the next
	statement.

2006-10-16  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge as of 2006-10-16 (@117796).

2006-10-12  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa.c (verify_phi_args): Do not complain for memory PHI
	nodes with no associated symbols.

2006-10-12  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (add_new_name_mapping): Fix handling of
	.MEM -> .MEM mappings.

2006-10-12  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (insert_phi_nodes_for): Create factored PHI
	nodes using the set of stores from the SSA name being
	replaced.
	* tree-ssa.c (verify_use): Remove argument
	syms_in_factored_phis.  Update users.
	(verify_phi_args): Reject memory PHI nodes with empty factored
	sets unless they are in a dead chain of nodes.

2006-10-11  Diego Novillo  <dnovillo@redhat.com>

	* tree-into-ssa.c (regs_to_rename): New local variable.
	(rewrite_update_stmt_vops): Discard names that factor no symbols.
	(init_ssa_renamer): Initialize regs_to_rename.
	(prepare_block_for_update): Remove from factored PHI nodes
	symbols that have been promoted to registers.
	(init_update_ssa): Allocate regs_to_rename.
	(delete_update_ssa): Delete it.
	(add_to_fixup_queues): Move immediate use iteration ...
	(add_imm_uses_to_fixup_queues): ... here.
	Update callers.
	(fixup_unfactored_phis): Set abnormal flags for replaced PHI
	arguments.
	When processing PHI nodes add children PHI nodes to fixup queues.
	(update_ssa): Move dumping code before call to
	fixup_unfactored_phis.
	* bitmap.c (bitmap_count_bits): Remove unused variable.
	* tree-ssa.c (verify_phi_args): Only check factored PHI nodes
	for duplicate symbols.

2006-10-11  Diego Novillo  <dnovillo@redhat.com>

	NOTE: WIP.  With these changes, the branch does not bootstrap.

	* tree-ssa-operands.h (dump_loads_and_stores,
	debug_loads_and_stores, dump_decl_set, debug_decl_set):
	Declare.
	(struct mem_syms_map_d): Declare.
	(mem_syms_map_t): Declare.
	(add_loads_and_stores, move_loads_and_stores,
	delete_loads_and_stores): Declare.
	* tree-into-ssa.c (struct ssa_name_info): Add field
	'reached_syms'.
	(syms_stored_in_bb): New local variable.
	(syms_with_phi_in_bb): New local variable.
	(syms_to_factor_in_bb): New local variable.
	(struct unfactored_phis_d): Declare.
	(unfactored_phis_t): Declare.
	(first_unfactored_phi): New local variable.
	(last_unfactored_phi): New local variable.
	(unfactored_phis): New local variable.
	(last_dom_num): New local variable.
	(mem_syms_tbl): Remove.
	(dump_stored_syms): New.
	(debug_stored_syms): New.
	(dump_unfactored_phis): New.
	(debug_unfactored_phis): New.
	(dump_unfactored_phi): New.
	(debug_unfactored_phi): New.
	(get_dom_num): New.
	(get_name_dom_num): New.
	(set_next_dom_num): New.
	(unfactored_phis_hash): New.
	(unfactored_phis_eq): New.
	(unfactored_phis): New.
	(mem_syms_hash): Remove.
	(mem_syms_eq): Remove.
	(mem_syms_free): Remove.
	(add_syms_with_phi): New.
	(add_stored_syms): New.
	(add_stored_sym): New.
	(mark_def_sites): Do not process statements that reference
	memory.
	(compute_idf): Rename from find_idf.
	When inserting PHI nodes for .MEM, determine set of symbols to
	associate initially using SYMS_STORED_IN_BB and
	SYMS_WITH_PHI_IN_BB.
	(insert_phi_nodes_for): Call create_factored_phi_node if
	needed.
	(insert_phi_nodes): Likewise.
	(rewrite_memory_stmt): Remove.
	(rewrite_update_init_block): Call set_next_dom_num.
	PHI nodes for .MEM become the current definition for every
	symbol factored in them.
	(preserve_needed_names_in_vops): Remove.
	(rewrite_vops): New.
	(rewrite_update_stmt_vops): Call it.
	(rewrite_update_stmt): Call set_next_dom_num.
	(add_reached_sym): New.
	(lookup_unfactored_phi): New.
	(get_unfactored_phi): New.
	(split_factored_phi): New.
	(replace_factored_phi_argument): New.
	(rewrite_update_phi_arguments): Call it.
	(init_ssa_renamer): Initialize last_dom_num,
	syms_stored_in_bb, syms_with_phi_in_bb, syms_to_factor_in_bb.
	(fini_ssa_renamer): Deallocate syms_stored_in_bb,
	syms_with_phi_in_bb, syms_to_factor_in_bb.
	(prepare_block_for_update): Fill-in syms_with_phi_in_bb and
	syms_stored_in_bb.
	(delete_update_ssa): Deallocate unfactored_phis and
	blocks_with_phis_to_rewrite.
	(add_to_fixup_queues): New.
	(compute_currdefs_for): New.
	(fixup_unfactored_phis): New.
	(update_ssa): Insert PHI nodes for .MEM separately.
	Do not try to insert PHI nodes for memory symbols.
	Call fixup_unfactored_phis.
	* tree-dump.c (dump_options): Add entry for "memsyms".
	* tree-pretty-print.c (debug_generic_expr): Add flag
	TDF_MEMSYMS.
	(debug_tree_chain): Likewise.
	(dump_symbols): New.
	(dump_generic_node): Call it if TDF_MEMSYMS is given.
	(dump_vops): Likewise.
	* tree-ssa-loop-manip.c (split_loop_exit_edge): Ignore memory
	symbols.
	* tree-pass.h (TDF_MEMSYMS): Define.
	* bitmap.c (bitmap_singleton_p): New.
	* bitmap.h (bitmap_singleton_p): Declare.
	* tree-phinodes.c (release_phi_node): Call
	delete_loads_and_stores.
	(resize_phi_node): Call move_loads_and_stores.
	(create_phi_node_1): New.
	(create_phi_node): Call it.
	(create_factored_phi_node): New.
	(remove_phi_node): Add new boolean argument RELEASE_LHS_P.  If
	it is true, call release_ssa_name.
	Update all callers.
	* tree-ssa-alias.c (init_alias_info): The first time aliases
	are computed mark every memory symbol to be renamed.
	(setup_pointers_and_addressables):
	(dump_points_to_info_for):
	* timevar.def (TV_TREE_SSA_PHI_UNFACTOR): New.
	(TV_TREE_SSA_FIX_UNFACTORED_UD): New.
	* tree-vectorizer.c (slpeel_update_phi_nodes_for_guard1): Only
	handle LCSSA PHIs for GIMPLE registers.
	* tree-vectorizer.h (vect_memsyms_to_rename): Rename from
	vect_vnames_to_rename.  Update all users.
	* tree-flow-inline.h (zero_imm_uses_p): New.
	* tree-ssa.c (verify_ssa_name): Do not verify sub-variables
	for memory symbols.
	Verify that every memory name uses the canonical MEM_0
	definition.
	(verify_use): Add argument SYMS_IN_FACTORED_PHIS.  Update all
	users.
	Add verification for PHI nodes that reference memory.
	(stmt_references_memory_p): Move to tree-ssa-operands.c
	(walk_use_def_chains_1): Guard against NULL PHI arguments.
	* tree-ssa-loop-prefetch.c (SSA_NAME_VAR): Remove.
	* tree-flow.h (struct stmt_ann_d): Add bitfield
	references_memory.
	(create_factored_phi_node): Declare.
	* tree-cfg.c 
	(bsi_remove): Call delete_loads_and_stores if needed.
	(bsi_replace): Likewise.
	(tree_make_forwarder_block): Call create_factored_phi_node if
	needed.
	(tree_duplicate_bb): Likewise.
	* tree-ssanames.c (release_defs): Remove assertion against
	.MEM.
	* tree-ssa-operands.c (mem_syms_tbl): New local variable.
	(mem_syms_hash): New.
	(mem_syms_eq): New.
	(mem_syms_free): New.
	(init_ssa_operands): Intialize mem_syms_tbl.
	(fini_ssa_operands): Delete mem_syms_tbl.
	(add_virtual_operator): Do nothing if aliases_computed_p is
	false.
	(add_mem_symbol): Do nothing if stored_syms is not set.
	(get_mem_symbols_in_indirect_ref): Process statement even if
	aliases have not been computed.
	(add_stmt_operand): Mark statement as referencing memory if
	needed.
	(get_indirect_ref_operands): Likewise.
	(get_tmr_operands): Likewise.
	(get_call_expr_operands): Likewise.
	(get_asm_expr_operands): Likewise.
	(build_ssa_operands): Initialize references_memory annotation
	to false.
	If has_volatile_ops has been marked by the parser, also set
	references_memory.
	(get_loads_and_stores): Change interface to return sets of
	loads and stores in a structure.  Update all callers.
	(delete_loads_and_stores): New.
	(add_loads_and_stores): New.
	(move_loads_and_stores): New.
	(update_loads_and_stores): New.
	(update_stmt_operands): Call update_loads_and_stores if
	needed.
	(mark_difference_for_renaming): Compute difference without
	clobbering the input sets.
	(stmt_references_memory_p): Move from tree-ssa.c.  Check the
	statement annotation.

2006-07-07  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge as of 2006-07-06 (@115232).

2006-07-06  Diego Novillo  <dnovillo@redhat.com>

	* tree-ssa-operands.h (SSA_OPERAND_MEMORY_SIZE): Increase buffer size.
	(get_loads_and_stores): Declare.
	(push_stmt_changes): Declare.
	(pop_stmt_changes): Declare.
	(enum):
	* doc/tree-ssa.texi: Update documentation for virtual operands
	and the use of push_stmt_changes/pop_stmt_changes.
	* doc/invoke.texi: Remove documentation for params
	global-var-threshold and max-aliased-vops.
	* tree-into-ssa.c (stale_ssa_names): New local variable.
	(struct mem_syms_map_d): Declare.
	(mem_syms_map_t): Declare.
	(mem_syms_tbl): New local variable.
	(set_livein_block): Check for empty def blocks set.
	(symbol_marked_for_renaming): Remove superfluous DECL_P assert.
	(add_new_name_mapping): Do not add .MEM to the set of virtual names.
	(mem_syms_hash): New.
	(mem_syms_eq): New.
	(mem_syms_free): New.
	(syms_referenced_by): New.
	(mark_def_sites): Process memory symbols loaded/stored separately.
	(register_new_def): Use BLOCK_DEFS_STACK directly.  Update callers.
	Deal with mismatched symbols when SYM is not a GIMPLE register.
	(rewrite_initialize_block): Assert that we are not dealing
	with .MEM.
	(get_reaching_def): For non-GIMPLE registers use .MEM's
	default definition when necessary.
	(rewrite_memory_stmt): New.
	(rewrite_stmt): Call it when dealing with memory statements.
	(rewrite_finalize_block): Take the symbol for virtual
	SSA_NAMEs from the next slot in the stack.
	(dump_defs_stack): New.
	(debug_defs_stack): New.
	(dump_currdefs): New.
	(debug_currdefs): New.
	(dump_tree_ssa): Call dump_def_blocks, dump_defs_stack and
	dump_currdefs.
	(debug_def_blocks_r): Also show PHI_BLOCKS.
	(dump_def_blocks): New.
	(debug_def_blocks): Call it.
	(maybe_replace_use): Do not handle memory symbols.
	(maybe_register_def): Likewise.
	(name_marked_for_release_p): New.
	(mark_ssa_name_stale): New.
	(stale_ssa_name_p): New.
	(preserve_needed_names_in_vops): New.
	(rewrite_update_stmt_vops): New.
	(register_new_vdef_name): New.
	(rewrite_update_memory_stmt): New.
	(rewrite_update_stmt): Call it.
	(rewrite_update_phi_arguments): Use the LHS of the PHI node
	when the argument is a memory symbol.
	(rewrite_blocks): Move code to delete DEF_BLOCKS to
	fini_ssa_renamer.
	(mark_def_site_blocks): Move DEF_BLOCKS and current def
	initialization to init_ssa_renamer.
	(init_ssa_renamer): New.
	(fini_ssa_renamer): New.
	(rewrite_into_ssa): Call them.
	(prepare_block_for_update): Call syms_referenced_by to process
	memory symbols in the statement.
	(dump_update_ssa): Show SSA names made stale by renaming
	process.
	(init_update_ssa): Initialize STALE_SSA_NAMES.
	(delete_update_ssa): Free STALE_SSA_NAMES.
	Call fini_ssa_renamer.
	(mark_sym_for_renaming): Reject .MEM.
	Add temporary workaround when marking symbols with sub-vars.
	(mark_set_for_renaming): Likewise.
	(release_ssa_name_after_update_ssa): Call init_update_ssa if
	needed.
	(replace_stale_ssa_names): New.
	(update_ssa): Call init_ssa_renamer.
	Call replace_stale_ssa_names if needed.
	* tree-ssa-loop-im.c (rewrite_mem_refs): Call
	get_loads_and_stores to gather memory symbols from a statement.
	(gather_mem_refs_stmt): Likewise.
	* tree-complex.c (update_all_vops): Remove.
	(expand_complex_move): Call mark_symbols_for_renaming.
	* tree-pretty-print.c (dump_generic_node): Show (D) for
	default SSA names.
	(dump_vops): Show all VUSE/VDEF operands in one line.
	* tree.c (is_global_var): Call may_be_aliased.
	* tree.h (struct tree_memory_tag): Remove field is_used_alone.
	Update all users.
	(SMT_USED_ALONE): Remove.  Update all users.
	* tree-pass.h (PROP_smt_usage): Remove.  Update all users.
	* params.h (GLOBAL_VAR_THRESHOLD): Remove.  Update all users.
	(MAX_ALIASED_VOPS): Remove.  Update all users.
	* tree-ssa-dse.c (gate_dse): Temporarily disable.

	* tree-stdarg.c (check_all_va_list_escapes): Call
	get_loads_and_stores to gather memory symbols from the
	statement.
	* tree-ssa-dom.c (stmts_to_rescan): Change to stack of
	'tree *' instead of 'tree'.  Update all users.
	* tree-nrv.c (execute_return_slot_opt): Use
	get_loads_and_stores to gather memory symbols referenced.
	* tree-ssa-alias.c (struct alias_map_d): Remove field
	grouped_p.  Update all users.
	(updating_used_alone): Remove.  Update all users.
	(lhs_may_store_to): Remove.  Update all users.
	(recalculate_used_alone): Remove.  Update all users.
	(total_alias_vops_cmp): Remove.  Update all users.
	(group_aliases_into): Remove.  Update all users.
	(group_aliases): Remove.  Update all users.
	(maybe_create_global_var): Create only if there are no global
	variables and a mix of pure and non-pure function call sites.
	(compute_may_aliases): Remove stale documentation.
	(replace_may_alias): Remove.  Update all users.
	(may_be_aliased): Call is_global_var.
	* tree-dfa.c (mark_symbols_for_renaming): Rename from
	mark_new_vars_to_rename.  Update all users.
	Call get_loads_and_stores to gather memory symbols.
	(find_new_referenced_vars):
	* tree-ssa-pre.c (gate_pre): Temporarily disable.
	* tree-sra.c (sra_replace): Mark virtual SSA names to be
	released after update_ssa.
	* tree-ssa-copy.c (may_propagate_copy): Handle .MEM.
	(merge_alias_info): Likewise.
	* tree-ssa.c (verify_ssa_name):
	(verify_ssa): Only check VDEFs if aliases have been computed
	and the statement has no volatile operands.
	(create_mem_var): New.
	(delete_tree_ssa): Tidy.
	* tree-vect-transform.c (vectorizable_store): Call
	get_loads_and_stores to gather memory symbols.
	* tree-flow.h (struct var_ann_d): Remove fields in_vuse_list
	and in_vdef_list.
	(mem_var): Declare.
	(register_new_def): Remove.
	(recalculate_used_alone): Remove.
	(updating_used_alone): Remove.
	* tree-ssa-structalias.c (update_alias_info): Use
	get_loads_and_stores to gather memory symbols.
	* params.def (PARAM_GLOBAL_VAR_THRESHOLD): Remove.
	(PARAM_MAX_ALIASED_VOPS): Remove.
	* tree-ssanames.c (replace_ssa_name_symbol): Assert that we
	are not trying to replace .MEM.
	* tree-ssa-operands.c (mem_var): Declare.
	(opf_implicit): Rename from opf_non_specific.  Update all
	users.
	(opf_def): Rename from opf_is_def.
	(opf_use): Rename from opf_none.
	(loaded_syms): New local variable.
	(stored_syms): New local variable.
	(struct scb_d): Declare.
	(scb_t): Define.
	(scb_stack): New local variable.
	(gathering_loads_stores): New.
	(init_ssa_operands): Initialize scb_stack.
	(fini_ssa_operands): Free scb_stack.
	(truncate_ssa_stmt_operands): New.
	(ssa_operand_alloc): Assert that size fits in
	SSA_OPERAND_MEMORY_SIZE.
	(realloc_vdef): Terminate operand linked list.
	(realloc_vuse): Likewise.
	(finalize_ssa_vdef_ops): Do not handle more than one VDEF.
	(finalize_ssa_vuse_ops): Likewise.
	(finalize_ssa_vuses): Do not look for superfluous VUSE
	operands.
	(append_vdef): Do not add more than a single VDEF.
	(append_vuse): Likewise.
	(add_virtual_operand): Remove.  Update all users.
	(add_virtual_operator): New.
	(add_mem_symbol): New.
	(add_mem_symbols_in_decl): New.
	(get_mem_symbols_in_tag): New.
	(get_mem_symbols_in_indirect_ref): Rename from
	get_indirect_ref_operands.  Move tag processing code to
	get_mem_symbols_in_tag.
	(get_mem_symbols_in_aggregate): New.
	(get_mem_symbols_in_tmr): New.
	(add_call_clobbered_mem_symbols): Rename from
	add_call_clobber_ops.
	(add_call_read_mem_symbols): Rename from add_call_read_ops.
	(get_call_expr_operands): Call add_call_clobbered_mem_symbols
	and add_call_read_mem_symbols.
	(get_asm_expr_operands): Call add_mem_symbols_in_decl when
	gathering loads and stores.
	Only add a single VDEF/VUSE when not gathering loads/stores.
	(get_aggregate_operands): Extract from get_expr_operands.
	Call get_mem_symbols_in_aggregate when gathering loads/stores.
	(get_expr_operands) <case ADDR_EXPR>: Return early if
	gathering loads/stores.
	<case STRUCT_FIELD_TAG>: Remove.
	<case SYMBOL_MEMORY_TAG>: Remove.
	<case NAME_MEMORY_TAG>: Remove.
	<case VAR_DECL>: Do not handle sub-variables.
	(update_stmt_operands): Assert that we are not gathering loads
	and stores.
	(copy_virtual_operands): Do not look for more than one
	VDEF/VUSE.
	(create_ssa_artficial_load_stmt): Likewise.
	(dump_loads_and_stores): New.
	(debug_loads_and_stores): New.
	(get_loads_and_stores_for_phi): New.
	(get_loads_and_stores): New.
	(push_stmt_changes): New.
	(mark_difference_for_renaming): New.
	(pop_stmt_changes): New.

2006-05-29  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge as of 2006-05-29 (@114205).

2006-05-22  Aldy Hernandez  <aldyh@redhat.com>

	* tree-ssa-dse.c (aggregate_vardecl_d): New.
	(dse_global_data): Add aggregate_vardecl field.
	(dse_possible_dead_store_p): New.
	Add prev_defvar variable.
	Allow immediate uses and previous immediate uses to differ
	if they are setting different parts of the whole.
	(get_aggregate_vardecl): New.
	(dse_record_partial_aggregate_store): New.
	(dse_whole_aggregate_clobbered_p): New.
	(dse_partial_kill_p): New.
	(dse_optimize_stmt): Abstract code checking a possible dead store
	into new function dse_possible_dead_store_p().
	Call dse_maybe_record_aggregate_store().
	When checking whether a STMT and its USE_STMT refer to the
	same memory address, check also for partial kills that clobber
	the whole.
	Move some variable definitions to the block where they are used.
	(aggregate_vardecl_hash): New.
	(aggregate_vardecl_eq): New.
	(aggregate_vardecl_free): New.
	(aggregate_whole_store_p): New.
	(tree_ssa_dse): Initialize and free aggregate_vardecl.
	Mark which aggregate stores we care about.

2006-05-02  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge as of 2006-05-01 (@113449).

2006-04-12  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge as of 2006-04-11 (@112868).

2006-03-28  Aldy Hernandez  <aldyh@redhat.com>

	* tree-ssa-operands.h: Rename all *maydef* globals to *vdef*.
	Rename all *MAYDEF* macros to VDEF*.
	Adjust all SSA_OP_* macros accordingly.
	Adjust all comments to reflect *vdef* renaming.
	* tree-into-ssa.c (mark_def_sites): Rename *MAYDEF* to *VDEF*.
	* tree-pretty-print.c (dump_vops): Same.
	* tree.h: Same.
	* tree-ssa-dse.c (dse_optimize_stmt): Same.
	* tree-gimple.c (is_gimple_reg_rhs): Same.
	* tree-ssa-ccp.c (visit_assignment): Same.
	* tree-ssa-dom.c (eliminate_redundant_computations): Same.
	(cprop_operand): Same.
	(optimize_stmt): Same.
	* tree-ssa-propagate.c (ssa_propagate): Same.
	(stmt_makes_single_load): Same.
	(stmt_makes_single_store): Same.
	(replace_uses_in): Same.
	* tree-ssa-alias.c (recalculate_used_alone): Same.
	(group_aliases): Same.
	(setup_pointers_and_addressables): Same.
	* tree-ssa-sink.c (all_immediate_uses_same_place): Same.
	(is_hidden_global_store): Same.
	(statement_sink_location): Same.
	* tree-flow-inline.h (op_iter_next_use):Same.
	Rename op_iter_init_maydef to op_iter_init_vdef.
	Remove op_iter_init_must_and_may_def.
	(op_iter_next_def): Rename *MAYDEF* to *VDEF*.
	(op_iter_next_tree): Same.
	(clear_and_done_ssa_iter): Same.
	(op_iter_init): Same.
	(op_iter_init_tree): Same.
	(op_iter_next_mustdef): Same.
	* tree-dfa.c (dump_dfa_stats): Same.
	(collect_dfa_stats_r): Same.
	(mark_new_vars_to_rename): Same.
	* tree-ssa-pre.c (compute_rvuse_and_antic_safe): Same.
	(remove_dead_inserted_code): Same.
	* tree-ssa-live.c (create_ssa_var_map): Same.
	* tree-sra.c (decide_instantiations): Same.
	* tree-ssa-copy.c (dump_copy_of): Same.
	(copy_prop_visit_assignment): Same.
	* tree-ssa-dce.c (propagate_necessity): Same.
	* tree-ssa.c (verify_ssa_name): Same.
	(verify_ssa): Same.
	* tree-vect-transform.c (vectorizable_store): Same.
	(vect_generate_tmps_on_preheader): Same.
	* tree-outof-ssa.c (coalesce_vars): Same.
	(check_replaceable): Same.
	* tree-flow.h: Same.
	* tree-ssa-structalias.c (update_alias_info): Same.
	* tree-ssa-operands.c: Rename *v_may_def* to *vdef*.
	(realloc_maydef): Rename to realloc_vdef.
	(finalize_ssa_v_may_def_ops): Rename to finalize_ssa_vdef_ops.
	(finalize_ssa_v_may_defs): Rename to finalize_ssa_vdefs.
	(cleanup_v_may_defs): Rename to cleanup_vdefs.
	(append_v_may_def): Rename to append_vdef.
	(init_ssa_operands): Rename *MAYDEF* to *VDEF*.
	(fini_ssa_operands): Same.
	(alloc_use): Same.
	(add_vuse_op): Same.
	(add_maydef_op): Rename to add_vdef_op.
	(realloc_maydef): Rename *MAYDEF* to *VDEF*.
	(realloc_vuse): Same.
	(finalize_ssa_uses): Same.
	(finalize_ssa_vuse_ops): Same.
	(finalize_ssa_vuses): Same.
	(finalize_ssa_stmt_operands): Same.
	(start_ssa_stmt_operands): Same.
	(append_use): Same.
	(append_vuse): Same.
	(add_virtual_operand): Same.
	(add_call_clobber_ops): Same.
	(get_call_expr_operands): Same.
	(get_modify_expr_operands): Same.
	(build_ssa_operands): Same.
	(free_ssa_operands): Same.
	(copy_virtual_operands): Same.
	(create_ssa_artficial_load_stmt): Same.

2006-03-17  Aldy Hernandez  <aldyh@redhat.com>

	* tree-ssa-operands.c: Remove build_v_must_defs.
	(init_ssa_operands): Delete build_v_must_defs.
	(finalize_ssa_v_must_def_ops): Remove.
	(finalize_ssa_v_must_defs): Remove.
	(finalize_ssa_stmt_operands): Do not call
	finalize_ssa_v_must_defs.
	(start_ssa_stmt_operands): Do not check build_v_must_defs.
	(append_v_must_def): Delete.
	(copy_virtual_operands): Do not copy V_MUST_DEFs.
	(get_modify_expr_operands): Remove reference to V_MUST_DEF from
	comment.  Remove opf_kill_def.
	(build_ssa_operands): Remove references to v_must_defs.
	(copy_virtual_operands): Same.
	(copy_virtual_operands): Same.
	(fini_ssa_operands): Same.
	(free_ssa_operands): Same.
	(add_mustdef_op): Remove.
	Remove mustdef_optype_p.
	(alloc_mustdef): Remove.
	Remove references to V_MUST_DEFs in comment at top of file.
	(get_expr_operands): Remove opf_kill_def.
	(opf_kill_def): Remove.
	(add_virtual_operand): Remove opf_kill_def.
	(get_indirect_ref_operands): Same.
	(get_tmr_operands): Same.

	* tree-vectorizer.c (rename_variables_in_bb): Remove
	SSA_OP_ALL_KILLS.

	* tree-ssa-loop-manip.c (find_uses_to_rename_stmt): Remove
	SSA_OP_ALL_KILLS.
	(check_loop_closed_ssa_stmt): Same.

	* tree-ssa.c (verify_def): Remove V_MUST_DEF from comment.
	(verify_use): Same.
	(verify_ssa): Remove V_MUST_DEFs traces.
	(verify_ssa): Remove SSA_OP_ALL_KILLS.

	* tree-into-ssa.c (mark_def_sites): Change SSA_OP_VMUSTDEF to
	SSA_OP_VMAYDEF.
	(rewrite_update_stmt): Remove SSA_OP_VIRTUAL_KILLS.
	(rewrite_stmt): Remove SSA_OP_ALL_KILLS.

	* tree-ssa-operands.h (struct stmt_operands_d): Remove V_MUST_DEF
	references.
	(MUSTDEF_OPS): Remove.
	(SSA_OP_VMUSTDEF): Remove.
	(FOR_EACH_SSA_MUSTDEF_OPERAND): Remove.
	(struct mustdef_optype_d): Remove.
	Remove mustdef_optype_p.
	(struct stmt_operands_d): Remove mustdef_ops.
	(ssa_operand_iterator_d): Remove mustdefs and mustkills.
	(SSA_OP_VIRTUAL_DEFS): Remove SSA_OP_VMUSTDEF.
	(MUSTDEF_RESULT_PTR): Remove.
	(MUSTDEF_RESULT): Remove.
	(MUSTDEF_KILL_PTR): Remove.
	(MUSTDEF_KILL): Remove.
	(MUSTDEF_NUM): Remove.
	(MUSTDEF_VECT): Remove.
	(SSA_OP_VIRTUAL_KILLS): Remove.
	(SSA_OP_ALL_VIRTUALS): Remove SSA_OP_VIRTUAL_KILLS.
	(SSA_OP_VMUSTKILL): Remove.
	(SSA_OP_ALL_KILLS): Remove.
	(SSA_OP_ALL_OPERANDS): Remove SSA_OP_ALL_KILLS.

	* tree-flow-inline.h (op_iter_init_def): Remove
	SSA_OP_VIRTUAL_KILLS.
	(delink_stmt_imm_use): Remove SSA_OP_ALL_KILLS.

	* tree-ssa-pre.c (compute_rvuse_and_antic_safe): Remove
	SSA_OP_VIRTUAL_KILLS.

	* tree-ssa-loop-im.c (determine_max_movement): Remove
	SSA_OP_VIRTUAL_KILLS.
	(gather_mem_refs_stmt): Same.
	(gather_mem_refs_stmt): Same.

	* tree-ssa-dce.c (mark_really_necessary_kill_operand_phis): Delete.
	(perform_tree_ssa_dce): Remove call to
	mark_really_necessary_kill_operand_phis.

	* tree-flow-inline.h (op_iter_init): Remove setting of mustdefs
	and mustkills.
	(op_iter_next_use): Do not check mustkills.
	(op_iter_next_def): Do not check mustdefs.
	(op_iter_next_tree): Do not check mustkills or mustdefs.
	(clear_and_done_ssa_iter): Do not set mustdefs or mustkills.
	(op_iter_next_maymustdef): Do not check mustkills.
	(op_iter_init_must_and_may_def): Remove SSA_OP_VMUSTKILL.
	(op_iter_init_mustdef): Remove.

	* tree-ssa-live.c (create_ssa_var_map): Change SSA_OP_VMUSTDEF to
	SSA_OP_VMAYDEF.

	* tree-ssa-dse.c (dse_optimize_stmt): Remove SSA_OP_VMUSTDEF.

	* tree-ssa-ccp.c: Remove V_MUST_DEF traces from comments.
	(visit_assignment): Same.

	* tree-ssa-copy.c (copy_prop_visit_assignment): Same.

	* tree-sra.c (mark_all_v_defs_1): Remove V_MUST_DEF from comment.

	* tree-outof-ssa.c (check_replaceable): Remove SSA_OP_VMUSTDEF.

	* tree-pretty-print.c (dump_vops): Remove printing of V_MUST_DEF.
	Remove kill_p variable.

	* tree-dfa.c (struct dfa_stats_d): Remove num_v_must_defs.
	(dump_dfa_stats): Remove code related to V_MUST_DEFs.
	(collect_dfa_stats_r): Do not set num_v_must_defs.
	(mark_new_vars_to_rename): Remove v_must_defs_{before,after}
	code.

	* tree-into-ssa.c (mark_def_sites): Change SSA_OP_VMUSTKILL to
	SSA_OP_VMAYUSE.

	* tree-ssa-pre.c (compute_rvuse_and_antic_safe): Remove
	SSA_OP_VMUSTDEF and SSA_OP_VMUSTKILL.

	* tree-ssa-propagate.c (stmt_makes_single_store): Remove
	SSA_OP_VMUSTDEF.

2006-03-10  Diego Novillo  <dnovillo@redhat.com>

	* BASE-VER: Add mem-ssa.
	* version.c (VERSUFFIX): Add last merge date.

2006-03-08  Andrew Macleod  <amacleod@redhat.com>

	* tree-ssa-operands.h (struct vuse_element_d): Declare.
	(vuse_element_t): Declare.
	(struct vuse_vec_d): Declare.
	(vuse_vec_p): Declare.
	(VUSE_VECT_NUM_ELEM): Define.
	(VUSE_VECT_ELEMENT_NC): Define.
	(VUSE_ELEMENT_PTR_NC): Define.
	(VUSE_ELEMENT_VAR_NC): Define.
	(VUSE_VECT_ELEMENT): Define.
	(VUSE_ELEMENT_PTR): Define.
	(VUSE_ELEMENT_VAR): Define.
	(struct maydef_optype_d) <use_var>: Remove.
	<use_ptr>: Remove.
	<usev>: Add.
	(struct vuse_optype_d) <kill_var>: Remove.
	<use_ptr>: Remove.
	<usev>: Add.
	(struct mustdef_optype_d) <kill_var>: Remove.
	<use_ptr>: Remove.
	<usev>: Add.
	(VUSE_OP_PTR): Add argument.  Use VUSE_ELEMENT_PTR.
	(VUSE_OP): Add argument.  Use VUSE_ELEMENT_PTR.
	(VUSE_NUM): Define.
	(VUSE_VECT): Define.
	(MAYDEF_OP_PTR): Add argument.  Use VUSE_OP_PTR.
	(MAYDEF_OP): Add argument.  Use VUSE_OP.
	(MAYDEF_NUM): Define.
	(MAYDEF_VECT): Define.
	(MUSTDEF_KILL_PTR): Use VUSE_OP_PTR.
	(MUSTDEF_KILL): Use VUSE_OP.
	(MUSTDEF_NUM): Define.
	(MUSTDEF_VECT): Define.
	(realloc_maydef): Declare.
	(realloc_vuse): Declare.
	(struct ssa_operand_iterator_d) <vuse_index>: Add.
	<mayuse_index>: Add.
	(FOR_EACH_SSA_MUSTDEF_OPERAND): Call op_iter_next_mustdef.
	* tree-into-ssa.c: Adapt for multi-operand V_MAY_DEF and VUSE
	operators.
	* tree-pretty-print.c: Likewise.
	* tree-ssa-dse.c: Likewise.
	* tree-flow-inline.h: Likewise.
	(op_iter_next_mustdef): New.
	* tree-ssa-operands.c: Likewise.
	(ALLOC_OPTYPE): Remove.
	Update all users.
	(alloc_def): New.
	(alloc_use): New.
	(alloc_maydef): New.
	(alloc_vuse): New.
	(alloc_mustdef): New.
	(realloc_maydef): New.
	(realloc_vuse): New.
