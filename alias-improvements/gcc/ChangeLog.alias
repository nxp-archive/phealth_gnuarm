2009-02-08  Richard Guenther  <rguenther@suse.de>
	Eric Botcazou  <ebotcazou@adacore.com>

	* tree-ssa-alias.c (walk_aliased_vdefs_1): New helper function.
	(walk_aliased_vdefs): New function.
	* tree-ssa-alias.h (walk_aliased_vdefs): Declare.
	* tree-ssa-dce.c (mark_operand_necessary): Dump something.
	(ref_may_be_aliased): New function.
	(mark_nonaliased_loads_necessary_1): New helper function.
	(mark_nonaliased_loads_necessary): Likewise.
	(mark_aliased_loads_necessary_1): Likewise.
	(mark_aliased_loads_necessary): Likewise.
	(propagate_necessity): Do not process virtual PHIs.  For
	non-aliased loads mark all reaching definitions as necessary.
	For aliased loads and stores mark the immediate dominating
	aliased clobbers as necessary.
	(remove_dead_phis): Perform simple dead virtual PHI removal.
	(remove_dead_stmt): Properly unlink virtual operands when
	removing stores.
	(eliminate_unnecessary_stmts): Schedule PHI removal after
	stmt removal.
	* passes.c (init_optimization_passes): Remove simple dse pass.
	* tree-pass.h (pass_simple_dse): Remove.
	* tree-ssa-dse.c (execute_simple_dse): Remove.
	(pass_simple_dse): Likewise.

	ada/
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_String_Literal_Subtype>:
	Set TYPE_NONALIASED_COMPONENT on the array type.

	testsuite/
	* gcc.c-torture/execute/20090207-1.c: New testcase.

2009-02-07  Richard Guenther  <rguenther@suse.de>

	* gimplify.c (mark_addressable): Export.
	* tree-flow.h (mark_addressable): Declare.
	* tree-ssa-loop-manip.c (create_iv): Mark the base addressable.
	* tree-ssa.c (verify_phi_args): Verify that address taken
	variables have TREE_ADDRESSABLE set.

2009-02-07  Richard Guenther  <rguenther@suse.de>

	* timevar.def (TV_ALIAS_STMT_WALK): New timevar.
	* tree-ssa-alias.c (walk_non_aliased_vuses): Account to
	TV_ALIAS_STMT_WALK.

2009-02-07  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c: Expand documentation.

2009-02-07  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/39120
	* tree-ssa-structalias.c (handle_rhs_call): Fill out return
	constraints.
	(handle_lhs_call): Process return constraints.  Add escape
	constraints if necessary.
	(handle_const_call): Fill out return constraints.  Make nested
	case more precise.  Avoid consttmp if possible.
	(handle_pure_call): Fill out return constraints.  Avoid
	callused if possible.
	(find_func_aliases): Simplify call handling.  Manually build
	nonlocal constraints for asm outputs.
	* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Add
	shortcut for const calls.  Properly use is_call_clobbered for
	non-const, non-pure calls.

	testsuite/
	* gcc.c-torture/execute/pr39120.c: New testcase.

2009-02-06  Richard Guenther  <rguenther@suse.de>

	* Makefile.in (toplev.o): Add tree-ssa-alias.h dependency.
	* toplev.c (dump_memory_report): Dump alias and pta stats.
	* tree-ssa-alias.c (alias_stats): New global variable.
	(dump_alias_stats): New function.
	(may_point_to_decl): Make static.
	(may_point_to_same_object): Likewise.
	(refs_may_alias_p): Make a wrapper for statistics, move body ...
	(refs_may_alias_p_1): ... here.
	(ref_maybe_used_by_call_p, ref_maybe_used_by_call_p_1): Likewise.
	(call_may_clobber_ref_p, call_may_clobber_ref_p_1): Likewise.
	* tree-ssa-alias.h (may_point_to_decl, may_point_to_same_object):
	Remove.
	(dump_alias_stats): Declare.
	(dump_pta_stats): Likewise.
	* tree-ssa-structalias.c (pta_stats): New global variable.
	(dump_pta_stats): New function.
	(pt_solution_includes): Make a wrapper for statistics, move body ...
	(pt_solution_includes_1): ... here.
	(pt_solutions_intersect, pt_solutions_intersect_1): Likewise.

2009-02-06  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/39074
	* tree-ssa-structalias.c (storedanything_id, var_storedanything,
	storedanything_tree): New.
	(do_ds_constraint): Simplify ANYTHING shortcutting.  Update
	the STOREDANYTHING solution if the lhs solution contains
	ANYTHING.
	(build_pred_graph): Add edges from STOREDANYTHING to all
	non-direct nodes.
	(get_constraint_for_1): CONSTRUCTOR
	is a zero-initializer.  Generate &NOTHING for it.
	(init_base_vars): Initialize STOREDANYTHING.
	(compute_points_to_sets): Free substitution info after
	building the succ graph.
	(ipa_pta_execute): Likewise.

	testsuite/
	* gcc.dg/torture/pr39074.c: New testcase.
	* gcc.dg/torture/pr39074-2.c: Likewise.
	* gcc.dg/torture/pr39074-3.c: Likewise.

2009-02-05  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r143958.

2009-02-04  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-structalias.c (struct variable_info): Add may_have_pointers
	field.
	(do_ds_constraint): Do not add to special var or non-pointer
	field solutions.
	(type_could_have_pointers): Split out from ...
	(could_have_pointers): ... here.  For arrays use the element type.
	(create_variable_info_for): Initialize may_have_pointers.
	(new_var_info): Likewise.
	(handle_lhs_call): Make the HEAP variable unknown-sized.
	(intra_create_variable_infos): Use a type with pointers for
	PARM_NOALIAS, make it unknown-sized.

2009-02-04  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-structalias.c (find_what_var_points_to): CALLUSED
	shall not appear in poins-to solutions.
	(pt_solution_empty_p): Remove code dealing with CALLUSED
	in points-to solutions.
	(pt_solution_includes): Likewise.
	(pt_solutions_intersect): Likewise.
	(pt_solution_merge_into): Remove.
	(compute_points_to_sets): Do not merge escaped/callused solutions.
	(do_sd_constraint): Do not use CALLUSED as a representative.
	(solve_graph): Do propagate CALLUSED.
	(handle_pure_call): Use a scalar constraint from CALLUSED for
	the return value.
	(init_base_vars): Add CALLUSED = CALLUSED + UNKNOWN constraint.
	* tree-ssa-alias.c (dump_points_to_info_for): Do not dump
	callused flag.
	* tree-ssa-alias.h (struct pt_solution): Remove callused flag.

	testsuite/
	* gcc.dg/torture/pta-callused-1.c: New testcase.
	* gcc.dg/torture/ssa-pta-fn-1.c: Adjust.

2009-02-04  Richard Guenther  <rguenther@suse.de>

	Revert
	* tree-ssa-loop-niter.c (chain_of_csts_start): Use NULL_TREE.
	Simplify test for memory referencing statement.
	(get_val_for): Handle &a[i_1] by bailing out.
	(loop_niter_by_eval): Handle get_va_for bailing out.

	* tree-ssa-loop-niter.c (chain_of_csts_start): Use NULL_TREE.
	Simplify test for memory referencing statement.  Exclude
	non-invariant ADDR_EXPRs.

2009-02-04  Richard Guenther  <rguenther@suse.de>

	* gimple.h (struct gimple_statement_base): Replace
	references_memory_p member with padding.
	(gimple_references_memory_p): Alias to gimple_vuse.
	(gimple_set_references_memory): Remove.
	* tree-flow-inline.h (op_iter_init_phidef): Use NULL_DEF_OPERAND_P.
	(first_imm_use_stmt): Use NULL.
	* tree-ssa-loop-niter.c (chain_of_csts_start): Use NULL_TREE.
	Simplify test for memory referencing statement.
	(get_val_for): Handle &a[i_1] by bailing out.
	(loop_niter_by_eval): Handle get_va_for bailing out.
	* tree-ssa-operands.c (append_vdef): Add back var parameter.
	(append_vuse): Likewise.
	(add_virtual_operand): Adjust function comment.  Do not
	set references_memory.
	(gimple_add_to_addresses_taken): Adjust function comment.
	(get_indirect_ref_operands): Do not set references_memory.
	(get_tmr_operands): Likewise.
	(maybe_add_call_vops): Likewise.
	(build_ssa_operands): Likewise.
	* tree-ssa-operands.h (NULL_USE_OPERAND_P): Make of type use_operand_p.
	(NULL_DEF_OPERAND_P): Make of type def_operand_p.

2009-02-03  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38049
	* tree-ssa-structalias.c (struct constraint_expr): Make offset signed.
	(UNKNOWN_OFFSET): Define special value.
	(dump_constraint): Dump UNKNOWN_OFFSET as UNKNOWN.
	(solution_set_expand): New helper function split out from ...
	(do_sd_constraint): ... here.
	(solution_set_add): Handle UNKNOWN_OFFSET.  Handle negative offsets.
	(do_ds_constraint): Likewise.
	(do_sd_constraint): Likewise.  Do not special-case ESCAPED = *ESCAPED
	and CALLUSED = *CALLUSED.
	(set_union_with_increment): Make inc argument signed.
	(type_safe): Remove.
	(get_constraint_for_ptr_offset): Handle unknown and negative
	constant offsets.
	(first_vi_for_offset): Handle offsets before start.  Bail
	out early for offsets beyond the variable extent.
	(first_or_preceding_vi_for_offset): New function.
	(init_base_vars): Add ESCAPED = ESCAPED + UNKNOWN_OFFSET constraint.
	Together with ESCAPED = *ESCAPED this properly computes reachability.

	testsuite/
	* gcc.dg/torture/pta-ptrarith-3.c: New testcase.
	* gcc.dg/tree-ssa/pta-ptrarith-1.c: Likewise.
	* gcc.dg/tree-ssa/pta-ptrarith-2.c: Likewise.
	* gcc.dg/vect/no-vfa-vect-43.c: Adjust.

2009-02-01  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r143837.

2009-02-01  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-coalesce.c (create_outofssa_var_map): Adjust
	virtual operands sanity check.

2009-02-01  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-dse.c (dse_possible_dead_store_p): Use
	ref_maybe_used_by_stmt_p.
	* tree-ssa-ccp.c (likely_value): Add comment, skip static-chain
	of call statements.
	* tree-ssa-alias.c (ref_may_used_by_call_p): Rename to ...
	(ref_maybe_used_by_call_p): ... this.
	(ref_may_used_by_stmt_p): Rename to ...
	(ref_maybe_used_by_stmt_p): ... this.  Adjust.
	(maybe_skip_until): Fix comment.
	* tree-ssa-alias.h (ref_may_used_by_stmt_p): Rename to ...
	(ref_maybe_used_by_stmt_p): ... this.
	* tree-ssa.c (verify_ssa): Fix typo.

2009-01-31  Richard Guenther  <rguenther@suse.de>

	* tree-flow.h (struct gimple_df): Remove vop_needs_renaming member.
	Add syms_to_rename member.
	(SYMS_TO_RENAME): New private accessor.
	(need_ssa_update_p): Adjust prototype to take function argument.
	* tree-ssanames.c (init_ssanames): Allocate SYMS_TO_RENAME.
	* tree-into-ssa.c (syms_to_rename): Remove.
	(need_to_update_vops_p): Likewise.
	(need_to_initialize_update_ssa_p): Rename to ...
	(update_ssa_initialized_fn): ... this.  Track function we are
	initialized for.
	(symbol_marked_for_renaming): Simplify.
	(add_new_name_mapping): Do not set need_to_update_vops_p.
	(dump_currdefs): Use SYMS_TO_RENAME.
	(rewrite_update_stmt): Always walk all uses/defs.
	(dump_update_ssa): Adjust.
	(init_update_ssa): Take function argument.  Track what we are
	initialized for.
	(delete_update_ssa): Reset SYMS_TO_RENAME and update_ssa_initialized_fn.
	(create_new_def_for): Initialize for cfun, assert we are initialized
	for cfun.
	(mark_sym_for_renaming): Simplify.
	(mark_set_for_renaming): Do not initialize update-ssa.
	(need_ssa_update_p): Simplify.  Take function argument.
	(name_mappings_registered_p): Assert we ask for the correct function.
	(name_registered_for_update_p): Likewise.
	(ssa_names_to_replace): Likewise.
	(release_ssa_name_after_update_ssa): Likewise.
	(update_ssa): Likewise.  Use SYMS_TO_RENAME.
	* passes.c (execute_function_todo): Adjust.
	(execute_todo): Likewise.
	* tree-cfg.c (gimple_duplicate_sese_region): Adjust.
	(gimple_duplicate_sese_tail): Likewise.
	* tree-inline.c (tree_function_versioning): Adjust.
	* tree-ssa-loop-im.c (move_computations): Adjust.
	* tree-ssa-structalias.c (compute_may_aliases): Adjust.
	* tree-ssa.c (verify_ssa): Adjust.
	* tree-vectorizer.c (slpeel_can_duplicate_loop_p): Adjust.

2009-01-30  Richard Guenther  <rguenther@suse.de>

	* gimple.h (gimple_loaded_syms): Revert comment adjustment.
	* tree-ssa-copy.c (may_propagate_copy): Re-structure virtual
	operand case.

2009-01-30  Richard Guenther  <rguenther@suse.de>

	* tree-ssa.c (verify_ssa): Verify that all stmts definitions
	have the stmt as SSA_NAME_DEF_STMT.
	* tree-inline.c (expand_call_inline): Unlink the virtual
	operands of the call statement.  Remove duplicate stmt updating.
	* ipa-struct-reorg.c (create_general_new_stmt): Clear vops.

2009-01-30  Richard Guenther  <rguenther@suse.de>

	* gimple.c (gimple_call_copy_skip_args): Copy the virtual operands
	and mark the new statement modified.
	* ipa-cp.c (ipcp_update_callgraph): Do not update SSA form.
	Adjust the SSA_NAME_DEF_STMT of a VDEF to the new statement.

2009-01-30  Richard Guenther  <rguenther@suse.de>

	* tree-inline.c (remap_gimple_stmt): Clear the copied vops.
	* tree-ssa-operands.c (finalize_ssa_defs): Always correctly
	remove defs.

2009-01-27  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-dse.c (execute_simple_dse): Properly remove VOPs
	on removing empty stores.

2009-01-27  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r143679.

2009-01-26  Richard Guenther  <rguenther@suse.de>

	* gimple.c (gimple_copy): Delay updating the statement.

2009-01-21  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-sccvn.c (vn_nary_may_trap): Re-add.

2009-01-21  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r143541.

2009-01-20  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-operands.c (OP_SIZE_1, OP_SIZE_2, OP_SIZE_3): Change
	unit to bytes.  Change values to do 1k, 4k and 16k allocations.
	(ssa_operand_alloc): Simplify, adjust according to the above change.
	(set_virtual_use_link): Remove.
	(finalize_ssa_defs): Release the SSA_NAME of removed VDEFs.

2009-01-20  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c (same_type_for_tbaa): Never say that two
	array types are not equal - that is too unreliable.
	(refs_may_alias_p): Skip first component for path based
	type disambiguation.

2009-01-20  Richard Guenther  <rguenther@suse.de>

	* doc/invoke.texi (max-aliased-vops): Remove docs.
	(avg-aliased-vops): Likewise.
	* opts.c (decode_options): Do not adjust max-aliased-vops or
	avg-aliased-vops values.
	* params.def (PARAM_MAX_ALIASED_VOPS): Remove.
	(PARAM_AVG_ALIASED_VOPS): Likewise.
	* params.h (MAX_ALIASED_VOPS): Remove.
	(AVG_ALIASED_VOPS): Likewise.
	* timevar.def (TV_TREE_MAY_ALIAS): Remove.
	(TV_CALL_CLOBBER): Likewise.
	(TV_FLOW_SENSITIVE): Likewise.
	(TV_FLOW_INSENSITIVE): Likewise.
	(TV_MEMORY_PARTITIONING): Likewise.

	testsuite/
	* g++.dg/opt/pr36187.C: Remove no longer supported --param
	adjustments.
	* gcc.dg/pr19633-1.c: Likewise.
	* gcc.dg/torture/pr30375.c: Likewise.
	* gcc.dg/torture/pr33560.c: Likewise.
	* gcc.dg/torture/pr33563.c: Likewise.
	* gcc.dg/torture/pr33870.c: Likewise.
	* gcc.dg/tree-ssa/alias-16.c: Likewise.
	* gcc.dg/tree-ssa/alias-18.c: Likewise.
	* gcc.dg/tree-ssa/ssa-fre-13.c: Likewise.
	* gcc.dg/tree-ssa/ssa-fre-14.c: Likewise.
	* gcc.dg/tree-ssa/ssa-fre-15.c: Likewise.

2009-01-19  Richard Guenther  <rguenther@suse.de>

	testsuite/
	* gcc.dg/tree-ssa/pr38895.c: Adjust testcase to test what it
	was supposed to test.

2009-01-19  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-operands.h (struct vuse_element_d): Remove.
	(struct vuse_vec_d): Likewise.
	(VUSE_VECT_NUM_ELEM, VUSE_VECT_ELEMENT_NC, VUSE_ELEMENT_PTR_NC,
	VUSE_ELEMENT_VAR_NC, VUSE_VECT_ELEMENT, VUSE_ELEMENT_PTR,
	SET_VUSE_VECT_ELEMENT, SET_VUSE_ELEMENT_VAR, SET_VUSE_ELEMENT_PTR,
	VUSE_ELEMENT_VAR): Likewise.
	(struct voptype_d): Likewise.
	(NUM_VOP_FREE_BUCKETS): Likewise.
	(struct ssa_operands): Remove vop_free_buckets member.
	(struct stmt_operands_d): Remove.
	(VUSE_OP_PTR, VUSE_OP, SET_VUSE_OP, VUSE_NUM, VUSE_VECT,
	VDEF_RESULT_PTR, VDEF_RESULT, VDEF_OP_PTR, VDEF_OP, SET_VDEF_OP,
	VDEF_NUM, VDEF_VECT): Likewise.
	(copy_virtual_operands): Remove.
	(operand_build_cmp): Likewise.
	(create_ssa_artificial_load_stmt): Likewise.
	(enum ssa_op_iter_type): Remove ssa_op_iter_vdef.
	(struct ssa_operand_iterator_d): Remove vuses, vdefs, mayusesm
	vuse_index and mayuse_index members.  Pack and move done and iter_type
	members to the front.
	(SSA_OP_VMAYUSE): Remove.
	(SSA_OP_VIRTUAL_USES): Adjust.
	(FOR_EACH_SSA_VDEF_OPERAND): Remove.
	* tree-flow-inline.h (op_iter_next_use): Remove vuses and mayuses
	cases.
	(op_iter_next_def): Remove vdefs case.
	(op_iter_next_tree): Remove vuses, mayuses and vdefs cases.
	(clear_and_done_ssa_iter): Do not set removed fields.
	(op_iter_init): Likewise.  Skip vuse and/or vdef if requested.
	Assert we are not iterating over vuses or vdefs if not also
	iterating over uses or defs.
	(op_iter_init_use): Likewise.
	(op_iter_init_def): Likewise.
	(op_iter_next_vdef): Remove.
	(op_iter_next_mustdef): Likewise.
	(op_iter_init_vdef): Likewise.
	(compare_ssa_operands_equal): Likewise.
	(link_use_stmts_after): Handle vuse operand.
	* tree-flow.h (struct var_ann_d): Remove in_vuse_list and
	in_vdef_list members.
	* gimple.h (struct gimple_statement_with_memory_ops_base): Remove
	vdef_ops and vuse_ops members, add vuse and vdef members.
	(gimple_vuse_ops): Remove.
	(gimple_set_vuse_ops): Likewise.
	(gimple_vdef_ops): Likewise.
	(gimple_set_vdef_ops): Likewise.
	(gimple_vuse_op): New.
	(gimple_vdef_op): Likewise.
	(gimple_vuse): Simplify
	(gimple_vdef): Likewise.
	(gimple_vuse_ptr): New.
	(gimple_vdef_ptr): Likewise.
	(gimple_set_vuse): Likewise.
	(gimple_set_vdef): Likewise.
	* tree-ssa-operands.c (build_vdefs): Rename to ...
	(build_vdef): ... this.  Make it a tree.
	(build_vuses): Rename to ...
	(build_vuse): ... this.  Make it a tree.
	(operand_build_cmp): Remove.
	(operand_build_sort_virtual): Likewise.
	(vop_free_bucket_size): Likewise.
	(vop_free_bucket_index): Likewise.
	(init_vop_buckets): Likewise.
	(add_vop_to_freelist): Likewise.
	(init_ssa_operands): Zero build_vuse, build_vdef.
	Do not call init_vop_buckets.
	(fini_ssa_operands): Zero build_vuse, build_vdef.
	(ssa_operand_alloc): Use struct use_optype_d for size computations.
	(alloc_vop): Remove.
	(add_vop): Likewise.
	(add_vuse_op): Likewise.
	(add_vdef_op): Likewise.
	(finalize_ssa_defs): Fold in finalize_ssa_vdefs.
	(finalize_ssa_uses): Fold in finalize_ssa_vuses.
	(finalize_ssa_vdefs): Remove.
	(finalize_ssa_vuse_ops): Likewise.
	(finalize_ssa_vuses): Likewise.
	(cleanup_build_arrays): Do not clear in_vdef_list or in_vuse_list
	flags.  Zero build_vuse, build_vdef.
	(finalize_ssa_stmt_operands): Do not call finalize_ssa_vdefs
	or finalize_ssa_vuses.
	(start_ssa_stmt_operands): Assert build_vuse, build_vdef are NULL.
	(append_vdef): Assert we do not have different VOPs, add a VUSE.
	(append_vuse): Assert we do not have different VOPs.
	(build_ssa_operands): Do not sort virtual operands.
	(free_stmt_operands): Do not free virtual uses/defs.  Zero
	the VUSE and VDEF operands.
	(copy_virtual_operands): Remove.
	(create_ssa_artificial_load_stmt): Likewise.
	(push_stmt_changes): Adjust.
	(pop_stmt_changes): Likewise.

	* tree-vrp.c (stmt_interesting_for_vrp): Adjust.
	(vrp_visit_stmt): Likewise.
	* tree-into-ssa.c (rewrite_update_stmt): Adjust.
	* tree-ssa-loop-im.c (movement_possibility): Adjust.
	(determine_max_movement): Likewise.
	(gather_mem_refs_stmt): Likewise.
	* tree-complex.c (update_all_vops): Remove.
	(expand_complex_move): Adjust.
	* tree-loop-distribution.c (generate_memset_zero): Adjust.
	(rdg_flag_uses): Likewise.
	* tree-ssa-dse.c (dse_optimize_stmt): Adjust.
	* tree-ssa-ccp.c (surely_varying_stmt_p): Adjust.
	(gimplify_and_update_call_from_tree): Likewise.
	* tree-ssa-dom.c (eliminate_redundant_computations): Adjust.
	(record_equivalences_from_stmt): Likewise.
	(avail_expr_hash): Likewise.
	(avail_expr_eq): Likewise.
	* tree-ssa-propagate.c (update_call_from_tree): Adjust.
	(stmt_makes_single_load): Likewise.
	(stmt_makes_single_store): Likewise.
	* tree-ssa-sink.c (is_hidden_global_store): Adjust.
	(statement_sink_location): Likewise.
	* tree-ssa-loop-ivcanon.c (empty_loop_p): Adjust.
	* tree-ssa-ifcombine.c (bb_no_side_effects_p): Adjust.
	* gimple-pretty-print.c (dump_gimple_mem_ops): Adjust.
	* tree-data-ref.c (get_references_in_stmt): Adjust.
	(stores_from_loop): Likewise.
	* tree-vect-analyze.c (vect_stmt_relevant_p): Adjust.
	* tree-ssa-coalesce.c (create_outofssa_var_map): Adjust.
	* tree-dfa.c (collect_dfa_stats): Adjust.
	* graphite.c (rename_variables_in_stmt): Adjust.
	(graphite_copy_stmts_from_block): Likewise.
	(translate_clast): Likewise.
	* tree-sra.c (mark_all_v_defs_stmt): Remove.
	(mark_all_v_defs_seq): Adjust.
	(sra_replace): Likewise.
	(scalarize_use): Likewise.
	(scalarize_copy): Likewise.
	(scalarize_init): Likewise.
	(scalarize_ldst): Likewise.
	* tree-predcom.c (mark_virtual_ops_for_renaming): Adjust.
	(mark_virtual_ops_for_renaming_list): Remove.
	(initialize_root_vars): Adjust.
	(initialize_root_vars_lm): Likewise.
	(prepare_initializers_chain): Likewise.
	* tree-ssa-copy.c (propagate_tree_value_into_stmt): Adjust.
	(stmt_may_generate_copy): Likewise.
	* tree-ssa-ter.c (is_replaceable_p): Adjust.
	(process_replaceable): Likewise.
	(find_replaceable_in_bb): Likewise.
	* tree-ssa.c (verify_ssa): Verify new VUSE / VDEF properties.
	(delete_tree_ssa): Clear the VUSE, VDEF operands.
	(warn_uninitialized_var): Adjust.
	* tree-ssa-loop-prefetch.c (gather_memory_references): Adjust.
	* lambda-code.c (can_put_in_inner_loop): Adjust.
	(can_put_after_inner_loop): Likewise.
	(perfect_nestify): Likewise.
	* tree-ssa-phiprop.c (phivn_valid_p): Adjust.
	(propagate_with_phi): Likewise.
	* tree-vect-transform.c (vectorizable_call): Adjust.
	(vect_gen_widened_results_half): Likewise.
	(vectorizable_conversion): Likewise.
	(vect_create_mask_and_perm): Likewise.
	(vectorizable_load): Likewise.
	* gimple.c (gimple_copy): Also copy virtual operands.
	* tree-cfg.c (gimple_duplicate_bb): Adjust.
	* tree-ssa-reassoc.c (get_rank): Adjust.

2009-01-17  Richard Guenther  <rguenther@suse.de>

	PR middle-end/13146
	PR tree-optimization/38895
	* tree-ssa-alias.c (same_type_for_tbaa): New helper function.
	(refs_may_alias_p): Use it.  Extend access path based disambiguation.

	testsuite/
	* gcc.dg/tree-ssa/pr13146.c: New testcase.
	* gcc.dg/tree-ssa/pr38895.c: Likewise.
	* g++.dg/tree-ssa/pr13146.C: Likewise.

2009-01-16  Richard Guenther  <rguenther@suse.de>

	* tree-dfa.c (refs_may_alias_p): Move ...
	* tree-ssa-alias.c (refs_may_alias_p): ... here.
	* tree-ssa-alias.h: Adjust.
	* tree-ssa-pre.c (print_pre_expr): Print the VOP as well,
	always print <>s.

2009-01-15  Richard Guenther  <rguenther@suse.de>

	testsuite/
	* gcc.dg/tree-ssa/alias-20.c: Correct testcase.

2009-01-14  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-pre.c (do_regular_insertion): Use the value number
	of edoubleprime for the value number of the expr.
	* tree-ssa-sccvn.c (vn_reference_lookup_pieces): Do not start
	walking if we found an expression, even if its value number
	is NULL.
	* tree-ssa-structalias.c (set_uids_in_ptset): Expect a pointer
	decl.
	(find_what_var_points_to): Always pass a decl to set_uids_in_ptset.

	testsuite/
	* gcc.c-torture/compile/20090114-1.c: New testcase.

2009-01-13  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r143334.

2009-01-12  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-forwprop.c (tidy_after_forward_propagate_addr): Do
	not mark symbols for renaming.
	(forward_propagate_addr_expr): Match up push/pop_stmt_changes
	with the same statement, make sure to update the new pointed-to one.
	* tree-ssa-dce.c (eliminate_unnecessary_stmts): Do not copy
	call statements, do not mark symbols for renaming.
	* tree-ssa-operands.c (finalize_ssa_vdefs): Do not mark the VOP
	for renaming if a VDEF is removed but instead unlink that from
	the IL.

2009-01-11  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c (ref_may_used_by_call_p): Use 
	ipa_reference_get_not_read_global to disambiguate against
	global statics.
	(call_may_clobber_ref_p): Same with
	ipa_reference_get_not_written_global.

2009-01-11  Richard Guenther  <rguenther@suse.de>

	* tree-dfa.c (refs_may_alias_p): Simplify structure.  Generalize
	pointer vs. decl disambiguation based on strict-aliasing rules.

2009-01-11  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-structalias.c (set_uids_in_ptset): Use get_deref_alias_set.
	* alias.c (get_deref_alias_set_1): Split out from
	(get_deref_alias_set): Fall back to access type alias-set here.
	(get_alias_set): Use get_deref_alias_set_1.

	testsuite/
	* gcc.dg/tree-ssa/alias-20.c: New testcase.

2009-01-11  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-operands.h (unlink_stmt_vdef): Declare.
	* tree-ssa-dse.c (dse_optimize_stmt): Use it.
	(execute_simple_dse): Likewise.  Make sure to update virtual
	SSA form if we changed a call.
	* tree-ssa-operands.c (add_stmt_operand): For defs do not
	update the bitmap of loaded syms.
	(unlink_stmt_vdef): New function.

2009-01-11  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-operands.c (finalize_ssa_vuse_ops): Really only rename
	the virtual operand if a VUSE was added.

2009-01-10  Richard Guenther  <rguenther@suse.de>

	* Makefile.in (GTFILES): Add tree-ssa-alias.h.
	* ipa-struct-reorg.c (finalize_var_creation): Do not mark vars
	call-clobbered.
	* tree-dfa.c (dump_variable): Do not dump escape reason.  Dump
	call-used state.
	(add_referenced_var): Remove call-clobber related code.
	(remove_referenced_var): Likewise.
	* tree-flow-inline.h (gimple_call_clobbered_vars): Remove.
	(gimple_call_used_vars): Likewise.
	(may_be_aliased): Take a const_tree argument.
	(is_call_clobbered): Query the escaped solution if the variable
	may be aliased.
	(is_call_used): Query the callused solution if the variable may
	be aliased.
	(mark_call_clobbered): Remove.
	(clear_call_clobbered): Likewise.
	* tree-flow.h (struct gimple_df): Remove call_clobbered_vars and
	call_used_vars, add escaped and callused solutions.
	(struct var_ann): Remove escape_mask.
	* tree-outof-ssa.c (create_temp): Do not fiddle with call-clobber
	state.
	* tree-ssa-alias.c (may_point_to_decl): Use pt_solution_includes.
	(may_point_to_same_object): Use pt_solutions_intersect.
	(get_ptr_info): Use pt_solution_reset.
	(dump_points_to_info): Dump pt_callused state.
	* tree-ssa-alias.h (struct pt_solution): Move here from tree-flow.h.
	Add callused flag.
	(pt_solution_includes): Declare.
	(pt_solution_reset): Likewise.
	(pt_solutions_intersect): Likewise.
	* tree-ssa-structalias.c (handle_lhs_call): Use a scalar
	NONLOCAL constraint for the return value.
	(make_copy_constraint): New function.
	(create_variable_info_for): Globals point to what NONLOCAL
	points to.
	(find_what_var_points_to): Properly separate NONLOCAL, ESCAPED,
	and CALLUSED.
	(clobber_what_escaped): Remove.
	(compute_call_used_vars): Likewise.
	(pt_solution_reset): New function.
	(pt_solution_empty_p): Likewise.
	(pt_solution_includes): Likewise.
	(pt_solutions_intersect): Likewise.
	(pt_solution_merge_into): Likewise.
	(init_base_vars): Use a pointer type for the artificial variables.
	Add a NONLOCAL = &NONLOCAL constraint.  Add *ESCAPED = NONLOCAL
	constraint.  Remove *ESCAPED = &ESCAPED and *ESCAPED = &NONLOCAL
	constraints.
	(compute_points_to_sets): Build the ESCAPED and CALLUSED solutions.
	(compute_call_clobbered): Remove.
	(compute_may_aliases): Do not call compute_call_clobbered.
	* tree-ssa.c (verify_call_clobbering): Remove.
	(verify_alias_info): Likewise.
	(verify_ssa): Do not call verify_alias_info.
	(init_tree_ssa): Reset the escaped and callused solutions.
	(delete_tree_ssa): Likewise.
	(execute_update_addresses_taken): Do not clear call-clobber state.

	testsuite/
	* gcc.dg/torture/ssa-pta-fn-1.c: New testcase.

2009-01-09  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c (get_continuation_for_phi): Add visited param,
	adjust maybe_skip_until calls.
	(maybe_skip_until): Likewise.  All multiply visited PHI nodes
	finish the walking.
	(walk_non_aliased_vuses): Adjust get_continuation_for_phi calls.
	Free visited bitmap.

	testsuite/
	* gcc.dg/tree-ssa/ssa-fre-20.c: New testcase.

2009-01-09  Richard Guenther  <rguenther@suse.de>

	* tree-flow-inline.h (gimple_addressable_vars): Remove.
	(is_global_var): Adjust documentation.
	(may_be_aliased): Rely on TREE_ADDRESSABLE, do not use
	is_global_var.
	* tree-flow.h (struct gimple_df): Remove addressable_vars.
	* tree-ssa-structalias.c (compute_call_used_vars): Iterate
	over addressable variables with FOR_EACH_REFERENCED_VAR.
	(compute_call_clobbered): Likewise.
	* tree-ssa.c (init_tree_ssa): Do not initialize addressable_vars.
	(delete_tree_ssa): Do not free it.
	(execute_update_addresses_taken): Use a local bitmap.

	* gimple.h (gimple_add_to_addresses_taken): Remove.
	* tree-ssa-operands.c (add_to_addressable_set): Make static.
	(gimple_add_to_addresses_taken): Likewise.
	* tree-ssa-operands.h (add_to_addressable_set): Remove.

2009-01-09  Richard Guenther  <rguenther@suse.de>

	* fold-const.c (build_fold_addr_expr_with_type_1): Rename back to ...
	(build_fold_addr_expr_with_type): ... this.  Remove in_fold handling.
	Do not mark decls TREE_ADDRESSABLE.
	(build_fold_addr_expr): Adjust.
	(fold_addr_expr): Remove.
	(fold_unary): Use build_fold_addr_expr.
	(fold_comparison): Likewise.
	(split_address_to_core_and_offset): Likewise.
	* coverage.c (tree_coverage_counter_addr): Mark the array decl
	TREE_ADDRESSABLE.
	* gimplify.c (mark_addressable): Do not exclude RESULT_DECLs.
	(gimplify_modify_expr_to_memcpy): Mark source and destination
	addressable.
	* omp-low.c (create_omp_child_function): Mark the object decl
	TREE_ADDRESSABLE.
	(lower_rec_input_clauses): Mark the var we take the address of
	TREE_ADDRESSABLE.
	(lower_omp_taskreg): Mark the sender decl TREE_ADDRESSABLE.

	fortran/
	* trans-array.c (gfc_conv_descriptor_data_addr): Use
	gfc_build_addr_expr instead of build_fold_addr_expr.
	(gfc_trans_allocate_array_storage, gfc_trans_array_constructor_value,
	gfc_trans_constant_array_constructor, gfc_conv_array_data,
	gfc_conv_expr_descriptor, gfc_conv_array_parameter): Likewise.
	* trans-expr.c (gfc_conv_missing_dummy, gfc_conv_variable,
	gfc_conv_function_val, gfc_conv_operator_assign,
	gfc_conv_subref_array_arg, gfc_conv_function_call,
	gfc_conv_expr_reference, gfc_trans_scalar_assign): Likewise.
	* trans-intrinsic.c (gfc_conv_intrinsic_exponent,
	gfc_conv_intrinsic_ctime, gfc_conv_intrinsic_fdate,
	gfc_conv_intrinsic_ttynam, gfc_conv_intrinsic_minmax_char,
	gfc_conv_intrinsic_fraction, gfc_conv_intrinsic_spacing,
	gfc_conv_intrinsic_rrspacing, gfc_conv_intrinsic_set_exponent,
	gfc_conv_intrinsic_array_transfer, gfc_conv_intrinsic_transfer,
	gfc_conv_intrinsic_si_kind, gfc_conv_intrinsic_trim): Likewise.
	* trans-io.c (gfc_trans_io_runtime_check, set_parameter_ref,
	gfc_convert_array_to_string, gfc_trans_open, gfc_trans_close,
	build_filepos, gfc_trans_inquire, gfc_trans_wait,
	nml_get_addr_expr, transfer_namelist_element, build_dt,
	gfc_trans_dt_end, transfer_array_component, transfer_expr,
	transfer_array_desc, gfc_trans_transfer): Likewise.
	* trans-stmt.c (gfc_trans_allocate, gfc_trans_deallocate): Likewise.
	* trans.c (gfc_build_addr_expr): Mark the base of the address
	TREE_ADDRESSABLE.

2009-01-09  Richard Guenther  <rguenther@suse.de>

	Revert
	2009-01-07  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38721
	* tree-into-ssa.c (pass_build_ssa): Add TODO_update_address_taken.
	* tree-ssa-loop.c (tree_ssa_loop_ivopts): Update address-taken.
	* tree-cfg.c (verify_expr): Verify that stmt addresses-taken and
	function addressable-vars are conservatively correct.
	(verify_stmt): Initialize gsi of walk data.
	* tree-inline.c (optimize_inline_calls): Execute
	TODO_update_address_taken.
	(tree_function_versioning): Call execute_update_addresses_taken.
	* passes.c (init_optimization_passes): Remove redundant
	update-address-taken pass after final inlining.
	* tree-parloops.c (parallelize_loops): Call
	execute_update_addresses_taken.
	* tree-vectorizer.c (vectorize_loops): Likewise.

2009-01-07  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38721
	* tree-into-ssa.c (pass_build_ssa): Add TODO_update_address_taken.
	* tree-pass.h (TODO_update_address_taken): New flag.
	* tree-ssa-loop.c (tree_ssa_loop_ivopts): Update address-taken.
	* tree-ssa.c (execute_update_addresses_taken): Optimize only when
	optimizing.
	(pass_update_address_taken): Just use TODO_update_address_taken.
	* tree-flow.h (execute_update_addresses_taken): Update prototype.
	* tree-cfg.c (verify_expr): Verify that stmt addresses-taken and
	function addressable-vars are conservatively correct.
	(verify_stmt): Initialize gsi of walk data.
	* tree-inline.c (optimize_inline_calls): Execute
	TODO_update_address_taken.
	(tree_function_versioning): Call execute_update_addresses_taken.
	* passes.c (execute_function_todo): Handle TODO_update_address_taken.
	(init_optimization_passes): Remove redundant update-address-taken pass
	after final inlining.
	* tree-parloops.c (parallelize_loops): Call
	execute_update_addresses_taken.
	* tree-vectorizer.c (vectorize_loops): Likewise.

2009-01-07  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38301
	* alias.c (get_deref_alias_set): New function split out from ...
	(get_alias_set): ... here.
	* alias.h (get_deref_alias_set): Declare.
	* tree-vect-transform.c (vect_create_data_ref_ptr): Remove unused
	type parameter.  Remove restrict pointer handling.  Create a
	ref-all pointer in case type-based alias sets do not conflict.
	(vectorizable_store): Re-instantiate TBAA assert.
	(vectorizable_load): Likewise.

2009-01-05  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r143059.

2009-01-04  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38723
	* tree-ssa-alias.c (maybe_skip_until): Use get_continuation_for_phi.
	* tree-ssa-pre.c (compute_avail): Add all default definitions to
	the entry block.

2009-01-04  Richard Guenther  <rguenther@suse.de>

	* tree-dfa.c (refs_may_alias_p): Disambiguate using alias
	sets of the bases.
	* tree-ssa-operands.c (create_ssa_artificial_load_stmt): Add
	the virtual operand in SSA form.
  
2009-01-04  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-structalias.c (intra_create_variable_infos): Add
	constraints for a result decl that is passed by hidden reference.
	* tree-ssa-alias.c (may_point_to_same_object): Make two identical
	pointer always conflict.

2009-01-03  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r143032.

2009-01-03  Richard Guenther  <rguenther@suse.de>

	* tree-flow-inline.h (may_be_aliased): Query the addressable
	vars bitmap in addition to checking TREE_ADDRESSABLE.
	* tree-ssa-structalias.c (get_constraint_for_ptr_offset):
	For field-sensitive analysis also handle variable offsets
	on addresses of variables that did not get decomposed.
	(find_func_aliases): Fix constraint generation for asm statements.
	(find_what_var_points_to): Do not set pt_nonlocal for heap
	variables.
	* tree-dfa.c (refs_may_alias_p): Disambiguate two indirect
	references with PTA information.
	* tree-ssa-alias.h (may_point_to_same_object): Declare.
	* tree-ssa-alias.c (may_point_to_same_object): New function.
	(ref_may_used_by_call_p): Fix handling of indirect references.

2009-01-03  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c
	(get_single_incoming_phi_arg_for_maybe_loop_invariant_ref): Remove.
	(maybe_skip_until): New helper function.
	(get_continuation_for_phi): Likewise.
	(walk_non_aliased_vuses): Use get_continuation_for_phi instead of
	get_single_incoming_phi_arg_for_maybe_loop_invariant_ref.

2009-01-02  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c (struct count_ptr_d, count_ptr_derefs,
	count_uses_and_derefs): Move ...
	* gimple.c: ... here.
	* gimple.h (count_uses_and_derefs): Declare.
	* passes.c (init_optimization_passes): Remove reset_cc_flags pass.
	* tree-pass.h (pass_reset_cc_flags): Remove.
	* tree-flow-inline.h (may_be_aliased): New function, moved from ...
	* tree-ssa-alias.c (may_be_aliased): ... here.
	* tree-flow.h (enum escape_type): Move ...
	* tree-ssa-alias.h: ... here.
	* tree-flow.h (struct ptr_info_def): Remove escape_mask and
	value_escapes_p members.
	* tree-flow.h: Move declarations around to correct places.
	* tree-ssa-alias.c: Rewrite overall documentation.
	(struct alias_stats_d, alias_stats, dump_alias_stats,
	reset_alias_info, reset_cc_flags, pass_reset_cc_flags): Remove.
	(compute_call_clobbered, compute_may_aliases, may_alias_p,
	pass_build_alias): Move ...
	* tree-ssa-structalias.c: ... here.
	(may_alias_p): Simplify, make static.
	(clobber_what_escaped, compute_call_used_vars, compute_points_to_sets,
	init_alias_heapvars): Make static.
	(compute_points_to_sets): Reset is_dereferenced flags.
	* tree-ssa-structalias.h (is_escape_site): Move to tree-ssa-alias.h.
	(compute_points_to_sets, delete_points_to_sets): Remove.

2009-01-02  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c (ref_may_used_by_call_p): New function.
	(ref_may_used_by_stmt_p): Likewise.
	(call_may_clobber_ref_p): Handle more cases.
	(stmt_may_clobber_ref_p): Export.
	* tree-ssa-alias.h (ref_may_used_by_stmt_p): Declare.
	(stmt_may_clobber_ref_p): Likewise.
	* tree-ssa-dse.c (struct address_walk_data): Remove.
	(memory_ssa_name_same): Likewise.
	(memory_address_same): Likewise.
	(get_kill_of_stmt_lhs): Likewise.
	(dse_possible_dead_store_p): Simplify, use the oracle.  Handle
	unused stores.
	(dse_optimize_stmt): Simplify.  Properly remove stores.

	testsuite/
	* gcc.dg/noncompile/920507-1.c: Fix invalid dead array access.

2009-01-02  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-structalias.c (do_sd_constraint): Do not shortcut
	computing the transitive closure.

2009-01-01  Richard Guenther  <rguenther@suse.de>

	testsuite/
	* gcc.dg/tree-ssa/alias-15.c: Remove.
	* gcc.dg/tree-ssa/alias-19.c: Adjust.
	* gcc.dg/tree-ssa/pr23382.c: Likewise.
	* gcc.dg/tree-ssa/pr26421.c: Likewise.

2009-01-01  Richard Guenther  <rguenther@suse.de>

	* tree-dfa.c (dump_referenced_vars): Tidy.
	(get_ref_base_and_extent): Allow bare decls.
	(refs_may_alias_p): Unconditionally initialize size/max_size.
	Handle register/constant bases.  Handle mixed the pointer/decl
	case with both offset and PTA disambiguation.
	* tree-flow.h (struct ptr_info_def): Remove pt_global_mem, factor
	the points-to solution part into a pt_solution sub-structure.
	Add nonlocal, escaped and vars_contains_global flags.
	(dump_points_to_info): Remove.
	(debug_points_to_info): Likewise.
	(find_what_p_points_to): Likewise.
	* tree-into-ssa.c (dump_decl_set): Do not print a newline.
	(debug_decl_set): Do it here.
	(dump_update_ssa): And here.
	* tree-ssa-alias.c (compute_flow_sensitive_aliasing): Remove.
	(set_pt_anything): Likewise.
	(compute_may_aliases): Do not call compute_flow_sensitive_aliasing,
	dump_points_to_info.
	(reset_alias_info): Cleanup, initialize a correct points-to solution.
	(may_point_to_global_var): Adjust.
	(may_point_to_decl): New function.
	(dump_alias_info): Clean.
	(get_ptr_info): Initialize a correct points-to solution.
	(dump_points_to_info_for): Adjust.
	(dump_points_to_info): Remove.
	(debug_points_to_info): Likewise.
	* tree-ssanames.c (duplicate_ssa_name_ptr_info): No need to copy
	the shared bitmaps.
	* tree-ssa-alias.h (may_point_to_decl): Declare.
	* tree-ssa-structalias.c (set_uids_in_ptset): Take a points-to
	solution struct.
	(find_what_var_points_to): Split out generic parts from ...
	(find_what_p_points_to): ... here.
	(compute_points_to_sets): Do what compute_flow_sensitive_aliasing
	did as well.

2008-12-31  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-structalias.c (set_uids_in_ptset): Fix pruned accounting.
	(compute_points_to_sets): Initialize the SSA_NAME pointer info
	dereferenced field.
 
2008-12-11  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r142671.

2008-12-10  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38458
	* tree-ssa-copy.c (copy_prop_visit_phi_node): For the first
	argument use the arguments copy-of value.

2008-12-10  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38207
	* tree-flow.h: Include tree-ssa-alias.h.
	(get_single_def_stmt, get_single_def_stmt_from_phi,
	get_single_def_stmt_with_phi): Remove.
	(refs_may_alias_p): Move ...
	* tree-ssa-alias.h: ... here.  New file.
	* tree-dfa.c (refs_may_alias_p): Handle non-aliased locals.
	(get_single_def_stmt, get_single_def_stmt_from_phi,
	get_single_def_stmt_with_phi): Remove.
	* tree-ssa-alias.c: Include tree-ssa-alias.h.
	(call_may_clobber_ref_p): New function.
	(stmt_may_clobber_ref_p): Likewise.
	(get_single_incoming_phi_arg_for_maybe_loop_invariant_ref): Likewise.
	(walk_non_aliased_vuses): Likewise.
	* Makefile.in (TREE_FLOW_H): Add tree-ssa-alias.h.
	* tree-ssa-sccvn.c (SSA_VAL): Revert handling NULL arguments.
	(get_def_ref_stmt_vuse): Remove.
	(vn_reference_lookup_2): New function.
	(vn_reference_lookup_pieces): Use walk_non_aliased_vuses for
	walking equivalent vuses.
	(vn_reference_lookup): Likewise.

	testsuite/
	* gcc.dg/tree-ssa/ssa-fre-18.c: New testcase.
	* gcc.dg/tree-ssa/ssa-fre-19.c: Likewise.
	* gcc.dg/tree-ssa/ssa-lim-3.c: Run at -O to disable PRE.
	* gcc.dg/tree-ssa/ssa-pre-23.c: New testcase.
	* gcc.dg/tree-ssa/ssa-pre-24.c: Likewise.

2008-12-10  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-operands.c (get_asm_expr_operands): Add proper
	virtual operands for memory clobbers.
	* tree-dfa.c (refs_may_alias_p): Disable TBAA disambiguation
	if one reference is a TARGET_MEM_REF.

2008-12-10  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-dse.c (dse_optimize_stmt): Fix typo in last change.

2008-12-09  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-dse.c (dse_optimize_stmt): Properly query if the rhs
	aliases the lhs in a copy stmt.

2008-12-08  Richard Guenther  <rguenther@suse.de>

	* gimple.h (gimple_vuse): New function.
	(gimple_vdef): Likewise.
	* tree-ssa-sccvn.c (SSA_VAL): Check for NULL.
	(vn_constant_eq): Bail out if hashes are different.
	(vn_reference_compute_hash): Simplify.
	(vn_reference_eq): Likewise.
	(vuses_to_vec, copy_vuses_from_stmt, vdefs_to_vec,
	copy_vdefs_from_stmt, shared_lookup_vops, shared_vuses_from_stmt,
	valueize_vuses): Remove.
	(get_def_ref_stmt_vuses): Simplify.  Rename to ...
	(get_def_ref_stmt_vuse): ... this.
	(vn_reference_lookup_pieces): Simplify.
	(vn_reference_lookup): Likewise.
	(vn_reference_insert): Likewise.
	(vn_reference_insert_pieces): Likewise.
	(vn_nary_op_eq): Bail out if hashes are different.
	(vn_phi_eq): Likewise.
	(set_ssa_val_to): Do not use SSA_VAL as lvalue.
	(visit_reference_op_call): Simplify.
	(visit_reference_op_load): Likewise.
	(visit_reference_op_store): Likewise.
	(init_scc_vn): Remove shared_lookup_vuses initialization.
	(free_scc_vn): Remove shared_lookup_vuses freeing.
	(run_scc_vn): Do not use SSA_VAL as lvalue.
	(sort_vuses, sort_vuses_heap): Remove.
	* tree-ssa-sccvn.h (struct vn_reference_s): Replace vuses
	vector with single vuse pointer.
	(vn_reference_lookup_pieces, vn_reference_lookup,
	vn_reference_insert, vn_reference_insert_pieces): Adjust prototypes.
	(shared_vuses_from_stmt): Remove.
	* tree-dfa.c (get_single_def_stmt): Simplify.
	(get_single_def_stmt_with_phi): Likewise.
	* tree-ssa-pre.c (translate_vuses_through_block): Simplify.  Rename to
	(translate_vuse_through_block): ... this.
	(phi_translate_1): Simplify.
	(value_dies_in_block_x): Likewise.
	(compute_avail): Simplify.

2008-11-27  Richard Guenther  <rguenther@suse.de>

	* passes.c (init_optimization_passes): Remove pass_update_address_taken
	before initial PTA pass again.
	(execute_function_todo): For TODO_rebuild_alias run
	update_address_taken before compute_may_aliases.
	* tree-flow.h (execute_update_addresses_taken): Declare.
	* tree-ssa.c (execute_update_addresses_taken): Export.  Update SSA
	manually.
	(pass_update_address_taken): Remove TODO_update_ssa, add
	TODO_dump_func.

2008-11-26  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-structalias.c (intra_create_variable_infos): Make
	a constraint for the static chain parameter.

2008-11-26  Richard Guenther  <rguenther@suse.de>

	* gimple.c (is_gimple_reg): Do not handle memory tags.
	* ipa-cp.c (ipcp_update_callgraph): Fix typo.
	* passes.c (init_optimization_passes): Schedule
	update_address_taken pass before points-to analysis.
	* tree-data-ref.c (dr_analyze_alias): Ignore vops and SMTs.
	(free_data_ref): Likewise.
	(create_data_ref): Likewise.
	(dr_may_alias_p): Likewise.
	(analyze_all_data_dependences): Likewise.
	* tree-dfa.c (dump_variable): Do not dump SMTs, memory stats,
	may-aliases or partitions.
	(remove_referenced_var): Do not clear mpt or symbol_mem_tag.
	* tree-dump.c (dequeue_and_dump): Do not handle SYMBOL_MEMORY_TAG
	or NAME_MEMORY_TAG.
	* tree-flow-inline.h (gimple_aliases_computed_p): Remove.
	(gimple_global_var): Likewise.
	(may_aliases): Likewise.
	(is_global_var): Remove MTAG code.
	(unmodifiable_var_p): Likewise.
	(memory_partition): Remove.
	(factoring_name_p): Likewise.
	(symbol_mem_tag): Likewise.
	(set_symbol_mem_tag): Likewise.
	(gimple_mem_ref_stats): Likewise.
	* tree-flow.h (struct mem_sym_stats_d): Remove.
	(struct mem_ref_stats_d): Likewise.
	(struct gimple_df): Remove global_var, aliases_computed_p and
	mem_ref_stats fields.
	(struct ptr_info_def): Remove memory_tag_needed and name_mem_tag
	fields.
	(struct var_ann_d): Remove call_clobbered, mpt and symbol_mem_tag
	fields.
	* tree-into-ssa (mark_sym_for_renaming): Remove memory paritioning
	code.
	(update_ssa): Likewise.
	* tree-outof-ssa.c (create_temp): Do not set SMT.
	* tree-predcom.c (set_alias_info): Remove.
	(prepare_initializers_chain): Do not call it.
	* tree-pretty-print.c (dump_generic_node): Do not handle memory tags.
	* tree-sra.c (sra_walk_function): Use gimple_references_memory_p.
	* tree-ssa-alias.c (struct alias_info): Remove.
	(get_mem_sym_stats_for, mem_sym_stats, set_memory_partition,
	mark_non_addressable, sort_tags_by_id, init_transitive_clobber_worklist,
	add_to_worklist, mark_aliases_call_clobbered, compute_tag_properties):
	Remove.
	(set_initial_properties): Rename to compute_call_clobbered.
	(dump_memory_partitions, debug_memory_partitions, need_to_partition_p,
	mem_sym_score, count_mem_refs, dump_mem_ref_stats, debug_mem_ref_stats,
	dump_mem_sym_stats, debug_mem_sym_stats, dump_mem_sym_stats_for_var,
	dump_all_mem_sym_stats, debug_all_mem_sym_stats, dump_mp_info,
	debug_mp_info, update_mem_sym_stats_from_stmt, compare_mp_info_entries,
	mp_info_cmp, sort_mp_info, get_mpt_for, find_partition_for,
	rewrite_alias_set_for, estimate_vop_reduction, update_reference_counts,
	build_mp_info, compute_memory_partitions): Remove.
	(compute_may_aliases): Remove all but points-to analysis code.
	(reset_alias_info): Likewise.
	(init_alias_info): Likewise.
	(compute_flow_sensitive_aliasing): Likewise.
	(delete_mem_ref_stats, init_mem_ref_stats, delete_alias_info,
	eq_ptr_info, ptr_info_hash, create_name_tags, union_alias_set_into,
	have_common_aliases_p, compute_flow_insensitive_aliasing,
	create_alias_map_for, update_alias_info_1, update_alias_info,
	setup_pointers_and_addressables, maybe_create_global_var): Remove.
	(may_alias_p): Remove SMT code.
	(may_point_to_global_var): Adjust.
	(add_may_alias): Remove.
	(set_pt_anything): Adjust.
	(create_tag_raw, create_memory_tag, get_nmt_for, get_smt_for,
	create_global_var): Remove.
	(dump_alias_info): Adjust.
	(dump_points_to_info_for): Likewise.
	(dump_may_aliases_for, debug_may_aliases_for, add_may_alias_for_new_tag,
	new_type_alias): Remove.
	* tree-ssa-ccp.c (get_symbol_constant_value): Remove memory-tag
	related code.
	* tree-ssa-copy.c (may_propagate_copy): Likewise.
	(may_propagate_copy_into_stmt): Likewise.
	(merge_alias_info): Do nothing for now.
	* tree-ssa-copyrename.c (copy_rename_partition_coalesce): Remove
	memory-tag related code.
	* tree-ssa-live.c (remove_unused_locals): Likewise.
	* tree-ssa-loop-ivopts.c (get_ref_tag): Remove.
	(copy_ref_info): Remove memory-tag related code.
	* tree-ssa-operands.c (init_ssa_operands): Likewise.
	(fini_ssa_operands): Likewise.
	(get_expr_operands): Likewise.
	* tree-ssa-operands.h (struct ssa_operands): Remove mpt_table field.
	* tree-ssa-phiprop.c (propagate_with_phi): Remove memory-tag related
	code.
	* tree-ssa-structalias.c (find_func_aliases): Do not mark stmts
	modified.
	(var_can_have_subvars): Remove memory-tag related code.   
	(set_uids_in_ptset): Mark pointer-info as pt_global_mem if the set
	contains a global variable.
	(delete_alias_heapvars): Allow unconditional call.
	* tree-ssa-structalias.h (update_mem_sym_stats_from_stmt): Remove.
	* tree-ssa.c (verify_flow_insensitive_alias_info): Remove.
	(verify_flow_sensitive_alias_info): Likewise.
	(verify_call_clobbering): Adjust.
	(verify_memory_partitions): Remove.
	(verify_alias_info): Adjust.
	(verify_ssa): Likewise.
	(delete_tree_ssa): Remove memory-tag related code.
	(warn_uninitialized_var): Aliases are always available.
	(execute_update_addresses_taken): Update gimple_addressable_vars.
	Update call-clobber state.
	* tree-tailcall.c (suitable_for_tail_opt_p): Remove memory-tag
	related code.
	(find_tail_calls): Use gimple_references_memory_p.
	* tree-vect-transform.c (vect_create_data_ref_ptr): Remove memory-tag
	related code.
	* tree.c (init_ttree): Likewise.
	(tree_code_size): Likewise.
	(tree_node_structure): Likewise.
	(build7_stat): Re-write to be build6_stat.
	* tree.h (MTAG_P, TREE_MEMORY_TAG_CHECK, TMR_TAG): Remove.
	(SSA_VAR_P): Adjust.
	(struct tree_memory_tag): Remove.
	(struct tree_memory_partition_tag): Likewise.
	(union tree_node): Adjust.
	(build7): Re-write to be build6.
	* treestruct.def (TS_MEMORY_TAG, TS_MEMORY_PARTITION_TAG): Remove.
	* tree-ssa-alias-warnings.c (build_reference_table): Remove
	memory-tag related code.
	(ffan_walker): Likewise.
	(detect_strict_aliasing_named): Likewise.
	* tree-data-ref.h (struct dr_alias): Remove symbol_tag field.
	(DR_SYMBOL_TAG, DR_VOPS): Remove.
	* tree-ssa-address.c (create_mem_ref_raw): Use build6.
	(get_address_description): Remove memory-tag related code.
	* tree-vect-analyze.c (vect_analyze_data_refs): Likewise.
	* tree.def (NAME_MEMORY_TAG, SYMBOL_MEMORY_TAG, MEMORY_PARTITION_TAG):
	Remove.
	(TARGET_MEM_REF): Remove TMR_TAG operand.

	* tree-dfa.c (add_referenced_var): Initialize call-clobber state.
	* tree-flow-inline.h (is_call_used): Use is_call_clobbered.
	(is_call_clobbered): Global variables are always call clobbered,
	query the call-clobbers bitmap.
	(mark_call_clobbered): Ignore global variables.
	(clear_call_clobbered): Likewise.
	* tree-ssa-alias.c (reset_cc_flags): Do not clear all
	call-clobber flags.  Verify initial state instead.
	* tree-ssa.c (verify_call_clobbering): Adjust.

2008-11-26  Richard Guenther  <rguenther@suse.de>

	Revert
	* tree-ssa-structalias.c (struct variable_info): Add
	is_nonpointer_var flag.
	(new_var_info): Clear it.
	(perform_var_substitution): Set it.
	(find_what_p_points_to): Use it.

	Merge from trunk r142215.

2008-11-26  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/38180
	* tree-ssa-ccp.c (get_default_value): Simplify.
	(likely_value): Likewise.
	(surely_varying_stmt_p): Properly handle VOP case.
	(ccp_initialize): Likewise.
	(ccp_fold): Handle propagating through *&.
	(fold_const_aggregate_ref): Also handle decls.

	testsuite/
	* gcc.dg/tree-ssa/ssa-ccp-24.c: New testcase.

2008-11-25  Richard Guenther  <rguenther@suse.de>

	* tree-data-ref.c (dr_may_alias_p): Use the alias-oracle.

	* tree-tailcall.c (tree_optimize_tail_calls_1): Also split the
	edge from the entry block if we have degenerate PHI nodes in
	the first basic block.

	* gimple.c (gimple_set_bb): Fix off-by-one error.
	* tree-cfg.c (move_block_to_fn): Likewise.

	PR tree-optimization/37869
	* tree-ssa-structalias.c (struct variable_info): Add
	is_nonpointer_var flag.
	(new_var_info): Clear it.
	(perform_var_substitution): Set it.
	(find_what_p_points_to): Use it.

2008-11-24  Richard Guenther  <rguenther@suse.de>

	* tree-flow.h (struct gimple_df): Add vop_needs_renaming flag.
	* tree-into-ssa.c (symbol_marked_for_renaming): Adjust for
	vop_needs_renaming flag.
	(is_old_name): Likewise.
	(is_new_name): Likewise.
	(pass_build_ssa): Run TODO_update_ssa_only_virtuals.
	(dump_update_ssa): Dump vop_needs_renaming.
	(delete_update_ssa): Clear delete_update_ssa.
	(mark_sym_for_renaming): Adjust for vop_needs_renaming flag.
	(need_ssa_update_p): Likewise.
	(release_ssa_name_after_update_ssa): Likewise.
	(update_ssa): Likewise.
	* ipa-cp.c (ipcp_update_callgraph): Update SSA form.
	* tree-ssa-alias.c (create_vop_var): Remove.
	(compute_may_aliases): Do not call it here.
	(may_point_to_global_var): Handle pointer constants.
	* tree-inline.c (expand_call_inline): Mark the VOP for renaming.
	* gimple.h (gimple_loaded_syms): Note that we should fix this
	interface.
	* tree-ssa-operands.c (create_vop_var): Move here.
	(init_ssa_operands): Call it.
	(fini_ssa_operands): Clear gimple_df->vop.
	(finalize_ssa_vdefs): Mark the VOP for renaming on changes.
	(finalize_ssa_vuse_ops): Likewise.
	(append_vdef): Simplify.
	(append_vuse): Likewise.
	(access_can_touch_variable): Remove.
	(add_virtual_operand): Simplify.
	(get_addr_dereference_operands): Remove.
	(get_indirect_ref_operands): Simplify.
	(get_tmr_operands): Likewise.
	(add_call_clobber_ops): Remove.
	(add_call_read_ops): Likewise.
	(maybe_add_call_clobbered_vops): Rename to ...
	(maybe_add_call_vops): ... this.  Inline remanents of the
	removed functions.
	(get_expr_operands): Simplify.
	(create_ssa_artificial_load_stmt): Likewise.
	* tree-call-cdce.c (tree_call_cdce): Rename the VOP.
	* tree-cfg.c (mark_virtual_ops_in_region): Remove.
	(move_sese_region_to_fn): Do not call it.
	* omp-low.c (expand_omp_taskreg): Update SSA form.
	* tree-ssa.c (execute_update_addresses_taken): Update for
	single VOP.

2008-11-23  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r142135.

2008-09-19  Richard Guenther  <rguenther@suse.de>

	* tree-flow.h (struct gimple_df): New member vop.
	* tree-flow-inline.h (gimple_vop): New function.
	* tree-ssa-alias.c (create_vop_var): New function.
	(compute_may_aliases): Call it.
	* tree-ssa-operands.c (append_vdef): Always append
	the single gimple vop.
	(append_vuse): Likewise.
	* tree-ssa.c (verify_ssa_name): Verify all VOPs are
	based on the single gimple vop.

