2005-11-21  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/fp-bit.c (clzusi): New function.
	(si_to_float, usi_to_float): Use it to compute proper shift.
	(usi_to_float): Preserve guard bits when shifting right.
	* gcc/libgcc-std.ver (GCC_4.2.0): New version.
	* gcc/libgcc2.c (__floatundixf, __floatunditf, __floatundidf,
	__floatundisf): New functions.
	* gcc/libgcc2.h (__floatundixf, __floatunditf, __floatundidf,
	__floatundisf): Declare.
	* gcc/mklibgcc.in (lib2funcs): Add _floatundidf, _floatundisf,
	_floatundixf, and _floatunditf.
	* gcc/optabs.c (expand_float): If target does not define a pattern for
	signed or unsigned conversion, use an unsigned libcall instead of
	a signed one.
	(init_optabs): Initialize ufloat_optab.
	* gcc/testsuite/gcc.c-torture/execute/floatunsisf-1.c: New test.

2005-11-20  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/combine.c (try_combine): Revert previous change.  Do not run
	subst on i1src and i2src in the case of generating a PARALLEL for
	a comparison.

2005-11-11  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/combine.c (try_combine): When generating a PARALLEL for a
	comparison using the unmodified version of i2pat, use the
	unmodified version of i2src as well.
	(make_compound_operation): Swap operands of commutative operation
	if necessary before returning.
	* gcc/config/rs6000/rs6000.opt (mmulhw): New option.
	* gcc/doc/invoke.texi (-mmulhw): Document.
	* gcc/config/rs6000/rs6000.c (rs6000_override_options): Enable
	-mmulhw for 405 and 440.
	* gcc/config/rs6000/rs6000.md: Add half-word multiply and
	multiply-accumulate instructions for 405 and 440.
	* gcc/testsuite/gcc.target/powerpc/405-macchw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-macchw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-macchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-macchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-machhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-machhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-machhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-machhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-nmacchw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-nmacchw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-nmachhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-nmachhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-nmaclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-nmaclhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-macchw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-macchw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-macchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-macchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-machhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-machhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-machhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-machhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-nmacchw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-nmacchw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-nmachhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-nmachhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-nmaclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-nmaclhw-2.c: New tests.

2005-11-08  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/rs6000/t-fprules (MULTILIB_MATCHES_FLOAT): Include
	-mcpu=440.

2005-11-03  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/testsuite/gcc.target/powerpc: New directory.
	* gcc/testsuite/gcc.target/powerpc/powerpc.exp: New file.

2005-11-01  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/rs6000/rs6000.c (rs6000_rtx_costs): Do not add extra
	costs for MULT inside PLUS or MINUS.

