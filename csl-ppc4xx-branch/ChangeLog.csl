2006-03-17  Joseph Myers  <joseph@codesourcery.com>

	Backport:
	2006-03-17  David Edelsohn  <edelsohn@gnu.org>

	* config/rs6000/rs6000.md (strlensi): Emit barrier after
	unconditional jump.

2006-03-17  Joseph Myers  <joseph@codesourcery.com>

	* gcc/config/soft-fp: Update license notices.
	* gcc/config/soft-fp/README: New.

2006-03-02  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/rs6000/rs6000.opt (mdlmzb): New option.
	* gcc/doc/invoke.texi (-mdlmzb): Document.
	* gcc/config/rs6000/rs6000.c (rs6000_override_options): Enable
	-mdlmzb for 405 and 440.
	* gcc/config/rs6000/rs6000.md: Add dlmzb support for 405 and 440.
	* gcc/testsuite/gcc.target/powerpc/405-dlmzb-strlen-1.c,
	gcc/testsuite/gcc.target/powerpc/440-dlmzb-strlen-1.c: New tests.

2006-02-18  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/soft-fp: New directory.  Based on glibc.
	* gcc/config/soft-fp/t-softfp: New.
	* gcc/mklibgcc.in: Handle LIB2FUNCS_EXCLUDE.
	* gcc/Makefile.in (libgcc.mk): Pass LIB2FUNCS_EXCLUDE.
	(LIBGCC_DEPS): Add $(SFP_MACHINE).
	* gcc/config/rs6000/sfp-machine.h: New.  From glibc.
	* gcc/config/rs6000/t-fprules: Use soft-fp not fp-bit.
	* gcc/config/rs6000/t-ppccomm (LIB2FUNCS_EXTRA): Use +=.
	* gcc/config.gcc (powerpc-*-linux*): Use soft-fp/t-softfp.

2005-11-29  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/testsuite/gcc.dg/torture/fp-int-convert-timode.c: XFAIL only
	on lp64 targets.
	* gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c:
	XFAIL also for LP64 ia64.

2005-11-27  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/floatunsisf.c, gcc/config/floatunsidf.c,
	gcc/config/floatunsixf.c, gcc/config/floatunsitf.c: New files.
	* gcc/config/ia64/t-hpux: Add floatunsitf.c.
	* gcc/config/ia64/ia64.c (ia64_init_libfuncs): Use
	_U_Qfcnvxuf_dbl_to_quad for unsigned DImode-to-TFmode conversion.

2005-11-25  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/fp-bit.c (isnan, isinf, pack_d, unpack_d): Use
	__builtin_expect.

2005-11-25  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/fp-bit.h (LSHIFT): Take shift count parameter.
	* gcc/config/fp-bit.c (_fpadd_parts): Shift in one go instead of
	one bit at a time.

2005-11-25  Joseph S. Myers  <joseph@codesourcery.com>

	PR middle-end/24998
	* gcc/config/rs6000/rs6000.c (rs6000_init_libfuncs): Use _q_utoq
	for unsigned conversions from SImode to TFmode.
	* gcc/config/sparc/sparc.c (sparc_init_libfuncs): Use _Q_utoq and
	_Q_ulltoq for unsigned conversions from SImode and DImode to
	TFmode.
	* gcc/testsuite/gcc.dg/torture/fp-int-convert-float.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert-double.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert-long-double.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert-timode.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert-float80.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert-float80-timode.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert-float128.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c,
	gcc/testsuite/gcc.dg/torture/fp-int-convert.h: New files.

2005-11-21  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/fp-bit.c (clzusi): New function.
	(si_to_float, usi_to_float): Use it to compute proper shift.
	(usi_to_float): Preserve guard bits when shifting right.
	* gcc/libgcc-std.ver (GCC_4.2.0): New version.
	* gcc/libgcc2.c (__floatundixf, __floatunditf, __floatundidf,
	__floatundisf): New functions.
	* gcc/libgcc2.h (__floatundixf, __floatunditf, __floatundidf,
	__floatundisf): Declare.
	* gcc/mklibgcc.in (lib2funcs): Add _floatundidf, _floatundisf,
	_floatundixf, and _floatunditf.
	* gcc/optabs.c (expand_float): If target does not define a pattern for
	signed or unsigned conversion, use an unsigned libcall instead of
	a signed one.
	(init_optabs): Initialize ufloat_optab.
	* gcc/testsuite/gcc.c-torture/execute/floatunsisf-1.c: New test.

2005-11-20  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/combine.c (try_combine): Revert previous change.  Do not run
	subst on i1src and i2src in the case of generating a PARALLEL for
	a comparison.

2005-11-11  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/combine.c (try_combine): When generating a PARALLEL for a
	comparison using the unmodified version of i2pat, use the
	unmodified version of i2src as well.
	(make_compound_operation): Swap operands of commutative operation
	if necessary before returning.
	* gcc/config/rs6000/rs6000.opt (mmulhw): New option.
	* gcc/doc/invoke.texi (-mmulhw): Document.
	* gcc/config/rs6000/rs6000.c (rs6000_override_options): Enable
	-mmulhw for 405 and 440.
	* gcc/config/rs6000/rs6000.md: Add half-word multiply and
	multiply-accumulate instructions for 405 and 440.
	* gcc/testsuite/gcc.target/powerpc/405-macchw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-macchw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-macchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-macchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-machhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-machhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-machhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-machhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-maclhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mulhhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/405-mullhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/405-nmacchw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-nmacchw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-nmachhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-nmachhw-2.c,
	gcc/testsuite/gcc.target/powerpc/405-nmaclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/405-nmaclhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-macchw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-macchw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-macchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-macchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-machhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-machhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-machhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-machhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-maclhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulchwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mulhhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhwu-1.c,
	gcc/testsuite/gcc.target/powerpc/440-mullhwu-2.c,
	gcc/testsuite/gcc.target/powerpc/440-nmacchw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-nmacchw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-nmachhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-nmachhw-2.c,
	gcc/testsuite/gcc.target/powerpc/440-nmaclhw-1.c,
	gcc/testsuite/gcc.target/powerpc/440-nmaclhw-2.c: New tests.

2005-11-08  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/rs6000/t-fprules (MULTILIB_MATCHES_FLOAT): Include
	-mcpu=440.

2005-11-03  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/testsuite/gcc.target/powerpc: New directory.
	* gcc/testsuite/gcc.target/powerpc/powerpc.exp: New file.

2005-11-01  Joseph S. Myers  <joseph@codesourcery.com>

	* gcc/config/rs6000/rs6000.c (rs6000_rtx_costs): Do not add extra
	costs for MULT inside PLUS or MINUS.

