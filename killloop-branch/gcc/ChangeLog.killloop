2005-10-05  Zdenek Dvorak  <dvorakz@suse.cz>

	Merge from mainline (killloop-merge-20051005).

2005-10-05  Zdenek Dvorak  <dvorakz@suse.cz>

	* Makefile.in (tree-ssa-loop-niter.o): Add tree-affine.h dependency.
	* cfgloop.h (struct nb_iter_bound): Removed.
	(struct loop): Fields estimated_nb_iterations and bounds removed,
	fields niter_bounds_state, max_nb_iterations, is_finite and
	iv_no_overflow added.
	(record_estimate): Declaration removed.
	* hwint.h (double_int): Declaration moved from tree-affine.h.
	* tree-affine.c (restrict_cst_to_precision, double_int_fits_in_hwi_p,
	double_int_negative_p, double_int_to_hwi, double_int_mul,
	double_int_add, double_int_negate): Take mask instead of affine
	combination as an argument.
	(double_int_fits_in_unsigned_hwi_p, double_int_to_unsigned_hwi,
	double_int_divide, double_int_fits_to_type_p, double_int_smaller_p,
	double_int_split_digit, dump_double_int): New functions.
	(affine_combination_set_mask): Replaced with ...
	(double_int_mask): ... new function.
	(aff_combination_zero, aff_combination_const, aff_combination_scale,
	aff_combination_add_elt, aff_combination_add, aff_combination_convert,
	add_elt_to_tree, aff_combination_to_tree): Use new calling conventions
	of double_int functions.
	* tree-affine.h (double_int): Moved to hwint.h.
	(double_int_fits_in_hwi_p, double_int_to_hwi, double_int_mul,
	double_int_add, double_int_negate, double_int_negative_p): Declaration
	changed.
	(double_int_fits_to_type_p, double_int_fits_in_unsigned_hwi_p,
	double_int_to_unsigned_hwi, double_int_divide, double_int_smaller_p,
	dump_double_int, double_int_mask): Declare.
	(double_int_all): New inline function.
	(double_int_minus_one_p): Take mask instead of affine combination as
	an argument.
	* tree-data-ref.c (estimate_niter_from_size_of_data,
	analyze_array_indexes): Use array bounds instead of type size.
	(compute_overlap_steps_for_affine_1_2, analyze_subscript_affine_affine):
	Use get_max_loop_niter.
	* tree-flow.h (struct tree_niter_desc): Removed additional_info field.
	(select_condition_shape): Declaration changed.
	(loop_iterations_at_most_p, condition_holds_in_loop_p,
	get_max_loop_niter, record_niter_bound, record_nonwrapping_iv): Declare.
	* tree-ssa-address.c (most_expensive_mult_to_index): Use new calling
	conventions of double_int functions.
	* tree-ssa-loop-endcond.c (modify_to_compare_with_zero,
	may_wrap_around_type_range_p, select_condition_shape,
	endcond_candidate_cost, best_endcond_candidate_cost): Use information
	about bounds on # of iterations.
	(try_removing_addition_from_bound): Removed.
	* tree-ssa-loop-ivopts.c (decl_rtl_to_reset): Removed.
	(tree_ssa_iv_optimize_init, free_loop_data,
	tree_ssa_iv_optimize_finalize): Do not set decl_rtl_to_reset.
	(produce_memory_decl_rtl, prepare_decl_rtl, computation_cost): Removed.
	(integer_cost, fixed_address_cost): New functions.
	(force_expr_to_var_cost): Do not use computation_cost.
	(niter_for_exit): Expand simple operations in # of iterations.
	(get_computation_aff, (aff_combination_cost,
	aff_combination_cost_address, get_computation_cost_at): Use new calling
	conventions of double_int functions.
	(may_eliminate_iv): Pass loop to select_condition_shape.
	* tree-ssa-loop-niter.c: Include tree-affine.h.
	(number_of_iterations_special, simplify_using_initial_conditions,
	number_of_iterations_exit): Do not set additional_info field.
	(struct iv_no_overflow): New.
	(record_estimate, compute_estimated_nb_iterations): Replaced by ...
	(record_niter_bound, record_nonwrapping_iv): ... new functions.
	(nonnegative_in_loop_p, derive_integral_bound, nonwrapping_due_to,
	in_nonwrapping_ivs_list_p): New functions.
	(infer_loop_bounds_from_array): Use record_nonwrapping_iv.
	(infer_loop_bounds_from_signedness): New function.
	(infer_loop_bounds_from_undefined): Split some code to
	infer_loop_bounds_from_signedness.
	(estimate_numbers_of_iterations_loop): Set state of # of iterations
	estimation.
	(stmt_dominates_stmt_p): Removed.
	(proved_non_wrapping_p): Replaced with ...
	(loop_iterations_at_most_p): ... new function.
	(convert_step_widening, scev_probably_wraps_p): Use
	in_nonwrapping_ivs_list_p and loop_iterations_at_most_p.
	(free_numbers_of_iterations_estimates_loop, substitute_in_loop_info):
	Modified.
	(condition_holds_in_loop_p, get_max_loop_niter): New functions.

	* testsuite/gcc.dg/tree-ssa/loop-13.c: New test.

2005-09-20  Zdenek Dvorak  <dvorakz@suse.cz>

	* Makefile.in (loop-iv.o): Add HASHTAB_H dependency.
	* cfgloop.h (struct rtx_iv): Removed biv_p field.
	* loop-iv.c: Include hashtab.h.
	(current_loop, df): Made static.
	(bivs): New variable.
	(struct biv_entry): New.
	(biv_hash, biv_eq, analyzed_for_bivness_p, record_biv): New functions.
	(iv_analysis_loop_init): Initialize bivs variable.
	(iv_constant, iv_subreg, iv_extend, iv_add, iv_mult, iv_shift):
	Do not set biv_p.
	(iv_analyze_biv): Use analyzed_for_bivness_p and record_biv.
	(iv_analysis_done): Free bivs.
	* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Initialize op0 and
	op1.

2005-09-19  Zdenek Dvorak  <dvorakz@suse.cz>

	* Makefile.in (tree-ssa-loop-endcond.o): Add TREE_DATA_REF_H and
	LAMBDA_H dependency.
	* common.opt (freverse-loops): New flag.
	* passes.c (init_optimization_passes): Add pass_loop_reversal.
	* timevar.def (TV_TREE_LOOP_REVERSE): New timevar.
	* tree-pass.h (pass_loop_reversal): Declare.
	* tree-ssa-loop-endcond.c: Include tree-data-ref.h and lambda.h.
	(final_value_of_iv, may_reverse_loop_p, endcond_candidate_cost,
	best_endcond_candidate_cost, num_of_forward_traversals,
	profitable_to_reverse_loop_p, reverse_biv, replace_exit_condition,
	reverse_loop, loop_reversal, tree_ssa_reverse_loops): New functions.
	(select_condition_shape): Use final_value_of_iv.
	(compare_cost): Moved from tree-ssa-loop-ivopts.c.
	* tree-ssa-loop-ivopts.c (compare_cost): Moved to
	tree-ssa-loop-endcond.c.
	* tree-ssa-loop.c (tree_ssa_loop_reversal,
	* gate_tree_ssa_loop_reversal, pass_loop_reversal): New.
	* doc/invoke.texi (-freverse-loops): Document.
	* doc/passes.texi: Document loop reversal, tree-affine.c and
	tree-ssa-loop-endcond.c.

	* testsuite/gcc.dg/20050105-1.c: Do not pass -floop-optimize2.
	* testsuite/gcc.dg/tree-ssa/loop-12.c: New test.

2005-09-15  Zdenek Dvorak  <dvorakz@suse.cz>

	* tree-data-ref.c (analyze_array, analyze_indirect_ref, init_data_ref,
	analyze_offset_expr, address_analysis, object_analysis,
	create_data_ref, finalize_ddr_dependent, analyze_ziv_subscript,
	analyze_subscript_affine_affine, analyze_siv_subscript,
	analyze_miv_subscript, analyze_overlapping_iterations,
	subscript_dependence_tester, compute_affine_dependence,
	analyze_all_data_dependences): Dump only with TDF_ANALYSIS.
	* tree-scalar-evolution.c (set_scalar_evolution, get_scalar_evolution,
	add_to_evolution, set_nb_iterations_in_loop, get_loop_exit_condition,
	analyze_evolution_in_loop, analyze_initial_condition,
	analyze_scalar_evolution, instantiate_parameters,
	number_of_iterations_in_loop): Ditto.
	* tree-dump.c (dump_options): Add TDF_ANALYSIS.
	* tree-pass.h (enum tdf): New.  Add TDF_ANALYSIS.

	* Makefile.in (tree-ssa-loop-prefetch.o): Add.
	(tree-cfgcleanup.o): Add SCEV_H dependency.
	* cfgloop.h (loopify, loop_version): Declaration changed.
	* cfgloopmanip.c (loopify, lv_adjust_loop_entry_edge,
	loop_version): Enable to specify how the frequencies
	should be scaled.
	* common.opt (fprefetch-loop-arrays-rtl): New.
	* loop-unswitch.c (unswitch_loop): Specify how the frequencies should
	be scaled.
	* modulo-sched.c (sms_schedule): Ditto.
	* loop.c (rest_of_handle_loop_optimize): Handle
	-fprefetch-loop-arrays-rtl.
	* timevar.def (TV_TREE_PREFETCH): New.
	* tree-cfgcleanup.c: Include tree-scalar-evolution.h.
	(cleanup_tree_cfg_loop): Flush scev cache if anything changes.
	* tree-flow.h (tree_ssa_prefetch_arrays, tree_unroll_loop): Declare.
	(single_dom_exit): Make argument const.
	* tree-optimize.c (init_tree_optimization_passes): Add
	pass_loop_prefetch.
	* tree-outof-ssa.c (struct temp_expr_table_d): New field expr_vars.
	(new_temp_expr_table, free_temp_expr_table, check_replaceable,
	find_replaceable_in_bb): Stop TER when a different ssa name for the
	same variable is encountered.
	* tree-pass.h (pass_loop_prefetch): Declare.
	* tree-ssa-loop-ivopts.c (single_dom_exit): Make argument const.
	* tree-ssa-loop-manip.c (build_if_stmt, tree_unroll_loop): New
	function.
	* tree-ssa-loop-prefetch.c: New file.
	* tree-ssa-loop.c (tree_ssa_loop_prefetch, gate_tree_ssa_loop_prefetch,
	pass_loop_prefetch): New.
	* doc/invoke.texi (-fprefetch-loop-arrays-rtl): Document.

2005-09-14  Zdenek Dvorak  <dvorakz@suse.cz>

	* tree-ssa-loop-ivopts.c (compare_cost): Export.

2005-09-14  Zdenek Dvorak  <dvorakz@suse.cz>

	* tree-chrec.c (chrec_convert_aggressive): New function.
	* tree-chrec.h (chrec_convert_aggressive): Declare it.
	* tree-flow.h (tree_ssa_reverse_loops, create_canonical_iv,
	create_increment_stmt, compare_cost): Declare.
	* tree-scalar-evolution.c (instantiate_parameters_1,
	instantiate_parameters, resolve_mixers): Add possibility
	to fold no-op casts.
	* tree-ssa-address.c (add_to_parts): Strip nops before looking for
	symbol.
	* tree-ssa-loop-ivcanon.c (create_canonical_iv): Export.
	* tree-ssa-loop-ivopts.c (add_derived_ivs_candidates): Add a countdown
	iv.
	(get_address_cost): Set cse_not_expected to get more precise costs.
	(convert_cost): New function.
	(force_expr_to_var_cost): Use it.
	(aff_combination_cost_address): Handle base+index addressing modes
	correctly.
	* tree-ssa-loop-manip.c (create_increment_stmt): Split from ...
	(create_iv): ... here.

2005-09-14  Zdenek Dvorak  <dvorakz@suse.cz>

	* config/ia64/ia64.c (ia64_reload_gp): Set MEM_NOTRAP_P for the
	created MEM.

2005-09-09  Zdenek Dvorak  <dvorakz@suse.cz>

	* tree-pretty-print.c (dump_bb_header): Fix merge conflict.

	* fold-const.c (try_move_mult_to_index): Handle negative multipliers.

	* Makefile.in (tree-affine.o): Add.
	(tree-ssa-address.o, tree-ssa-loop-ivopts.o): Add tree-affine.h
	dependency.
	* tree-affine.c: New file.
	* tree-affine.h: New file.
	* tree-flow.h (struct affine_tree_combination): Moved to
	tree-affine.h.
	* tree-ssa-address.c: Include tree-affine.h.
	(fixed_address_object_p): Export.
	(add_to_parts): Do not take coef argument.
	(most_expensive_mult_to_index, addr_to_parts, create_mem_ref):
	Use tree-affine.h utilities.
	* tree-ssa-loop-ivopts.c: Include tree-affine.h.
	(struct iv_use, struct iv_cand): Add base_aff field.
	(record_use, add_candidate_1): Initialize base_aff field.
	(determine_base_object): Handle MULT_EXPR.
	(aff_combination_const, aff_combination_elt, aff_combination_scale,
	aff_combination_add_elt, aff_combination_add,
	tree_to_aff_combination, add_elt_to_tree, unshare_aff_combination,
	aff_combination_to_tree): Moved to tree-affine.c.
	(get_computation_aff): Use tree-affine.h utilities.  Never compute
	result in trees directly.  Return suggested multiplier for an
	addressing mode.
	(get_computation_at, rewrite_use_address): Changed to reflect
	get_computation_aff change.
	(split_address_cost, ptr_difference_cost, difference_cost): Removed.
	(aff_combination_cost, aff_combination_cost_address): New.
	(get_computation_cost_at): Use them.
	* tree.h (fixed_address_object_p): Declare.

2005-09-02  Zdenek Dvorak  <dvorakz@suse.cz>

	Merge from mainline (killloop-merge-20050902).

2005-09-02  Zdenek Dvorak  <dvorakz@suse.cz>

	* Makefile.in (tree-ssa-loop-endcond.o): Add.
	* tree-flow.h (select_condition_shape): Declare.
	* tree-ssa-loop-endcond.c: New file.
	* tree-ssa-loop-ivcanon.c: Extend comments.
	* tree-ssa-loop-ivopts.c (struct cost_pair): Add cmp field.
	(add_iv_value_candidates): Add all_important argument.  For decreasing
	ivs, add iv with final value zero.
	(add_old_iv_candidates): Use add_iv_value_candidates.
	(add_derived_ivs_candidates): Add argument to add_iv_value_candidates.
	(set_use_iv_cost): Add cmp argument.
	(set_use_iv_cost_infinity, set_use_iv_cost_zero,
	set_use_iv_cost_generic, set_use_iv_cost_outer,
	set_use_iv_cost_compare): New functions.
	(determine_use_iv_cost_generic, determine_use_iv_cost_address,
	determine_use_iv_cost_outer): Use them.
	(cand_value_at, iv_elimination_compare): Removed.
	(iv_period): Moved to tree-ssa-loop-endcond.c.
	(may_eliminate_iv): Use select_condition_shape.
	(compare_cost): New function.
	(determine_use_iv_cost_condition): Use set_use_iv_cost_compare and
	compare_cost.
	(determine_use_iv_costs): Dump value and cmp fields of cost pair.
	(try_replacing_cands, minor_adjustments): New functions.
	(find_optimal_iv_set): Call minor_adjustments.
	(rewrite_use_compare): Use cmp field of cost pair.
	* tree-ssa-loop-niter.c (zero_p, nonzero_p): Moved to ...
	* tree.c (zero_p, nonzero_p): ... here.
	(signed_type_for): Generate a signed integer type for pointers.
	* tree.h (nonzero_p): Declare.

2005-08-31  Zdenek Dvorak  <dvorakz@suse.cz>

	* tree-ssa-loop-ivopts.c (AVG_LOOP_NITER): Use
	expected_loop_iterations.
	(BEFORE_LOOP_COST): New macro.
	(extract_cond_operands): New function.
	(find_interesting_uses_cond, rewrite_use_compare): Use
	extract_cond_operands.
	(get_address_cost): Do not limit offset to at most 20 bits.
	(determine_use_iv_cost_condition): Use extract_cond_operands.
	Choose better from keeping original iv and iv elimination.
	(determine_use_iv_cost_outer, determine_iv_cost): Use BEFORE_LOOP_COST.

2005-08-30  Zdenek Dvorak  <dvorakz@suse.cz>
	    Steven Bosscher  <stevenb@suse.de>

	* rtlanal.c (may_trap_p): Handle PREFETCH.
	* loop-unroll.c (struct opt_info): Add refetches_to_remove field.
	(analyze_prefetch_to_remove, remove_redundant_prefetch): New functions.
	(analyze_insns_in_loop): Call analyze_prefetch_to_remove.
	(apply_opt_in_copies): Call remove_redundant_prefetch.
	(free_opt_info): Free prefetches_to_remove field.

2005-08-30  Zdenek Dvorak  <dvorakz@suse.cz>

	* cfgloop.h (struct rtx_iv): Remove analysed field.  Added biv_p field.
	(iv_get_reaching_def): Removed.
	(iv_analyze_result, iv_analyze_expr): Declare.
	* df.c (df_bitmaps_free, df_bb_modify): Only work on the specified part
	of cfg.
	(df_find_use): Handle subregs.
	* Makefile.in (loop-iv.o): Add DF_H dependency.
	* loop-iv.c: Include df.h.
	(enum iv_grd_result): New enum.
	(DF_REF_IV, DF_REF_IV_SET): New macros.
	(df): New global variable.
	(struct insn_info, insn_info, last_def, bivs, max_insn_no, max_reg_no,
	assign_luids, mark_sets, kill_sets, mark_single_set, simple_set_p):
	Removed.
	(clear_iv_info, latch_dominating_def, record_iv, iv_analyze_expr,
	iv_analyze_result, iv_analyze_def): New functions.
	(iv_analysis_loop_init, iv_get_reaching_def, simple_reg_p,
	get_biv_step_1, get_biv_step, iv_analyze_biv, iv_analyze_op,
	iv_analyze, biv_p, iv_analysis_done): Work with df representation of
	UD chains.
	(iv_constant, iv_subreg, iv_extend, iv_mult, iv_shift): Initialize
	biv_p, do not set analysed.
	(iv_number_of_iterations): Use new interface to iv analysis.
	* loop-unroll.c (analyze_iv_to_split_insn): Ditto.
	* loop-unswitch.c (may_unswitch_on): Ditto.

2005-08-30  Zdenek Dvorak  <dvorakz@suse.cz>

	* tree-pretty-print.c (dump_bb_header): Show bb frequency.

2005-08-30  Zdenek Dvorak  <dvorakz@suse.cz>

	* Makefile.in (loop-invariant.o): Add HASHTAB_H dependency.
	* df.c (df_find_use): New function.
	* df.h (df_find_use): Declare.
	* loop-invariant.c: Include hashtab.h.
	(struct invariant): Replace processed field by reg field.
	Add eqto field.
	(struct invariant_expr_entry): New.
	(df): New global variable.
	(invariant_for_use, hash_invariant_expr_1, invariant_expr_equal_p,
	hash_invariant_expr, eq_invariant_expr, find_or_insert_inv,
	find_identical_invariants, merge_identical_invariants): New functions.
	(find_defs, check_dependencies, find_invariant_insn,
	record_uses, find_invariants_bb, find_invariants_body,
	find_invariants, find_invariants_to_move, move_invariants,
	free_inv_motion_data, move_single_loop_invariants,
	move_loop_invariants): Do not pass df in arguments.
	(create_new_invariant): Return the new invariant.  Initialize new
	fields.
	(find_invariants): Call merge_identical_invariants.
	(get_inv_cost, best_gain_for_invariant, set_move_mark,
	move_invariant_reg): Handle equivalent invariants.

2005-08-29  Zdenek Dvorak  <dvorakz@suse.cz>

	* loop-invariant.c (check_dependencies): Improve comment.

2005-07-27  Zdenek Dvorak  <dvorakz@suse.cz>

	Branch created (killloop-branchpoint)
	* common.opt (floop-optimize2): Removed.
	(fmove-loop-invariants): Enabled by default.
	* loop-init.c (gate_handle_loop2): Do not check flag_loop_optimize2.
	Check flag_branch_on_count_reg only if HAVE_doloop_end.
	* opts.c (decode_options): Do not enable flag_loop_optimize.
	* toplev.c (process_options): Do not handle flag_loop_optimize2.
	* doc/invoke.texi: Remove -floop-optimize2 documentation.
