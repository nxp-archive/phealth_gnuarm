2006-01-11  Ben Elliston  <bje@au.ibm.com>

	* config/i386.c (ix86_must_pass_in_stack): Pass TDmode in stack.
	(classify_argument): Treat DDmode like DImode, TImode like TDmode.
	(function_arg_advance): Handle DDmode like DImode. Remove TDmode.
	(function_arg): Handle SDmode like SImode, DDmode like DImode.
	(ix86_return_in_memory): Return true for TDmode.
	(ix86_value_regno): Clean up. Use DECIMAL_FLOAT_MODE_P predicate.
	(ix86_hard_regno_mode_ok): Likewise.

2006-01-11  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.c (TARGET_DECIMAL_FLOAT_SUPPORTED_P): Remove.
	(override_options): Do not force SSE support on if decimal
	floating point support is enabled.
	(ix86_decimal_float_supported_p): Remove; use default hook.
	* config/i386/i386.h (VALID_SSE_REG_MODE): Remove TDmode.
	(SSE_REG_MODE_P): Likewise.

2006-01-10  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.md (mode): Remove SD, DD, TD values.

2006-01-10  Ben Elliston  <bje@au.ibm.com>

	* expr.c (emit_move_change_mode): When reload not in progress,
	adjust addresses using adjust_address, not adjust_address_nv.
	Update comments.

2006-01-10  Ben Elliston  <bje@au.ibm.com>

	* config/i386/decimal.md: Remove.
	* config/i386/i386.md: Don't include it.

2006-01-10  Ben Elliston  <bje@au.ibm.com>

	* expr.c (emit_move_insn_1): Pass true for the `force' parameter
	when calling emit_move_via_integer.

	* expr.c (emit_move_change_mode): Always adjust addresses, not
	just during reload.  Copy replacements only during reload.
	(emit_move_insn_1): Move MODE_DECIMAL_FLOAT modes by invoking
	emit_move_via_integer.
	(emit_move_change_dfp_mode): Remove.
	(emit_move_decimal_float): Likewise.

2006-01-09  Ben Elliston  <bje@au.ibm.com>

	* expr.c (emit_move_decimal_float): Assert MODE_DECIMAL_FLOAT.
	Update the function comment accordingly.

	* expr.c (emit_move_change_dfp_mode): New.
	(emit_move_decimal_float): New.
	(emit_move_insn_1): Handle decimal floating point modes by calling
	emit_move_decimal_float.
	* config/rs6000/decimal.md: Remove.
	* config/rs6000/rs6000.md: Do not include "decimal.md".
	* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Omit SDmode.
	(rs6000_legitimize_address): Likewise for TDmode.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_legitimate_address): Likewise.
	(rs6000_legitimate_offset_address_p): Remove special handling for
	DDmode and TDmode.
	(rs6000_emit_move): Likewise for SDmode, DDmode and TDmode.
	(USE_FP_FOR_ARG): Exclude all decimal float modes for now.
	(rs6000_return_in_memory): Exclude TDmode.
	(function_arg_advance): Likewise for DDmode and TDmode.
	(function_arg): Likewise for DDmode and TDmode.
	(rs6000_pass_by_reference): Exclude TDmode.
	(rs6000_gimplify_va_arg): Likewise for DDmode and TDmode.
	(rs6000_register_move_cost): Exclude TDmode.
	(rs6000_function_value): Use GP_ARG_RETURN for all decimal modes.
	(rs6000_libcall_value): Likewise.

2006-01-05  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.c (debug_stack_info): Revert trivial hunk.

2006-01-04  Ben Elliston  <bje@au.ibm.com>

	* config/fp-bit.h: Use top-of-file comment from libgcc2.c.
	* config/fp-bit.c: Likewise.

2005-12-21  Janis Johnson  <janis187@us.ibm.com>

	* config/rs6000/rs6000.c: Remove rs6000_decimal_float_supported_p
	declaration.

2005-12-21  Ben Elliston  <bje@au.ibm.com>

	* targhooks.h (default_decimal_float_supported_p): Declare.
	* targhooks.c (default_decimal_float_supported_p): Non-static.
	
	* targhooks.c (default_decimal_float_supported_p): New.
	* target-def.h (TARGET_DECIMAL_FLOAT_SUPPORTED_P): Define as
	default_decimal_float_supported_p, not hook_bool_void_false.
	* config/rs6000/rs6000.c (TARGET_DECIMAL_FLOAT_SUPPORTED_P):
	Remove.
	(rs6000_decimal_float_supported_p): Likewise.

2005-12-21  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.c (rs6000_scalar_mode_supported_p): Return
	true for decimal float modes regardless of the front-end language.

2005-12-20  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.c (override_options): Turn on SSE support if
	decimal floating point support is enabled.

2005-12-20  Ben Elliston  <bje@au.ibm.com>

	* doc/install.texi (Configuration): Document --enable-decimal-float.

2005-12-20  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.md: Move mov?d patterns to ..
	* config/i386/decimal.md: .. here.

2005-12-20  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.md (movsd, movdd, movtdd): Make these expanders
	conditional on ENABLE_DECIMAL_FLOAT.
	(*movsd_constant, *movsd_gprs, *movdd_sse, *movtd_sse): Likewise.

2005-12-20  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.md: Move mov?d patterns to ..
	* config/rs6000/decimal.md: .. here.

2005-12-20  Ben Elliston  <bje@au.ibm.com>

	* configure.ac: Match i?86, not ?86 for --enable-decimal-float.
	* configure: Regenerate.

2005-12-19  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.md (movsd, *movsd_gpr, movdd,
	*movdd_fprs32, *movdd_fprs64, movtd, *movtd_internal): Make
	conditional on ENABLE_DECIMAL_FLOAT.

2005-12-16  Ben Elliston  <bje@au.ibm.com>

	* c-cppbuiltin.c (builtin_define_decimal_float_constants): Rename
	from builtin_define_decfloat_constants.  Add name_prefix, suffix
	and type parameters.  Compute all of the __DEC_x__ macros using
	struct real_format fields.
	(c_cpp_builtins): Define __DEC_EVAL_METHOD__ alongside the
	existing __FLT_EVAL_METHOD__.  Replace single call to
	builtin_define_decimal_float_constants with three parameterised
	calls.

2005-12-16  Ben Elliston  <bje@au.ibm.com>

	* real.c (decimal_quad_format): Correct the values for emin and
	emax, as some digits in the values were incorrectly transposed.

2005-12-15  Ben Elliston  <bje@au.ibm.com>

	Revert this patch:
	* c-cppbuiltin.c (builtin_define_decfloat_constants): Remove.
	(c_cpp_builtins): Remove call to the above.  Register a builtin
	__DEC_EVAL_METHOD__ define.
	* ginclude/decfloat.h: Replace preprocessor defines produced by
	calls in builtin_define_decfloat_constants above with #defines.

2005-12-14  Ben Elliston  <bje@au.ibm.com>

	* ginclude/decfloat.h (FLT_EPSILON): Remove.
	(DEC32_EPSILON): Define as __DEC32_EPSILON__.

2005-12-13  Ben Elliston  <bje@au.ibm.com>

	* c-cppbuiltin.c (builtin_define_decfloat_constants): Remove.
	(c_cpp_builtins): Remove call to the above.  Register a builtin
	__DEC_EVAL_METHOD__ define.
	* ginclude/decfloat.h: Replace preprocessor defines produced by
	calls in builtin_define_decfloat_constants above with #defines.

2005-12-07  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.c: Break long lines.

2005-12-06  Ben Elliston  <bje@au.ibm.com>

	* optabs.c (init_optabs): Add floatun libfuncs for decimal float.
	* convert.c (convert_to_real): Formatting.
	* emit-rtl.c (init_emit_once): Formatting.

2005-12-06  Ben Elliston  <bje@au.ibm.com>

	* doc/extend.texi (Decimal Float): New node.
	(Constructing Calls): Document decimal float built-ins.

2005-12-06  Ben Elliston  <bje@au.ibm.com>

	* c-lex.c (interpret_float): Remove stray '>' from format string.
	* c-decl.c (declspecs_add_type): Improve diagnostic.  No version
	of ISO C supports decimal floating point.

2005-12-05  Ben Elliston  <bje@au.ibm.com>

	* ginclude/decfloat.h: Update FSF office address.

2005-12-02  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in: Discard residual differences against the trunk.

2005-12-01  Ben Elliston  <bje@au.ibm.com>

	* real.c (real_from_string3): Improve leading comment.  Inline the
	body of decimal_real_from_string.
	* dfp.h: Add more comments.
	(decimal_real_from_string): Update prototype due to renaming.
	(decimal_real_convert): Remove formal parameter names from prototype.
	* dfp.c: Improve comments throughout.
	(decimal_from_decnumber): Improve comments.  Rename "set"
	parameter to "context".
	(decimal_real_from_string): Remove.
	(decimal_from_string): Rename to decimal_real_from_string.
	(decimal_from_binary): Call decimal_real_from_string.
	(decimal_real_maxval): Likewise.

2005-11-29  Ben Elliston  <bje@au.ibm.com>

	* dfp.h: Reorder prototypes. Tidy.
	* dfp.c (decode_decimal32): Implement.
	(decode_decimal64, decode_decimal128): Likewise.

2005-11-29  Ben Elliston  <bje@au.ibm.com>

	* dfp.h: Improve comment.
	* dfp.c (dfp_byte_swap): New static function.
	(encode_decimal32): Call dfp_byte_swap, not __dec_byte_swap.
	(encode_decimal64): Likewise.
	(encode_decimal128): Likewise.

2005-11-29  Ben Elliston  <bje@au.ibm.com>

	* dfp.h (ENCODE_DECIMAL_SINGLE, ENCODE_DECIMAL_DOUBLE,
	ENCODE_DECIMAL_QUAD, DECODE_DECIMAL_SINGLE, DECODE_DECIMAL_DOUBLE,
	DECODE_DECIMAL_SINGLE, DECIMAL_DO_COMPARE,
	REAL_OR_DECIMAL_FROM_STRING): Remove macros.
	* real.c: Update all macro uses.
	* dfp.c (decimal_from_string): Use decNumber, decContext locals.
	(decimal_to_decnumber): Likewise.
	(encode_decimal32, encode_decimal64, encode_decimal128): Likewise.
	(decimal_to_binary, decimal_from_binary): Likewise.
	(decimal_do_compare, decimal_do_add): Likewise.
	(decimal_do_multiply, decimal_do_divide): Likewise.
	(decimal_real_to_integer, decimal_real_to_integer2): Likewise.
	(decimal_real_maxval): Update comment.

2005-11-29  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Refer to libdecnumber, not decnumber.
	* Makefile.in: Likewise.

2005-11-25  Ben Elliston  <bje@au.ibm.com>

	* decimal32.h, decimal64.h, decimal128.h: Move to top-level.
	* decimal32.c, decimal64.c, decimal128.c: Likewise.
	* decContext.c, decContext.h: Likewise.
	* decUtility.c, decUtility.h: Likewise.
	* decNumber.c, decNumber.h, decNumberLocal.h: Likewise.
	* decDPD.h: Likewise.
	* decLibrary.c, decRound.c: Likewise.
	* mklibgcc.in (decnumber_dep): Update relative paths.  Likewise
	for the looping code that outputs make targets for libgcc.
	* Makefile.in (VPATH): Add @srcdir@/../decnumber.
	(DECNUMINC): New variable.
	(INCLUDES): Use it.

2005-11-25  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Rename some shell variables for clarity.

2005-11-24  Ben Elliston  <bje@au.ibm.com>

	* real.h (REAL_VALUE_TO_TARGET_DECIMAL32): Use mode_for_size
	rather than hardwiring the mode in call to real_to_target.
	(REAL_VALUE_TO_TARGET_DECIMAL64): Likewise.
	(REAL_VALUE_TO_TARGET_DECIMAL128): Likewise.

2005-11-24  Ben Elliston  <bje@au.ibm.com>

	* dfp.h, dfp.c: Update FSF copyright notice.

2005-11-24  Ben Elliston  <bje@au.ibm.com>

	* dfp.h, dfp.c: Tidy.

2005-11-24  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.h (ALIGN_MODE_128): Revert branch change.
	* config/i386/i386.md: Tidy.

2005-11-23  Ben Elliston  <bje@au.ibm.com>

	Import from trunk:

	2005-11-22  Ian Lance Taylor  <ian@airs.com>
	* optabs.c (expand_unop): Call SCALAR_FLOAT_MODE_P on a mode, not
	a mode_class.
	(prepare_cmp_insn): Likewise.

	* optabs.c (expand_unop): Remove unused variable `class'.

2005-11-23  Ben Elliston  <bje@au.ibm.com>

	* configure: Regenerate.

2005-11-22  Janis Johnson  <janis187@us.ibm.com>

	* configure.ac: Add --enable-decimal-float.
	* configure: Regenerate.
	* config.in: Regenerate.
	* mklibgcc.in: Include DFP support if enable_decimal_float, and
	static only.
	* config/i386/i386.c (ix86_decimal_float_supported_p): Only if
	decimal float is enabled.
	* config/rs6000/rs6000.c (rs6000_decimal_float_supported_p): Only if
	decimal float is enabled.

2005-11-22  Ben Elliston  <bje@au.ibm.com>

	* decUtility.c, decNumber.c: GNU coding standard fixes.
	* decimal32.c, decimal64.c, decimal128.c: Likewise.
	* decimal32.h: Likewise.
	* dwarf2.h: Synchronise with trunk.

2005-11-16  Ben Elliston  <bje@au.ibm.com>

	* DEV-PHASE: Refresh merge date.

2005-10-20  Ben Elliston  <bje@au.ibm.com>

	Not to be merged (probably):
	* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Use a GP
	register for SDmode.
	(rs6000_emit_move): Likewise.
	(function_arg_advance): Exclude SDmode.
	(function_arg): Likewise.
	(rs6000_gimplify_va_arg): Handle DDmode, TDmode.
	(rs6000_function_value): Return SDmode values in GPRs.
	(rs6000_libcall_value): Likewise.
	* config/rs6000/rs6000.md (*movsd_fprs): Remove pattern.
	(*movsd_gpr): Reinstate pattern.

2005-10-18  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.md (*pushsd2): New pattern.
	(*movsd_constant): Likewise.
	* config/i386/i386.c (print_operand): Handle SDmode constants.
	* config/i386/i386.h (ALIGN_MODE_128): TDmode handling is subsumed
	by SSE_REG_MODE_P.

2005-10-14  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (CONTEXT_INIT): Choose the right DEC_INIT macro
	based on the value of WIDTH.

2005-10-14  Ben Elliston  <bje@au.ibm.com>

	* decLibrary.c (isinfd32): Convert host words to IEEE byte order
	before converting to a decNumber.
	(isinfd64, isinfd128): Likewise.

2005-10-13  Ben Elliston  <bje@au.ibm.com>

	* decLibrary.c (isinfd32, isinfd64, isinfd128): Prototype.
	(__dfp_enable_traps, __dfp_raise): Likewise.
	* config/dfp-bit.c (__dec_byte_swap): Likewise.

2005-10-11  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.h (LIBGCC2_WORDS_BIG_ENDIAN): Define.

2005-10-11  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h: Include "tconfig.h", "coretypes.h", "tm.h".
	(LIBGCC2_FLOAT_WORDS_BIG_ENDIAN): Define, if not already.
	* config/dfp-bit.c: Don't include the aforementioned headers.
	(LIBGCC_FLOAT_WORDS_BIG_ENDIAN): Remove.

2005-10-10  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.md (*movsd_no_fprs): Remove.
	(*movdd_nofprs32): Likewise.
	(*movdd_nofprs64): Likewise.

2005-10-10  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define.
	(LIBGCC2_HAS_XF_MODE): Likewise.	

2005-10-07  Ben Elliston  <bje@au.ibm.com>

	Brought in from mainline to assist AIX builds:

	2005-10-03  David Edelsohn  <edelsohn@gnu.org>
	* config/rs6000/t-aix43 (LDFLAGS): New.
	* config/rs6000/t-aix52 (LDFLAGS): New.

2005-10-05  Janis Johnson  <janis187@us.ibm.com>

	* Makefile.in (decUtility.o): Add new dependencies.

2005-10-04  Ben Elliston  <bje@au.ibm.co>

	* config/dfp-bit.c: Replace calls to __ieee_byte_order with
	__dec_byte_swap to indicate that the function always swaps.

	* Makefile.in (D32PBIT_FUNCS): Add _conv_sd.
	(D64PBIT_FUNCS): Likewise, add _conv_dd.
	(D128PBIT_FUNCS): Likewise, add _conv_td.
	* decUtility.h (__ieee_byte_order): Prototype.
	* decUtility.c (__ieee_byte_order): Implement.
	* dfp.c (encode_decimal32): Put word(s) into IEEE byte order.
	(encode_decimal64): Likewise.
	(encode_decimal128): Likewise.
	* config/dfp-bit.h (HOST_TO_IEEE): Define for various widths.
	(IEEE_TO_HOST): Likewise.
	(IEEE_TO_HOST_TO): Likewise.
	* config/dfp-bit.c (LIBGCC2_FLOAT_WORDS_BIG_ENDIAN): Define.
	(dfp_unary_op): Swap words to/from IEEE byte order when invoking
	decNumber routines.
	(dfp_binary_op, dfp_compare_op): Likewise.
	(__host_to_ieee_32): New.
	(__ieee_to_host_32): Likewise.
	(__swap64): Likewise.
	(__host_to_ieee_64): New.
	(__ieee_to_host_64): Likewise.
	(__swap128): Likewise.
	(__host_to_ieee_128): New.
	(__ieee_to_host_128): Likewise.
	(DFP_TO_DFP): Swap words to/from IEEE byte order when invoking
	decNumber routines.
	(DFP_TO_INT, INT_TO_DFP, DFP_TO_BFP, BFP_TO_DFP: Likewise.
	(DFP_UNORD): Likewise.

2005-10-03  Janis Johnson  <janis187@us.ibm.com>

	* decContext.h: Prepend underscores to global symbols for libgcc.
	* decNumber.h: Ditto.
	* decUtility.h: Ditto.
	* decimal128.h: Ditto.
	* decimal32.h: Ditto.
	* decimal64.h: Ditto.
	* config/dfp-bit.h: Prepend underscores to decNumber functions.

	* decUtility.c: New file.
	* decUtility.h: New file.
	* decimal32.c: Use it.
	* decimal64.c (decDensePackCoeff, decDenseUnpackCoeff): Move to
	new file, include new header file.
	* decimal128.c: Use it.
	* Makefile.in: Depend on new header file, build new file.
	* mklibgcc.in: Build new file.

	* decContext.c: Run file through indent.
	* decContext.h: Ditto.
	* decDPD.h: Ditto.
	* decNumber.c: Ditto.
	* decNumber.h: Ditto.
	* decNumberLocal.h: Ditto.
	* decimal128.c: Ditto.
	* decimal128.h: Ditto.
	* decimal32.c: Ditto.
	* decimal32.h: Ditto.
	* decimal64.c: Ditto.
	* decimal64.h: Ditto.

2005-09-28  Ben Elliston  <bje@au.ibm.com>

	* DEV-PHASE: Refresh datestamp.

2005-09-19  Ben Elliston  <bje@au.ibm.com>

	Brought in from mainline:

	2005-09-14  Andrew Pinski  <pinskia@physics.uc.edu>
	* config/i386/i386.c (contains_128bit_aligned_vector_p): Add break
	in the ARRAY_TYPE case.

2005-09-13  Ben Elliston  <bje@au.ibm.com>

	* decLibrary.c (__dfp_traps): New variable.
	(__dfp_enable_traps): New.
	(__dfp_raise): Likewise.
	* config/dfp-bit.h (CONTEXT_TRAPS): Use alternative defintion.
	(DFP_RAISE): Likewise.
	(CONTEXT_ERRORS): New macro.
	* config/dfp-bit.c (dfp_unary_op): Do not set context.traps
	(always leave it set to 0), but raise an FP exception if signaling
	NaNs are enabled and the arithmetic produces an exception.
	(dfp_binary_op): Likewise.
	(dfp_compare_op): Likewise.
	(DFP_TO_DFP, DFP_TO_INT, INT_TO_DFP, BFP_TO_DFP): Do not set
	context.traps. Raise DEC_Inexact for inexact rounding.

2005-09-12  Ben Elliston  <bje@au.ibm.com>

	* doc/rtl.texi (Machine Modes): Document MODE_DECIMAL_FLOAT.
	* doc/libgcc.texi (Decimal float library routines): New node.

2005-09-09  Ben Elliston  <bje@au.ibm.com>

	* decLibrary.c (isinfd32, isinfd64, isinfd128): Remove redundant
	memcpy calls.

	* dfp.c: Whitespace fix.

2005-09-09  Ben Elliston  <bje@au.ibm.com>

	* decLibrary.c: New.
	* mklibgcc.in: Include decLibrary.c in libgcc.

2005-09-07  Janis Johnson  <janis187@us.ibm.com>

	* c-common.c (handle_mode_addtribute): Handle MODE_DECIMAL_FLOAT.
	* combine.c (simplify_comparison): Remove unneeded assert.
	* cse.c (cse_insn): Use GET_MODE_WIDER_MODE.
	* decRound.c (__dfp_rounding_mode): Add comment.
	* emit-rtl.c (init_emit_once): Don't check for DECIMAL_FLOAT_MODE_P,
	handle MODE_DECIMAL_FLOAT separately.
	* expmed.c (init_expmed, expand_divmod): Use GET_MODE_WIDER_MODE.
	* expr.c (init_expr_once): Don't check INCOMPATIBLE_MODES_P.
	(convert_move): Check that exactly one mode is decimal float; use
	GET_MODE_WIDER_MODE.
	(compress_float_constant): Don't check INCOMPATIBLE_MODES_P.
	* genmodes.c (struct mode_data): Update comment for format.
	(complete_mode): Handle MODE_DECIMAL_FLOAT, update check for mode
	using a format.
	(make_complex_modes: Remove FIXME comment, disabled code which are
	not needed without support for complex decimal float types.
	(DECIMAL_FLOAT_MODE, FRACTIONAL_DECIMAL_FLOAT_MODE): New.
	(make_decimal_float_mode): New.
	(reset_float_format): Handle MODE_DECIMAL_FLOAT.
	(emit_format_for_mode): Support formats for decimal floats.
	* genopinit.c (gen_insn): Handle MODE_DECIMAL_FLOAT.
	* machmode.def (DECIMAL_FLOAT_MODE): Document;, use it to define
	decimal float modes.
	* machmode.h (FLOAT_MODE_P, SCALAR_FLOAT_MODE_P, MODES_WIDEN_P):
	Include MODE_DECIMAL_FLOAT.
	(DECIMAL_FLOAT_MODE_P): Redefine, update comment.
	(INCOMPATIBLE_MODES_P): Remove.	
	(GET_MODE_COMPATIBLE_WIDER_MODE): Remove.	
	* mode-classes.def (MODE_DECIMAL_FLOAT): Define.
	* optabs.c (expand_binop, expand_twoval_unop, expand_twoval_binop,
	widen_clz, expand_parity, expand_unop, can_compare_p,
	emit_cmp_and_jump_insn_1, prepare_float_lib_cmp, expand_float,
	expand_fix): Use GET_MODE_WIDER_MODE.
	(init_floating_libfuncs): Handle decimal float modes.
	(init_optabs): Handle libfuncs for decimal float.
	* real.h (real_format): Change size, update documentation.
	(REAL_MODE_FORMAT): Update for to handle float, decimal float.
	* reg-stack.c (reg_to_stack): Remove check for DECIMAL_FLOAT_MODE_P.
	* regclass.c (choose_hard_reg_mode): Ditto.
	* simplify-rtx.c (simplify_immed_subreg): Handle MODE_DECIMAL_FLOAT.
	* stor-layout.c (int_mode_for_mode): Handle MODE_DECIMAL_FLOAT.
	(get_mode_compatible_wider_mode): Remove.
	* targhooks.c (default_scalar_mode_supported_p): Handle
	MODE_DECIMAL_FLOAT separately.
	* var-tracking.c (emit_note_insn_var_location): Use
	GET_MODE_WIDER_MODE.
	* varasm.c (output_constant_pool_2): Handle MODE_DECIMAL_FLOAT.
	* config/dfp-bit.h: Change names of functions for MODE_FLOAT and
	MODE_DECIMAL_FLOAT, which are no longer in the same class.

2005-09-05  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.c (dfp_binary_op): Remove unused variable.

2005-09-05  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (__decWorkingPrec): Remove.
	(CONTEXT_DIGITS): Likewise.
	* config/dfp-bit.c (dfp_unary_op): Don't set context.digits.
	(dfp_binary_op): Likewise.
	(dfp_compare_op): Likewise.
	(DFP_TO_DFP): Likewise.
	(INT_TO_DFP): Likewise.
	(BFP_TO_DFP): Likewise.

2005-09-05  Ben Elliston  <bje@au.ibm.com>	

	* decRound.c (__dfp_set_working_prec): Remove.
	(__decWorkingPrec): Likewise.
	(__dfp_working_prec): Likewise.

2005-08-31  Ben Elliston  <bje@au.ibm.com>

	* dfp.c (decimal_real_arithmetic): Always return true to prevent
	constant folding.

2005-08-30  Ben Elliston  <bje@au.ibm.com>

	* decRound.c (__dfp_set_working_prec): New function.
	(__decWorkingPrec): Likewise.
	(__dfp_working_prec): New static variable.
	* config/dfp-bit.h (__decWorkingPrec): Provide extern declaration.
	(CONTEXT_DIGITS): Define.
	* config/dfp-bit.c (dfp_unary_op): Set context.digits.
	(dfp_binary_op): Likewise.
	(dfp_compare_op): Likewise.
	(DFP_TO_DFP): Likewise.
	(INT_TO_DFP): Likewise.
	(BFP_TO_DFP): Likewise.

2005-08-25  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in (D32PBIT_FUNCS): Add _unord_sd.
	(D64PBIT_FUNCS): Likewise for _unord_dd.
	(D128PBIT_FUNCS): Likewise for _unord_td.
	* config/dfp-bit.h (DFP_UNORD): Define for each WIDTH (32/64/128).
	(DFP_UNORD): Prototype for L_unord_sd, L_unord_dd, L_unord_td.
	* config/dfp-bit.c (DFP_UNORD): Implement.

2005-08-22  Ben Elliston  <bje@au.ibm.com>

	* real.c (real_maxval): Clear *r before filling in the structure.
	Simplify logic in this function somewhat.

2005-08-17  Janis Johnson  <janis187@us.ibm.com>
	    Ben Elliston  <bje@au.ibm.com>

	* decRound.c: New.
	* mklibgcc.in: Include decRound.c in libgcc.
	* config/dfp-bit.h (CONTEXT_ROUND): Redefine as call to __decGetRound.

2005-08-17  Janis Johnson  <janis187@us.ibm.com>

	* machmode.h (MODES_WIDEN_P): New.
	* optabs.c (expand_binop, expand_twoval_unop, widen_clz, expand_parity,
	expand_unop, emit_cmp_and_jump_insn_1): Use it.

	* c-common.c (handle_vector_size_attribute): Use SCALAR_FLOAT_MODE_P.
	* cse.c (find_comparison_args, fold_rtx): Ditto.
	* dwarf2out.c (add_const_value_attribute): Ditto.
	* emit-rtl.c (gen_lowpart_common): Ditto.
	* expmed.c (expand_mult): Ditto.
	* expr.c (convert_move): Ditto.
	* genopinit.c (gen_insn): Ditto.
	* loop.c (load_mems): Ditto.
	* optabs.c ( expand_abs_nojump, prepare_cmp_insn): DItto.
	* recog.c (general_operand, register_operand): Ditto.
	* reg-stack.c (replace_reg): Ditto.
	* reload.c (find_equiv_reg): Ditto.
	* rtlanal.c (may_trap_p, canonicalize_condition): Ditto.
	* simplify-rtx.c (simplify_const_unary_operation,
	simplify_binary_operation_1, simplify_const_binary_operation,
	simplify_relational_operation, simplify_const_relational_operation,
	simplify_immed_subreg): Ditto.
	* config/i386/i386.c (ix86_value_regno, ix86_cc_mode
	ix86_expand_compare): Ditto.
	* config/rs6000/linux64.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Ditto.
	* config/rs6000/predicates.md (easy_fp_constant, zero_fp_constant,
	input_operand): Ditto.
	* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok, rs6000_emit_move,
	function_arg_advance, rs6000_emit_cmove,
	rs6000_output_function_epilogue, rs6000_libcall_value): Ditto.
	* config/rs6000/rs6000.h (MODES_TIEABLE_P, SELECT_CC_MODE): Ditto.
	* config/rs6000/sysv4.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Ditto.
	* config/rs6000/xcoff.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Ditto.

2005-08-16  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (BFP_VIA_TYPE): Use double not DFtype.

2005-08-15  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.c (function_arg_advance): Handle SDmode, DDmode
	and TDmode appropriately.

2005-08-15  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (BFP_VIA_TYPE): Define for BFP_KIND XFmode.
	(SFtype, DFtype, XFtype): Declare these typedefs unconditionally.
	* config/dfp-bit.c (BFP_TO_DFP): Cast input value to BFP_VIA_TYPE,
	if defined.

2005-08-15  Ben Elliston  <bje@au.ibm.com>

	* config.gcc (i[34567]86-*-linux*): Append t-linux to $tmake_file.
	* config/i386/t-linux: New file.

2005-08-15  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.md (*movdd_sse): Silence fall-through warning.

	* config/i386/t-linux64 (TARGET_LIBGCC2_CFLAGS): Use the +=
	operator to append options to this variable, not = to override it.

	* config/i386/t-linux64 (TARGET_LIBGCC2_CFLAGS): Pass -msse.
	(D32PBIT, D64PBIT, D128PBIT): Define.
	(dfp32-bit.c, dfp64-bit.c dfp128-bit.c): New targets.

2005-08-15  Ben Elliston  <bje@au.ibm.com>

	* config/i386/i386.c (ix86_decimal_float_supported_p): Return true
	only when TARGET_SSE is true.

	* config/i386/i386.md (*movdd_gprs): Remove.
	(*movdd_sse): Apply to TARGET_SSE systems, not just 64-bit
	systems.  Use movaps instructiosn to move x->x.
	(*movtd_sse): Likewise, apply to any TARGET_SSE target.
	* config/i386/i386.c (classify_argument): Hold DDmode arguments in
	the SSE register class.
	(function_arg): Handle DDmode, TDmode.
	(ix86_libcall_value): Treat DDmode like TDmode, using SSE.
	(ix86_value_regno): Correct the logic for decimal float modes: put
	SDmode into GPRs, but DDmode and TDmode values into SSE registers.
	(ix86_hard_regno_mode_ok): Only SSE registers are okay for DDmode
	and TDmode values.

2005-08-11  Janis Johnson  <janis187@us.ibm.com>

	* config/dfp-bit.h (TO_ENCODED_TO): Replace redefinition of TO_ENCODED
	for DFP to DFP convertions.
	(CAST_FOR_FMT): New.
	(BPF macros): Don't define for XF mode if target does not support it.
	(DFP_TO_BFP, BFP_TO_DFP): Skip prototypes for XF mode if target
	does not support it.
	* config/dfp-bit.c (DFP_TO_DFP): Use TO_ENCODED_TO.
	(INT_TO_DFP): Use CAST_FOR_FMT.
	(DFP_TO_BFP, BFP_TO_DFP): Skip definitions for XF mode if target
	does not support it.

2005-08-11  Ben Elliston  <bje@au.ibm.com>

	* config/i386/t-linux: Remove.

2005-08-11  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in (D32PBIT_FUNCS, D64PBIT_FUNCS, D128_BIT_FUNCS):
	Add BFP<->DFP runtime conversions for XFmode.
	* config/dfp-bit.h (BFP_KIND): Handle a value of 3 for XFmode.
	(BFP_TO_DFP, DFP_TO_BFP): Add __routine names for XFmode.
	Define BFP_KIND to 3 when L_{sd,dd,td}_to_xf or L_xf_to_{sd,dd,td}
	are defined.
	* config/dfp-bit.c (DFP_TO_BFP): Include when L_{sd,dd,td}_to_XF.
	(BFP_TO_DFP): Likewise, include when L_xf_to_{sd,dd,td} is set.

2005-08-11  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (SItype, DItype, USItype, UDItype): Declare
	these typedefs unconditionally, not based on INT_KIND.
	(CMPtype): New macro.
	(DFP_EQ, DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): Return CMPtype.
	* config/dfp-bit.c (DFP_EQ, DFP_NE, DFP_LT, DFP_GT, DFP_LE,
	DFP_GE): Set the return type to CMPtype, which is defined in
	config/dfp-bit.h.

2005-08-11  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.c (DFP_PLUS, DFP_MINUS): Remove unused functions.

2005-08-11  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (DFP_TYPE): Rename to IEEE_TYPE.
	(DFP_TYPE_TO): Likewise, rename to IEEE_TYPE_TO.
	* config/dfp-bit.c: Update all users.

2005-08-11  Ben Elliston  <bje@au.ibm.com>

	* dfp.c (encode_decimal64): d64 is already correctly encoded, so
	no not perform endian conversion.
	(encoding_decimal128): Likewise for d128.

2005-08-09  Janis Johnson  <janis187@us.ibm.com>

	* Makefile.in (D32PBIT_FUNCS, D64PBIT_FUNCS, D128_BIT_FUNCS):
	Add DFP<->DFP runtime conversions.
	* config/dfp-bit.h (DFP_TO_DFP): Fix errors in definitions.

2005-08-09  Ben Elliston  <bje@au.ibm.com>

	* i386.h (ALIGN_MODE_128): Add TDmode.
	(VALID_SSE_REG): Likewise.
	(SSE_REG_MODE): Likewise.
	* i386.c (ix86_decimal_float_supported_p): Add prototype.
	(TARGET_DECIMAL_FLOAT_SUPPORTED_P): Define.
	(classify_argument): Handle SDmode, DDmode and TDmode.
	(ix86_libcall_value): Handle TDmode.
	(ix86_value_regno): Handle decimal float modes.
	(ix86_hard_regno_mode_ok): Likewise.
	(ix86_decimal_float_supported_p): Implement.
	* i386.md (movsd, movdd, movtd): New expanders.
	(movsd_gprs, movdd_gprs, movdd_sse, movtd_sse): New insns.

2005-08-09  Ben Elliston  <bje@au.ibm.com>

	* dfp.c (encode_decimal32): Type pun via uint32_t.
	(encode_decimal64, encode_decimal128): Likewise.

2005-08-09  Ben Elliston  <bje@au.ibm.com>

	Not to be merged:
	* gdbinit.in: Don't set complaints.

2005-08-08  Janis Johnson  <janis187@us.ibm.com>

	* c-typeck.c (c_common_type): Fix checks for DFP types.

	* c-common.c (shorten_compare): Convert DFP/BFP operands to a
	common type.

2005-08-03  Ben Elliston  <bje@au.ibm.com>

	* config/i386/t-linux: New.

	Revert this incorrect patch:

	2005-04-08  Ben Elliston  <bje@au.ibm.com>
	* config/i386/t-linux64 (D32PBIT, D64PBIT, D128PBIT): Define.
	(dfp32-bit.c, dfp64-bit.c dfp128-bit.c): New targets.

2005-08-02  Janis Johnson  <janis187@us.ibm.com>

	* Makefile.in (D32PBIT_FUNCS, D64PBIT_FUNCS, D128PBIT_FUNCS):
	Add to the list of functions.
	* config/dfp-bit.c (DFP_TO_DFP, DFP_TO_INT, INT_TO_DFP, DFP_TO_BFP,
	BFP_TO_DFP): New template functions.
	* config/dfp-bit.h (FROM_STRING, TO_STRING): New.
	(WIDTH_TO, DFP_C_TYPE_TO, DFP_TYPE_TO, TO_ENCODED_TO): New.
	(INT_KIND, INT_TYPE, INT_FMT, STR_TO_INT): New.
	(BFP_KIND, BFP_TYPE, BFP_FMT, STR_TO_BFP): New.
	(DFP_TO_DFP, INT_TO_DFP, DFP_TO_INT, BFP_TO_DFP, DFP_TO_BFP): Define
	and prototype.

	* dfp-bit.h (CONTEXT_INIT): Define.
	(CONTEXT_ROUND): Define.
	(CONTEXT_TRAPS): Define.
	* dfp-bit.c (dfp_unary_op): Use them.
	(dfp_binary_op): Ditto.
	(dfp_compare_op): Ditto.

2005-07-28  Ben Elliston  <bje@au.ibm.com>

	* real.h (REAL_VALUE_TO_TARGET_DECIMAL128): New.
	(REAL_VALUE_TO_TARGET_DECIMAL64): Likewise.
	(REAL_VALUE_TO_TARGET_DECIMAL32): Likewise.
	* config/rs6000/rs6000.c (output_toc): Output TOC entries for
	decimal float modes.

2005-07-27  Ben Elliston  <bje@au.ibm.com>

	* real.c (real_maxval): decimal_real_maxval has no return value.
	Return explicitly in the base 10 case.

2005-07-27  Ben Elliston  <bje@au.ibm.com>

	* genmodes.c (blank_mode): Initialise counter member to 0.

2005-07-25  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.c (dfp_unary_op): Don't trap (C adopted qNaNs).
	(dfp_binary_op): Likewise.
	(dfp_compare_op): Likewise.

	* config/rs6000/predicates.md (easy_fp_constant): Return 0 (false)
	for decimal floating point types.

2005-07-23  Janis Johnson  <janis187@us.ibm.com>

	* optabs.c (expand_binop, can_compare_p, emit_cmp_and_jump_insn_1,
	prepare_float_lib_cmp): Try compatible wider modes.

	* config/dfp-bit.c (DFP_EQ, DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE):
	Return the correct value for this particular function.

2005-07-21  Janis Johnson  <janis187@us.ibm.com>

	* optabs.c (init_optabs): Initialize ufloat_optab.

	* c-cppbuiltin.c (bultin_define_float_constants): Add assert.
	* combine.c (combine-simplify-rtx): Skip optimizations for DFP.
	(simplify_comparison): Add assert.
	* cse.c (cse_insn): Loop through compatible modes.
	* emit-rtl.c (gen_const_vector): Add assert.
	(init_emit_once): Skip loop for DFP.
	* expmed.c (init_expmed): Process compatible modes.
	(extract_high_half, expand_mult_highpart_optab,
	expand_mult_highpart): Add assert.
	(expand_divmod): Process compatible modes.
	* expr.c (init_expr_once): Skip DFP modes.
	(convert_move): Process compatible modes; use the correct conversion
	for fp modes of the same size.
	(compress_float_constant): Process compatible modes.
	* machmode.h (INCOMPATIBLE_MODES_P): New.
	(GET_MODE_COMPATIBLE_WIDER_MODE): New. 
	(get_mode_compatatible_wider_mode): Define.
	* optabs.c (expand_binop, expand_twoval_unop, widen_clz, expand_parity,
	expand_unop, expand_float, expand_fix): Process compatible modes.
	* reg_stack.c (reg_to_stack): Skip DFP modes.
	* regclass.c (choose_hard_reg_mode): Skip DFP modes.
	* stor-layout.c (get_mode_compatible_wider_mode): New.
	* var-tracking.c (emit_note_insn_var_location): Process compatible
	modes.

	* real.c (round_for_format): Assert float radix is not 10.
	(significand_size): Handle coefficient with decimal radix.

2005-07-17  Ben Elliston  <bje@au.ibm.com>

	* dwarf2.h (enum dwarf_type): Rename DW_ATE_GNU_decimal_float back
	to DW_ATE_decimal float now that it exists in DWARF 3.
	* dwarf2out.c (base_type_die): Use the new enumeration.

2005-07-11  Ben Elliston  <bje@au.ibm.com>

	* dfp.h: Formatting.

2005-06-13  Janis Johnson  <janis187@us.ibm.com>

	* c-decl.c (declspecs_add_type): Pedwarn for decimal float.

	* c-decl.c (declspecs_add_type): Error if decimal float not supported.

	* c-format.h (FMT_LEN_H, FMT_LEN_D, FMT_LEN_DD): New.
	* c-format.c (printf_length_specs, scanf_length_specs): Add entries
	for H, D, DD.
	(print_char_table, scan_char_table): Use new entries.
	(asm_fprintf_char_table, gcc_diag_char_table, gcc_cdiag_char_table,
	gcc_cxxdiag_char_table): Adjust for longer length arrays.

	* target.h (struct gcc_target): New hook decimal_float_supported_p.
	* target-def.h: Define its default.
	* config/rs6000/rs6000.c: Define it for this target.
	* doc/tm.texi: Document it.

	* doc/extend.texi (Decimal Float): New.

2005-06-08  Janis Johnson  <janis187@us.ibm.com>

	* config/rs6000/rs6000.c (rs6000_handle_altivec_attribute):
	reject decimal floating point types as AltiVec types.

	* config/rs6000/rs6000.c (rs6000_scalar_mode_supported_p):
	decimal floating point types are supported only for C.

	* c-typeck.c (convert_arguments): Don't promote _Decimal32.

	* config/rs6000/t-linux64: Copy DFP support from t-linux.

2005-06-07  Ben Elliston  <bje@au.ibm.com>

	* config.gcc (powerpc-*-linux*): Add rs6000/t-linux to tmake_file.
	* config/t-linux: Move contents from here ..
	* config/rs6000/t-linux: .. to here.

2005-06-07  Ben Elliston  <bje@au.ibm.com>
	    David Edelsohn  <dje@watson.ibm.com>

	* config/rs6000/rs6000.md (movsd, movdd, movtd): New insns.

2005-06-07  Ben Elliston  <bje@au.ibm.com>

	* testsuite/gcc.dg/dfp/constants.c: Improve comments.

2005-06-01  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.c (rs6000_legitimize_address): Add TDmode.
	(rs6000_legitimate_offset_address_p): Ditto.
	(rs6000_legitimize_reload_address): Ditto.
	(rs6000_legitimate_address): Ditto.
	(rs6000_emit_move): Ditto.
	(rs6000_return_in_memory): Ditto.
	(function_arg_advance): Ditto.
	(function_arg): Ditto.
	(rs6000_pass_by_reference): Ditto.
	(rs6000_gimplify_va_arg): Ditto.
	(rs6000_register_move_cost): Ditto.

2005-05-26  Jon Grimm  <jgrimm2@us.ibm.com>

	* dfp.c (decimal_do_fix_trunc): New.
	(decimal_real_to_integer): New.
	(decimal_real_to_integer2): New.
	* dfp.h: Add prototypes for new dfp.c functions.
	* real.c (do_fix_trunc): Call dfp helper.
	(real_identical): Make decimal not identical to binary floats,
	for now at least.
	(real_to_integer): Call dfp helper.
	(real_to_integer2): Call dfp helper.

2005-05-24  Jon Grimm  <jgrimm2@us.ibm.com>

	* dfp.c (decimal_real_from_string): Remove now untrue FIXME comment.
	(decimal_to_decnumber): Missing break statement.

2005-05-24  Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.c (rs6000_emit_move): Handle TDmode.

	* config/rs6000/predicates.md (easy_fp_constant): Use the macro
	DECIMAL_FLOAT_MODE_P for convenience.

2005-05-20  Jon Grimm  <jgrimm2@us.ibm.com>

	* ginclude/decfloat.h: New file.
	* Makefinle.in: Install decfloat.h.

2005-05-19  Jon Grimm  <jgrimm2@us.ibm.com>

	* cpp-builtin.c (builtin_define_decfloat_constants):
	Add __DEC_EVAL_METHOD__.
	* defaults.h (TARGET_DEC_EVAL_METHOD): Add hook and default
	value.

2005-05-18  David Edelsohn  <dje@watson.ibm.com>
	    Ben Elliston  <bje@au.ibm.com>

	* config/rs6000/rs6000.c (rs6000_legitimate_offset_address_p):
	Handle DDmode.
	(rs6000_emit_move): Handle SDmode and DDmode.
	(function_arg_advance): Likewise.
	(function_arg): Likewise.
	(rs6000_gimplify_va_arg): Likewise.

2005-05-18  Ben Elliston  <bje@au.ibm.com>

	* dfp.c (decimal_real_from_string): Use DECIMAL_FLOAT_MODE_P.

2005-05-17  Ben Elliston  <bje@au.ibm.com>

	* dwarf2.h (enum dwarf_type): Rename DW_ATE_decimal_float to
	DW_ATE_GNU_decimal float and move it into the user-defined
	encoding space.
	* dwarf2out.c (base_type_die): Use the new enumeration.

2005-05-16  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtins.c (fold_builtin_1): Channel dfp finite builtins
	to common fold function.
	* builtins.def (BUILT_IN_FINITED32, BUILT_IN_FINITED64,
	BUILT_IN_FINITED128): Add dfp finite builtins.

2005-05-16  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtins.c (fold_builtin_1): Rename builtins to match C
	extension names.
	* builtins.def: Rename macro names for dfp inf/nan builtins
	to match C extension names.

2005-05-16  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtins.c (fold_builtin_1): Channel dfp isnan builtins
	to common fold function.
	* builtins.def (BUILT_IN_ISNANDF, BUILT_IN_ISNANDD,
	BUILT_IN_ISNANDL): Add builtins for dfp isnans.

2005-05-16  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtin-types.h: Add function types for NaN builtins.
	* builtins.c (fold_builtin_1): Channel dfp NaN builtins to 
	common fold function.
	* builtins.def (BUILT_IN_NANDF, BUILT_IN_NANDDD,
	BUILT_IN_NANDL): Add builtins for dfp NaNs.

2005-05-16  Ben Elliston  <bje@au.ibm.com>

	* dwarf2out.c (base_type_die): Emit a DW_ATE_decimal_float
	encoding value when the type has a decimal float mode.

2005-05-13  Ben Elliston  <bje@au.ibm.com>

	* machmode.h (DECIMAL_FLOAT_MODE_P): Change "mode" to "MODE"
	throughout this macro to match with the macro's argument.

2005-05-12  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtin-types.def: Add BUILTIN_FNs needed for dfp versions 
	of isinf.
	* builtins.c (fold_builtin_1): Channel dfp isinf builtins to 
	common function.
	* builtins.def: Add dfp isinf builtins.

2005-05-11  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (convert_arguments): The arguments to warning
	changed, but last merge didn't account for. Fixed.

2005-05-11  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (c_common_type): Fix typo.

2005-05-11  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-common.c (c_common_nodes_and_builtins): Only
	register dfp C type names, if target supports.
	* machmode.def: Add dfp modes.
	* machmode.h (DECIMAL_FLOAT_MODE_P): Add.
	* targhooks.c (default_scalar_mode_supported_p): Default
	decimal float modes as unsupported.
	* config/i386/i386-modes.def: Remove dfp modes.
	* config/i386/i386.c (ix86_scalar_mode_supported_p): Add and
	support dfp modes.
	* config/rs6000/rs6000-modes.def: Remove dfp modes.
	* config/rs6000/rs6000.c: (rs6000_scalar_mode_supported_p): Add
	and support dfp modes.

2005-05-10  Jon Grimm  <jgrimm2@us.ibm.com>

	* config/t-linux (D32PBIT, D64PBIT, D128PBIT): Comment out 
	for now. 
	* Makefile.in (LIBGCC_DEPS): Add dependencies on D32PBIT,
	D64PBIT, and D128PBIT. 

2005-05-10  Ben Elliston  <bje@au.ibm.com>

	* config/t-linux (D32PBIT, D64PBIT, D128PBIT): Define.
	(dfp32-bit.c, dfp64-bit.c, dfp128-bit.c): New targets.

2005-05-03  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h: Include "decNumber.h" after including the
	appropriate "decimal<n>.h" header, based on the value of WIDTH.
	Update comments about DFP_TYPE and DFP_C_TYPE macros.
	(DFP_PLUS, DFP_MINUS): Remove these unused runtime routines.

2005-04-22  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtins.c (fold_builtin_1): Add builtins for dfp infinity.
	* builtins.def: Add builtins for dfp infinity.
	* dfp.c (decimal_from_decnumber): Handle non-number cases better.
	(decimal_to_decnumber): New function.
	(encode_decimal32, encode_decimal64, encode_decimal128, 
	decimal_round_for_format, decimal_do_add, decimal_do_multiply,
	decimal_do_divide): Use new decimal_to/from_decnumber utility
	functions, so non-numeric values get accounted for.
	(decimal_real_max_value): Return largest finite value for type.
	* dfp.h (decimal_real_max_value): Prototype.
	* real.c (real_max_value): Call helper for decimal floats.

2005-04-19  Ben Elliston  <bje@au.ibm.com>

	* real.h (REAL_VALUE_TYPE_SIZE): Revert changes from 2004-04-04.

2005-04-18  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (DFP_C_TYPE): New.
	(DFP_MULTIPLY, DFP_ADD, DFP_SUB): Use DFP_C_TYPE for args and
	reverse the sense of return values (truth = 0).
	(DFP_PLUS, DFP_MINUS): Likewise.
	(DFP_EQ, DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): Likewise.
	* config/dfp-bit.c (dfp_unary_op): Overhaul implementation.
	(dfp_binary_op): Likewise.
	(dfp_compare_op): Likewise.
	(DFP_ADD, DFP_SUB, DFP_MULTIPLY, DFP_DIVIDE): Likewise.
	(DFP_PLUS, DFP_MINUS): Likewise.
	(DFP_EQ, DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): Likewise.

2005-04-16  Jon Grimm  <jgrimm2@us.ibm.com>

	* dfp.c (decimal_from_decnumber): New function.
	(decimal_from_string): Call decimal_from_decnumber.
	(encode_decimal32, encode_decimal64, encode_decimal128,
	decimal_from_binary, decimal_do_compare): Remove FIXME
	for fix up sign hack.
	(decimal_real_convert): Formatting.
	(decimal_do_add, decimal_do_multiply, decimal_do_divide,
	decimal_do_fix_trunc, decimal_real_arithmetic): New functions.
	* dfp.h (decimal_real_arithmetic): Prototype.
	* real.c (real_arithmetic): Call decimal_real_arithmetic.

2005-04-14  Jon Grimm  <jgrimm2@us.ibm.com>

	* dfp.c (decimal_real_convert, decimal_round_for_format): Add
	comments. 
	(decimal_real_to_decimal): New function.
	* dfp.h (decimal_real_to_decimal): Prototype.
	* real.c (real_to_decimal): Handle dfp types by calling helper.
	(real_to_hexadecimal): Handle dfp types by not printing in this
	format.

2005-04-13  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (c_common_type): Usual arithmetic conversions.
	* convert.c (convert_to_real): Add consideration for decimal float
	types to a fold optimization here.
	* dfp.c (decimal_from_string): Fix memset. Formatting.
	(decimal_to_binary, decimal_round_for_format,
	decimal_real_convert): New functions.
	* dfp.h (decimal_round_for_format, decimal_real_convert): Prototype.
	* real.c (normalize): Short circuit for dfp types.
	(round_for_format): Call dfp type support functions.
	(real_convert): Call dfp type support functions.
	* config/predicates.md (easy_fp_constant): Decimal float types are
	easy (for now).

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Only build decimal32.c, decimal64.c or decimal128.c
	if $D32PBIT, $D64PBIT or $D128PBIT are defined, to limit libgcc
	size.

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Output make(1) targets for the decNumber support
	library files if $D32PBIT, $D64PBIT or $D128PBIT are defined in
	the environment.
	(decnumber_dep): Define.

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (DFP_ADD): Correct typo for 128-bit case.

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Fix #! sequence on line 1.

2005-04-11  Ben Elliston  <bje@au.ibm.com>

	* dfp-bit.c (DFP_PLUS, DFP_MINUS): #if 0 out for now.
	* dfp-bit.h (DFP_ADD, DFP_SUB, DFP_MULTIPLY, DFP_DIVIDE, DFP_EQ,
	DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): Map to GCC-produced
	subroutine names.
	(DFP_PLUS, DFP_MINUS): #if 0 out for now.

2005-04-11  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in (D32PBIT_FUNCS): Add to the list of functions.
	(D64PBIT_FUNCS): Likewise.
	(D128PBIT_FUNCS): Likewise.
	* config/dfp-bit.h: Document some macros.
	(DFP_ADD, DFP_SUB, etc): Define and prototype.
	* config/dfp-bit.c (dfp_func_ptr): Rename typedef from this ..
	(dfp_binary_func): .. to this.
	(dfp_unary_func): New typedef.
	(dfp_op): Rename from this ..
	(dfp_binary_op): .. to this. Update all callers.
	(dfp_unary_op, dfp_compare_op): New functions.
	(DFP_ADD, DFP_SUB, DFP_DIVIDE, DFP_PLUS, DFP_MINUS, DFP_EQ,
	DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): New function "templates".

2005-04-11  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h: Largely rewrite.
	(DFP_TYPE, TO_INTERNAL, TO_ENCODED): New macros.
	(DFP_MULTIPLY): Define and prototype for 32, 64 and 128 bit
	variants.
	* config/dfp-bit.c: Include "config/dfp-bit.h".
	(dfp_func_ptr): New typedef.
	(dfp_op): New function.
	(dfp_multiply): Replace ..
	(DFP_MULTIPLY): .. with this.

2004-04-09  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (convert_arguments): More conservative check for
	decimal float related prototype conversion warnings.

2004-04-08  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (convert_arguments): Warn on conversion due to prototype.

2005-04-08  Jon Grimm  <jgrimm2@us.ibm.com>

	* config/dfp-bit.h: Remove extra "*/".

2005-04-08  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in (D32PBIT_FUNCS): Define.
	(D64PBIT_FUNCS): Likewise.
	(D128PBIT_FUNCS): Likewise.
	(libgcc.mk): Pass D32PBIT, D32PBIT_FUNCS, D64PBIT, D64PBIT_FUNCS,
	D128PBIT and D128PBIT_FUNCS to mklibgcc.
	* mklibgcc.in: Process D32PBIT, D64PBIT and D128PBIT variables.
	* config/i386/t-linux64 (D32PBIT, D64PBIT, D128PBIT): Define.
	(dfp32-bit.c, dfp64-bit.c dfp128-bit.c): New targets.
	* config/dfp-bit.h: New file.
	* config/dfp-bit.c: New file.

2005-04-06  Jon Grimm  <jgrimm2@us.ibm.com>

	* Makefile.in: Remove HAVE_DECNUMBER scaffolding.
	* c-cppbuiltin.c (builtin_define_decfloat_constants): New.
	(c_cpp_builtins): Call builtin_define_decfloat_constants.
	* dfp.c: Fix preamble and formatting fixes.
	(decimal_real_from_string): Fix bug marking all reals as decimal.
	* dfp.h: Remove HAVE_DECNUMBER scaffolding.
	(decNumberNegate): Remove.

2005-04-06  Jon Grimm  <jgrimm2@us.ibm.com>

	Change file preambles. Convert c++ style comments to c style comments.
	* decContext.c (decContextStatusToString): Return const.
	* decContext.h (decContextStatusToString): Likewise.
	* decDPD.h: Change preamble and comment cleanup.
	* decNumber.c (decNumberVersion): Return const.
	* decNumber.h (decNumberNegate): Add.
	(decNumberVersion): Return const.
	* decNumberLocal.h: Change preamble and comment cleanup.
	* decimal128.c: Likewise.
	* decimal128.h: Likewise.
	* decimal32.c: Likewise.
	* decimal32.h: Likewise.
	* decimal64.c: Likewise.
	* decimal64.h: Likewise.

2005-04-06  Jon Grimm  <jgrimm2@us.ibm.com>

	* decContext.c: New file.
	* decContext.h: Likewise.
	* decDPD.h: Likewise.
	* decNumber.c: Likewise.
	* decNumber.h: Likewise.
	* decNumberLocal.h: Likewise.
	* decimal128.c: Likewise.
	* decimal128.h: Likewise.
	* decimal32.c: Likewise.
	* decimal32.h: Likewise.
	* decimal64.c: Likewise.
	* decimal64.h: Likewise.

2005-04-04  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-common.c (shorten_compare): For now, if decimal types involved,
	bypass narrow to smallest comparable precision.
	* dfp.c (decimal_from_string): Don't bother setting real_value.uexp.
	(decimal_real_from_string): Set real_value.decimal bit. 
	(encode_decimal64, decode_decimal64, encode_decimal128,
	decode_decimal128): Formatting fixes.
	(decimal_from_binary): Helper to convert from internal binary to
	internal decimal encoding. 
	(decimal_do_compare): Callout from real.c when decimal floats are
	involved in the comparison. 
	* dfp.h (decimal_do_compare): New.
	* real.c (do_compare): Call out to decimal_do_compare() when decimal.
	(real_convert): For now, don't convert when decimal floats are
	involved. 
	(decode_decimal_double): Formatting fix. 
	* real.h: Steal a bitfield for 'decimal' from real_value.uexp.

2005-03-24  Ben Elliston  <bje@au.ibm.com>

	Resolve merge conflicts:
	* BASE-VER: Include the branch name.
	* real.c (decimal_single_format): Add an initialiser for
	signbit_ro member.
	(decimal_double_format): Likewise.
	(decimal_quad_format): Likewise.

2005-03-23  Ben Elliston  <bje@au.ibm.com>

	* dwarf2.h (enum dwarf_type): Add DW_ATE_decimal_float.

2005-03-23  Jon Grimm  <jgrimm2@us.ibm.com>

	* Makefile.in: HAVE_DECNUMBER controls building in of decNumber
	files.
	* c-lex.c (interpret_float): real_from_string3 can handle binary
	or decimal floats.
	* defaults.h: Add SIZE macros for decimal float types.
	* dfp.c: New file. Handle interfacing to decNumber routines.
	* dfp.h: New file. 
	* real.c (real_from_string3): Initialize real based on mode and
	string.
	(round_for_format): Short circuit decimal float case.
	(real_convert): Short circuit for decimal float case.
	(encode_decimal_single, decode_decimal_single,
	encode_decimal_double, decode_decimal_double, encode_decimal_quad,
	decode_decimal_quad): Conditionally call out to dfp based
	function.  As decNumber enters source this could go away.
	* real.h: Export real_from_string3.
	* tree.c (build_common_tree_nodes_2): Override type chosen by
	layout_type ().

2005-03-15  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-pretty-print.c (pp_c_floating_constant): Print dfp suffixes.

2005-03-14  Ben Elliston  <bje@au.ibm.com>

	* doc/rtl.texi (Machine Modes): Document SDmode, DDmode and
	TDmode.

	* config/i386/i386-modes.def: Add SDmode, DDmode, and TDmode.

2005-03-11  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-lex.c (interpret_float): Decode dfp types from cpplib provided
	flags.

2005-03-09  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtin-types.def: Add new type_nodes for decimal float.
	* c-common.c (c_common_type_for_mode): Return type from DFP mode.
	(c_common_nodes_and_builtins): Record builtin dfp types.
	* c-common.h: Add RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128.
	* c-decl.c (declspecs_add_type): Verify combos on qualifiers.
	(finish_declspecs): Return type from DFP typespec_word.
	* c-format.h: Add macros for dfp type format processing.
	* c-parser.c (c_token_starts_typename, c_token_starts_declspecs,
	c_parser_declspecs, c_parser_attributes): Add _Decimal reserved
	words.
	* c-tree.h: Add enums for DFP typespec_words.
	* tree.c (build_common_tree_nodes_2): Make type nodes.
	* tree.h: Allocate storage for DFP type nodes.

2005-03-07  Jon Grimm  <jgrimm2@us.ibm.com>

	* genmodes.c (make_complex_modes): For now, don't create complex
	modes for the decimal floats.

2005-02-17  Ben Elliston  <bje@au.ibm.com>

	* version.c (version_string): Include the branch name.

2005-02-17  Ben Elliston  <bje@au.ibm.com>	

	* genmodes.c (make_complex_modes): Initialise q to allay warning.

2005-02-14  David Edelsohn  <dje@watson.ibm.com>

	* config/rs6000/rs6000-modes.def: Add decimal floating point SDmode,
	DDmode, and TDmode.
	* real.h (decimal_single_format): Declare.
	(decimal_double_format): Likewise.
	(decimal_quad_format): Likewise.
	* real.c (decimal_single_format): Define placeholder.
	(decimal_double_format): Likewise.
	(decimal_quad_format): Likewise.
	* genmodes.c (struct mode_data): Add counter field.
	(blank_mode): Clear counter field.
	(new_mode): Increment counter field for each mode defined.
	(make_complex_modes): Prepend D for user-specified complex
	float modes.
	(cmp_modes): Compare counter field if other characteristics similar.

2005-02-14  Ben Elliston  <bje@au.ibm.com>

	* Start this ChangeLog.

Local Variables:
mode: change-log
change-log-default-name: "ChangeLog.dfp"
End:
