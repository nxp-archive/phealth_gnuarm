2005-05-03  Ben Elliston  <bje@au.ibm.com>

	* DEV-PHASE: Update.

2005-04-22  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtins.c (fold_builtin_1): Add builtins for dfp infinity.
	* builtins.def: Add builtins for dfp infinity.
	* dfp.c (decimal_from_decnumber): Handle non-number cases better.
	(decimal_to_decnumber): New function.
	(encode_decimal32, encode_decimal64, encode_decimal128, 
	decimal_round_for_format, decimal_do_add, decimal_do_multiply,
	decimal_do_divide): Use new decimal_to/from_decnumber utility
	functions, so non-numeric values get accounted for.
	(decimal_real_max_value): Return largest finite value for type.
	* dfp.h (decimal_real_max_value): Prototype.
	* real.c (real_max_value): Call helper for decimal floats.

2005-04-19  Ben Elliston  <bje@au.ibm.com>

	* real.h (REAL_VALUE_TYPE_SIZE): Revert changes from 2004-04-04.

2005-04-18  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (DFP_C_TYPE): New.
	(DFP_MULTIPLY, DFP_ADD, DFP_SUB): Use DFP_C_TYPE for args and
	reverse the sense of return values (truth = 0).
	(DFP_PLUS, DFP_MINUS): Likewise.
	(DFP_EQ, DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): Likewise.
	* config/dfp-bit.c (dfp_unary_op): Overhaul implementation.
	(dfp_binary_op): Likewise.
	(dfp_compare_op): Likewise.
	(DFP_ADD, DFP_SUB, DFP_MULTIPLY, DFP_DIVIDE): Likewise.
	(DFP_PLUS, DFP_MINUS): Likewise.
	(DFP_EQ, DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): Likewise.

2005-04-16  Jon Grimm  <jgrimm2@us.ibm.com>

	* dfp.c (decimal_from_decnumber): New function.
	(decimal_from_string): Call decimal_from_decnumber.
	(encode_decimal32, encode_decimal64, encode_decimal128,
	decimal_from_binary, decimal_do_compare): Remove FIXME
	for fix up sign hack.
	(decimal_real_convert): Formatting.
	(decimal_do_add, decimal_do_multiply, decimal_do_divide,
	decimal_do_fix_trunc, decimal_real_arithmetic): New functions.
	* dfp.h (decimal_real_arithmetic): Prototype.
	* real.c (real_arithmetic): Call decimal_real_arithmetic.

2005-04-14  Jon Grimm  <jgrimm2@us.ibm.com>

	* dfp.c (decimal_real_convert, decimal_round_for_format): Add
	comments. 
	(decimal_real_to_decimal): New function.
	* dfp.h (decimal_real_to_decimal): Prototype.
	* real.c (real_to_decimal): Handle dfp types by calling helper.
	(real_to_hexadecimal): Handle dfp types by not printing in this
	format.

2005-04-13  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (c_common_type): Usual arithmetic conversions.
	* convert.c (convert_to_real): Add consideration for decimal float
	types to a fold optimization here.
	* dfp.c (decimal_from_string): Fix memset. Formatting.
	(decimal_to_binary, decimal_round_for_format,
	decimal_real_convert): New functions.
	* dfp.h (decimal_round_for_format, decimal_real_convert): Prototype.
	* real.c (normalize): Short circuit for dfp types.
	(round_for_format): Call dfp type support functions.
	(real_convert): Call dfp type support functions.
	* config/predicates.md (easy_fp_constant): Decimal float types are
	easy (for now).

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Only build decimal32.c, decimal64.c or decimal128.c
	if $D32PBIT, $D64PBIT or $D128PBIT are defined, to limit libgcc
	size.

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Output make(1) targets for the decNumber support
	library files if $D32PBIT, $D64PBIT or $D128PBIT are defined in
	the environment.
	(decnumber_dep): Define.

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h (DFP_ADD): Correct typo for 128-bit case.

2005-04-12  Ben Elliston  <bje@au.ibm.com>

	* mklibgcc.in: Fix #! sequence on line 1.

2005-04-11  Ben Elliston  <bje@au.ibm.com>

	* dfp-bit.c (DFP_PLUS, DFP_MINUS): #if 0 out for now.
	* dfp-bit.h (DFP_ADD, DFP_SUB, DFP_MULTIPLY, DFP_DIVIDE, DFP_EQ,
	DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): Map to GCC-produced
	subroutine names.
	(DFP_PLUS, DFP_MINUS): #if 0 out for now.

2005-04-11  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in (D32PBIT_FUNCS): Add to the list of functions.
	(D64PBIT_FUNCS): Likewise.
	(D128PBIT_FUNCS): Likewise.
	* config/dfp-bit.h: Document some macros.
	(DFP_ADD, DFP_SUB, etc): Define and prototype.
	* config/dfp-bit.c (dfp_func_ptr): Rename typedef from this ..
	(dfp_binary_func): .. to this.
	(dfp_unary_func): New typedef.
	(dfp_op): Rename from this ..
	(dfp_binary_op): .. to this. Update all callers.
	(dfp_unary_op, dfp_compare_op): New functions.
	(DFP_ADD, DFP_SUB, DFP_DIVIDE, DFP_PLUS, DFP_MINUS, DFP_EQ,
	DFP_NE, DFP_LT, DFP_GT, DFP_LE, DFP_GE): New function "templates".

2005-04-11  Ben Elliston  <bje@au.ibm.com>

	* config/dfp-bit.h: Largely rewrite.
	(DFP_TYPE, TO_INTERNAL, TO_ENCODED): New macros.
	(DFP_MULTIPLY): Define and prototype for 32, 64 and 128 bit
	variants.
	* config/dfp-bit.c: Include "config/dfp-bit.h".
	(dfp_func_ptr): New typedef.
	(dfp_op): New function.
	(dfp_multiply): Replace ..
	(DFP_MULTIPLY): .. with this.

2004-04-09  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (convert_arguments): More conservative check for
	decimal float related prototype conversion warnings.

2004-04-08  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-typeck.c (convert_arguments): Warn on conversion due to prototype.

2005-04-08  Jon Grimm  <jgrimm2@us.ibm.com>

	* config/dfp-bit.h: Remove extra "*/".

2005-04-08  Ben Elliston  <bje@au.ibm.com>

	* Makefile.in (D32PBIT_FUNCS): Define.
	(D64PBIT_FUNCS): Likewise.
	(D128PBIT_FUNCS): Likewise.
	(libgcc.mk): Pass D32PBIT, D32PBIT_FUNCS, D64PBIT, D64PBIT_FUNCS,
	D128PBIT and D128PBIT_FUNCS to mklibgcc.
	* mklibgcc.in: Process D32PBIT, D64PBIT and D128PBIT variables.
	* config/i386/t-linux64 (D32PBIT, D64PBIT, D128PBIT): Define.
	(dfp32-bit.c, dfp64-bit.c dfp128-bit.c): New targets.
	* config/dfp-bit.h: New file.
	* config/dfp-bit.c: New file.

2005-04-06  Jon Grimm  <jgrimm2@us.ibm.com>

	* Makefile.in: Remove HAVE_DECNUMBER scaffolding.
	* c-cppbuiltin.c (builtin_define_decfloat_constants): New.
	(c_cpp_builtins): Call builtin_define_decfloat_constants.
	* dfp.c: Fix preamble and formatting fixes.
	(decimal_real_from_string): Fix bug marking all reals as decimal.
	* dfp.h: Remove HAVE_DECNUMBER scaffolding.
	(decNumberNegate): Remove.

2005-04-06  Jon Grimm  <jgrimm2@us.ibm.com>

	Change file preambles. Convert c++ style comments to c style comments.
	* decContext.c (decContextStatusToString): Return const.
	* decContext.h (decContextStatusToString): Likewise.
	* decDPD.h: Change preamble and comment cleanup.
	* decNumber.c (decNumberVersion): Return const.
	* decNumber.h (decNumberNegate): Add.
	(decNumberVersion): Return const.
	* decNumberLocal.h: Change preamble and comment cleanup.
	* decimal128.c: Likewise.
	* decimal128.h: Likewise.
	* decimal32.c: Likewise.
	* decimal32.h: Likewise.
	* decimal64.c: Likewise.
	* decimal64.h: Likewise.

2005-04-06  Jon Grimm  <jgrimm2@us.ibm.com>

	* decContext.c: New file.
	* decContext.h: Likewise.
	* decDPD.h: Likewise.
	* decNumber.c: Likewise.
	* decNumber.h: Likewise.
	* decNumberLocal.h: Likewise.
	* decimal128.c: Likewise.
	* decimal128.h: Likewise.
	* decimal32.c: Likewise.
	* decimal32.h: Likewise.
	* decimal64.c: Likewise.
	* decimal64.h: Likewise.

2005-04-04  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-common.c (shorten_compare): For now, if decimal types involved,
	bypass narrow to smallest comparable precision.
	* dfp.c (decimal_from_string): Don't bother setting real_value.uexp.
	(decimal_real_from_string): Set real_value.decimal bit. 
	(encode_decimal64, decode_decimal64, encode_decimal128,
	decode_decimal128): Formatting fixes.
	(decimal_from_binary): Helper to convert from internal binary to
	internal decimal encoding. 
	(decimal_do_compare): Callout from real.c when decimal floats are
	involved in the comparison. 
	* dfp.h (decimal_do_compare): New.
	* real.c (do_compare): Call out to decimal_do_compare() when decimal.
	(real_convert): For now, don't convert when decimal floats are
	involved. 
	(decode_decimal_double): Formatting fix. 
	* real.h: Steal a bitfield for 'decimal' from real_value.uexp.

2005-03-24  Ben Elliston  <bje@au.ibm.com>

	Resolve merge conflicts:
	* BASE-VER: Include the branch name.
	* real.c (decimal_single_format): Add an initialiser for
	signbit_ro member.
	(decimal_double_format): Likewise.
	(decimal_quad_format): Likewise.

2005-03-23  Ben Elliston  <bje@au.ibm.com>

	* dwarf2.h (enum dwarf_type): Add DW_ATE_decimal_float.

2005-03-23  Jon Grimm  <jgrimm2@us.ibm.com>

	* Makefile.in: HAVE_DECNUMBER controls building in of decNumber
	files.
	* c-lex.c (interpret_float): real_from_string3 can handle binary
	or decimal floats.
	* defaults.h: Add SIZE macros for decimal float types.
	* dfp.c: New file. Handle interfacing to decNumber routines.
	* dfp.h: New file. 
	* real.c (real_from_string3): Initialize real based on mode and
	string.
	(round_for_format): Short circuit decimal float case.
	(real_convert): Short circuit for decimal float case.
	(encode_decimal_single, decode_decimal_single,
	encode_decimal_double, decode_decimal_double, encode_decimal_quad,
	decode_decimal_quad): Conditionally call out to dfp based
	function.  As decNumber enters source this could go away.
	* real.h: Export real_from_string3.
	* tree.c (build_common_tree_nodes_2): Override type chosen by
	layout_type ().

2005-03-15  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-pretty-print.c (pp_c_floating_constant): Print dfp suffixes.

2005-03-14  Ben Elliston  <bje@au.ibm.com>

	* doc/rtl.texi (Machine Modes): Document SDmode, DDmode and
	TDmode.

	* config/i386/i386-modes.def: Add SDmode, DDmode, and TDmode.

2005-03-11  Jon Grimm  <jgrimm2@us.ibm.com>

	* c-lex.c (interpret_float): Decode dfp types from cpplib provided
	flags.

2005-03-09  Jon Grimm  <jgrimm2@us.ibm.com>

	* builtin-types.def: Add new type_nodes for decimal float.
	* c-common.c (c_common_type_for_mode): Return type from DFP mode.
	(c_common_nodes_and_builtins): Record builtin dfp types.
	* c-common.h: Add RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128.
	* c-decl.c (declspecs_add_type): Verify combos on qualifiers.
	(finish_declspecs): Return type from DFP typespec_word.
	* c-format.h: Add macros for dfp type format processing.
	* c-parser.c (c_token_starts_typename, c_token_starts_declspecs,
	c_parser_declspecs, c_parser_attributes): Add _Decimal reserved
	words.
	* c-tree.h: Add enums for DFP typespec_words.
	* tree.c (build_common_tree_nodes_2): Make type nodes.
	* tree.h: Allocate storage for DFP type nodes.

2005-03-07  Jon Grimm  <jgrimm2@us.ibm.com>

	* genmodes.c (make_complex_modes): For now, don't create complex
	modes for the decimal floats.

2005-02-17  Ben Elliston  <bje@au.ibm.com>

	* version.c (version_string): Include the branch name.

2005-02-17  Ben Elliston  <bje@au.ibm.com>	

	* genmodes.c (make_complex_modes): Initialise q to allay warning.

2005-02-14  David Edelsohn  <dje@watson.ibm.com>

	* config/rs6000/rs6000-modes.def: Add decimal floating point SDmode,
	DDmode, and TDmode.
	* real.h (decimal_single_format): Declare.
	(decimal_double_format): Likewise.
	(decimal_quad_format): Likewise.
	* real.c (decimal_single_format): Define placeholder.
	(decimal_double_format): Likewise.
	(decimal_quad_format): Likewise.
	* genmodes.c (struct mode_data): Add counter field.
	(blank_mode): Clear counter field.
	(new_mode): Increment counter field for each mode defined.
	(make_complex_modes): Prepend D for user-specified complex
	float modes.
	(cmp_modes): Compare counter field if other characteristics similar.

2005-02-14  Ben Elliston  <bje@au.ibm.com>

	* Start this ChangeLog.

Local Variables:
mode: change-log
change-log-default-name: "ChangeLog.dfp"
End:
