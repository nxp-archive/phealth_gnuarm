2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	* tree.def (OMP_CLAUSE_NOWAIT): Define.
	* tree-pretty-print.c (dump_generic_node): Handle.
	* c-parser.c (c_parser_pragma_omp_clause_nowait): Generate.
	* gimple-low.c (lower_omp_for): If nowait has not been
	specified, emit a barrier at the end of the parallel loop.

2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	* c-common.h (c_finish_omp_for): Declare
	* c-omp.c (c_finish_omp_for): Rename from c_finish_gomp_for
	and move from ...
	* c-typeck.c (c_finish_gomp_for): ... here.
	* c-tree.h (c_finish_gomp_for): Remove.
	* gimple-low.c: Rename gomp_* symbols into omp_*.
	Update all users.
	* gimplify.c: Likewise.
	* tree.def: Rename GOMP_* tree codes to OMP_*.
	Update all users.
	* tree.h: Likewise.

2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20050923)

2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	* c-parser.c (c_parser_pragma_omp_clause): Fix dangling if().
	(c_parser_pragma_omp_clause_if): Remove printf.
	Check that only one clause 'if' is specified.
	Call add_new_clause.
	(c_parser_pragma_omp_clause_num_threads): Remove printf.
	Check that only one clause 'num_threads' is specified.
	Call add_new_clause.
	* gimple-low.c (emit_num_threads_setup_code): New.
	(lower_gomp_parallel): Call it.
	Add new argument DATA.  Modify all callers.
	* tree-pretty-print.c (dump_generic_node): Handle
	GOMP_CLAUSE_IF and GOMP_CLAUSE_NUM_THREADS.
	* tree.def (GOMP_CLAUSE_IF, GOMP_CLAUSE_NUM_THREADS): Define.
	* tree.h (GOMP_IF_EXPR, GOMP_NUM_THREADS_EXPR): Define.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* c-parser.c (c_parse_init): Tableize the omp pragmas; register
	them with expansion.
	(c_handle_deferred_pragma): Split out of ...
	(c_parser_pragma): ... here.
	(c_lex_omp_pragma): Split out of ...
	(c_lex_one_token): ... here.  Consume non-omp pragmas immediately.

	* testsuite/gcc.dg/gomp/gomp.exp: Save and restore DEFAULT_CFLAGS
	around the subdirectory.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* Makefile.in (c-omp.o): Depend on C_TREE_H.
	* c-parser.c (c_parser_omp_atomic_expression): Handle error_mark
	from initial unary expression.  Move conversion code ...
	* c-omp.c (c_finish_omp_atomic): ... here.  Handle pointers and
	floating-point.
	* c-typeck.c (build_unary_op): Return error_mark after reporting
	a readonly_error.
	(build_modify_expr): Likewise.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* c-parser.c (omp_clauses_stack): Remove.
	(push_omp_clauses, pop_omp_clauses): Remove.
	(c_parser_for_statement): New parameter omp_clauses; pass it on to
	the GOMP_FOR instead of pop_omp_clauses.
	(c_parser_omp_directive): Save curr_clause_set after parsing the
	pragma.  Pass it on as appropriate.
	(c_parser_pragma_omp_critical): Don't clear curr_clause_set.
	(c_parser_pragma_omp_for): Don't call push_omp_clauses.
	(c_parser_pragma_omp_parallel, c_parser_pragma_omp_sections,
	c_parser_pragma_omp_single): Likewise.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* c-common.c (sync_resolve_return): Convert to the main variant.
	* c-tree.h (pushdecl): Move decl ...
	* c-common.h (pushdecl): ... here.
	(c_finish_omp_atomic): Update decl.
	* c-omp.c (c_finish_omp_atomic): Take code, lhs, rhs separately;
	delete code to extract them.  Use TYPE_MAIN_VARIANT.  Return early
	if lhs is not addressable.  Push new decls into current binding.
	Use build_binary_op.
	* c-parser.c (c_parser_pragma): Reset parser->error.
	(c_parser_compound_statement_nostart): Reinstate special case for
	barrier and flush.  Move parsing of these directives here.
	(c_parser_section_scope): Fix quoting in error message.
	(c_parser_omp_atomic_expression): New.
	(c_parser_omp_directive): Use it.  Error on barrier or flush.
	(c_parser_pragma_omp_critical): Tighten error corner cases.
	(c_parser_pragma_omp_flush): Likewise.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* c-typeck.c (c_finish_gomp_for): Update OpenMP spec version.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* gimple-low.c (process_gomp_clauses): Extract from ...
	(build_remap_info): ... here.
	(get_gomp_private_ref): Do not call copy_decl_for_dup.
	Set DECL_NAME of replacement to that of the original.
	(remap_locals_r): Temporarily treat local variables as private
	if they are not in any other clause.
	Prevent walking into the expression that replaces a mapped
	local.
	Call process_gomp_clauses on GOMP_PARALLEL, GOMP_FOR and
	GOMP_SECTIONS.
	(remap_locals): Remove arguments GOMP_FN and CLAUSEs.
	Add arguments BODY_P and RI_P.
	Call process_gomp_clauses.
	Call walk_tree on BODY_P.
	Do not return anything.
	Adjust callers.
	(lower_gomp_parallel): Call build_remap_info.
	(lower_gomp_for): Do not call remap_locals.
	Do not call emit_gomp_data_setup_code.
	Remove local RI_P.
	* tree.h (GOMP_SECTIONS_CLAUSES): Define.
	(GOMP_SECTIONS_BODY): Define.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* c-tree.h (c_finish_gomp_for): Declare
	* c-typeck.c (c_finish_gomp_for): New.
	* c-parser.c (c_parser_for_statement): Call it.  If the
	parallel loop was malformed, call c_finish_loop to emit a
	sequential loop.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* version.c: Update last merge date.

2005-09-21  Richard Henderson  <rth@redhat.com>

	* c-lex.c (c_lex_with_flags) <CPP_PRAGMA>: Set input_location.

	* testsuite/gcc.dg/gomp/gomp.exp: New.
	* testsuite/gcc.dg/gomp/master-1.c: New.
	* testsuite/gcc.dg/gomp/master-2.c: New.

2005-09-21  Richard Henderson  <rth@redhat.com>

	* c-omp.c: New file.
	* Makefile.in (c-omp.o): New.
	* builtin-types.def (BT_PTR_LONG, BT_PTR_PTR, BT_FN_BOOL, BT_FN_INT,
	BT_FN_VOID_PTRPTR, BT_PTR_FN_VOID_PTR, BT_FN_VOID_UINT_UINT,
	BT_FN_BOOL_LONGPTR_LONGPTR, BT_FN_VOID_OMPFN_PTR_UINT,
	BT_FN_VOID_OMPFN_PTR_UINT_UINT,
	BT_FN_BOOL_LONG_LONG_LONG_LONGPTR_LONGPTR,
	BT_FN_BOOL_LONG_LONG_LONG_LONG_LONGPTR_LONGPTR,
	BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG,
	BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG): New.
	* builtins.def (DEF_GOMP_BUILTIN): New.
	(BUILT_IN_OMP_GET_THREAD_NUM, BUILT_IN_GOMP_BARRIER,
	BUILT_IN_GOMP_CRITICAL_START, BUILT_IN_GOMP_CRITICAL_END,
	BUILT_IN_GOMP_CRITICAL_NAME_START, BUILT_IN_GOMP_CRITICAL_NAME_END,
	BUILT_IN_GOMP_LOOP_STATIC_START, BUILT_IN_GOMP_LOOP_DYNAMIC_START,
	BUILT_IN_GOMP_LOOP_GUIDED_START, BUILT_IN_GOMP_LOOP_RUNTIME_START,
	BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START,
	BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START,
	BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START,
	BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START,
	BUILT_IN_GOMP_LOOP_STATIC_NEXT, BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT,
	BUILT_IN_GOMP_LOOP_GUIDED_NEXT, BUILT_IN_GOMP_LOOP_RUNTIME_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT,
	BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START,
	BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START,
	BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START,
	BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START,
	BUILT_IN_GOMP_LOOP_END, BUILT_IN_GOMP_LOOP_END_NOWAIT,
	BUILT_IN_GOMP_ORDERED_START, BUILT_IN_GOMP_ORDERED_END,
	BUILT_IN_GOMP_PARALLEL_START, BUILT_IN_GOMP_PARALLEL_END,
	BUILT_IN_GOMP_SECTIONS_START, BUILT_IN_GOMP_SECTIONS_NEXT,
	BUILT_IN_GOMP_PARALLEL_SECTIONS_START, BUILT_IN_GOMP_SECTIONS_END,
	BUILT_IN_GOMP_SECTIONS_END_NOWAIT, BUILT_IN_GOMP_SINGLE_START,
	BUILT_IN_GOMP_SINGLE_COPY_START, BUILT_IN_GOMP_SINGLE_COPY_END): New.
	* c-common.c (DEF_FUNCTION_TYPE_7): New.
	* c-tree.h (pushdecl_top_level): Move declaration ...
	* c-common.h (pushdecl_top_level): ... here.
	(c_finish_omp_master, c_finish_omp_critical, c_finish_omp_ordered,
	c_finish_omp_barrier, c_finish_omp_atomic, c_finish_omp_flush): Declare.
	* c-parser.c (c_parser_compound_statement_nostart): Don't special
	case omp barrier or omp flush.
	(c_parser_omp_directive): Implement master, critical, orered,
	barrier, atomic, flush.
	(c_parser_pragma_omp_no_args): New.
	(c_parser_pragma_omp_critical): Remove printf debugging.
	(c_parser_pragma_omp_flush): Likewise.
	(c_parser_pragma_omp_atomic, c_parser_pragma_omp_barrier,
	c_parser_pragma_omp_master, c_parser_pragma_omp_ordered): Remove.

2005-09-21  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.c (c_parse_init): Don't register OpenMP pragmas
	if flag_preprocess_only.

2005-09-21  Richard Henderson  <rth@redhat.com>

	* cgraph.c (cgraph_analyze_queue): New.
	(cgraph_add_new_function): Do nothing but add the decl to this list.
	* cgraph.h (cgraph_analyze_queue): Declare.
	(cgraph_lower_function): Remove.
	* cgraphunit.c (cgraph_lower_function): Make static.
	(cgraph_finalize_pending_functions): New.
	(cgraph_finalize_function): Call it.
	(cgraph_finalize_compilation_unit): Likewise.
	* gimple-low.c (lower_gomp_parallel): Call gimplify_function_tree.

2005-09-20  Diego Novillo  <dnovillo@redhat.com>

	* gimple-low.c (lower_gomp_parallel): Use a NULL argument if
	there is no shared data to send to the child thread.

2005-09-20  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (c-parser.o): Depend on vec.h.
	(gimple-low.o): Depend on $(SPLAY_TREE_H)
	* c-parser.c: Include vec.h.
	(curr_clause_set, omp_clauses_stack): New locals.
	(omp_clauses): Remove.  Adjust all callers.
	(push_omp_clauses, pop_omp_clauses, add_new_clause): New.
	(c_parser_for_statement): Add new argument IS_OMP_FOR.
	If true, emit a GOMP_FOR tree.
	Adjust all callers.
	(c_parser_omp_directive): Call pop_omp_clauses.
	(c_parser_pragma_omp_clause_copyin): Call add_new_clause.
	Don't return anything.  Adjust callers.
	(c_parser_pragma_omp_clause_firstprivate): Call add_new_clause.
	(c_parser_pragma_omp_clause_lastprivate): Likewise.
	(c_parser_pragma_omp_clause_private): Likewise.
	(c_parser_pragma_omp_clause_shared): Likewise.
	Mark all shared variables addressable.
	(c_parser_pragma_omp_for): Call push_omp_clauses.
	(c_parser_pragma_omp_parallel_for): Remove printf.
	(c_parser_pragma_omp_for): Call push_omp_clauses
	(c_parser_pragma_omp_parallel_sections): Remove printf.
	(c_parser_pragma_omp_parallel): Call push_omp_clauses.
	(c_parser_pragma_omp_sections): Remove printf.
	Call push_omp_clauses.
	(c_parser_pragma_omp_single): Remove printf.
	Call push_omp_clauses.
	* cgraph.c (cgraph_add_new_function): Assume that FNDECL
	already has a struct function associated.
	* gimple-low.c: Include splay-tree.h
	(struct remap_info_d, add_decls_to_set, build_remap_info,
	remap_locals_r): Move from tree-inline.c.
	(delete_remap_info, get_gomp_private_ref, get_gomp_shared_ref,
	remap_locals): New.
	(create_gomp_fn): Set DECL_ARG_TYPE and TREE_USED on
	FN_DATA_ARG.
	(emit_gomp_data_setup_code): New.
	(lower_gomp_parallel): Rename from lower_gomp_expr.
	Allocate the function structure before calling remap_locals.
	Call emit_gomp_data_setup_code.
	Call delete_remap_info.
	(emit_gomp_for_static): New.
	(lower_gomp_for): New.
	(lower_stmt): Handle GOMP_FOR.
	* gimplify.c (gimplify_gomp_for): New.
	(gimplify_expr): Handle GOMP_FOR with a call to
	gimplify_gomp_for.
	* tree-gimple.c (is_gimple_stmt): Handle GOMP_FOR.
	* tree-inline.c (remap_locals_d, add_decls_to_set,
	build_remap_info, remap_locals_r): Move to gimple-low.c.
	(remap_locals_in_gomp_body, move_decl_to): Remove.
	* tree-inline.h (remap_locals_in_gomp_body): Remove.
	* tree-pretty-print.c (dump_generic_node): Handle GOMP_FOR,
	GOMP_CLAUSE_SHARED, GOMP_CLAUSE_FIRSTPRIVATE,
	GOMP_CLAUSE_LASTPRIVATE, GOMP_CLAUSE_COPYIN,
	GOMP_CLAUSE_COPYPRIVATE.
	Adjust output for GOMP_PARALLEL.
	* tree.c (build5_stat): New.
	* tree.def (GOMP_FOR): Add operand GOMP_FOR_COND.
	* tree.h (GOMP_FOR_CLAUSES, GOMP_FOR_INIT, GOMP_FOR_CODN,
	GOMP_FOR_INCR, GOMP_FOR_BODY, GOMP_SHARED_VARS,
	GOMP_FIRSTPRIVATE_VARS, GOMP_LASTPRIVATE_VARS,
	GOMP_COPYIN_VARS, GOMP_COPYPRIVATE_VARS): Define.
	(build5_stat, build5): Declare.

2005-09-20  Jakub Jelinek  <jakub@redhat.com>

	* c-cppbuiltin.c (c_cpp_builtins): If -fopenmp, #define _OPENMP
	to 200505.

2005-09-14  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20050914)

2005-09-01  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20050901)

2005-08-03  Diego Novillo  <dnovillo@redhat.com>

	* cgraph.c (cgraph_add_new_function): When unit at a time is
	disabled, just add the new function to the graph and mark it
	as needed.
	* gimple-low.c (struct remap_locals_d, add_decls_to_set,
	build_remap_info, remap_locals_r, remap_locals_in_gomp_body):
	Move ...
	* tree-inline.c: ... here.
	(move_decl_to): New local function.
	(remap_locals_r): Call it.
	* tree-inline.h (remap_locals_in_gomp_body): Declare.

2005-08-01  Diego Novillo  <dnovillo@redhat.com>

	* gimple-low.c (create_gomp_fn): Call create_tmp_var_name to
	create a new function name.
	(create_gomp_parallel_start): Fix contexts for block vars and
	function argument.
	(lower_gomp_expr): Fix type of first argument in call to
	GOMP_parallel_start.

2005-07-28  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge.

2005-07-13  Diego Novillo  <dnovillo@redhat.com>

	* gimplify.c (gimplify_gomp_parallel): Really remove.

2005-07-13  Diego Novillo  <dnovillo@redhat.com>

	* cgraph.c (cgraph_add_new_function): New.
	* cgraph.h (cgraph_add_new_function): Declare.
	* gimple-low.c (struct remap_locals_d): Declare.
	(add_decls_to_set): New.
	(build_remap_info): New.
	(remap_locals_r): New.
	(remap_locals_in_gomp_body): New.
	(create_gomp_fn): New.
	(create_gomp_parallel_start): New.
	(create_gomp_parallel_end): New.
	(lower_gomp_expr): New.
	(lower_stmt): Call it.
	* gimplify.c (gimplify_gomp_parallel): Remove.
	(gimplify_expr): Don't gimplify GOMP_PARALLEL.
	* tree-gimple.c (is_gimple_stmt): Consider GOMP_PARALLEL
	to be GIMPLE.
	* tree.def (GOMP_CLAUSE_SHARED, GOMP_CLAUSE_FIRSTPRIVATE,
	GOMP_CLAUSE_LASTPRIVATE, GOMP_CLAUSE_REDUCTION,
	GOMP_CLAUSE_COPYPRIVATE,): Define.

2005-06-13  Diego Novillo  <dnovillo@redhat.com>

	* c-parser.c: Re-order and re-format OpenMP parsing helpers.
	(c_lex_one_token): Fix typo in comment.
	(c_parser_omp_directive): Emit GOMP_PARALLEL.
	(c_parser_pragma_omp_variable_list): Return TREE_LIST of VAR_DECLs.
	(c_parser_pragma_omp_clause_copyin): Return list of copyin variables.
	(c_parser_pragma_omp_clause_private): Likewise.
	* gimplify.c (gimplify_gomp_parallel): New.
	(gimplify_expr): Handle GOMP_PARALLEL.
	* tree-pretty-print.c (dumping_stmts): Remove.
	Update all users.
	(dump_generic_node): Handle GOMP_PARALLEL and GOMP_CLAUSE_PRIVATE.
	* tree.def (GOMP_CLAUSE_COPYIN, GOMP_CLAUSE_PRIVATE): Define.
	* tree.h (GOMP_PARALLEL_CLAUSES, GOMP_PARALLEL_BODY,
	GOMP_PRIVATE_VARS): Define.

2005-06-13  Diego Novillo  <dnovillo@redhat.com>

	* tree.def (GOMP_PARALLEL, GOMP_FOR, GOMP_SECTIONS,
	GOMP_SECTION, GOMP_SINGLE, GOMP_MASTER, GOMP_CRITICAL,
	GOMP_BARRIER, GOMP_ORDERED): Define.

2005-06-13  Dmitry Kurochkin  <dmitry.kurochkin@gmail.com>

	* c.opt (fopenmp): New flag.
	* c-parser.c (c_parse_init): Initialize OpenMP pragmas.
	(pragma_omp_kind, pragma_omp_clause): Declare.
	(c_token): Add omp_kind field.
	(c_lex_one_token): Handle CPP_PRAGMA.
	(c_token_starts_declspecs): Handle PRAGMA_OMP_THREADPRIVATE.
	(c_parser_declaration_or_fndef): Update comment, handle
	PRAGMA_OMP_THREADPRIVATE.
	(c_parser_compound_statement, c_parser_statement): Update comment.
	(c_parser_compound_statement_nostart): Handler PRAGMA_OMP_BARRIER
	and PRAGMA_OMP_FLUSH.
	(c_parser_statement_after_labels): Handle OpenMP pragmas.
	(c_parser_section_scope, c_parser_pragma,
	c_parser_pragma_omp_atomic, c_parser_pragma_omp_barrier,
	c_parser_pragma_omp_critical, c_parser_pragma_omp_flush,
	c_parser_pragma_omp_for, c_parser_pragma_omp_master,
	c_parser_pragma_omp_master, c_parser_pragma_omp_ordered,
	c_parser_pragma_omp_parallel,
	c_parser_pragma_omp_parallel_for,
	c_parser_pragma_omp_parallel_sections,
	c_parser_pragma_omp_section,
	c_parser_pragma_omp_sections, c_parser_pragma_omp_single,
	c_parser_pragma_omp_threadprivate,
	c_parser_pragma_omp_clause,
	c_parser_pragma_omp_variable_list,
	c_parser_pragma_omp_clause_copyin,
	c_parser_pragma_omp_clause_copyprivate,
	c_parser_pragma_omp_clause_default,
	c_parser_pragma_omp_clause_firstprivate,
	c_parser_pragma_omp_clause_if,
	c_parser_pragma_omp_clause_lastprivate,
	c_parser_pragma_omp_clause_nowait,
	c_parser_pragma_omp_clause_num_threads,
	c_parser_pragma_omp_clause_ordered,
	c_parser_pragma_omp_clause_private,
	c_parser_pragma_omp_clause_reduction,
	c_parser_pragma_omp_clause_schedule,
	c_parser_pragma_omp_clause_shared): New.
