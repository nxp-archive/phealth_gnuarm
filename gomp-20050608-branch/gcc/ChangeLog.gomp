2005-10-11  Richard Henderson  <rth@redhat.com>

	* c-common.c (enum c_builtin_type): Move to top-level from
	c_common_nodes_and_builtins enum builtin_type.
	(builtin_types): Move from c_common_nodes_and_builtins.
	(def_fn_type): New.
	(c_common_nodes_and_builtins): Use it.
	(def_builtin_1): Check for error_mark_node.

2005-10-10  Richard Henderson  <rth@redhat.com>

	* omp-low.c (install_var_field): Set DECL_ABSTRACT_ORIGIN.
	(delete_omp_context): Clear it again.
	(expand_send_shared_vars_1): Merge into ...
	(expand_send_shared_vars): ... here.  Iterate over the record
	fields, instead of over the splay tree.

2005-10-10  Jakub Jelinek  <jakub@redhat.com>

	* config/i386/i386.h (x86_cmpxchg8b, x86_cmpxchg16b): New decls.
	(TARGET_CMPXCHG8B, TARGET_CMPXCHG16B): Define.
	* config/i386/i386.c (x86_cmpxchg8b, x86_cmpxchg16b): New variables.
	* config/i386/sync.md (CASMODE, DCASMODE): New mode macros.
	(doublemodesuffix, DCASHMODE): New mode attrs.
	(sync_compare_and_swap<mode>): Change into expand, use CASMODE
	instead of IMODE, if mode is wider than a word, expand into
	sync_double_compare_and_swap*.
	(*sync_compare_and_swap<mode>): New insn.
	(sync_double_compare_and_swap<mode>): Likewise.
	(*sync_double_compare_and_swapdi_pic): Likewise.
	(sync_compare_and_swap_cc<mode>): Use CASMODE instead of IMODE, if
	mode is wider than a word, expand into
	sync_double_compare_and_swap_cc*.
	(sync_double_compare_and_swap_cc<mode>): New insn.
	(*sync_double_compare_and_swap_ccdi_pic): Likewise.
	* sync-builtins.def (BUILT_IN_FETCH_AND_ADD_16,
	BUILT_IN_FETCH_AND_SUB_16, BUILT_IN_FETCH_AND_OR_16,
	BUILT_IN_FETCH_AND_AND_16, BUILT_IN_FETCH_AND_XOR_16,
	BUILT_IN_FETCH_AND_NAND_16, BUILT_IN_ADD_AND_FETCH_16,
	BUILT_IN_SUB_AND_FETCH_16, BUILT_IN_OR_AND_FETCH_16,
	BUILT_IN_AND_AND_FETCH_16, BUILT_IN_XOR_AND_FETCH_16,
	BUILT_IN_NAND_AND_FETCH_16, BUILT_IN_BOOL_COMPARE_AND_SWAP_16,
	BUILT_IN_VAL_COMPARE_AND_SWAP_16, BUILT_IN_LOCK_TEST_AND_SET_16,
	BUILT_IN_LOCK_RELEASE_16): New builtins.
	* builtin-types.def (BT_I16, BT_FN_I16_VPTR_I16,
	BT_FN_BOOL_VPTR_I16_I16, BT_FN_I16_VPTR_I16_I16): Add.
	* builtins.c (get_builtin_sync_mode): Use 0 as last argument to
	mode_for_size.
	(expand_builtin): Handle sync BUILT_IN_*_16 builtins.
	* c-common.c (sync_resolve_size): Handle also 128 bit sync builtins.
	* gimplify.c (gimplify_omp_atomic): Also support 128 bit atomic.
	Only use __sync_* builtins if memory is sufficiently aligned.

2005-10-10  Richard Henderson  <rth@redhat.com>

	* Makefile.in (GTFILES): Add c-pragma.h.
	* c-lex.c (pragma_lex): Remove.
	* c-parser.c (enum pragma_omp_kind): Move to c-pragma.h.
	(c_parse_init): Move omp pragma registration to init_pragma.
	(struct c_token): Rename omp_kind to pragma_kind.
	(the_parser): Move earlier in the file.
	(c_token_starts_declspecs): False for all pragmas.
	(c_parser_declaration_or_fndef): Don't allow PRAGMA_OMP_THREADPRIVATE.
	(enum pragma_context, c_parser_pragma): New.
	(c_parser_external_declaration): Use it.
	(c_parser_compound_statement_nostart): Likewise.
	(c_parser_statement_after_labels): Likewise.
	(pragma_lex): New.
	(c_parser_omp_construct): Don't handle BARRIER or FLUSH here.
	(c_parser_new): Merge into ...
	(c_parse_file): ... here.  Use c_parser_pragma.
	* c-pragma.c (registered_pragmas, c_register_pragma_1): New.
	(c_register_pragma, c_register_pragma_with_expansion): Use it.
	(c_invoke_pragma_handler): New.
	(init_pragma): Do omp pragma registration here.
	* c-pragma.h (enum pragma_kind): Move from c-parser.c.
	(pragma_handler): New.
	(c_invoke_pragma_handler): Declare.

2005-10-10  Richard Henderson  <rth@redhat.com>

	* gimplify.c (gimplify_omp_for): Don't pass the entire OMP_FOR_INCR
	through gimplify_expr, but do normalize autoinc.

2005-10-10  Richard Henderson  <rth@redhat.com>

	* omp-low.c (scan_sharing_clauses): Scan the outer context for
	copyprivate, if, num_threads, and schedule.

2005-10-09  Richard Henderson  <rth@redhat.com>

	* c-lex.c (pragma_lex): Rename from c_lex.
	* c-pch.c, c-pragma.c, c-pragma.h, config/darwin-c.c, config/sol2-c.c,
	config/c4x/c4x-c.c, config/ia64/ia64-c.c, config/m32c/m32c-pragma.c,
	config/rs6000/rs6000-c.c, config/v850/v850-c.c: Update to match.

2005-10-09  Richard Henderson  <rth@redhat.com>

	* omp-low.c (omp_copy_decl): Use %qs instead of %qE.

2005-10-09  Richard Henderson  <rth@redhat.com>

	* c-parser.c (c_parser_omp_clause_copyin): Verify that the 
	variables are in fact threadprivate.

2005-10-09  Richard Henderson  <rth@redhat.com>

	* Makefile.in (gimplify.o): Add OPTABS_H.
	* gimplify.c: Include optabs.h.
	(gimplify_omp_atomic_fetch_op): Fail if the atomic operation
	isn't supported on the target.
	(gimplify_omp_atomic_pipeline): Likewise.
	(gimplify_omp_atomic_mutex): New.
	(gimplify_omp_atomic): Use it when all else fails.
	* omp-builtins.def (BUILT_IN_GOMP_ATOMIC_START): New.
	(BUILT_IN_GOMP_ATOMIC_END): New.

2005-10-09  Richard Henderson  <rth@redhat.com>

	* omp-low.c (scan_sharing_clauses): Force a remapping to ocurr in
	the context outer to a non-parallel firstprivate, lastprivate or
	reduction clause.
	(build_outer_var_ref): New.
	(expand_rec_input_clauses): Use it.
	(expand_lastprivate_clauses): Likewise.
	(expand_reduction_clauses): Likewise.

2005-10-08  Richard Henderson  <rth@redhat.com>

	* omp-low.c: Rewrite from scratch.
	* c-common.h (c_finish_omp_bindings): Remove.
	* c-decl.c (struct c_scope, push_scope, pop_scope,
	define_label, lookup_name): Revert all changes.
	(current_omp_parallel_scope, omp_remap_private): Remove.
	(c_omp_sharing_implicitly_determined): Remove.
	(c_omp_sharing_predetermined): Remove.
	(c_omp_remap_decl_1, c_omp_remap_decl): Remove.
	(maybe_remap_for_omp_parallel): Remove.
	(lookup_name_no_remap, c_omp_remap_private): Remove.
	(c_begin_omp_parallel, c_finish_omp_parallel): Remove.
	* c-omp.c (relookup_decls): Remove.
	(c_split_parallel_clauses): Don't call it.  Handle DEFAULT.
	(c_finish_omp_bindings): Remove.
	* c-parser.c (c_lex_one_token): Revert use of lookup_name_no_remap.
	(c_parser_declspecs): Likewise.
	(c_parser_skip_to_pragma_eol): Consume CPP_PRAGMA_EOL properly.
	(c_parser_omp_clause_default): Emit OMP_CLAUSE_DEFAULT.
	(c_parser_omp_all_clauses): Don't pass default by enum.
	(c_parser_omp_for_loop): Don't call c_omp_remap_private.
	(OMP_FOR_CLAUSE_MASK, OMP_SECTIONS_CLAUSE_MASK): New.
	(OMP_PARALLEL_CLAUSE_MASK, OMP_SINGLE_CLAUSE_MASK): New.
	(c_parser_omp_for): Don't use c_finish_omp_bindings.
	(c_parser_omp_sections): Likewise.
	(c_parser_omp_parallel): Likewise.
	* c-tree.h (lookup_name_no_remap, c_omp_remap_private): Remove
	(c_begin_omp_parallel, c_finish_omp_parallel): Update.
	* c-typeck.c (c_begin_omp_parallel, c_finish_omp_parallel): New.
	* cgraphunit.c (cgraph_finalize_pending_functions): Don't
	gimplify the function.
	* gimplify.c (struct gimplify_ctx): Add prev_context.  Remove
	omp_for_istart, omp_for_iend.
	(push_gimplify_context, pop_gimplify_context): Allow nesting.
	(gimplify_omp_reduction, gimplify_omp_for_lastprivate,
	gimplify_omp_for_generic, gimplify_omp_for_static_nochunk,
	gimplify_omp_for_static_chunk, gimplify_omp_sections,
	gimplify_omp_section, gimplify_omp_single_simple,
	gimplify_omp_single_copy, gimplify_omp_single): Remove.
	(gimplify_omp_parallel): New.
	(gimplify_omp_for): Only gimplify the body and verify the form.
	(gimplify_expr): Use gimplify_omp_parallel.  Pass the bodies of
	OMP_SECTIONS, OMP_SECTION, OMP_SINGLE, through gimplify_to_stmt_list.
	(gimplify_body): Verify gimplify_ctxp is empty after gimplification.
	* tree-gimple.c (is_gimple_stmt): Add OMP_SECTIONS, OMP_SECTION, 
	and OMP_SINGLE.
	* tree-gimple.h (use_pointer_for_field): Remove.
	(struct walk_stmt_info): Add want_bind_expr, want_locations.
	* tree-nested.c (walk_stmts): Honor them.
	* tree-inline.c (remap_decl, remap_type): Export.
	* tree-inline.h (remap_decl, remap_type): Declare.
	* tree-pretty-print.c (dump_omp_clauses): Don't dump
	OMP_CLAUSE_INNER_DECL.
	* tree.def (OMP_PARALLEL, OMP_FOR, OMP_SECTIONS): Remove INIT, LAST,
	REDUC operands.
	(OMP_CLAUSE_PRIVATE, OMP_CLAUSE_SHARED, OMP_CLAUSE_FIRSTPRIVATE,
	OMP_CLAUSE_LASTPRIVATE, OMP_CLAUSE_REDUCTION, OMP_CLAUSE_COPYIN,
	OMP_CLAUSE_COPYPRIVATE): Remove INNER operand.
	(OMP_CLAUSE_DEFAULT): New.
	 * tree.h (OMP_PARALLEL_VAR_INIT, OMP_PARALLEL_VAR_REDUC,
	OMP_FOR_VAR_INIT, OMP_FOR_VAR_LAST, OMP_FOR_VAR_REDUC,
	OMP_SECTIONS_VAR_INIT, OMP_SECTIONS_VAR_LAST,
	OMP_SECTIONS_VAR_REDUC): Remove.
	(OMP_CLAUSE_DECL): Rename from OMP_CLAUSE_OUTER_DECL. 
	(OMP_CLAUSE_INNER_DECL): Remove.
	(OMP_CLAUSE_DEFAULT_KIND): New.

2005-10-08  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20051008).

2005-10-07  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20051006).

2005-10-06  Richard Henderson  <rth@redhat.com>

	* Makefile.in (TREE_INLINE_H): New.  Use it throughout.
	* tree-inline.c (struct copy_body_data): Move to tree-inline.h.
	(insert_decl_map): Export.
	(remap_decl): Use copy_body_data.copy_decl method.  Remove if 0 code.
	Remove duplicate insert_decl_map.
	(copy_body_r): Export.
	(setup_one_parameter): Use copy_decl_to_var.
	(declare_return_variable): Likewise.
	(expand_call_inline): Fix some src/dst confusion.  Set src_node
	before initialize_inlined_parameters.  Don't bother saving and
	restoring src_node around copy_body.
	(mark_local_for_remap_r): Use copy_body_data.copy_decl method.
	(optimize_inline_calls): Set id.copy_decl.
	(clone_body, save_body, unsave_expr_now): Likewise.
	(tree_function_versioning): Likewise.
	(copy_decl_for_dup_finish): Split out of copy_decl_for_dup.
	(copy_decl_to_var, copy_decl_no_change): Likewise.
	(copy_decl_maybe_to_var): Likewise.
	* tree-inline.h: Include splay-tree.h.
	(struct copy_body_data): Move from tree-inline.c.  Add copy_decl.
	(copy_body_r, insert_decl_map): Declare.
	(copy_decl_for_dup): Remove.

2005-10-06  Richard Henderson  <rth@redhat.com>

	* c-parser.c (c_lex_one_token): Fix CPP_AT_NAME translation
	to CPP_KEYWORD.

2005-10-01  Richard Henderson  <rth@redhat.com>

	* tree-inline.c (struct copy_body_data): Rename from inline_data.
	Rename callee->src, caller->dst.  Remove ipa_info.  Replace
	cloning_p, saving_p, versioning_p with transform_parm_to_var,
	transform_call_graph_edges, transform_new_cfg,
	transform_return_to_modify, transform_lang_insert_block.  Update
	all users.
	(replace_ref_tree, inlining_p): Remove.

2005-09-29  Richard Henderson  <rth@redhat.com>

	* omp-low.c (use_pointer_for_field): True for shared variables
	with DECL_HAS_VALUE_EXPR_P set.

2005-09-29  Richard Henderson  <rth@redhat.com>

	* c-decl.c (struct c_scope): Add location.
	(define_label): Use lookup_name_no_remap.
	(c_omp_remap_decl_1): Add pscope argument.  Use it instead of
	current_omp_parallel_scope.
	(c_omp_remap_decl): Pass it current_omp_parallel_scope.
	(maybe_remap_for_omp_parallel): New.
	(lookup_name): Use it.
	(c_begin_omp_parallel): Initialize location field.

2005-09-29  Dmitry Kurochkin <dmitry.kurochkin@gmail.com>
	    Richard Henderson  <rth@redhat.com>

	* c-common.c (c_parse_error): Handle CPP_PRAGMA and CPP_PRAGMA_EOL.
	* c-common.h (c_begin_omp_parallel, c_finish_omp_parallel): Move ...
	* c-tree.h: ... here.
	* c-decl.c (c_finish_omp_parallel): Return the statement created.
	* c-lex.c (c_lex_with_flags): Smuggle pragma identifier in a tree.
	* c-parser.c (c_parse_init): Use cpp_register_deferred_pragma.
	(struct c_token): Remove one bit from omp_kind.
	(struct c_parser): Add in_pragma.
	(c_handle_deferred_pragma): Remove.
	(c_lex_omp_pragma): Remove.
	(c_lex_one_token): Remove pragma restart hack.  Tidy initialization.
	Undo pragma identifier smuggling.
	(c_parser_peek_2nd_token): Don't look past CPP_PRAGMA_EOL.
	(c_parser_consume_token): Don't allow CPP_PRAGMA unless in error
	recovery; don't allow CPP_PRAGMA_EOL unless we've escaped in_pragma.
	(c_parser_consume_pragma): New.
	(c_parser_skip_until_found): Don't skip CPP_PRAGMA_EOL when in_pragma.
	(c_parser_skip_to_end_of_parameter): Likewise.
	(c_parser_skip_to_end_of_block_or_statement): Likewise.
	(c_parser_skip_to_pragma_eol): New.
	(curr_clause_set, curr_clause_default): Remove.
	(c_parser_pragma): Remove.
	(c_parser_declaration_or_fndef): Update threadprivate test.
	(c_parser_compound_statement_nostart): Test for EOF last.
	Update omp parsing calls.
	(c_parser_omp_clause_name): Rename from c_parser_pragma_omp_clause.
	(add_new_clause): Remove.
	(check_no_duplicate_clause): Pass in clause list.
	(c_parser_omp_variable_list): Rename from
	c_parser_pragma_omp_variable_list.  Pass in list tail, always
	return the list head.
	(c_parser_omp_var_list_parens, c_parser_omp_clause_copyin,
	c_parser_omp_clause_copyprivate, c_parser_omp_clause_default,
	c_parser_omp_clause_firstprivate, c_parser_omp_clause_if,
	c_parser_omp_clause_lastprivate, c_parser_omp_clause_nowait,
	c_parser_omp_clause_num_threads, c_parser_omp_clause_ordered,
	c_parser_omp_clause_private, c_parser_omp_clause_reduction,
	c_parser_omp_clause_schedule, c_parser_omp_clause_shared): Similarly.
	(c_parser_pragma_omp_no_args): Remove.
	(c_parser_omp_all_clauses): New.
	(c_parser_omp_structured_block): New.
	(c_parser_omp_atomic): Rename from c_parser_omp_atomic_expression;
	use c_parser_skip_to_pragma_eol.
	(c_parser_omp_barrier): New.
	(c_parser_omp_critical): New.
	(c_parser_omp_flush): Rename from c_parser_pragma_omp_flush;
	call c_finish_omp_flush here.
	(c_parser_omp_for_loop): Rename from c_parser_omp_for_statement.
	(c_parser_omp_for): New.
	(c_parser_omp_master): New.
	(c_parser_omp_ordered): New.
	(c_parser_omp_sections_scope): Rename from c_parser_omp_sections_body.
	(c_parser_omp_sections): New.
	(c_parser_omp_parallel): New.
	(c_parser_omp_single): New.
	(c_parser_omp_construct): Rename from c_parser_omp_directive; split
	out all the code into new functions; don't use c_parser_pragma.
	(c_parser_omp_threadprivate): Rename from
	c_parser_pragma_omp_threadprivate; update for pragma parsing changes.
	* c-pragma.c (handle_pragma_weak): Add quotes to warning message.
	(handle_pragma_redefine_extname): Likewise.
	(handle_pragma_extern_prefix): Likewise.

2005-09-28  Jakub Jelinek  <jakub@redhat.com>

	* tree.def (OMP_SINGLE): Fix a comment typo.
	* gimplify.c (gimplify_omp_atomic_pipeline): Fix type of
	pointer argument to BUILT_IN_VAL_COMPARE_AND_SWAP_x.
	* omp-low.c (setup_data_fields): Remove unused variable.

2005-09-28  Richard Henderson  <rth@redhat.com>

	* c-decl.c (c_omp_remap_decl_1): Create OMP_CLAUSE_SHARED node here.
	(c_finish_omp_parallel): And not here.  Chain them in.
	* c-omp.c (c_split_parallel_clauses): Rewrite to chain directly
	through the clause nodes.
	(c_finish_omp_bindings): Similarly.
	* c-common.h (c_finish_omp_bindings): Update.
	* c-parser.c (add_new_clause): Chain directly through the clauses.
	(check_no_duplicate_clause): New.
	(c_parser_pragma_omp_variable_list): Take a tree_code and create
	clause nodes directly.
	(c_parser_pragma_omp_variable_list_parens): New.
	(c_parser_pragma_omp_clause_copyin): Use it.
	(c_parser_pragma_omp_clause_copyprivate): Likewise.
	(c_parser_pragma_omp_clause_firstprivate): Likewise.
	(c_parser_pragma_omp_clause_lastprivate): Likewise.
	(c_parser_pragma_omp_clause_private): Likewise.
	(c_parser_pragma_omp_clause_shared): Likewise.
	(c_parser_pragma_omp_clause_if): Use check_no_duplicate_clause.
	(c_parser_pragma_omp_clause_nowait): Likewise.
	(c_parser_pragma_omp_clause_num_threads): Likewise.
	(c_parser_pragma_omp_clause_ordered): Likewise.
	(c_parser_pragma_omp_clause_schedule): Likewise.
	(c_parser_pragma_omp_clause_reduction): Update for chaining directly
	through clauses; tidy error message.
	* gimplify.c (gimplify_omp_for): Update for chaining directly
	through clauses.  Use find_omp_clause.
	(gimplify_omp_single_simple): Split out of gimplify_omp_single.
	(gimplify_omp_single_copy): Likewise.  Update for chaining
	directly through clauses.  Create BLOCK for stack variable.
	* omp-low.c (find_omp_clause): New.
	(compute_num_threads): Use it.
	(setup_data_fields): Update for chaining directly through clauses.
	(setup_decl_value_expr_child): Likewise.
	* tree-gimple.h (find_omp_clause): Declare.
	* tree-pretty-print.c (op_symbol_1): Split out of op_symbol.
	(dump_omp_clauses): New.
	(dump_generic_node): Don't handle clause nodes here.  Update
	omp statements to use dump_omp_clauses.
	* tree.def (OMP_CLAUSE_PRIVATE): Use 2 operands.
	(OMP_CLAUSE_SHARED, OMP_CLAUSE_FIRSTPRIVATE): Likewise.
	(OMP_CLAUSE_LASTPRIVATE, OMP_CLAUSE_REDUCTION): Likewise.
	(OMP_CLAUSE_COPYIN, OMP_CLAUSE_COPYPRIVATE): Likewise.
	* tree.h (OMP_PRIVATE_VARS, OMP_SHARED_VARS, OMP_FIRSTPRIVATE_VARS,
	OMP_LASTPRIVATE_VARS, OMP_COPYIN_VARS, OMP_COPYPRIVATE_VARS): Remove.
	(OMP_CLAUSE_CHAIN, OMP_CLAUSE_OUTER_DECL, OMP_CLAUSE_INNER_DECL): New.
	(OMP_CLAUSE_NUM_THREADS_EXPR): Rename from OMP_NUM_THREADS_EXPR.
	(OMP_CLAUSE_IF_EXPR): Rename from OMP_IF_EXPR.
	(OMP_CLAUSE_SCHEDULE_CHUNK_EXPR): Rename from
	OMP_CLAUSE_SCHEDULE_CHUNK_SIZE.

2005-09-28  Diego Novillo  <dnovillo@redhat.com>

	* gimplify.c (gimplify_omp_single): Handle by emitting calls
	to GOMP_single_* and GOMP_barrier.
	* omp-low.c (use_pointer_for_field): Make extern.
	* tree-gimple.h (use_pointer_for_field): Declare.

2005-09-27  Richard Henderson  <rth@redhat.com>

	* c-parser.c: Include rtl.h.
	(c_parser_pragma_omp_threadprivate): Update for TREE_PURPOSE change.
	Diagnose threadprivate after first use.
	* Makefile.in (c-parser.o): Add RTL_H.

2005-09-27  Richard Henderson  <rth@redhat.com>

	* c-decl.c (lookup_name): Honor omp_remap_private.

2005-09-27  Richard Henderson  <rth@redhat.com>

	* c-omp.c (c_split_parallel_clauses): Add lastprivate to parallel.
	(c_finish_omp_bindings): Check for firstprivate+lastprivate and
	do not create two decls.
	* gimplify.c (gimplify_omp_reduction): New.
	(gimplify_omp_for_lastprivate): New.
	(gimplify_omp_for_generic): Use it.
	(gimplify_omp_for_static_nochunk): Likewise.
	(gimplify_omp_for_static_chunk): Likewise.
	(gimplify_omp_for): Emit VAR_INIT and VAR_REDUC.
	(gimplify_omp_sections): Likewise.
	* omp-low.c (add_omp_data_field): Don't create duplicate fields.
	(get_lastprivate_sequence): New.
	(lower_omp_parallel): Use it.

2005-09-27  Richard Henderson  <rth@redhat.com>

	* c-tree.h (check_for_loop_decls): Update decl.
	(lookup_name_no_remap, c_omp_remap_private): Declare.
	(lookup_name): Move decl ...
	* c-common.h (lookup_name): ... here.
	(c_begin_omp_parallel, c_finish_omp_parallel): Declare.
	(c_omp_sharing_predetermined, c_omp_remap_decl): Declare.
	* c-decl.c (struct c_scope): Add outer_omp_parallel, omp_shared,
	omp_parallel_body, omp_default_none.
	(current_omp_parallel_scope, omp_remap_private): New.
	(push_scope): Clear current_omp_parallel_scope on nested function.
	(pop_scope): Restore current_omp_parallel_scope.
	(c_omp_sharing_implicitly_determined): New.
	(c_omp_sharing_predetermined): New.
	(c_omp_remap_decl_1, c_omp_remap_decl): New.
	(lookup_name_no_remap): Rename from lookup_name.
	(lookup_name): New.
	(check_for_loop_decls): Return a singular decl found.
	(c_begin_omp_parallel, c_finish_omp_parallel): New.
	(c_omp_remap_private): New.
	* c-omp.c (relookup_decls): New.
	(c_split_parallel_clauses): Use it.
	(c_finish_omp_for): Take decl as argument.  Simplify the rest
	of the checks based on that.  Don't take clauses or process them.
	(c_finish_omp_bindings): New.
	* c-parser.c (c_lex_one_token): Use lookup_name_no_remap.
	(c_parser_declspecs): Likewise.
	(curr_clause_default): New.
	(c_parser_for_statement): Revert all changes since mainline.
	(c_parser_omp_for_statement): New.
	(c_parser_omp_sections_body): Return the stmt created.
	(c_parser_omp_directive): Use c_begin_omp_parallel, 
	c_finish_omp_bindings, c_finish_omp_parallel as necessary.
	(c_parser_pragma_omp_variable_list): Put parsed expression in
	the TREE_PURPOSE of the list.
	(c_parser_pragma_omp_clause_default): Implement.
	(c_parser_pragma_omp_clause_if): Standardize error text.
	(c_parser_pragma_omp_clause_nowait): Likewise.
	(c_parser_pragma_omp_clause_num_threads): Likewise.
	(c_parser_pragma_omp_clause_ordered): Likewise.
	(c_parser_pragma_omp_clause_shared): Likewise.  Don't mark
	variables addressable here.
	(c_parser_pragma_omp_clause_reduction): Implement.
	* cgraphunit.c (cgraph_finalize_pending_functions): Gimplify here.
	* gimple-low.c (lower_stmt_again): New.
	(lower_stmt): Allow OMP_PARALLEL.
	* omp-low.c (struct remap_info_d): Remove local_map, omp_fn_list,
	omp_data_map, ptr_to_omp_data; add copyin, copyout, omp_data_receive;
	rename omp_data to omp_data_send, remove indirection on tsi.
	(new_remap_info, delete_remap_info): Update to match.
	(create_tmp_var_in): Remove.
	(get_omp_data_field_for, get_omp_private_repl,
	get_omp_shared_repl, emit_firstprivate_sending_code
	emit_firstprivate_receiving_code, get_omp_firstprivate_repl,
	emit_lastprivate_receiving_code, emit_lastprivate_sending_code,
	get_omp_lastprivate_repl, get_omp_copyin_repl,
	get_omp_sharing_replacements, remap_locals_in_child_r,
	create_gomp_parallel_start, create_gomp_parallel_end,
	convert_to_gimple_val, remap_locals_in_parent_r,
	lower_omp_parallel_r): Remove.
	(use_pointer_for_field, create_data_decl, recontext_vars_in_block,
	split_out_parallel_function, emit_sender_copyin_1, emit_sender_copyin,
	emit_sender_copyout_1, emit_sender_copyout, emit_parallel_start_end,
	emit_omp_parallel_parent, setup_decl_value_expr_child,
	remap_variables_receiver, remap_labels_child_1,
	remap_labels_child): New.
	(setup_data_fields): Rename from process_omp_clauses.
	(create_child_function): Rename from create_omp_fn.
	(compute_num_threads): Rename from emit_num_threads_setup_code.
	Don't gimplify here.
	(lower_omp_parallel): Rewrite.
	(lower_omp_1): New.
	(lower_omp): Use it.
	* tree.def (OMP_PARALLEL): Add var_init and var_reduc operands.
	(OMP_FOR): Add var_init, var_last, var_reduc operands.
	(OMP_SECTIONS): Likewise.
	(OMP_CLAUSE_REDUCTION): Remove second operand.
	* tree.h (OMP_PARALLEL_VAR_INIT, OMP_PARALLEL_VAR_REDUC,
	OMP_FOR_VAR_INIT, OMP_FOR_VAR_LAST, OMP_FOR_VAR_REDUC,
	OMP_SECTIONS_VAR_INIT, OMP_SECTIONS_VAR_LAST, OMP_SECTIONS_VAR_REDUC,
	OMP_CLAUSE_REDUCTION_CODE): New.
	(enum omp_clause_default_kind): New.

2005-09-27  Diego Novillo  <dnovillo@redhat.com>

	* omp-low.c (lower_omp_parallel): Initialize wi.tsi.

2005-09-27  Diego Novillo  <dnovillo@redhat.com>

	* omp-low.c (emit_firstprivate_receiving_code): Handle cases
	where RI_P->OMP_FN consists of a single statement.

2005-09-27  Diego Novillo  <dnovillo@redhat.com>

	* c-parser.c (c_parser_omp_directive): Handle OMP_SINGLE
	* gcc/gimplify.c (gimplify_omp_single): New.
	(gimplify_expr): Call it.
	* tree-pretty-print.c (dump_generic_node): Handle OMP_SINGLE.
	* tree.def (OMP_SINGLE): Add second operand.
	* tree.h (OMP_SINGLE_CLAUSES): Define.
	(OMP_SINGLE_BODY): Define.

2005-09-27  Diego Novillo  <dnovillo@redhat.com>

	* omp-low.c (struct remap_info_d): Rename field 'map' to
	'local_map'.  Update all users.
	Remove field 'clauses'.
	Add fields 'omp_data_map' and 'omp_fn_list'.
	Update all users.
	(add_omp_data_field): If VAR was already associated with a
	field, do nothing.
	(get_omp_private_repl): Do not set DECL_VALUE_EXPR.  Add a
	mapping between VAR and its replacement in RI_P->LOCAL_MAP.
	(get_omp_shared_repl): Likewise.
	(build_remap_info): Remove all arguments.  Update users.
	Initialize RI_P->OMP_DATA_MAP and RI_P->LOCAL_MAP.
	(remap_locals_in_child_r): Do private and shared replacements.
	(remap_locals_in_child): Remove.  Update all users.
	(emit_num_threads_setup_code): Remove argument 'clauses'.
	Update all users.
	(lower_omp_parallel): Add argument RI_P.
	Call process_omp_clauses.
	Do not call gimplify_function_tree.  Add the function to
	RI_P->OMP_FN_LIST.
	Delete RI_P->LOCAL_MAP after the remapping all the locals in
	RI_P->OMP_FN.
	Do not call delete_remap_info.
	(lower_omp_in_body): Remove.
	(lower_omp_parallel_r): New.
	(lower_omp_parallel): Re-organize to support multiple omp
	parallel directives.  First lower all directives separately,
	then remap shared locals in the parent, then layout the
	structure used for shared data and then gimplify all the
	functions created by the lowering.

2005-09-26  Diego Novillo  <dnovillo@redhat.com>

	* omp-low.c (pass_lower_omp): Don't claim to destroy
	PROP_gimple_any.

2005-09-26  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (omp-low.o): New.
	(OBJS-common): Add it.
	* omp-low.c: New file.
	Move all the OpenMP lowering code from gimple-low.c.
	(lower_omp): New.
	(gate_lower_omp): New.
	(pass_lower_omp): New.
	* passes.c (init_optimization_passes): Schedule
	pass_lower_omp.
	* tree-pass.h (PROP_gimple_lomp): Define.
	(pass_lower_omp): Declare.

2005-09-26  Jakub Jelinek  <jakub@redhat.com>

	* varasm.c (assemble_variable): Handle thread-local COMMON data.
	* defaults.h (ASM_OUTPUT_TLS_COMMON): Define.

2005-09-26  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (gimple-low.o): Depend on vec.h
	* builtins.c (build_string_literal): Make extern.
	(expand_builtin_copysign):
	* c-parser.c (c_parser_pragma_omp_threadprivate): Mark
	threadprivate variables with decl_default_tls_model.
	* gimple-low.c: Include vec.h.
	(struct remap_info_d): Remove fields data_arg_dest, private,
	firstprivate, lastprivate, copyin and copyprivate.
	Rename field data_arg_orig to omp_data.
	Add fields tsi, ptr_to_omp_data and syms_with_value_expr.
	Update all users.
	(add_decls_to_set): Remove.
	(get_omp_private_ref): Remove.
	(get_omp_shared_ref): Remove.
	(create_tmp_var_in): New.
	(add_omp_data_field): New.
	(get_omp_data_field_for): New.
	(emit_firstprivate_sending_code): New.
	(emit_firstprivate_receiving_code): New.
	(get_omp_private_repl): New.
	(get_omp_firstprivate_repl): New.
	(get_omp_shared_repl): New.
	(emit_lastprivate_receiving_code): New.
	(emit_lastprivate_sending_code): New.
	(get_omp_lastprivate_repl): New.
	(get_omp_copyin_repl): New.
	(get_omp_sharing_replacements): New.
	(process_omp_clauses): Call it.
	(remap_locals_in_child_r): Only replace private locals and call
	process_omp_clauses for every worksharing construct found.
	(remap_locals_in_child): Use walk_stmts to call
	remap_locals_in_child_r.
	(convert_to_gimple_val): New.
	(remap_locals_in_parent_r): New.
	(emit_num_threads_setup_code): Remove argument TSI.
	(lower_omp_parallel): After remapping locals in child
	function, clear out DECL_VALUE_EXPR from every processed
	symbol.
	Call walk_stmts with remap_locals_in_parent_r.
	* tree-gimple.h (insert_field_into_struct): Declare.
	(struct walk_stmt_info): Move from tree-nested.c
	(walk_stmts): Declare.
	* tree-nested.c (insert_field_into_struct): Make extern.
	(struct walk_stmt_info): Move to tree-gimple.h.
	(walk_stmts): Make extern.
	* tree.h (build_string_literal): Declare.

2005-09-25  Richard Henderson  <rth@redhat.com>

	* gimplify.c (gimplify_omp_for_generic): Tidy commentary.
	(gimplify_omp_for_static_nochunk, gimplify_omp_for_static_chunk): New.
	(gimplify_omp_for): Use them.

2005-09-25  Richard Henderson  <rth@redhat.com>

	* c-common.h (c_split_parallel_clauses): Declare.
	* c-omp.c (c_split_parallel_clauses): New.
	* c-parser.c (c_parser_omp_directive): Split PRAGMA_OMP_PARALLEL_FOR
	and PRAGMA_OMP_PARALLEL_SECTIONS into separate OMP_PARALLEL and
	work-sharing constructs.

	* tree.h (OMP_SECTION_BODY): New.
	* gimplify.c (gimplify_omp_section): Use it.
	* tree-pretty-print.c (dump_generic_node): Handle OMP_SECTIONS
	and OMP_SECTION.

2005-09-25  Richard Henderson  <rth@redhat.com>

	* builtin-types.def (BT_FN_UINT_UINT): New.
	(BT_FN_VOID_UINT_UINT): Remove.
	* omp-builtins.def (BUILT_IN_GOMP_SECTIONS_START): Use BT_FN_UINT_UINT.

	* c-parser.c (c_parser_pragma_omp_section): Remove.
	(c_parse_init): Use c_parser_pragma_omp_no_args instead.
	(c_parser_section_scope): Remove.
	(c_parser_omp_sections_body): New.
	(c_parser_omp_directive): Use it.
	(c_parser_pragma_omp_parallel_for): Remove inline marker.
	(c_parser_pragma_omp_parallel_sections): Likewise.
	* gimplify.c (gimplify_omp_sections, gimplify_omp_section): New.
	(gimplify_expr): Use them.

2005-09-25  Richard Henderson  <rth@redhat.com>

	* c-parser.c (c_parser_pragma_omp_clause_nowait): Check for
	duplicates.
	(c_parser_pragma_omp_clause_ordered): Implement.
	(c_parser_pragma_omp_clause_schedule): Implement.
	* tree.def (OMP_CLAUSE_ORDERED, OMP_CLAUSE_SCHEDULE): New.
	* gimplify.c (gimplify_omp_for): Handle them.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	* tree.h (OMP_CLAUSE_SCHEDULE_CHUNK_SIZE): New.
	(enum omp_clause_schedule_kind, OMP_CLAUSE_SCHEDULE_KIND): New.

2005-09-24  Richard Henderson  <rth@redhat.com>

	* c-parser.c (c_parser_for_statement): Don't emit the init expr
	when is_omp_for.
	* gimple-low.c (lower_function_body): Clear data.
	(emit_num_threads_setup_code): Fix num_threads logic when 
	if clause present and num_threads clause absent.
	(emit_omp_for_static, lower_omp_for): Remove.
	(lower_stmt): Don't call it.
	* gimplify.c (struct gimplify_ctx): Add omp_for_istart, omp_for_iend.
	(gimplify_omp_for_generic): New.
	(gimplify_omp_for): Extract all parameters, and expand the loop.
	* omp-builtins.def (BUILT_IN_OMP_GET_NUM_THREADS): New.

2005-09-24  Richard Henderson  <rth@redhat.com>

	* Makefile.in (c-omp.o): Remove C_TREE_H.
	* c-tree.h (build_indirect_ref, build_modify_expr): Move ...
	* c-common.h: ... here.
	* c-omp.c: Don't include c-tree.h.
	(c_finish_omp_atomic): Create an OMP_ATOMIC node.
	* gimplify.c (goa_lhs_expr_p, gimplify_omp_atomic_fetch_op,
	goa_stabilize_expr, gimplify_omp_atomic_pipeline): New.
	(gimplify_omp_atomic): New.
	(gimplify_expr): Call it.
	* tree-pretty-print.c (dump_generic_node): Handle OMP_ATOMIC.
	* tree.def (OMP_ATOMIC): New.

2005-09-24  Richard Henderson  <rth@redhat.com>

	* c-parser.c (c_parser_pragma_omp_clause): Tidy.
	(c_parser_pragma_omp_clause_num_threads): Warn for not positive.
	* gimple-low.c (emit_num_threads_setup_code): Fix type problems
	with num_threads computation.

2005-09-24  Jakub Jelinek  <jakub@redhat.com>

	* builtins.def: Update DEF_BUILTIN comment to include COND argument.
	Move all DEF_SYNC_BUILTIN () and DEF_GOMP_BUILTIN () builtins
	into separate files.
	* sync-builtins.def: New file, moved from builtins.def.
	* omp-builtins.def: New file, moved from builtins.def.
	* builtin-types.def (DEF_FUNCTION_TYPE_6, DEF_FUNCTION_TYPE_7,
	DEF_FUNCTION_TYPE_VAR_4): Document.
	* Makefile.in (BUILTINS_DEF): New variable.
	(TREE_H, c-common.o, builtins.o): Use it instead of builtins.def.

2005-09-23  Richard Henderson  <rth@redhat.com>

	* c-omp.c (c_finish_omp_critical): Move implementation ...
	* gimplify.c (gimplify_omp_critical): ... here.
	(gimplify_expr): Call it.
	(critical_name_mutexes): New.
	* tree-pretty-print.c (dump_generic_node): Handle OMP_CRITICAL.
	* tree.def (OMP_MASTER, OMP_BARRIER, OMP_ORDERED): Remove.
	(OMP_PARALLEL, OMP_FOR, OMP_SECTIONS, OMP_SECTION,
	OMP_SINGLE, OMP_CRITICAL): Change to tcc_statement; update operand
	number comments.
	* tree.h (OMP_CRITICAL_NAME, OMP_CRITICAL_BODY): New.

2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	* tree.def (OMP_CLAUSE_NOWAIT): Define.
	* tree-pretty-print.c (dump_generic_node): Handle.
	* c-parser.c (c_parser_pragma_omp_clause_nowait): Generate.
	* gimple-low.c (lower_omp_for): If nowait has not been
	specified, emit a barrier at the end of the parallel loop.

2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	* c-common.h (c_finish_omp_for): Declare
	* c-omp.c (c_finish_omp_for): Rename from c_finish_gomp_for
	and move from ...
	* c-typeck.c (c_finish_gomp_for): ... here.
	* c-tree.h (c_finish_gomp_for): Remove.
	* gimple-low.c: Rename gomp_* symbols into omp_*.
	Update all users.
	* gimplify.c: Likewise.
	* tree.def: Rename GOMP_* tree codes to OMP_*.
	Update all users.
	* tree.h: Likewise.

2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20050923)

2005-09-23  Diego Novillo  <dnovillo@redhat.com>

	* c-parser.c (c_parser_pragma_omp_clause): Fix dangling if().
	(c_parser_pragma_omp_clause_if): Remove printf.
	Check that only one clause 'if' is specified.
	Call add_new_clause.
	(c_parser_pragma_omp_clause_num_threads): Remove printf.
	Check that only one clause 'num_threads' is specified.
	Call add_new_clause.
	* gimple-low.c (emit_num_threads_setup_code): New.
	(lower_gomp_parallel): Call it.
	Add new argument DATA.  Modify all callers.
	* tree-pretty-print.c (dump_generic_node): Handle
	GOMP_CLAUSE_IF and GOMP_CLAUSE_NUM_THREADS.
	* tree.def (GOMP_CLAUSE_IF, GOMP_CLAUSE_NUM_THREADS): Define.
	* tree.h (GOMP_IF_EXPR, GOMP_NUM_THREADS_EXPR): Define.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* c-parser.c (c_parse_init): Tableize the omp pragmas; register
	them with expansion.
	(c_handle_deferred_pragma): Split out of ...
	(c_parser_pragma): ... here.
	(c_lex_omp_pragma): Split out of ...
	(c_lex_one_token): ... here.  Consume non-omp pragmas immediately.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* Makefile.in (c-omp.o): Depend on C_TREE_H.
	* c-parser.c (c_parser_omp_atomic_expression): Handle error_mark
	from initial unary expression.  Move conversion code ...
	* c-omp.c (c_finish_omp_atomic): ... here.  Handle pointers and
	floating-point.
	* c-typeck.c (build_unary_op): Return error_mark after reporting
	a readonly_error.
	(build_modify_expr): Likewise.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* c-parser.c (omp_clauses_stack): Remove.
	(push_omp_clauses, pop_omp_clauses): Remove.
	(c_parser_for_statement): New parameter omp_clauses; pass it on to
	the GOMP_FOR instead of pop_omp_clauses.
	(c_parser_omp_directive): Save curr_clause_set after parsing the
	pragma.  Pass it on as appropriate.
	(c_parser_pragma_omp_critical): Don't clear curr_clause_set.
	(c_parser_pragma_omp_for): Don't call push_omp_clauses.
	(c_parser_pragma_omp_parallel, c_parser_pragma_omp_sections,
	c_parser_pragma_omp_single): Likewise.

2005-09-22  Richard Henderson  <rth@redhat.com>

	* c-common.c (sync_resolve_return): Convert to the main variant.
	* c-tree.h (pushdecl): Move decl ...
	* c-common.h (pushdecl): ... here.
	(c_finish_omp_atomic): Update decl.
	* c-omp.c (c_finish_omp_atomic): Take code, lhs, rhs separately;
	delete code to extract them.  Use TYPE_MAIN_VARIANT.  Return early
	if lhs is not addressable.  Push new decls into current binding.
	Use build_binary_op.
	* c-parser.c (c_parser_pragma): Reset parser->error.
	(c_parser_compound_statement_nostart): Reinstate special case for
	barrier and flush.  Move parsing of these directives here.
	(c_parser_section_scope): Fix quoting in error message.
	(c_parser_omp_atomic_expression): New.
	(c_parser_omp_directive): Use it.  Error on barrier or flush.
	(c_parser_pragma_omp_critical): Tighten error corner cases.
	(c_parser_pragma_omp_flush): Likewise.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* c-typeck.c (c_finish_gomp_for): Update OpenMP spec version.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* gimple-low.c (process_gomp_clauses): Extract from ...
	(build_remap_info): ... here.
	(get_gomp_private_ref): Do not call copy_decl_for_dup.
	Set DECL_NAME of replacement to that of the original.
	(remap_locals_r): Temporarily treat local variables as private
	if they are not in any other clause.
	Prevent walking into the expression that replaces a mapped
	local.
	Call process_gomp_clauses on GOMP_PARALLEL, GOMP_FOR and
	GOMP_SECTIONS.
	(remap_locals): Remove arguments GOMP_FN and CLAUSEs.
	Add arguments BODY_P and RI_P.
	Call process_gomp_clauses.
	Call walk_tree on BODY_P.
	Do not return anything.
	Adjust callers.
	(lower_gomp_parallel): Call build_remap_info.
	(lower_gomp_for): Do not call remap_locals.
	Do not call emit_gomp_data_setup_code.
	Remove local RI_P.
	* tree.h (GOMP_SECTIONS_CLAUSES): Define.
	(GOMP_SECTIONS_BODY): Define.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* c-tree.h (c_finish_gomp_for): Declare
	* c-typeck.c (c_finish_gomp_for): New.
	* c-parser.c (c_parser_for_statement): Call it.  If the
	parallel loop was malformed, call c_finish_loop to emit a
	sequential loop.

2005-09-22  Diego Novillo  <dnovillo@redhat.com>

	* version.c: Update last merge date.

2005-09-21  Richard Henderson  <rth@redhat.com>

	* c-lex.c (c_lex_with_flags) <CPP_PRAGMA>: Set input_location.

2005-09-21  Richard Henderson  <rth@redhat.com>

	* c-omp.c: New file.
	* Makefile.in (c-omp.o): New.
	* builtin-types.def (BT_PTR_LONG, BT_PTR_PTR, BT_FN_BOOL, BT_FN_INT,
	BT_FN_VOID_PTRPTR, BT_PTR_FN_VOID_PTR, BT_FN_VOID_UINT_UINT,
	BT_FN_BOOL_LONGPTR_LONGPTR, BT_FN_VOID_OMPFN_PTR_UINT,
	BT_FN_VOID_OMPFN_PTR_UINT_UINT,
	BT_FN_BOOL_LONG_LONG_LONG_LONGPTR_LONGPTR,
	BT_FN_BOOL_LONG_LONG_LONG_LONG_LONGPTR_LONGPTR,
	BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG,
	BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG): New.
	* builtins.def (DEF_GOMP_BUILTIN): New.
	(BUILT_IN_OMP_GET_THREAD_NUM, BUILT_IN_GOMP_BARRIER,
	BUILT_IN_GOMP_CRITICAL_START, BUILT_IN_GOMP_CRITICAL_END,
	BUILT_IN_GOMP_CRITICAL_NAME_START, BUILT_IN_GOMP_CRITICAL_NAME_END,
	BUILT_IN_GOMP_LOOP_STATIC_START, BUILT_IN_GOMP_LOOP_DYNAMIC_START,
	BUILT_IN_GOMP_LOOP_GUIDED_START, BUILT_IN_GOMP_LOOP_RUNTIME_START,
	BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START,
	BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START,
	BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START,
	BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START,
	BUILT_IN_GOMP_LOOP_STATIC_NEXT, BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT,
	BUILT_IN_GOMP_LOOP_GUIDED_NEXT, BUILT_IN_GOMP_LOOP_RUNTIME_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT,
	BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT,
	BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START,
	BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START,
	BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START,
	BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START,
	BUILT_IN_GOMP_LOOP_END, BUILT_IN_GOMP_LOOP_END_NOWAIT,
	BUILT_IN_GOMP_ORDERED_START, BUILT_IN_GOMP_ORDERED_END,
	BUILT_IN_GOMP_PARALLEL_START, BUILT_IN_GOMP_PARALLEL_END,
	BUILT_IN_GOMP_SECTIONS_START, BUILT_IN_GOMP_SECTIONS_NEXT,
	BUILT_IN_GOMP_PARALLEL_SECTIONS_START, BUILT_IN_GOMP_SECTIONS_END,
	BUILT_IN_GOMP_SECTIONS_END_NOWAIT, BUILT_IN_GOMP_SINGLE_START,
	BUILT_IN_GOMP_SINGLE_COPY_START, BUILT_IN_GOMP_SINGLE_COPY_END): New.
	* c-common.c (DEF_FUNCTION_TYPE_7): New.
	* c-tree.h (pushdecl_top_level): Move declaration ...
	* c-common.h (pushdecl_top_level): ... here.
	(c_finish_omp_master, c_finish_omp_critical, c_finish_omp_ordered,
	c_finish_omp_barrier, c_finish_omp_atomic, c_finish_omp_flush): Declare.
	* c-parser.c (c_parser_compound_statement_nostart): Don't special
	case omp barrier or omp flush.
	(c_parser_omp_directive): Implement master, critical, orered,
	barrier, atomic, flush.
	(c_parser_pragma_omp_no_args): New.
	(c_parser_pragma_omp_critical): Remove printf debugging.
	(c_parser_pragma_omp_flush): Likewise.
	(c_parser_pragma_omp_atomic, c_parser_pragma_omp_barrier,
	c_parser_pragma_omp_master, c_parser_pragma_omp_ordered): Remove.

2005-09-21  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.c (c_parse_init): Don't register OpenMP pragmas
	if flag_preprocess_only.

2005-09-21  Richard Henderson  <rth@redhat.com>

	* cgraph.c (cgraph_analyze_queue): New.
	(cgraph_add_new_function): Do nothing but add the decl to this list.
	* cgraph.h (cgraph_analyze_queue): Declare.
	(cgraph_lower_function): Remove.
	* cgraphunit.c (cgraph_lower_function): Make static.
	(cgraph_finalize_pending_functions): New.
	(cgraph_finalize_function): Call it.
	(cgraph_finalize_compilation_unit): Likewise.
	* gimple-low.c (lower_gomp_parallel): Call gimplify_function_tree.

2005-09-20  Diego Novillo  <dnovillo@redhat.com>

	* gimple-low.c (lower_gomp_parallel): Use a NULL argument if
	there is no shared data to send to the child thread.

2005-09-20  Diego Novillo  <dnovillo@redhat.com>

	* Makefile.in (c-parser.o): Depend on vec.h.
	(gimple-low.o): Depend on $(SPLAY_TREE_H)
	* c-parser.c: Include vec.h.
	(curr_clause_set, omp_clauses_stack): New locals.
	(omp_clauses): Remove.  Adjust all callers.
	(push_omp_clauses, pop_omp_clauses, add_new_clause): New.
	(c_parser_for_statement): Add new argument IS_OMP_FOR.
	If true, emit a GOMP_FOR tree.
	Adjust all callers.
	(c_parser_omp_directive): Call pop_omp_clauses.
	(c_parser_pragma_omp_clause_copyin): Call add_new_clause.
	Don't return anything.  Adjust callers.
	(c_parser_pragma_omp_clause_firstprivate): Call add_new_clause.
	(c_parser_pragma_omp_clause_lastprivate): Likewise.
	(c_parser_pragma_omp_clause_private): Likewise.
	(c_parser_pragma_omp_clause_shared): Likewise.
	Mark all shared variables addressable.
	(c_parser_pragma_omp_for): Call push_omp_clauses.
	(c_parser_pragma_omp_parallel_for): Remove printf.
	(c_parser_pragma_omp_for): Call push_omp_clauses
	(c_parser_pragma_omp_parallel_sections): Remove printf.
	(c_parser_pragma_omp_parallel): Call push_omp_clauses.
	(c_parser_pragma_omp_sections): Remove printf.
	Call push_omp_clauses.
	(c_parser_pragma_omp_single): Remove printf.
	Call push_omp_clauses.
	* cgraph.c (cgraph_add_new_function): Assume that FNDECL
	already has a struct function associated.
	* gimple-low.c: Include splay-tree.h
	(struct remap_info_d, add_decls_to_set, build_remap_info,
	remap_locals_r): Move from tree-inline.c.
	(delete_remap_info, get_gomp_private_ref, get_gomp_shared_ref,
	remap_locals): New.
	(create_gomp_fn): Set DECL_ARG_TYPE and TREE_USED on
	FN_DATA_ARG.
	(emit_gomp_data_setup_code): New.
	(lower_gomp_parallel): Rename from lower_gomp_expr.
	Allocate the function structure before calling remap_locals.
	Call emit_gomp_data_setup_code.
	Call delete_remap_info.
	(emit_gomp_for_static): New.
	(lower_gomp_for): New.
	(lower_stmt): Handle GOMP_FOR.
	* gimplify.c (gimplify_gomp_for): New.
	(gimplify_expr): Handle GOMP_FOR with a call to
	gimplify_gomp_for.
	* tree-gimple.c (is_gimple_stmt): Handle GOMP_FOR.
	* tree-inline.c (remap_locals_d, add_decls_to_set,
	build_remap_info, remap_locals_r): Move to gimple-low.c.
	(remap_locals_in_gomp_body, move_decl_to): Remove.
	* tree-inline.h (remap_locals_in_gomp_body): Remove.
	* tree-pretty-print.c (dump_generic_node): Handle GOMP_FOR,
	GOMP_CLAUSE_SHARED, GOMP_CLAUSE_FIRSTPRIVATE,
	GOMP_CLAUSE_LASTPRIVATE, GOMP_CLAUSE_COPYIN,
	GOMP_CLAUSE_COPYPRIVATE.
	Adjust output for GOMP_PARALLEL.
	* tree.c (build5_stat): New.
	* tree.def (GOMP_FOR): Add operand GOMP_FOR_COND.
	* tree.h (GOMP_FOR_CLAUSES, GOMP_FOR_INIT, GOMP_FOR_CODN,
	GOMP_FOR_INCR, GOMP_FOR_BODY, GOMP_SHARED_VARS,
	GOMP_FIRSTPRIVATE_VARS, GOMP_LASTPRIVATE_VARS,
	GOMP_COPYIN_VARS, GOMP_COPYPRIVATE_VARS): Define.
	(build5_stat, build5): Declare.

2005-09-20  Jakub Jelinek  <jakub@redhat.com>

	* c-cppbuiltin.c (c_cpp_builtins): If -fopenmp, #define _OPENMP
	to 200505.

2005-09-14  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20050914)

2005-09-01  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge (gomp-merge-20050901)

2005-08-03  Diego Novillo  <dnovillo@redhat.com>

	* cgraph.c (cgraph_add_new_function): When unit at a time is
	disabled, just add the new function to the graph and mark it
	as needed.
	* gimple-low.c (struct remap_locals_d, add_decls_to_set,
	build_remap_info, remap_locals_r, remap_locals_in_gomp_body):
	Move ...
	* tree-inline.c: ... here.
	(move_decl_to): New local function.
	(remap_locals_r): Call it.
	* tree-inline.h (remap_locals_in_gomp_body): Declare.

2005-08-01  Diego Novillo  <dnovillo@redhat.com>

	* gimple-low.c (create_gomp_fn): Call create_tmp_var_name to
	create a new function name.
	(create_gomp_parallel_start): Fix contexts for block vars and
	function argument.
	(lower_gomp_expr): Fix type of first argument in call to
	GOMP_parallel_start.

2005-07-28  Diego Novillo  <dnovillo@redhat.com>

	Mainline merge.

2005-07-13  Diego Novillo  <dnovillo@redhat.com>

	* gimplify.c (gimplify_gomp_parallel): Really remove.

2005-07-13  Diego Novillo  <dnovillo@redhat.com>

	* cgraph.c (cgraph_add_new_function): New.
	* cgraph.h (cgraph_add_new_function): Declare.
	* gimple-low.c (struct remap_locals_d): Declare.
	(add_decls_to_set): New.
	(build_remap_info): New.
	(remap_locals_r): New.
	(remap_locals_in_gomp_body): New.
	(create_gomp_fn): New.
	(create_gomp_parallel_start): New.
	(create_gomp_parallel_end): New.
	(lower_gomp_expr): New.
	(lower_stmt): Call it.
	* gimplify.c (gimplify_gomp_parallel): Remove.
	(gimplify_expr): Don't gimplify GOMP_PARALLEL.
	* tree-gimple.c (is_gimple_stmt): Consider GOMP_PARALLEL
	to be GIMPLE.
	* tree.def (GOMP_CLAUSE_SHARED, GOMP_CLAUSE_FIRSTPRIVATE,
	GOMP_CLAUSE_LASTPRIVATE, GOMP_CLAUSE_REDUCTION,
	GOMP_CLAUSE_COPYPRIVATE,): Define.

2005-06-13  Diego Novillo  <dnovillo@redhat.com>

	* c-parser.c: Re-order and re-format OpenMP parsing helpers.
	(c_lex_one_token): Fix typo in comment.
	(c_parser_omp_directive): Emit GOMP_PARALLEL.
	(c_parser_pragma_omp_variable_list): Return TREE_LIST of VAR_DECLs.
	(c_parser_pragma_omp_clause_copyin): Return list of copyin variables.
	(c_parser_pragma_omp_clause_private): Likewise.
	* gimplify.c (gimplify_gomp_parallel): New.
	(gimplify_expr): Handle GOMP_PARALLEL.
	* tree-pretty-print.c (dumping_stmts): Remove.
	Update all users.
	(dump_generic_node): Handle GOMP_PARALLEL and GOMP_CLAUSE_PRIVATE.
	* tree.def (GOMP_CLAUSE_COPYIN, GOMP_CLAUSE_PRIVATE): Define.
	* tree.h (GOMP_PARALLEL_CLAUSES, GOMP_PARALLEL_BODY,
	GOMP_PRIVATE_VARS): Define.

2005-06-13  Diego Novillo  <dnovillo@redhat.com>

	* tree.def (GOMP_PARALLEL, GOMP_FOR, GOMP_SECTIONS,
	GOMP_SECTION, GOMP_SINGLE, GOMP_MASTER, GOMP_CRITICAL,
	GOMP_BARRIER, GOMP_ORDERED): Define.

2005-06-13  Dmitry Kurochkin  <dmitry.kurochkin@gmail.com>

	* c.opt (fopenmp): New flag.
	* c-parser.c (c_parse_init): Initialize OpenMP pragmas.
	(pragma_omp_kind, pragma_omp_clause): Declare.
	(c_token): Add omp_kind field.
	(c_lex_one_token): Handle CPP_PRAGMA.
	(c_token_starts_declspecs): Handle PRAGMA_OMP_THREADPRIVATE.
	(c_parser_declaration_or_fndef): Update comment, handle
	PRAGMA_OMP_THREADPRIVATE.
	(c_parser_compound_statement, c_parser_statement): Update comment.
	(c_parser_compound_statement_nostart): Handler PRAGMA_OMP_BARRIER
	and PRAGMA_OMP_FLUSH.
	(c_parser_statement_after_labels): Handle OpenMP pragmas.
	(c_parser_section_scope, c_parser_pragma,
	c_parser_pragma_omp_atomic, c_parser_pragma_omp_barrier,
	c_parser_pragma_omp_critical, c_parser_pragma_omp_flush,
	c_parser_pragma_omp_for, c_parser_pragma_omp_master,
	c_parser_pragma_omp_master, c_parser_pragma_omp_ordered,
	c_parser_pragma_omp_parallel,
	c_parser_pragma_omp_parallel_for,
	c_parser_pragma_omp_parallel_sections,
	c_parser_pragma_omp_section,
	c_parser_pragma_omp_sections, c_parser_pragma_omp_single,
	c_parser_pragma_omp_threadprivate,
	c_parser_pragma_omp_clause,
	c_parser_pragma_omp_variable_list,
	c_parser_pragma_omp_clause_copyin,
	c_parser_pragma_omp_clause_copyprivate,
	c_parser_pragma_omp_clause_default,
	c_parser_pragma_omp_clause_firstprivate,
	c_parser_pragma_omp_clause_if,
	c_parser_pragma_omp_clause_lastprivate,
	c_parser_pragma_omp_clause_nowait,
	c_parser_pragma_omp_clause_num_threads,
	c_parser_pragma_omp_clause_ordered,
	c_parser_pragma_omp_clause_private,
	c_parser_pragma_omp_clause_reduction,
	c_parser_pragma_omp_clause_schedule,
	c_parser_pragma_omp_clause_shared): New.
